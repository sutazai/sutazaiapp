version: '3.8'

# Phase 1: Core Infrastructure Services Only
# Testing approach: Start these first, verify health, then proceed

networks:
  sutazai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins:
  rabbitmq_data:
  consul_data:

services:
  # ============================================
  # CORE INFRASTRUCTURE - PHASE 1
  # ============================================
  
  postgres:
    image: postgres:16-alpine
    container_name: sutazai-postgres
    restart: unless-stopped
    ports:
      - "10000:5432"
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.10
    environment:
      POSTGRES_DB: jarvis_ai
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: sutazai_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis -d jarvis_ai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M

  redis:
    image: redis:7-alpine
    container_name: sutazai-redis
    restart: unless-stopped
    ports:
      - "10001:6379"
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.11
    command: >
      redis-server
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --appendonly yes
      --protected-mode no
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M

  # ============================================
  # GRAPH & MESSAGING - PHASE 2
  # ============================================
  
  neo4j:
    image: neo4j:5-community
    container_name: sutazai-neo4j
    restart: unless-stopped
    ports:
      - "10002:7474"  # HTTP
      - "10003:7687"  # Bolt
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.12
    environment:
      NEO4J_AUTH: neo4j/sutazai_secure_2024
      NEO4J_server_memory_heap_initial__size: 256M
      NEO4J_server_memory_heap_max__size: 256M
      NEO4J_server_memory_pagecache_size: 128M
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 384M
    depends_on:
      postgres:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: sutazai-rabbitmq
    restart: unless-stopped
    ports:
      - "10004:5672"   # AMQP
      - "10005:15672"  # Management UI
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.13
    environment:
      RABBITMQ_DEFAULT_USER: sutazai
      RABBITMQ_DEFAULT_PASS: sutazai_secure_2024
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: sutazai_cluster_cookie
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit log_levels [{connection,error},{default,error}]"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
        reservations:
          memory: 256M

  consul:
    image: hashicorp/consul:1.19
    container_name: sutazai-consul
    restart: unless-stopped
    ports:
      - "10006:8500"  # UI/API
      - "10007:8600"  # DNS
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.14
    command: >
      consul agent
      -server
      -bootstrap-expect=1
      -ui
      -client=0.0.0.0
      -bind=0.0.0.0
      -data-dir=/consul/data
      -config-dir=/consul/config
      -encrypt=XImL7pLGKruSCKO/VCZ1BwNGJl2gDwPe0fVLdGzJfBQ=
    volumes:
      - consul_data:/consul/data
    environment:
      CONSUL_LOCAL_CONFIG: |
        {
          "datacenter": "sutazai-dc1",
          "log_level": "INFO",
          "server": true,
          "ui_config": {
            "enabled": true
          },
          "connect": {
            "enabled": true
          },
          "performance": {
            "raft_multiplier": 1
          }
        }
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M

  # ============================================
  # API GATEWAY - PHASE 3
  # ============================================
  
  kong-migration:
    image: kong:3.9
    container_name: sutazai-kong-migration
    restart: on-failure
    networks:
      - sutazai-network
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: sutazai-postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: jarvis
      KONG_PG_PASSWORD: sutazai_secure_2024
    depends_on:
      postgres:
        condition: service_healthy

  kong:
    image: kong:3.9
    container_name: sutazai-kong
    restart: unless-stopped
    ports:
      - "10008:8000"  # Proxy
      - "10009:8001"  # Admin API
    networks:
      sutazai-network:
        ipv4_address: 172.20.0.35
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: sutazai-postgres
      KONG_PG_PORT: 5432
      KONG_PG_DATABASE: kong
      KONG_PG_USER: jarvis
      KONG_PG_PASSWORD: sutazai_secure_2024
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1024M
          cpus: '1.5'
        reservations:
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully