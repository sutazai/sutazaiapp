version: '3.8'

services:
  # Core Infrastructure
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-unified-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sutazai_unified
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sutazai123}
    ports:
      - "5432:5432"
    volumes:
      - unified_postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sutazai -d sutazai_unified"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-agi-network

  redis:
    image: redis:7.2-alpine
    container_name: sutazai-unified-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - unified_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 4gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - unified-agi-network

  # Vector Databases
  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-unified-chromadb
    restart: unless-stopped
    ports:
      - "8001:8000"
    volumes:
      - unified_chroma_data:/chroma/chroma
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - unified-agi-network

  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-unified-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - unified_qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - unified-agi-network

  # AI Services
  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-unified-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - unified_ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODELS: /root/.ollama/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - unified-agi-network

  # Unified AGI Brain System
  unified-agi-brain:
    build:
      context: .
      dockerfile: docker/unified-agi/Dockerfile
    container_name: sutazai-unified-agi-brain
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - chromadb
      - qdrant
      - ollama
    ports:
      - "8900:8900"  # Main API
      - "8901:8901"  # WebSocket interface
      - "8902:8902"  # Brain learning interface
      - "9200:9200"  # Health and metrics
    volumes:
      - ./backend:/app/backend:ro
      - ./brain:/app/brain
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - unified_brain_memory:/app/memory
      - unified_brain_knowledge:/app/knowledge
    environment:
      # Database connections
      - POSTGRES_URL=postgresql://sutazai:${POSTGRES_PASSWORD:-sutazai123}@postgres:5432/sutazai_unified
      - REDIS_URL=redis://redis:6379
      
      # Vector databases
      - CHROMADB_URL=http://chromadb:8000
      - QDRANT_URL=http://qdrant:6333
      
      # AI services
      - OLLAMA_URL=http://ollama:11434
      
      # Brain configuration
      - BRAIN_MODE=production
      - LEARNING_ENABLED=true
      - MEMORY_PERSISTENCE=true
      - KNOWLEDGE_ACCUMULATION=true
      
      # System configuration
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      
    command: python /app/brain/unified_agi_system.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - unified-agi-network

  # Model Manager (pulls required models)
  model-manager:
    image: ollama/ollama:latest
    container_name: sutazai-model-manager
    depends_on:
      - ollama
    volumes:
      - unified_ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
    command: >
      sh -c "
        echo 'Waiting for Ollama to be ready...' &&
        sleep 30 &&
        echo 'Pulling essential models...' &&
        ollama pull llama3.2:1b &&
        ollama pull deepseek-r1:1.5b &&
        ollama pull nomic-embed-text &&
        echo 'Models ready for unified AGI system'
      "
    networks:
      - unified-agi-network
    restart: "no"

volumes:
  unified_postgres_data:
    driver: local
  unified_redis_data:
    driver: local
  unified_chroma_data:
    driver: local
  unified_qdrant_data:
    driver: local
  unified_ollama_data:
    driver: local
  unified_brain_memory:
    driver: local
  unified_brain_knowledge:
    driver: local

networks:
  unified-agi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16