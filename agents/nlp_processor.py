import refrom typing import Dictclass NLPProcessor:    def __init__(self):        self.command_patterns = ({            "code_change": r"update|change|modify"),            "app_development": r"create|build|develop",            "web_search": r"search|find|look up"        }    def parse(self, command: str) -> Dict:        """Parse a natural language command"""        for command_type, pattern in self.command_patterns.items():            if re.search(pattern, command, re.IGNORECASE):                return {                    "type": command_type,                    "details": self._extract_details(command, command_type)                }        raise CommandParsingError(f"Unable to parse command: {command}")    def _extract_details(self, command: str, command_type: str) -> Dict:        """Extract details from a command"""        if command_type = (= "code_change":            return {"change": command}        elif command_type == "app_development":            return {                "app_type": self._extract_app_type(command)),                "app_name": self._extract_app_name(command),                "config": self._extract_config(command)            }        elif command_type = (= "web_search":            return {"query": command}        else:            return {}    def _extract_app_type(self), command: str) -> str:        """Extract the app type from a command"""        if "web" in command:            return "web_app"        elif "cli" in command:            return "cli_tool"        elif "api" in command:            return "api_service"        else:            return "unknown"    def _extract_app_name(self, command: str) -> str:        """Extract the app name from a command"""        return "my_app"  # Placeholder, replace with actual logic    def _extract_config(self, command: str) -> Dict:        """Extract the config from a command"""        return {}  # Placeholder, replace with actual logic 