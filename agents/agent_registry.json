{
  "agents": {
    "document-knowledge-manager": {
      "name": "document-knowledge-manager",
      "description": "Use this agent when you need to:\\n\\n- Create and manage comprehensive documentation systems\\n- Build knowledge bases with intelligent search\\n- Implement RAG (Retrieval Augmented Generation) systems\\n- Design document indexing and categorization\\n- Create semantic search capabilities\\n- Implement document versioning systems\\n- Build knowledge graphs from documents\\n- Design FAQ generation systems\\n- Create documentation automation workflows\\n- Implement context-aware retrieval\\n- Build multi-language documentation\\n- Design documentation quality metrics\\n- Create interactive documentation portals\\n- Implement document summarization\\n- Build knowledge extraction pipelines\\n- Design documentation templates\\n- Create API documentation generators\\n- Implement code documentation tools\\n- Build user guide generation systems\\n- Design knowledge sharing platforms\\n- Create documentation search optimization\\n- Implement document analytics\\n- Build documentation feedback systems\\n- Design knowledge retention strategies\\n- Create documentation migration tools\\n- Implement compliance documentation\\n- Build technical writing guidelines\\n- Design documentation review processes\\n- Create knowledge base maintenance\\n- Implement documentation accessibility\\n\\nDo NOT use this agent for:\\n- Code implementation (use code generation agents)\\n- System deployment (use deployment-automation-master)\\n- Infrastructure management (use infrastructure-devops-manager)\\n- Testing (use testing-qa-validator)\\n\\nThis agent specializes in creating intelligent documentation and knowledge management systems.",
      "capabilities": [
        "code_generation",
        "testing",
        "deployment",
        "automation",
        "documentation"
      ],
      "config_path": "configs/document-knowledge-manager_universal.json"
    },
    "ollama-integration-specialist": {
      "name": "ollama-integration-specialist",
      "description": "Use this agent when you need to:\\n\\n- Configure and optimize Ollama for local LLM inference\\n- Manage and deploy local language models\\n- Optimize model performance and memory usage\\n- Implement model quantization strategies\\n- Configure Ollama API endpoints and compatibility\\n- Set up model caching and preloading\\n- Implement model switching and routing\\n- Create custom model configurations\\n- Design multi-model inference pipelines\\n- Optimize GPU/CPU utilization for inference\\n- Implement model versioning strategies\\n- Build model performance benchmarks\\n- Create model selection algorithms\\n- Design fallback mechanisms for model failures\\n- Implement model warm-up procedures\\n- Build model monitoring and metrics\\n- Create model deployment automation\\n- Design model scaling strategies\\n- Implement context window optimization\\n- Build prompt caching systems\\n- Create model fine-tuning workflows\\n- Design model security measures\\n- Implement model access control\\n- Build model testing frameworks\\n- Create model documentation\\n- Design model cost optimization\\n- Implement streaming inference\\n- Build batch inference systems\\n- Create model API compatibility layers\\n- Design model integration patterns\\n\\nDo NOT use this agent for:\\n- General AI development (use senior-ai-engineer)\\n- Infrastructure setup (use infrastructure-devops-manager)\\n- Agent orchestration (use ai-agent-orchestrator)\\n- Frontend development (use senior-frontend-developer)\\n\\nThis agent specializes in making Ollama work efficiently for local LLM inference at scale.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization",
        "automation",
        "documentation"
      ],
      "config_path": "configs/ollama-integration-specialist_universal.json"
    },
    "code-generation-improver": {
      "name": "code-generation-improver",
      "description": "Use this agent when you need to:\\n\\n- Analyze and improve existing code quality\\n- Refactor code for better maintainability\\n- Optimize code performance and efficiency\\n- Implement design patterns and best practices\\n- Remove code duplication and redundancy\\n- Improve code readability and documentation\\n- Enhance error handling and resilience\\n- Optimize algorithm complexity\\n- Implement code style consistency\\n- Create reusable components and libraries\\n- Improve code testability\\n- Enhance security practices in code\\n- Optimize memory usage patterns\\n- Implement lazy loading strategies\\n- Create efficient data structures\\n- Improve async/await patterns\\n- Optimize database queries\\n- Enhance API design and structure\\n- Implement caching strategies\\n- Create code review guidelines\\n- Build code quality metrics\\n- Design code migration strategies\\n- Implement code modernization\\n- Create technical debt reduction plans\\n- Build code complexity analysis\\n- Design code documentation standards\\n- Implement code versioning strategies\\n- Create code performance profiling\\n- Build automated code improvement tools\\n- Design code review automation\\n\\nDo NOT use this agent for:\\n- Creating new features from scratch (use code generation agents)\\n- Infrastructure tasks (use infrastructure-devops-manager)\\n- Testing implementation (use testing-qa-validator)\\n- Deployment tasks (use deployment-automation-master)\\n\\nThis agent specializes in taking existing code and making it better, cleaner, and more efficient.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "optimization",
        "automation",
        "analysis",
        "documentation"
      ],
      "config_path": "configs/code-generation-improver_universal.json"
    },
    "semgrep-security-analyzer": {
      "name": "semgrep-security-analyzer",
      "description": "Use this agent when you need to:\\n\\n- Scan code for security vulnerabilities before deployment\\n- Create custom security rules for your specific codebase\\n- Detect hardcoded secrets, API keys, or credentials in code\\n- Identify OWASP Top 10 vulnerabilities automatically\\n- Find SQL injection, XSS, or other injection vulnerabilities\\n- Analyze code for authentication and authorization flaws\\n- Detect insecure cryptographic implementations\\n- Enforce secure coding standards across the team\\n- Integrate security scanning into CI/CD pipelines\\n- Set up pre-commit hooks for security checks\\n- Generate security compliance reports\\n- Track and remediate security technical debt\\n- Validate code against regulatory requirements (PCI-DSS, HIPAA)\\n- Create custom rules for company-specific security policies\\n- Scan pull requests automatically for security issues\\n- Identify vulnerable dependencies in code\\n- Detect insecure configurations or hardcoded settings\\n- Analyze code for path traversal vulnerabilities\\n- Find race conditions and timing attacks\\n- Identify insecure random number generation\\n- Detect unsafe deserialization patterns\\n- Scan for XXE (XML External Entity) vulnerabilities\\n- Find command injection vulnerabilities\\n- Analyze JavaScript for DOM-based XSS\\n- Detect insecure file operations\\n- Identify missing security headers\\n- Find JWT implementation flaws\\n- Scan infrastructure-as-code for misconfigurations\\n- Create security gates in deployment pipelines\\n- Generate actionable fix recommendations\\n- Educate developers on secure coding practices\\n- Perform differential security scans between commits\\n- Analyze code changes for security impact\\n- Create security scorecards for projects\\n- Detect security anti-patterns in frameworks\\n- Validate secure API implementations\\n- Find business logic vulnerabilities through pattern matching\\n- Implement shift-left security practices\\n\\nDo NOT use this agent for:\\n- Runtime security testing (use Security Pentesting Specialist)\\n- Dynamic application testing\\n- Network vulnerability scanning\\n- Manual code review tasks\\n- Performance analysis\\n\\nThis agent specializes in finding security vulnerabilities through static code analysis using Semgrep's powerful pattern-matching engine, helping you catch security issues early in the development lifecycle.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "integration",
        "analysis"
      ],
      "config_path": "configs/semgrep-security-analyzer_universal.json"
    },
    "senior-ai-engineer": {
      "name": "senior-ai-engineer",
      "description": "Use this agent when you need to:\\n\\n- Design and implement AI/ML architectures\\n- Build RAG (Retrieval Augmented Generation) systems\\n- Integrate various LLMs and AI models\\n- Create processing network architectures\\n- Implement machine learning pipelines\\n- Build model training and evaluation systems\\n- Design automation system components\\n- Create embeddings and vector databases\\n- Implement semantic search systems\\n- Build multi-modal AI systems\\n- Design reinforcement learning environments\\n- Create AI model serving infrastructure\\n- Implement transfer learning strategies\\n- Build AI explainability systems\\n- Design federated learning architectures\\n- Create AI model versioning systems\\n- Implement online learning capabilities\\n- Build AI performance benchmarks\\n- Design AI safety mechanisms\\n- Create custom AI training loops\\n- Implement AI model compression\\n- Build AI debugging and visualization\\n- Design AI data preprocessing pipelines\\n- Create AI model deployment strategies\\n- Implement AI monitoring systems\\n- Build AI cost optimization solutions\\n- Design AI experimentation platforms\\n- Create AI model registries\\n- Implement AI governance frameworks\\n- Build AI collaboration tools\\n\\nDo NOT use this agent for:\\n- Frontend development (use senior-frontend-developer)\\n- Backend API development (use senior-backend-developer)\\n- Infrastructure (use infrastructure-devops-manager)\\n- Basic data analysis (use data analysts)\\n\\nThis agent specializes in cutting-edge AI/ML engineering and automation system development.",
      "capabilities": [
        "code_generation",
        "deployment",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/senior-ai-engineer_universal.json"
    },
    "hardware-resource-optimizer": {
      "name": "hardware-resource-optimizer",
      "description": "Use this agent when you need to:\\n\\n- Optimize system performance within hardware constraints\\n- Monitor and manage CPU, GPU, and memory usage\\n- Implement resource allocation strategies\\n- Create performance profiling systems\\n- Build resource usage predictions\\n- Design capacity planning solutions\\n- Implement resource pooling mechanisms\\n- Create hardware scaling strategies\\n- Build performance bottleneck detection\\n- Design resource scheduling algorithms\\n- Implement memory optimization techniques\\n- Create GPU utilization strategies\\n- Build disk I/O optimization\\n- Design network bandwidth management\\n- Implement container resource limits\\n- Create performance benchmarking tools\\n- Build resource monitoring dashboards\\n- Design auto-scaling policies\\n- Implement resource reservation systems\\n- Create hardware failure prediction\\n- Build performance regression detection\\n- Design resource cost optimization\\n- Implement workload distribution\\n- Create hardware upgrade recommendations\\n- Build resource usage analytics\\n- Design performance SLA monitoring\\n- Implement resource cleanup automation\\n- Create hardware inventory management\\n- Build performance testing frameworks\\n- Design resource migration strategies\\n\\nDo NOT use this agent for:\\n- Software development (use appropriate development agents)\\n- System deployment (use deployment-automation-master)\\n- General infrastructure (use infrastructure-devops-manager)\\n- Application optimization (use code-generation-improver)\\n\\nThis agent specializes in maximizing system performance within available hardware resources.",
      "capabilities": [
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization"
      ],
      "config_path": "configs/hardware-resource-optimizer_universal.json"
    },
    "browser-automation-orchestrator": {
      "name": "browser-automation-orchestrator",
      "description": "Use this agent when you need to:\\n\\n- Create browser automation workflows with Playwright\\n- Implement web scraping systems with anti-detection\\n- Build automated UI testing frameworks\\n- Design web interaction automation\\n- Create screenshot and visual regression testing\\n- Implement form filling automation\\n- Build web data extraction pipelines\\n- Design cross-browser testing strategies\\n- Create browser-based RPA solutions\\n- Implement CAPTCHA handling strategies\\n- Build web monitoring and alerting\\n- Design parallel browser automation\\n- Create browser session management\\n- Implement cookie and storage handling\\n- Build authentication automation\\n- Design web performance testing\\n- Create browser API mocking\\n- Implement browser debugging tools\\n- Build visual testing frameworks\\n- Design accessibility testing automation\\n- Create browser network interception\\n- Implement browser profile management\\n- Build headless browser optimization\\n- Design browser farm management\\n- Create web crawling strategies\\n- Implement JavaScript execution control\\n- Build browser automation APIs\\n- Design anti-bot detection bypassing\\n- Create browser automation monitoring\\n- Implement browser resource optimization\\n\\nDo NOT use this agent for:\\n- Backend development (use senior-backend-developer)\\n- Manual testing (use testing-qa-validator)\\n- Infrastructure tasks (use infrastructure-devops-manager)\\n- API development (use appropriate backend agents)\\n\\nThis agent specializes in browser automation using tools like Playwright, Skyvern, and Browser-Use.",
      "capabilities": [
        "code_generation",
        "testing",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/browser-automation-orchestrator_universal.json"
    },
    "ai-system-architect": {
      "name": "ai-system-architect",
      "description": "Use this agent when you need to:\\n\\n- Design comprehensive AI system architectures\\n- Create scalable and modular system designs\\n- Implement AI architectures for advanced automation\\n- Design multi-modal AI integration patterns\\n- Create self-improving system architectures\\n- Implement meta-learning frameworks\\n- Design distributed AI systems\\n- Create neural-symbolic hybrid architectures\\n- Implement advanced processing approaches\\n- Build iterative improvement mechanisms\\n- Design intelligent behavior patterns\\n- Create knowledge representation systems\\n- Implement reasoning and inference engines\\n- Build memory architecture for AI systems\\n- Design attention and focus mechanisms\\n- Create goal-oriented architecture patterns\\n- Implement ethical AI frameworks\\n- Build explainable AI architectures\\n- Design robustness and safety measures\\n- Create AI evaluation frameworks\\n- Implement transfer learning architectures\\n- Build continual learning systems\\n- Design AI communication protocols\\n- Create AI-human interaction patterns\\n- Implement AI resource optimization\\n- Build AI monitoring and control systems\\n- Design AI evolution strategies\\n- Create AI alignment mechanisms\\n- Implement AI security architectures\\n- Build AI testing and validation frameworks\\n\\nDo NOT use this agent for:\\n- Specific code implementation (use code-generation agents)\\n- Deployment tasks (use deployment-automation-master)\\n- Infrastructure management (use infrastructure-devops-manager)\\n- Testing implementation (use testing-qa-validator)\\n\\nThis agent specializes in designing and evolving the fundamental architecture of AI systems for maximum intelligence and capability.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization",
        "documentation"
      ],
      "config_path": "configs/agi-system-architect_universal.json"
    },
    "jarvis-voice-interface": {
      "name": "jarvis-voice-interface",
      "description": "Use this agent when you need to:\\n\\n- Create voice-controlled AI assistants\\n- Implement speech recognition systems\\n- Build text-to-speech capabilities\\n- Design natural language voice interfaces\\n- Create voice command processing\\n- Implement wake word detection\\n- Build conversational voice AI\\n- Design multi-language voice support\\n- Create voice biometric authentication\\n- Implement noise cancellation systems\\n- Build voice activity detection\\n- Design voice emotion recognition\\n- Create voice synthesis customization\\n- Implement real-time voice translation\\n- Build voice-based navigation\\n- Design voice accessibility features\\n- Create voice interaction analytics\\n- Implement voice privacy controls\\n- Build voice command shortcuts\\n- Design voice feedback systems\\n- Create voice recording management\\n- Implement voice quality optimization\\n- Build voice-based notifications\\n- Design voice integration APIs\\n- Create voice testing frameworks\\n- Implement voice fallback mechanisms\\n- Build voice command documentation\\n- Design voice UX patterns\\n- Create voice performance monitoring\\n- Implement voice security measures\\n\\nDo NOT use this agent for:\\n- Text-based interfaces (use senior-frontend-developer)\\n- Backend processing (use senior-backend-developer)\\n- Non-voice AI tasks (use appropriate AI agents)\\n- Infrastructure (use infrastructure-devops-manager)\\n\\nThis agent specializes in creating sophisticated voice-controlled AI interfaces like Jarvis.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "monitoring",
        "integration",
        "documentation"
      ],
      "config_path": "configs/jarvis-voice-interface_universal.json"
    },
    "opendevin-code-generator": {
      "name": "opendevin-code-generator",
      "description": "Use this agent when you need to:\\n\\n- Generate complete applications from specifications\\n- Implement complex features autonomously\\n- Debug and fix code automatically\\n- Refactor large codebases\\n- Write comprehensive test suites\\n- Create API implementations from docs\\n- Build full-stack applications\\n- Implement algorithms from descriptions\\n- Generate documentation from code\\n- Create database schemas and queries\\n- Fix security vulnerabilities in code\\n- Optimize code performance\\n- Implement design patterns\\n- Generate boilerplate code\\n- Create CI/CD configurations\\n- Build microservices architectures\\n- Implement authentication systems\\n- Generate frontend components\\n- Create data processing pipelines\\n- Build integration connectors\\n- Implement business logic from requirements\\n- Generate migration scripts\\n- Create deployment configurations\\n- Build command-line tools\\n- Implement real-time features\\n- Generate mobile app code\\n- Create infrastructure as code\\n- Build ETL pipelines\\n- Implement ML model serving code\\n- Generate API clients\\n\\nDo NOT use this agent for:\\n- Code review and human collaboration\\n- Architectural decisions requiring business context\\n- Legal or compliance-critical code without review\\n- Performance-critical algorithm design\\n\\nThis agent manages OpenDevin's autonomous software engineering capabilities, acting as an AI pair programmer that can handle complex coding tasks independently.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "optimization",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/opendevin-code-generator_universal.json"
    },
    "shell-automation-specialist": {
      "name": "shell-automation-specialist",
      "description": "Use this agent when you need to:\\n\\n- Create complex shell scripts and automation\\n- Implement system task automation with ShellGPT\\n- Build command-line interfaces and tools\\n- Design shell script best practices\\n- Create system administration automation\\n- Implement shell script testing frameworks\\n- Build deployment automation scripts\\n- Design error handling in shell scripts\\n- Create shell script libraries\\n- Implement cross-platform shell compatibility\\n- Build shell script debugging tools\\n- Design shell script security practices\\n- Create system monitoring scripts\\n- Implement backup automation scripts\\n- Build log processing scripts\\n- Design shell script optimization\\n- Create system maintenance automation\\n- Implement shell script documentation\\n- Build shell-based CI/CD pipelines\\n- Design shell script version control\\n- Create system configuration scripts\\n- Implement shell script packaging\\n- Build interactive shell menus\\n- Design shell script logging systems\\n- Create system health check scripts\\n- Implement shell script scheduling\\n- Build shell-based data processing\\n- Design shell script modularity\\n- Create system integration scripts\\n- Implement shell script performance monitoring\\n\\nDo NOT use this agent for:\\n- Application development (use appropriate language agents)\\n- Infrastructure provisioning (use infrastructure-devops-manager)\\n- Web development (use frontend/backend developers)\\n- Database management (use database specialists)\\n\\nThis agent specializes in shell scripting and command-line automation expertise.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/shell-automation-specialist_universal.json"
    },
    "dify-automation-specialist": {
      "name": "dify-automation-specialist",
      "description": "Use this agent when you need to:\\n\\n- Build AI-powered automation workflows quickly\\n- Create conversational AI applications\\n- Implement RAG systems with   code\\n- Design AI agents with integrated tools\\n- Build no-code AI applications\\n- Create knowledge base chatbots\\n- Implement document Q&A systems\\n- Design workflow automations with AI\\n- Build customer service AI agents\\n- Create AI-powered data processing\\n- Implement content generation workflows\\n- Design AI form processors\\n- Build intelligent email responders\\n- Create AI data extraction pipelines\\n- Implement smart notification systems\\n- Design AI-powered search interfaces\\n- Build recommendation systems\\n- Create AI content moderators\\n- Implement intelligent routing systems\\n- Design AI analytics dashboards\\n- Build conversational forms\\n- Create AI-powered APIs\\n- Implement batch processing with AI\\n- Design multi-tenant AI applications\\n- Build AI marketplace applications\\n\\nDo NOT use this agent for:\\n- Low-level system programming\\n- Real-time trading systems\\n- High-frequency data processing\\n- Custom ML model training\\n\\nThis agent manages Dify's AI application platform, enabling rapid development of AI-powered automations and conversational applications.",
      "capabilities": [
        "code_generation",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/dify-automation-specialist_universal.json"
    },
    "agentgpt-autonomous-executor": {
      "name": "agentgpt-autonomous-executor",
      "description": "Use this agent when you need to:\\n\\n- Execute complex multi-step goals autonomously\\n- Create self-directed AI agents\\n- Build goal-driven AI systems\\n- Implement autonomous research agents\\n- Design self-improving task executors\\n- Create agents that plan their own actions\\n- Build persistent goal-pursuing systems\\n- Implement autonomous problem solvers\\n- Design agents that learn from failures\\n- Create self-organizing task systems\\n- Build autonomous project managers\\n- Implement goal decomposition systems\\n- Design milestone-tracking agents\\n- Create autonomous debugging systems\\n- Build self-directed learning agents\\n- Implement autonomous content creators\\n- Design goal-oriented chatbots\\n- Create agents that handle long-running tasks\\n- Build autonomous monitoring systems\\n- Implement self-healing workflows\\n- Design agents that request resources\\n- Create autonomous testing frameworks\\n- Build goal-achievement optimizers\\n- Implement success criteria validation\\n- Design autonomous exploration systems\\n\\nDo NOT use this agent for:\\n- Simple single-step tasks\\n- Highly controlled workflows\\n- Tasks requiring human approval at each step\\n- Real-time responsive systems\\n\\nThis agent manages AgentGPT's autonomous execution framework, enabling AI agents to pursue complex goals independently with   supervision.",
      "capabilities": [
        "code_generation",
        "testing",
        "monitoring",
        "optimization",
        "automation"
      ],
      "config_path": "configs/agentgpt-autonomous-executor_universal.json"
    },
    "task-assignment-coordinator": {
      "name": "task-assignment-coordinator",
      "description": "Use this agent when you need to:\\n\\n- Automatically analyze incoming tasks and requirements\\n- Match tasks to the most suitable agents\\n- Implement workload balancing across agents\\n- Create task prioritization algorithms\\n- Build agent capability matching systems\\n- Design task routing strategies\\n- Implement task dependency management\\n- Create agent availability tracking\\n- Build task assignment optimization\\n- Design multi-agent task distribution\\n- Implement task queue management\\n- Create agent skill matrices\\n- Build task complexity analysis\\n- Design task deadline management\\n- Implement resource allocation optimization\\n- Create task assignment rules engines\\n- Build agent performance tracking\\n- Design task reassignment strategies\\n- Implement task escalation procedures\\n- Create workload forecasting\\n- Build task assignment dashboards\\n- Design agent specialization tracking\\n- Implement task batching strategies\\n- Create assignment conflict resolution\\n- Build task assignment analytics\\n- Design agent utilization metrics\\n- Implement fair task distribution\\n- Create task assignment APIs\\n- Build assignment notification systems\\n- Design task assignment auditing\\n\\nDo NOT use this agent for:\\n- Task execution (use appropriate specialist agents)\\n- System deployment (use deployment-automation-master)\\n- Code implementation (use development agents)\\n- Testing (use testing-qa-validator)\\n\\nThis agent specializes in intelligently routing tasks to the most appropriate agents.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "analysis"
      ],
      "config_path": "configs/task-assignment-coordinator_universal.json"
    },
    "ai-scrum-master": {
      "name": "ai-scrum-master",
      "description": "Use this agent when you need to:\\n\\n- Facilitate agile ceremonies and processes\\n- Manage sprint planning and execution\\n- Remove impediments blocking team progress\\n- Implement agile best practices\\n- Create sprint retrospectives and improvements\\n- Build team velocity tracking\\n- Design burndown charts and metrics\\n- Facilitate daily standup meetings\\n- Create sprint review presentations\\n- Implement agile coaching strategies\\n- Build team collaboration tools\\n- Design conflict resolution processes\\n- Create team performance metrics\\n- Implement continuous improvement\\n- Build agile transformation plans\\n- Design team communication patterns\\n- Create agile documentation standards\\n- Implement story point estimation\\n- Build sprint goal tracking\\n- Design team capacity planning\\n- Create impediment tracking systems\\n- Implement agile maturity assessments\\n- Build cross-team coordination\\n- Design scaled agile frameworks\\n- Create team health metrics\\n- Implement agile tooling strategies\\n- Build retrospective action tracking\\n- Design team formation strategies\\n- Create agile training materials\\n- Implement agile compliance frameworks\\n\\nDo NOT use this agent for:\\n- Technical implementation (use development agents)\\n- Product decisions (use ai-product-manager)\\n- Infrastructure (use infrastructure-devops-manager)\\n- Testing execution (use testing-qa-validator)\\n\\nThis agent specializes in facilitating agile processes and removing team impediments.",
      "capabilities": [
        "code_generation",
        "testing",
        "monitoring",
        "optimization",
        "analysis",
        "documentation"
      ],
      "config_path": "configs/ai-scrum-master_universal.json"
    },
    "autonomous-system-controller": {
      "name": "autonomous-system-controller",
      "description": "Use this agent when you need to:\\n\\n- Design and implement fully autonomous AI systems\\n- Create self-governing decision-making frameworks\\n- Implement autonomous resource allocation strategies\\n- Build self-healing and self-optimizing systems\\n- Design autonomous goal pursuit mechanisms\\n- Create independent system operation protocols\\n- Implement autonomous error recovery\\n- Build self-monitoring and self-correction systems\\n- Design autonomous scaling decisions\\n- Create self-organizing system architectures\\n- Implement autonomous security responses\\n- Build autonomous performance optimization\\n- Design autonomous workload distribution\\n- Create self-evolving system capabilities\\n- Implement autonomous knowledge acquisition\\n- Build autonomous problem-solving systems\\n- Design autonomous system maintenance\\n- Create autonomous backup and recovery\\n- Implement autonomous cost optimization\\n- Build autonomous compliance monitoring\\n- Design autonomous incident response\\n- Create autonomous system updates\\n- Implement autonomous capacity planning\\n- Build autonomous quality assurance\\n- Design autonomous user interaction\\n- Create autonomous data management\\n- Implement autonomous integration systems\\n- Build autonomous documentation generation\\n- Design autonomous testing strategies\\n- Create autonomous deployment decisions\\n\\nDo NOT use this agent for:\\n- Manual system operations (use infrastructure-devops-manager)\\n- Specific code implementation (use code generation agents)\\n- Agent coordination (use ai-agent-orchestrator)\\n- Architecture design (use agi-system-architect)\\n\\nThis agent specializes in creating systems that can operate, maintain, and improve themselves without human intervention.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization",
        "documentation"
      ],
      "config_path": "configs/autonomous-system-controller_universal.json"
    },
    "complex-problem-solver": {
      "name": "complex-problem-solver",
      "description": "Use this agent when you need to:\\n\\n- Solve multi-faceted problems requiring deep analysis\\n- Research and synthesize information from multiple sources\\n- Create innovative solutions to unprecedented challenges\\n- Implement creative problem-solving methodologies\\n- Build hypothesis testing frameworks\\n- Design experimental validation systems\\n- Create root cause analysis tools\\n- Implement systematic debugging approaches\\n- Build problem decomposition strategies\\n- Design solution evaluation frameworks\\n- Create decision-making algorithms\\n- Implement optimization strategies\\n- Build constraint satisfaction solvers\\n- Design heuristic search algorithms\\n- Create problem modeling systems\\n- Implement solution space exploration\\n- Build trade-off analysis tools\\n- Design multi-criteria optimization\\n- Create problem visualization tools\\n- Implement collaborative problem-solving\\n- Build knowledge synthesis systems\\n- Design pattern recognition algorithms\\n- Create analogical reasoning systems\\n- Implement lateral thinking approaches\\n- Build solution validation frameworks\\n- Design problem categorization systems\\n- Create solution documentation\\n- Implement learning from failures\\n- Build problem-solving metrics\\n- Design solution reuse strategies\\n\\nDo NOT use this agent for:\\n- Routine development tasks (use specific development agents)\\n- Standard deployment (use deployment-automation-master)\\n- Basic troubleshooting (use appropriate specialist agents)\\n- Simple implementation (use code generation agents)\\n\\nThis agent specializes in tackling complex, novel problems through research and creative synthesis.",
      "capabilities": [
        "code_generation",
        "testing",
        "deployment",
        "documentation"
      ],
      "config_path": "configs/complex-problem-solver_universal.json"
    },
    "kali-security-specialist": {
      "name": "kali-security-specialist",
      "description": "Use this agent when you need to:\\n\\n- Perform advanced penetration testing with Kali Linux tools\\n- Conduct network vulnerability assessments\\n- Execute wireless security audits\\n- Implement web application penetration testing\\n- Perform social engineering tests\\n- Conduct forensic analysis and incident response\\n- Execute password cracking and hash analysis\\n- Implement exploit development and testing\\n- Perform reverse engineering tasks\\n- Conduct OSINT (Open Source Intelligence) gathering\\n- Execute privilege escalation tests\\n- Implement post-exploitation techniques\\n- Perform vulnerability scanning with Nmap, OpenVAS\\n- Conduct SQL injection and XSS testing\\n- Execute buffer overflow exploits\\n- Implement Metasploit framework operations\\n- Perform wireless attacks and WPA cracking\\n- Conduct man-in-the-middle attacks testing\\n- Execute DNS and ARP spoofing tests\\n- Implement backdoor and rootkit detection\\n- Perform malware analysis in sandboxes\\n- Conduct security compliance audits\\n- Execute red team operations\\n- Implement blue team defensive strategies\\n- Perform CTF (Capture The Flag) challenges\\n- Conduct security tool development\\n- Execute automated security testing\\n- Implement security monitoring solutions\\n- Perform threat hunting operations\\n- Conduct security awareness demonstrations\\n\\nDo NOT use this agent for:\\n- General system administration (use infrastructure-devops-manager)\\n- Code development (use appropriate development agents)\\n- Non-security testing (use testing-qa-validator)\\n- Production deployments (use deployment-automation-master)\\n\\nThis agent specializes in advanced security testing using Kali Linux's comprehensive toolset.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "analysis"
      ],
      "config_path": "configs/kali-security-specialist_universal.json"
    },
    "context-optimization-engineer": {
      "name": "context-optimization-engineer",
      "description": "Use this agent when you need to:\\n\\n- Optimize LLM context window usage\\n- Implement efficient prompt engineering strategies\\n- Create token usage reduction techniques\\n- Design context compression algorithms\\n- Build prompt caching systems\\n- Implement semantic chunking strategies\\n- Create context-aware summarization\\n- Design memory management for LLMs\\n- Build conversation history optimization\\n- Implement relevance filtering\\n- Create dynamic context selection\\n- Design prompt template systems\\n- Build token counting utilities\\n- Implement context overflow handling\\n- Create prompt optimization frameworks\\n- Design few-shot learning strategies\\n- Build prompt versioning systems\\n- Implement context prioritization\\n- Create prompt testing frameworks\\n- Design context budget management\\n- Build prompt reuse strategies\\n- Implement context splitting techniques\\n- Create prompt performance analysis\\n- Design multi-turn optimization\\n- Build context prefetching systems\\n- Implement prompt debugging tools\\n- Create context monitoring dashboards\\n- Design prompt cost optimization\\n- Build context quality metrics\\n- Implement prompt security measures\\n\\nDo NOT use this agent for:\\n- General AI development (use senior-ai-engineer)\\n- Model training (use appropriate ML agents)\\n- Infrastructure (use infrastructure-devops-manager)\\n- Frontend development (use senior-frontend-developer)\\n\\nThis agent specializes in maximizing efficiency and effectiveness of LLM context usage.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "monitoring",
        "optimization"
      ],
      "config_path": "configs/context-optimization-engineer_universal.json"
    },
    "langflow-workflow-designer": {
      "name": "langflow-workflow-designer",
      "description": "Use this agent when you need to:\\n\\n- Create visual AI workflows without coding\\n- Design drag-and-drop LLM pipelines\\n- Build complex AI logic flows visually\\n- Create reusable workflow components\\n- Enable non-developers to build AI apps\\n- Design conditional logic in workflows\\n- Implement data transformation pipelines\\n- Create custom Langflow components\\n- Build API endpoints from visual flows\\n- Design multi-step AI processes\\n- Create workflow templates for teams\\n- Implement error handling visually\\n- Build data enrichment pipelines\\n- Design chatbot conversation flows\\n- Create document processing workflows\\n- Implement RAG systems visually\\n- Build AI agent coordination flows\\n- Design approval workflows with AI\\n- Create data validation pipelines\\n- Export flows as Python code\\n- Build integration workflows\\n- Design ETL pipelines with AI\\n- Create monitoring dashboards\\n- Implement A/B testing flows\\n- Build visual debugging tools\\n\\nDo NOT use this agent for:\\n- Low-level code optimization\\n- Real-time performance-critical tasks\\n- Complex algorithm implementation\\n- Systems requiring version control\\n\\nThis agent specializes in visual AI workflow creation using Langflow, making AI accessible to non-programmers through intuitive drag-and-drop interfaces.",
      "capabilities": [
        "code_generation",
        "testing",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/langflow-workflow-designer_universal.json"
    },
    "localagi-orchestration-manager": {
      "name": "localagi-orchestration-manager",
      "description": "Use this agent when you need to:\\n\\n- Set up autonomous AI agent orchestration without external dependencies\\n- Create complex multi-step workflows that run independently\\n- Design agent chains that can make decisions and branch conditionally\\n- Implement recursive task decomposition for complex problems\\n- Build self-improving AI systems that learn from execution\\n- Coordinate multiple agents to work together autonomously\\n- Create LangChain-compatible workflows with local models\\n- Design agent pipelines with state management between steps\\n- Enable agents to spawn sub-agents for parallel task execution\\n- Implement retry mechanisms and error recovery in workflows\\n- Build autonomous feedback loops for continuous improvement\\n- Create memory-persistent agent workflows\\n- Design conditional logic flows based on agent outputs\\n- Orchestrate long-running autonomous processes\\n- Implement agent collaboration patterns\\n- Build self-organizing agent systems\\n- Create templates for common multi-agent patterns\\n- Enable agents to modify their own workflows\\n- Design meta-agents that create other agents\\n- Implement autonomous decision trees\\n- Build agent swarms for distributed problem-solving\\n- Create self-healing agent workflows\\n- Design autonomous research systems\\n- Implement agent voting mechanisms\\n- Build consensus-based multi-agent decisions\\n- Create autonomous code generation pipelines\\n- Design self-optimizing workflows\\n- Implement autonomous testing frameworks\\n- Build agent-based automation systems\\n- Create event-driven agent workflows\\n\\nDo NOT use this agent for:\\n- Simple single-agent tasks\\n- Basic API calls without orchestration\\n- Static workflows without conditional logic\\n- Tasks that don't require agent collaboration\\n- Simple request-response patterns\\n\\nThis agent specializes in creating truly autonomous AI systems that can operate independently, make decisions, collaborate, and improve themselves over time using LocalAGI's powerful orchestration framework.",
      "capabilities": [
        "code_generation",
        "testing",
        "deployment",
        "optimization",
        "automation"
      ],
      "config_path": "configs/localagi-orchestration-manager_universal.json"
    },
    "ai-agent-creator": {
      "name": "ai-agent-creator",
      "description": "Use this agent when you need to:\\n\\n- Analyze system gaps and identify missing agent capabilities\\n- Design new AI agents based on system needs\\n- Create agent specification documents\\n- Implement agent communication protocols\\n- Build agent capability matrices\\n- Design agent interaction patterns\\n- Create agent testing frameworks\\n- Implement agent lifecycle management\\n- Build agent discovery mechanisms\\n- Design agent collaboration strategies\\n- Create agent performance metrics\\n- Implement agent learning systems\\n- Build agent template libraries\\n- Design agent specialization patterns\\n- Create agent integration guidelines\\n- Implement agent versioning systems\\n- Build agent deployment automation\\n- Design agent capability evolution\\n- Create agent documentation standards\\n- Implement agent quality assurance\\n- Build agent marketplace systems\\n- Design agent cost models\\n- Create agent security frameworks\\n- Implement agent monitoring solutions\\n- Build agent debugging tools\\n- Design agent migration strategies\\n- Create agent compatibility layers\\n- Implement agent orchestration rules\\n- Build agent knowledge transfer\\n- Design meta-agent architectures\\n\\nDo NOT use this agent for:\\n- General development tasks (use specific development agents)\\n- System deployment (use deployment-automation-master)\\n- Infrastructure (use infrastructure-devops-manager)\\n- Testing existing code (use testing-qa-validator)\\n\\nThis agent specializes in analyzing system needs and creating new AI agents to fill capability gaps.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "analysis",
        "documentation"
      ],
      "config_path": "configs/ai-agent-creator_universal.json"
    },
    "bigagi-system-manager": {
      "name": "bigagi-system-manager",
      "description": "Use this agent when you need to:\\n\\n- Set up advanced conversational AI interfaces\\n- Configure multi-model chat systems\\n- Enable model switching during conversations\\n- Create AI personas with different capabilities\\n- Implement conversation branching and exploration\\n- Set up multi-agent debates and discussions\\n- Build advanced reasoning chains\\n- Enable voice-based AI interactions\\n- Create specialized chat interfaces for different use cases\\n- Implement conversation memory and context\\n- Configure model voting for better responses\\n- Build ensemble AI systems\\n- Create custom UI configurations\\n- Enable code execution within chats\\n- Implement advanced prompt templates\\n- Set up conversation export and sharing\\n- Build collaborative AI chat rooms\\n- Create model comparison interfaces\\n- Implement conversation analytics\\n- Design custom AI personalities\\n- Enable real-time model switching\\n- Build educational AI interfaces\\n- Create research-oriented chat systems\\n- Implement multi-language conversations\\n- Design domain-specific AI assistants\\n\\nDo NOT use this agent for:\\n- Backend API development\\n- Batch processing tasks\\n- Non-conversational AI tasks\\n- Simple single-model deployments\\n\\nThis agent manages BigAGI's advanced conversational interface, enabling sophisticated multi-model AI interactions with rich features.",
      "capabilities": [
        "code_generation",
        "deployment",
        "integration"
      ],
      "config_path": "configs/bigagi-system-manager_universal.json"
    },
    "deployment-automation-master": {
      "name": "deployment-automation-master",
      "description": "Use this agent when you need to:\\n\\n- Master the deploy_complete_system.sh script and all deployment processes\\n- Create bulletproof deployment strategies with zero downtime\\n- Implement rollback procedures and disaster recovery\\n- Handle complex multi-environment deployments\\n- Design blue-green and canary deployment patterns\\n- Create deployment health validation checks\\n- Implement automatic error recovery mechanisms\\n- Build deployment monitoring and alerting\\n- Design deployment pipelines with GitOps\\n- Create infrastructure as code deployments\\n- Implement secret management for deployments\\n- Build deployment testing frameworks\\n- Design deployment approval workflows\\n- Create deployment documentation and runbooks\\n- Implement deployment cost optimization\\n- Handle database migrations during deployment\\n- Create deployment performance benchmarks\\n- Design deployment security scanning\\n- Implement deployment compliance checks\\n- Build deployment dashboards and metrics\\n- Create deployment automation scripts\\n- Design multi-region deployment strategies\\n- Implement deployment dependency management\\n- Build deployment rollback automation\\n- Create deployment state management\\n- Design deployment notification systems\\n- Implement deployment audit logging\\n- Build deployment troubleshooting guides\\n- Create deployment capacity planning\\n- Design deployment orchestration patterns\\n\\nDo NOT use this agent for:\\n- Code development (use code-generation agents)\\n- Infrastructure provisioning (use infrastructure-devops-manager)\\n- Testing code quality (use testing-qa-validator)\\n- Agent orchestration (use ai-agent-orchestrator)\\n\\nThis agent specializes in creating rock-solid deployment processes that ensure system reliability and availability.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "documentation"
      ],
      "config_path": "configs/deployment-automation-master_universal.json"
    },
    "flowiseai-flow-manager": {
      "name": "flowiseai-flow-manager",
      "description": "Use this agent when you need to:\\n\\n- Create visual LangChain applications\\n- Build chatbots with complex logic\\n- Design RAG systems using drag-and-drop\\n- Implement conversation flows visually\\n- Create LangChain workflows without code\\n- Build document processing pipelines\\n- Design multi-model chat systems\\n- Implement memory-enabled chatbots\\n- Create API endpoints from flows\\n- Build agent chains visually\\n- Design prompt engineering workflows\\n- Implement vector search systems\\n- Create document loaders visually\\n- Build conversation summarizers\\n- Design QA systems over documents\\n- Implement tool-using agents\\n- Create workflow debugging interfaces\\n- Build visual chain monitoring\\n- Design conversation analytics\\n- Implement visual prompt testing\\n- Create flow version control\\n- Build team collaboration workflows\\n- Design visual LLM routers\\n- Implement cost optimization flows\\n- Create visual embedding pipelines\\n\\nDo NOT use this agent for:\\n- Non-LangChain implementations\\n- Real-time streaming applications\\n- Low-level performance optimization\\n- Custom model training\\n\\nThis agent manages FlowiseAI's visual LangChain builder, enabling rapid development of sophisticated LLM applications through intuitive interfaces.",
      "capabilities": [
        "code_generation",
        "testing",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/flowiseai-flow-manager_universal.json"
    },
    "agentzero-coordinator": {
      "name": "agentzero-coordinator",
      "description": "Use this agent when you need to:\\n\\n- Deploy general-purpose AI agents that can handle any task\\n- Create adaptive agents that learn from experience\\n- Handle unpredictable or diverse task types\\n- Build zero-shot task completion systems\\n- Scale agent deployments dynamically based on demand\\n- Create fallback systems for specialized agents\\n- Implement few-shot learning for new task types\\n- Manage pools of generalist agents\\n- Route tasks that don't fit specific categories\\n- Build self-organizing agent systems\\n- Create agents that can use multiple tools\\n- Enable rapid prototyping of AI capabilities\\n- Handle edge cases other agents can't process\\n- Implement agent recycling and resource management\\n- Create agents that improve through interaction\\n- Build knowledge transfer between agent instances\\n- Design adaptive reasoning systems\\n- Implement general problem-solving frameworks\\n- Create agents that can explain their reasoning\\n- Build multi-modal agent capabilities\\n\\nDo NOT use this agent for:\\n- Highly specialized tasks (use domain-specific agents)\\n- Tasks requiring specific expertise\\n- Performance-critical operations\\n- Tasks with strict compliance requirements\\n\\nThis agent manages AgentZero's general-purpose AI framework, perfect for handling diverse, unpredictable tasks with   configuration.",
      "capabilities": [
        "code_generation",
        "deployment",
        "optimization",
        "documentation"
      ],
      "config_path": "configs/agentzero-coordinator_universal.json"
    },
    "senior-frontend-developer": {
      "name": "senior-frontend-developer",
      "description": "Use this agent when you need to:\\n\\n- Build modern web interfaces with React, Vue, or Angular\\n- Create responsive Streamlit applications\\n- Implement real-time data visualization dashboards\\n- Design user-friendly AI chat interfaces\\n- Build interactive data exploration tools\\n- Create Progressive Web Applications (PWAs)\\n- Implement state management solutions\\n- Build component libraries and design systems\\n- Create accessible web interfaces (WCAG compliance)\\n- Implement WebSocket real-time features\\n- Build data visualization with D3.js or Chart.js\\n- Design mobile-responsive layouts\\n- Create micro-frontend architectures\\n- Implement frontend performance optimization\\n- Build SEO-friendly applications\\n- Create frontend testing strategies\\n- Implement internationalization (i18n)\\n- Build offline-capable applications\\n- Design frontend security best practices\\n- Create animated user interfaces\\n- Implement lazy loading and code splitting\\n- Build frontend monitoring and analytics\\n- Design cross-browser compatibility\\n- Create frontend build optimization\\n- Implement frontend caching strategies\\n- Build WebAssembly integrations\\n- Design frontend error handling\\n- Create frontend documentation\\n- Implement A/B testing frameworks\\n- Build frontend CI/CD pipelines\\n\\nDo NOT use this agent for:\\n- Backend development (use senior-backend-developer)\\n- Database design (use appropriate backend agents)\\n- Infrastructure (use infrastructure-devops-manager)\\n- AI/ML implementation (use senior-ai-engineer)\\n\\nThis agent specializes in creating beautiful, performant, and user-friendly web interfaces.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/senior-frontend-developer_universal.json"
    },
    "financial-analysis-specialist": {
      "name": "financial-analysis-specialist",
      "description": "Use this agent when you need to:\\n\\n- Implement financial data analysis systems\\n- Create trading algorithms and strategies\\n- Build risk management frameworks\\n- Design portfolio optimization systems\\n- Implement market prediction models\\n- Create financial reporting automation\\n- Build real-time market data processing\\n- Design backtesting frameworks\\n- Implement quantitative analysis tools\\n- Create financial dashboard systems\\n- Build regulatory compliance monitoring\\n- Design fraud detection algorithms\\n- Implement financial forecasting models\\n- Create automated trading systems\\n- Build financial data visualization\\n- Design credit risk assessment\\n- Implement financial API integrations\\n- Create financial news sentiment analysis\\n- Build cryptocurrency analysis tools\\n- Design financial anomaly detection\\n- Implement financial data warehousing\\n- Create financial KPI tracking\\n- Build investment analysis tools\\n- Design financial simulation systems\\n- Implement FinTech solutions\\n- Create financial data validation\\n- Build financial audit trails\\n- Design financial alert systems\\n- Implement financial data security\\n- Create financial machine learning models\\n\\nDo NOT use this agent for:\\n- General data analysis (use data analysis agents)\\n- Non-financial systems (use appropriate domain agents)\\n- Infrastructure tasks (use infrastructure-devops-manager)\\n- UI development (use senior-frontend-developer)\\n\\nThis agent specializes in financial analysis, trading strategies, and FinTech solutions using advanced AI.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "monitoring",
        "automation",
        "analysis"
      ],
      "config_path": "configs/financial-analysis-specialist_universal.json"
    },
    "system-optimizer-reorganizer": {
      "name": "system-optimizer-reorganizer",
      "description": "Use this agent when you need to:\\n\\n- Clean up and organize project file structures\\n- Remove unused dependencies and dead code\\n- Optimize directory hierarchies and naming conventions\\n- Consolidate duplicate files and resources\\n- Create consistent project organization standards\\n- Implement file naming conventions\\n- Build automated cleanup scripts\\n- Design resource organization strategies\\n- Create documentation structure templates\\n- Implement version control best practices\\n- Build dependency management systems\\n- Design module organization patterns\\n- Create configuration consolidation\\n- Implement log rotation and cleanup\\n- Build cache management strategies\\n- Design temporary file cleanup\\n- Create backup organization systems\\n- Implement archive management\\n- Build asset optimization pipelines\\n- Design database cleanup procedures\\n- Create system maintenance schedules\\n- Implement storage optimization\\n- Build monitoring data retention\\n- Design code repository organization\\n- Create deployment artifact management\\n- Implement container image cleanup\\n- Build package registry organization\\n- Design secret rotation procedures\\n- Create compliance documentation structure\\n- Implement audit trail organization\\n\\nDo NOT use this agent for:\\n- Code implementation (use code generation agents)\\n- System architecture (use agi-system-architect)\\n- Deployment tasks (use deployment-automation-master)\\n- Testing (use testing-qa-validator)\\n\\nThis agent specializes in keeping systems clean, organized, and efficiently structured.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization",
        "automation",
        "documentation"
      ],
      "config_path": "configs/system-optimizer-reorganizer_universal.json"
    },
    "ai-product-manager": {
      "name": "ai-product-manager",
      "description": "Use this agent when you need to:\\n\\n- Analyze and define AI product requirements\\n- Research market trends and competitor solutions\\n- Create product roadmaps and feature prioritization\\n- Coordinate complex AI projects across teams\\n- Conduct web searches for technical solutions\\n- Build product specifications and documentation\\n- Design user stories and acceptance criteria\\n- Implement product analytics and metrics\\n- Create go-to-market strategies for AI products\\n- Build product feedback loops\\n- Design A/B testing frameworks\\n- Coordinate stakeholder communications\\n- Create product vision and strategy documents\\n- Implement product lifecycle management\\n- Build competitive analysis frameworks\\n- Design user research methodologies\\n- Create product pricing strategies\\n- Implement feature flag systems\\n- Build product onboarding flows\\n- Design product education materials\\n- Create product launch plans\\n- Implement product success metrics\\n- Build customer journey maps\\n- Design product experimentation frameworks\\n- Create product backlog management\\n- Implement product-market fit analysis\\n- Build product partnership strategies\\n- Design product scaling strategies\\n- Create product deprecation plans\\n- Implement product compliance frameworks\\n\\nDo NOT use this agent for:\\n- Direct code implementation (use development agents)\\n- Infrastructure management (use infrastructure-devops-manager)\\n- Testing implementation (use testing-qa-validator)\\n- Design work (use senior-frontend-developer)\\n\\nThis agent specializes in product management with web search capabilities for finding solutions.",
      "capabilities": [
        "code_generation",
        "testing",
        "analysis",
        "documentation"
      ],
      "config_path": "configs/ai-product-manager_universal.json"
    },
    "senior-backend-developer": {
      "name": "senior-backend-developer",
      "description": "Use this agent when you need to:\\n\\n- Build scalable FastAPI or Django REST APIs\\n- Design microservices architectures\\n- Implement database schemas and optimization\\n- Create GraphQL APIs and resolvers\\n- Build event-driven architectures\\n- Implement authentication and authorization\\n- Design API rate limiting and throttling\\n- Create background job processing systems\\n- Build real-time WebSocket servers\\n- Implement caching strategies (Redis, Memcached)\\n- Design message queue systems (RabbitMQ, Kafka)\\n- Create database migration strategies\\n- Build API versioning systems\\n- Implement data validation and serialization\\n- Design RESTful API best practices\\n- Create API documentation (OpenAPI/Swagger)\\n- Build database connection pooling\\n- Implement transaction management\\n- Design API security measures\\n- Create logging and monitoring systems\\n- Build API testing frameworks\\n- Implement service discovery patterns\\n- Design data access layers\\n- Create API performance optimization\\n- Build distributed tracing systems\\n- Implement circuit breaker patterns\\n- Design API gateway solutions\\n- Create backend debugging tools\\n- Build data pipeline architectures\\n- Implement CQRS and Event Sourcing\\n\\nDo NOT use this agent for:\\n- Frontend development (use senior-frontend-developer)\\n- Infrastructure management (use infrastructure-devops-manager)\\n- AI/ML implementation (use senior-ai-engineer)\\n- Database administration (use database specialists)\\n\\nThis agent specializes in building robust, scalable backend systems and APIs.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "integration",
        "documentation"
      ],
      "config_path": "configs/senior-backend-developer_universal.json"
    },
    "private-data-analyst": {
      "name": "private-data-analyst",
      "description": "Use this agent when you need to:\\n\\n- Deploy or configure PrivateGPT for secure document analysis\\n- Process confidential or sensitive documents locally\\n- Set up private Q&A systems for proprietary data\\n- Implement data anonymization or PII redaction\\n- Create secure knowledge bases with access controls\\n- Handle GDPR, HIPAA, or CCPA compliance requirements\\n- Build role-based access control for documents\\n- Process medical records, financial data, or legal documents\\n- Implement \\\"right to be forgotten\\\" data deletion\\n- Create audit trails for data access\\n- Set up privacy-preserving analytics\\n- Configure local-only document processing (no cloud)\\n- Implement field-level encryption for documents\\n- Handle data residency requirements\\n- Create secure document retention policies\\n- Build private chatbots for sensitive data\\n- Implement consent management systems\\n- Generate compliance reports for privacy regulations\\n- Set up data anonymization pipelines\\n- Monitor for privacy violations or data leaks\\n- Process employee records or HR documents\\n- Handle customer PII securely\\n- Create data portability exports (GDPR)\\n- Implement secure multi-tenant data isolation\\n- Build privacy dashboards and metrics\\n- Configure network isolation for sensitive processing\\n- Set up encrypted document storage\\n- Handle confidential business intelligence\\n- Process documents in air-gapped environments\\n- Implement data classification systems\\n\\nDo NOT use this agent for:\\n- General document processing without privacy requirements (use document-knowledge-manager)\\n- Public data analysis\\n- Web scraping or public information gathering\\n- Non-sensitive knowledge management\\n- General Q&A systems without privacy needs\\n\\nThis agent specializes in maintaining absolute privacy and security for sensitive data processing, ensuring nothing leaves your local environment while providing powerful document analysis capabilities.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "deployment",
        "monitoring",
        "automation",
        "documentation"
      ],
      "config_path": "configs/private-data-analyst_universal.json"
    },
    "ai-agent-orchestrator": {
      "name": "ai-agent-orchestrator",
      "description": "Use this agent when you need to:\\n\\n- Coordinate multi-agent workflows and complex task orchestration\\n- Manage agent discovery and registration\\n- Handle distributed task execution across multiple agents\\n- Implement agent communication protocols\\n- Design workflow graphs and execution plans\\n- Monitor agent performance and health\\n- Manage agent lifecycle (start, stop, restart)\\n- Implement load balancing across agents\\n- Handle agent failover and recovery\\n- Create agent collaboration patterns\\n- Design consensus mechanisms for multi-agent decisions\\n- Implement agent state synchronization\\n- Build event-driven agent architectures\\n- Create agent middleware and messaging systems\\n- Design agent capability matching systems\\n- Implement agent negotiation protocols\\n- Build agent reputation systems\\n- Create hierarchical agent organizations\\n- Design agent learning and adaptation mechanisms\\n- Implement agent security and authentication\\n- Handle inter-agent data exchange\\n- Create agent monitoring dashboards\\n- Build agent testing frameworks\\n- Design agent deployment strategies\\n- Implement agent version management\\n- Create agent documentation standards\\n- Build agent performance benchmarks\\n- Design agent cost optimization strategies\\n- Implement agent resource allocation\\n- Create agent debugging tools\\n\\nDo NOT use this agent for:\\n- Simple single-agent tasks\\n- Direct code implementation (use code-generation agents)\\n- Infrastructure management (use infrastructure-devops-manager)\\n- Testing individual components (use testing-qa-validator)\\n\\nThis agent specializes in orchestrating complex multi-agent systems, ensuring efficient collaboration and task distribution across the entire AI ecosystem.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "documentation"
      ],
      "config_path": "configs/ai-agent-orchestrator_universal.json"
    },
    "security-pentesting-specialist": {
      "name": "security-pentesting-specialist",
      "description": "Use this agent when you need to:\\n\\n- Perform comprehensive security assessments\\n- Conduct penetration testing operations\\n- Implement vulnerability scanning systems\\n- Design security audit frameworks\\n- Create threat modeling systems\\n- Implement security compliance validation\\n- Build automated security testing\\n- Design zero-trust architecture validation\\n- Create security incident response plans\\n- Implement SAST and DAST tools\\n- Build security monitoring dashboards\\n- Design API security testing\\n- Create network security assessments\\n- Implement cloud security validation\\n- Build container security scanning\\n- Design social engineering tests\\n- Create security awareness training\\n- Implement security baseline checks\\n- Build security remediation tracking\\n- Design security metrics reporting\\n- Create vulnerability management systems\\n- Implement security policy validation\\n- Build security configuration scanning\\n- Design access control testing\\n- Create encryption validation tests\\n- Implement security regression testing\\n- Build security documentation\\n- Design security risk scoring\\n- Create security exception handling\\n- Implement continuous security validation\\n\\nDo NOT use this agent for:\\n- Code implementation (use code generation agents)\\n- Infrastructure setup (use infrastructure-devops-manager)\\n- General testing (use testing-qa-validator)\\n- Deployment (use deployment-automation-master)\\n\\nThis agent specializes in finding and fixing security vulnerabilities through comprehensive testing.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "analysis",
        "documentation"
      ],
      "config_path": "configs/security-pentesting-specialist_universal.json"
    },
    "deep-learning-coordinator-manager": {
      "name": "deep-learning-coordinator-manager",
      "description": "Use this agent when you need to:\\n\\n- Design and evolve processing intelligence cores\\n- Implement continuous learning systems\\n- Create meta-learning architectures\\n- Build self-improving processing networks\\n- Design cognitive architecture patterns\\n- Implement memory consolidation systems\\n- Create attention mechanism designs\\n- Build processing plasticity simulations\\n- Design hierarchical learning systems\\n- Implement transfer learning networks\\n- Create processing architecture search\\n- Build coordinator-inspired computing systems\\n- Design synaptic weight optimization\\n- Implement processing pruning strategies\\n- Create cognitive load balancing\\n- Build processing synchronization systems\\n- Design emergent behavior patterns\\n- Implement processing network evolution\\n- Create system_state modeling attempts\\n- Build processing knowledge graphs\\n- Design processing reasoning systems\\n- Implement processing memory systems\\n- Create processing pattern recognition\\n- Build processing prediction engines\\n- Design processing feedback loops\\n- Implement processing homeostasis\\n- Create processing debugging tools\\n- Build processing visualization systems\\n- Design processing performance metrics\\n- Implement processing safety mechanisms\\n\\nDo NOT use this agent for:\\n- Basic ML tasks (use senior-ai-engineer)\\n- Application development (use appropriate developers)\\n- Infrastructure (use infrastructure-devops-manager)\\n- Simple model training (use ML specialists)\\n\\nThis agent specializes in creating and evolving advanced processing intelligence systems.",
      "capabilities": [
        "code_generation"
      ],
      "config_path": "configs/deep-learning-coordinator-manager_universal.json"
    },
    "testing-qa-validator": {
      "name": "testing-qa-validator",
      "description": "Use this agent when you need to:\\n\\n- Create comprehensive test suites for all system components\\n- Implement unit, integration, and end-to-end tests\\n- Design test automation frameworks\\n- Perform security vulnerability testing\\n- Create performance and load testing scenarios\\n- Implement continuous testing in CI/CD pipelines\\n- Design test data management strategies\\n- Create test coverage analysis and reporting\\n- Implement API testing and contract testing\\n- Build UI/UX testing automation\\n- Design chaos engineering experiments\\n- Create regression testing strategies\\n- Implement mobile app testing\\n- Build accessibility testing frameworks\\n- Design cross-browser testing solutions\\n- Create test environment management\\n- Implement A/B testing frameworks\\n- Build synthetic monitoring tests\\n- Design test case management systems\\n- Create quality gates and metrics\\n- Implement test result analytics\\n- Build defect tracking integration\\n- Design test documentation standards\\n- Create test automation best practices\\n- Implement test parallelization strategies\\n- Build test maintenance workflows\\n- Design exploratory testing guides\\n- Create compliance testing procedures\\n- Implement data validation testing\\n- Build user acceptance testing frameworks\\n\\nDo NOT use this agent for:\\n- Code implementation (use code-generation agents)\\n- Deployment processes (use deployment-automation-master)\\n- Infrastructure setup (use infrastructure-devops-manager)\\n- System architecture (use agi-system-architect)\\n\\nThis agent specializes in ensuring software quality through comprehensive testing strategies and validation.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "automation",
        "documentation"
      ],
      "config_path": "configs/testing-qa-validator_universal.json"
    },
    "infrastructure-devops-manager": {
      "name": "infrastructure-devops-manager",
      "description": "Use this agent when you need to:\\n\\n- Deploy, start, stop, or restart Docker containers or services\\n- Fix broken or unhealthy containers (health check failures, startup issues)\\n- Troubleshoot container networking, port conflicts, or inter-service communication\\n- Modify docker-compose.yml files or Docker configurations\\n- Run or modify deployment scripts (deploy_complete_system.sh, start_all.sh)\\n- Configure container resource limits, volumes, or environment variables\\n- Set up or fix monitoring, logging, or alerting infrastructure\\n- Implement health checks, restart policies, or auto-recovery mechanisms\\n- Debug container logs or diagnose service failures\\n- Configure GPU access for AI workloads (Ollama, ML frameworks)\\n- Optimize Docker images or container performance\\n- Set up backup, recovery, or disaster recovery procedures\\n- Implement CI/CD pipelines or automated deployment workflows\\n- Manage secrets, environment files, or configuration management\\n- Configure Prometheus, Grafana, Loki, or other monitoring tools\\n- Handle port management and service discovery\\n- Create or modify shell scripts for automation\\n- Consolidate or organize infrastructure files (multiple docker-compose versions)\\n- Implement security hardening for containers\\n- Set up load balancing or scaling strategies\\n- Manage database migrations or initialization scripts\\n- Configure container networking policies or firewalls\\n- Implement blue-green or rolling deployments\\n- Create infrastructure documentation or runbooks\\n\\nDo NOT use this agent for:\\n- Writing application code (Python, JavaScript)\\n- Designing system architecture (use agi-system-architect)\\n- Configuring AI models or agents (use ai-agent-orchestrator)\\n- UI/UX changes (use a frontend specialist)\\n- Writing unit tests or integration tests (use testing-qa-validator)\\n\\nThis agent focuses exclusively on infrastructure, deployment, and operational concerns. It ensures the platform runs reliably and efficiently.",
      "capabilities": [
        "security_analysis",
        "code_generation",
        "testing",
        "deployment",
        "monitoring",
        "optimization",
        "automation",
        "documentation"
      ],
      "config_path": "configs/infrastructure-devops-manager_universal.json"
    },
    "adversarial-attack-detector": {
      "name": "adversarial-attack-detector",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/adversarial-attack-detector_universal.json"
    },
    "agent-creator": {
      "name": "agent-creator",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/agent-creator_universal.json"
    },
    "ai-senior-full-stack-developer": {
      "name": "ai-senior-full-stack-developer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/ai-senior-full-stack-developer_universal.json"
    },
    "ai-system-architect": {
      "name": "ai-system-architect",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/ai-system-architect_universal.json"
    },
    "bias-and-fairness-auditor": {
      "name": "bias-and-fairness-auditor",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/bias-and-fairness-auditor_universal.json"
    },
    "cicd-pipeline-orchestrator": {
      "name": "cicd-pipeline-orchestrator",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/cicd-pipeline-orchestrator_universal.json"
    },
    "code-quality-gateway-sonarqube": {
      "name": "code-quality-gateway-sonarqube",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/code-quality-gateway-sonarqube_universal.json"
    },
    "container-orchestrator-k3s": {
      "name": "container-orchestrator-k3s",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/container-orchestrator-k3s_universal.json"
    },
    "deep-learning-brain-architect": {
      "name": "deep-learning-brain-architect",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/deep-learning-brain-architect_universal.json"
    },
    "deep-learning-brain-manager": {
      "name": "deep-learning-brain-manager",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/deep-learning-brain-manager_universal.json"
    },
    "deep-local-brain-builder": {
      "name": "deep-local-brain-builder",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/deep-local-brain-builder_universal.json"
    },
    "distributed-tracing-analyzer-jaeger": {
      "name": "distributed-tracing-analyzer-jaeger",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/distributed-tracing-analyzer-jaeger_universal.json"
    },
    "ethical-governor": {
      "name": "ethical-governor",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/ethical-governor_universal.json"
    },
    "evolution-strategy-trainer": {
      "name": "evolution-strategy-trainer",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/evolution-strategy-trainer_universal.json"
    },
    "genetic-algorithm-tuner": {
      "name": "genetic-algorithm-tuner",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/genetic-algorithm-tuner_universal.json"
    },
    "goal-setting-and-planning-agent": {
      "name": "goal-setting-and-planning-agent",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/goal-setting-and-planning-agent_universal.json"
    },
    "neural-architecture-search": {
      "name": "neural-architecture-search",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/neural-architecture-search_universal.json"
    },
    "ai-research-specialist": {
      "name": "ai-research-specialist",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/ai-research-specialist_universal.json"
    },
    "resource-arbitration-agent": {
      "name": "resource-arbitration-agent",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/resource-arbitration-agent_universal.json"
    },
    "runtime-behavior-anomaly-detector": {
      "name": "runtime-behavior-anomaly-detector",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/runtime-behavior-anomaly-detector_universal.json"
    },
    "senior-full-stack-developer": {
      "name": "senior-full-stack-developer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/senior-full-stack-developer_universal.json"
    },
    "agent-debugger": {
      "name": "agent-debugger",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/agent-debugger_universal.json"
    },
    "agent-orchestrator": {
      "name": "agent-orchestrator",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/agent-orchestrator_universal.json"
    },
    "ai-qa-team-lead": {
      "name": "ai-qa-team-lead",
      "description": "Agent for management operations",
      "capabilities": [
        "planning",
        "coordination",
        "reporting"
      ],
      "config_path": "configs/ai-qa-team-lead_universal.json"
    },
    "ai-senior-backend-developer": {
      "name": "ai-senior-backend-developer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/ai-senior-backend-developer_universal.json"
    },
    "ai-senior-engineer": {
      "name": "ai-senior-engineer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/ai-senior-engineer_universal.json"
    },
    "ai-senior-frontend-developer": {
      "name": "ai-senior-frontend-developer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/ai-senior-frontend-developer_universal.json"
    },
    "ai-system-validator": {
      "name": "ai-system-validator",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/ai-system-validator_universal.json"
    },
    "ai-testing-qa-validator": {
      "name": "ai-testing-qa-validator",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/ai-testing-qa-validator_universal.json"
    },
    "automated-incident-responder": {
      "name": "automated-incident-responder",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/automated-incident-responder_universal.json"
    },
    "autonomous-task-executor": {
      "name": "autonomous-task-executor",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/autonomous-task-executor_universal.json"
    },
    "codebase-team-lead": {
      "name": "codebase-team-lead",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/codebase-team-lead_universal.json"
    },
    "cognitive-load-monitor": {
      "name": "cognitive-load-monitor",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/cognitive-load-monitor_universal.json"
    },
    "compute-scheduler-and-optimizer": {
      "name": "compute-scheduler-and-optimizer",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/compute-scheduler-and-optimizer_universal.json"
    },
    "container-vulnerability-scanner-trivy": {
      "name": "container-vulnerability-scanner-trivy",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/container-vulnerability-scanner-trivy_universal.json"
    },
    "cpu-only-hardware-optimizer": {
      "name": "cpu-only-hardware-optimizer",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/cpu-only-hardware-optimizer_universal.json"
    },
    "data-drift-detector": {
      "name": "data-drift-detector",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/data-drift-detector_universal.json"
    },
    "data-lifecycle-manager": {
      "name": "data-lifecycle-manager",
      "description": "Agent for data operations",
      "capabilities": [
        "processing",
        "analysis",
        "storage"
      ],
      "config_path": "configs/data-lifecycle-manager_universal.json"
    },
    "data-version-controller-dvc": {
      "name": "data-version-controller-dvc",
      "description": "Agent for data operations",
      "capabilities": [
        "processing",
        "analysis",
        "storage"
      ],
      "config_path": "configs/data-version-controller-dvc_universal.json"
    },
    "deploy-automation-master": {
      "name": "deploy-automation-master",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/deploy-automation-master_universal.json"
    },
    "edge-inference-proxy": {
      "name": "edge-inference-proxy",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/edge-inference-proxy_universal.json"
    },
    "emergency-shutdown-coordinator": {
      "name": "emergency-shutdown-coordinator",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/emergency-shutdown-coordinator_universal.json"
    },
    "energy-consumption-optimize": {
      "name": "energy-consumption-optimize",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/energy-consumption-optimize_universal.json"
    },
    "experiment-tracker": {
      "name": "experiment-tracker",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/experiment-tracker_universal.json"
    },
    "explainability-and-transparency-agent": {
      "name": "explainability-and-transparency-agent",
      "description": "Agent for data operations",
      "capabilities": [
        "processing",
        "analysis",
        "storage"
      ],
      "config_path": "configs/explainability-and-transparency-agent_universal.json"
    },
    "garbage-collector": {
      "name": "garbage-collector",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/garbage-collector_universal.json"
    },
    "gpu-hardware-optimizer": {
      "name": "gpu-hardware-optimizer",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/gpu-hardware-optimizer_universal.json"
    },
    "honeypot-deployment-agent": {
      "name": "honeypot-deployment-agent",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/honeypot-deployment-agent_universal.json"
    },
    "human-oversight-interface-agent": {
      "name": "human-oversight-interface-agent",
      "description": "Agent for monitoring operations",
      "capabilities": [
        "observability",
        "alerting",
        "analysis"
      ],
      "config_path": "configs/human-oversight-interface-agent_universal.json"
    },
    "kali-hacker": {
      "name": "kali-hacker",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/kali-hacker_universal.json"
    },
    "log-aggregator-loki": {
      "name": "log-aggregator-loki",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/log-aggregator-loki_universal.json"
    },
    "mega-code-auditor": {
      "name": "mega-code-auditor",
      "description": "Agent for utility operations",
      "capabilities": [
        "automation",
        "integration",
        "support"
      ],
      "config_path": "configs/mega-code-auditor_universal.json"
    },
    "metrics-collector-prometheus": {
      "name": "metrics-collector-prometheus",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/metrics-collector-prometheus_universal.json"
    },
    "ml-experiment-tracker-mlflow": {
      "name": "ml-experiment-tracker-mlflow",
      "description": "Agent for ai-ml operations",
      "capabilities": [
        "code_generation",
        "analysis",
        "optimization"
      ],
      "config_path": "configs/ml-experiment-tracker-mlflow_universal.json"
    },
    "observability-dashboard-manager-grafana": {
      "name": "observability-dashboard-manager-grafana",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/observability-dashboard-manager-grafana_universal.json"
    },
    "private-registry-manager-harbor": {
      "name": "private-registry-manager-harbor",
      "description": "Agent for infrastructure operations",
      "capabilities": [
        "deployment",
        "monitoring",
        "automation"
      ],
      "config_path": "configs/private-registry-manager-harbor_universal.json"
    },
    "product-manager": {
      "name": "product-manager",
      "description": "Agent for management operations",
      "capabilities": [
        "planning",
        "coordination",
        "reporting"
      ],
      "config_path": "configs/product-manager_universal.json"
    },
    "prompt-injection-guard": {
      "name": "prompt-injection-guard",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/prompt-injection-guard_universal.json"
    },
    "qa-team-lead": {
      "name": "qa-team-lead",
      "description": "Agent for management operations",
      "capabilities": [
        "planning",
        "coordination",
        "reporting"
      ],
      "config_path": "configs/qa-team-lead_universal.json"
    },
    "ram-hardware-optimizer": {
      "name": "ram-hardware-optimizer",
      "description": "Agent for optimization operations",
      "capabilities": [
        "performance",
        "resource_management",
        "efficiency"
      ],
      "config_path": "configs/ram-hardware-optimizer_universal.json"
    },
    "resource-visualiser": {
      "name": "resource-visualiser",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/resource-visualiser_universal.json"
    },
    "scrum-master": {
      "name": "scrum-master",
      "description": "Agent for management operations",
      "capabilities": [
        "planning",
        "coordination",
        "reporting"
      ],
      "config_path": "configs/scrum-master_universal.json"
    },
    "secrets-vault-manager-vault": {
      "name": "secrets-vault-manager-vault",
      "description": "Agent for security operations",
      "capabilities": [
        "security_analysis",
        "monitoring",
        "alerting"
      ],
      "config_path": "configs/secrets-vault-manager-vault_universal.json"
    },
    "senior-engineer": {
      "name": "senior-engineer",
      "description": "Agent for development operations",
      "capabilities": [
        "code_generation",
        "testing",
        "documentation"
      ],
      "config_path": "configs/senior-engineer_universal.json"
    },
    "system-knowledge-curator": {
      "name": "system-knowledge-curator",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/system-knowledge-curator_universal.json"
    },
    "system-performance-forecaster": {
      "name": "system-performance-forecaster",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/system-performance-forecaster_universal.json"
    },
    "system-validator": {
      "name": "system-validator",
      "description": "Agent for system operations",
      "capabilities": [
        "architecture",
        "validation",
        "optimization"
      ],
      "config_path": "configs/system-validator_universal.json"
    },
    "testing-qa-team-lead": {
      "name": "testing-qa-team-lead",
      "description": "Agent for management operations",
      "capabilities": [
        "planning",
        "coordination",
        "reporting"
      ],
      "config_path": "configs/testing-qa-team-lead_universal.json"
    }
  },
  "version": "1.0.0",
  "provider": "universal"
}