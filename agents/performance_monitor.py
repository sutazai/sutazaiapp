import psutilimport timeclass PerformanceMonitor:    def __init__(self):        self.metrics = ({            'cpu': 0),            'memory': 0,            'disk': 0,            'network': 0        }        self.thresholds = ({            'cpu': 90),            'memory': 85,            'disk': 95,            'network': 80        }    def monitor(self):        while True:            self._collect_metrics()            self._check_thresholds()            time.sleep(5)    def _collect_metrics(self):        self.metrics['cpu'] = psutil.cpu_percent()        self.metrics['memory'] = psutil.virtual_memory().percent        self.metrics['disk'] = psutil.disk_usage('/').percent        self.metrics['network'] = psutil.net_io_counters().bytes_sent    def _check_thresholds(self):        for metric, value in self.metrics.items():            if value > self.thresholds[metric]:                self._trigger_alert(metric, value)    def _trigger_alert(self, metric, value):        print(f"Alert: {metric} usage is {value}% which exceeds the threshold of {self.thresholds[metric]}%")    def _get_cpu_usage(self):        return psutil.cpu_percent()    def _get_memory_usage(self):        return psutil.virtual_memory().percent    def _get_response_time(self):        return time.time() - self.start_time 