from typing import Any, Dict, List, Optional, Tuple, Union, Protocol, overload, Iterator
from typing_extensions import Self

class Sized(Protocol):
    def __len__(self) -> int: ...

class Document(Sized):
    def __init__(self, filename: str) -> None: ...
    def __enter__(self) -> 'Document': ...
    def __exit__(self, *args: Any) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> 'Page': ...
    def __iter__(self) -> Iterator['Page']: ...
    def close(self) -> None: ...
    def get_page_count(self) -> int: ...
    def get_metadata(self) -> Dict[str, str]: ...
    def get_page(self, page_number: int) -> 'Page': ...
    def load_page(self, page_number: int) -> 'Page': ...
    
class Page:
    def get_text(self, opt: str = "") -> str: ...
    def get_textpage(self, opt: str = "") -> 'TextPage': ...

class TextPage:
    def extractText(self) -> str: ...

def open(filename: str) -> Document: ...

# Declare a ModuleNotFoundError class to represent missing module
class _FitzModule:
    """Type stub for fitz module when it's imported"""
    
    class Document:
        def __init__(self, file_path: str) -> None: ...
        def __enter__(self) -> "Document": ...
        def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
        def close(self) -> None: ...
        def get_page_count(self) -> int: ...
        def get_metadata(self) -> Dict[str, str]: ...
        def get_page(self, page_num: int) -> "Page": ...
        def load_page(self, page_num: int) -> "Page": ...
        def __len__(self) -> int: ...
        def __getitem__(self, index: int) -> "Page": ...
        
    class Page:
        def get_text(self) -> str: ...
        def get_textpage(self) -> "TextPage": ...
        
    class TextPage:
        def extractText(self) -> str: ...
        
    @staticmethod
    def open(file_path: str) -> "Document": ...

# Allow fitz to be either the module or None
fitz: Optional[_FitzModule] 