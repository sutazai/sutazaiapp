{
  "summary": {
    "total_scripts": 551,
    "total_lines": 227860,
    "categories": {
      "testing": 284,
      "utils": 363,
      "security": 154,
      "analysis": 47,
      "monitoring": 218,
      "deployment": 101,
      "maintenance": 141,
      "automation": 88,
      "misc": 50
    },
    "duplicates_found": {
      "exact_duplicate": 24,
      "functional_duplicate": 44
    },
    "consolidation_opportunities": 8
  },
  "category_breakdown": {
    "monitoring": {
      "count": 218,
      "total_lines": 102358,
      "scripts": [
        {
          "path": "ultra_migration_test_suite.py",
          "lines": 575
        },
        {
          "path": "ultra_deep_system_analysis.py",
          "lines": 433
        },
        {
          "path": "fusion/__init__.py",
          "lines": 262
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "schemas/base.py",
          "lines": 99
        },
        {
          "path": "schemas/queue_config.py",
          "lines": 179
        },
        {
          "path": "schemas/system_messages.py",
          "lines": 75
        },
        {
          "path": "schemas/__init__.py",
          "lines": 42
        },
        {
          "path": "self-healing/api_server.py",
          "lines": 660
        },
        {
          "path": "self-healing/hygiene_orchestrator.py",
          "lines": 1277
        },
        {
          "path": "self-healing/circuit_breaker.py",
          "lines": 426
        },
        {
          "path": "workflows/code_improvement_workflow.py",
          "lines": 645
        },
        {
          "path": "tests/execute_ultra_testing_strategy.py",
          "lines": 1005
        },
        {
          "path": "tests/test_live_monitoring_validation.py",
          "lines": 390
        },
        {
          "path": "tests/test_monitoring_system_comprehensive.py",
          "lines": 584
        },
        {
          "path": "tests/run_hardware_optimizer_tests.py",
          "lines": 301
        },
        {
          "path": "tests/frontend_final_validation.py",
          "lines": 165
        },
        {
          "path": "tests/test_performance.py",
          "lines": 790
        },
        {
          "path": "tests/performance_test_suite.py",
          "lines": 596
        },
        {
          "path": "tests/hardware_optimizer_load_runner.py",
          "lines": 336
        },
        {
          "path": "tests/test_enhanced_compliance_monitor.py",
          "lines": 917
        },
        {
          "path": "tests/dockerfile_performance_validator.py",
          "lines": 479
        },
        {
          "path": "tests/backend_hardware_integration_ultra_corrected_test.py",
          "lines": 961
        },
        {
          "path": "tests/monitoring_system_validation.py",
          "lines": 465
        },
        {
          "path": "tests/test_enhanced_detection.py",
          "lines": 168
        },
        {
          "path": "tests/test_task_assignment_coordinator.py",
          "lines": 562
        },
        {
          "path": "tests/test_monitor_status.py",
          "lines": 53
        },
        {
          "path": "tests/advanced_health_scenarios.py",
          "lines": 586
        },
        {
          "path": "tests/system_baseline_test.py",
          "lines": 506
        },
        {
          "path": "tests/test_agent_detection_validation.py",
          "lines": 554
        },
        {
          "path": "tests/run_monitoring_validation.py",
          "lines": 232
        },
        {
          "path": "tests/health_validation_comprehensive.py",
          "lines": 588
        },
        {
          "path": "tests/test_base_agent_v2.py",
          "lines": 633
        },
        {
          "path": "tests/backend_hardware_integration_ultra_test.py",
          "lines": 896
        },
        {
          "path": "tests/hardware_optimizer_ultra_test_suite.py",
          "lines": 1766
        },
        {
          "path": "monitoring/freeze_prevention.py",
          "lines": 885
        },
        {
          "path": "monitoring/system_performance_benchmark_suite.py",
          "lines": 1206
        },
        {
          "path": "monitoring/self_healing_monitor.py",
          "lines": 331
        },
        {
          "path": "monitoring/enhanced-hygiene-backend.py",
          "lines": 926
        },
        {
          "path": "monitoring/ollama_performance_monitor.py",
          "lines": 705
        },
        {
          "path": "monitoring/logging-infrastructure.py",
          "lines": 553
        },
        {
          "path": "monitoring/websocket-cleanup-patch.py",
          "lines": 133
        },
        {
          "path": "monitoring/sutazai_realtime_monitor.py",
          "lines": 563
        },
        {
          "path": "monitoring/continuous_performance_monitor.py",
          "lines": 1102
        },
        {
          "path": "monitoring/ollama_agent_monitor.py",
          "lines": 871
        },
        {
          "path": "monitoring/agent-orchestrator.py",
          "lines": 719
        },
        {
          "path": "monitoring/hygiene-monitor-backend.py",
          "lines": 863
        },
        {
          "path": "monitoring/performance_forecasting_models.py",
          "lines": 890
        },
        {
          "path": "monitoring/comprehensive_report_generator.py",
          "lines": 973
        },
        {
          "path": "monitoring/service_health_checker.py",
          "lines": 564
        },
        {
          "path": "monitoring/simple-hygiene-backend.py",
          "lines": 381
        },
        {
          "path": "monitoring/realtime_dashboard.py",
          "lines": 993
        },
        {
          "path": "monitoring/test_alerting_pipeline.py",
          "lines": 433
        },
        {
          "path": "fusion/visualization/fusion_visualizer.py",
          "lines": 1033
        },
        {
          "path": "fusion/pipeline/realtime_fusion_pipeline.py",
          "lines": 917
        },
        {
          "path": "scripts/pre-commit/validate_system_health.py",
          "lines": 166
        },
        {
          "path": "scripts/database/database_monitor.py",
          "lines": 453
        },
        {
          "path": "scripts/maintenance/fix-agent-dockerfiles.py",
          "lines": 106
        },
        {
          "path": "scripts/maintenance/optimize-agent-utilization.py",
          "lines": 779
        },
        {
          "path": "scripts/maintenance/consolidate_requirements.py",
          "lines": 161
        },
        {
          "path": "scripts/maintenance/hygiene-monitor.py",
          "lines": 279
        },
        {
          "path": "scripts/maintenance/fix-hygiene-memory-leak.py",
          "lines": 179
        },
        {
          "path": "scripts/maintenance/ultra_safe_cleanup.py",
          "lines": 378
        },
        {
          "path": "scripts/deployment/check_services_health.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/service-discovery-client.py",
          "lines": 274
        },
        {
          "path": "scripts/deployment/health_check_gateway.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/agent_stream_consumer.py",
          "lines": 108
        },
        {
          "path": "scripts/deployment/health_check_ollama.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/deployment-monitor.py",
          "lines": 489
        },
        {
          "path": "scripts/deployment/register-services.py",
          "lines": 206
        },
        {
          "path": "scripts/deployment/prepare-20-agents.py",
          "lines": 246
        },
        {
          "path": "scripts/deployment/ultimate-deployment-orchestrator.py",
          "lines": 1201
        },
        {
          "path": "scripts/deployment/health_check_dataservices.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/resource-enforcer.py",
          "lines": 346
        },
        {
          "path": "scripts/deployment/infrastructure_health_check.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/launch_local_agents.py",
          "lines": 142
        },
        {
          "path": "scripts/deployment/configure-kong.py",
          "lines": 376
        },
        {
          "path": "scripts/deployment/test-service-communication.py",
          "lines": 294
        },
        {
          "path": "scripts/deployment/activate_all_agents.py",
          "lines": 258
        },
        {
          "path": "scripts/deployment/health-check-server.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/ultimate-deployment-master.py",
          "lines": 1187
        },
        {
          "path": "scripts/deployment/health_check_monitoring.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/deployment/health_check_vectordb.py",
          "lines": 290
        },
        {
          "path": "scripts/lib/__init__.py",
          "lines": 22
        },
        {
          "path": "scripts/master/health-master.py",
          "lines": 715
        },
        {
          "path": "scripts/master/monitor-master.py",
          "lines": 42
        },
        {
          "path": "scripts/security/validate_cors_ultra.py",
          "lines": 281
        },
        {
          "path": "scripts/security/validate_cors_security.py",
          "lines": 362
        },
        {
          "path": "scripts/testing/smoke_test_jarvis.py",
          "lines": 75
        },
        {
          "path": "scripts/testing/test_hardware_agent_detection.py",
          "lines": 65
        },
        {
          "path": "scripts/testing/test_enhanced_monitor.py",
          "lines": 224
        },
        {
          "path": "scripts/testing/demo_enhanced_monitor.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/test_static_monitor.py",
          "lines": 660
        },
        {
          "path": "scripts/testing/test_static_monitor_simple.py",
          "lines": 507
        },
        {
          "path": "scripts/testing/ultra-consolidation-validator.py",
          "lines": 461
        },
        {
          "path": "scripts/testing/integration-test.py",
          "lines": 678
        },
        {
          "path": "scripts/testing/verify-hygiene-monitoring-system.py",
          "lines": 721
        },
        {
          "path": "scripts/testing/test_hardware_optimizer_detection.py",
          "lines": 135
        },
        {
          "path": "scripts/testing/test_agent_detection.py",
          "lines": 215
        },
        {
          "path": "scripts/monitoring/monitor-ai-services.py",
          "lines": 260
        },
        {
          "path": "scripts/monitoring/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/comprehensive_monitor_validation.py",
          "lines": 528
        },
        {
          "path": "scripts/monitoring/static_monitor.py",
          "lines": 2400
        },
        {
          "path": "scripts/monitoring/continuous-compliance-monitor.py",
          "lines": 430
        },
        {
          "path": "scripts/monitoring/simple_validation.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/system-resource-analyzer.py",
          "lines": 383
        },
        {
          "path": "scripts/monitoring/enhanced-compliance-monitor.py",
          "lines": 1958
        },
        {
          "path": "scripts/monitoring/validation_report.py",
          "lines": 263
        },
        {
          "path": "scripts/monitoring/profile-hygiene-memory.py",
          "lines": 299
        },
        {
          "path": "scripts/monitoring/identify_working_method.py",
          "lines": 238
        },
        {
          "path": "scripts/monitoring/check-python-headers.py",
          "lines": 94
        },
        {
          "path": "scripts/monitoring/permanent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/agent-activation-monitor.py",
          "lines": 527
        },
        {
          "path": "scripts/monitoring/distributed-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/compliance-monitor-core.py",
          "lines": 800
        },
        {
          "path": "scripts/monitoring/system-health-validator.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/performance-profiler-suite.py",
          "lines": 1274
        },
        {
          "path": "scripts/monitoring/validate-production-health.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/hardware-optimization-master.py",
          "lines": 931
        },
        {
          "path": "scripts/monitoring/database_health_check.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/monthly-cleanup.py",
          "lines": 286
        },
        {
          "path": "scripts/monitoring/ultra-dockerfile-migrator.py",
          "lines": 506
        },
        {
          "path": "scripts/monitoring/fix-agent-health-checks.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/performance-monitor.py",
          "lines": 71
        },
        {
          "path": "scripts/monitoring/performance-optimization.py",
          "lines": 357
        },
        {
          "path": "scripts/monitoring/debug_hardware_optimizer.py",
          "lines": 129
        },
        {
          "path": "scripts/monitoring/redis_performance_monitor.py",
          "lines": 575
        },
        {
          "path": "scripts/monitoring/infrastructure-monitor.py",
          "lines": 320
        },
        {
          "path": "scripts/monitoring/garbage-collection-monitor.py",
          "lines": 218
        },
        {
          "path": "scripts/monitoring/neo4j-performance-monitor.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/final_validation.py",
          "lines": 191
        },
        {
          "path": "scripts/monitoring/resource-pool-coordinator.py",
          "lines": 1015
        },
        {
          "path": "scripts/monitoring/multi-system-integration-framework.py",
          "lines": 2675
        },
        {
          "path": "scripts/monitoring/monitoring-master.py",
          "lines": 471
        },
        {
          "path": "scripts/monitoring/comprehensive-agent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/production-readiness-validator.py",
          "lines": 1240
        },
        {
          "path": "scripts/health/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/health/monitoring-health-aggregator.py",
          "lines": 563
        },
        {
          "path": "scripts/health/master-health-controller.py",
          "lines": 715
        },
        {
          "path": "scripts/health/pre-commit-health-validator.py",
          "lines": 166
        },
        {
          "path": "scripts/health/deployment-health-checker.py",
          "lines": 290
        },
        {
          "path": "scripts/utils/health_monitor.py",
          "lines": 715
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/distributed-task-queue.py",
          "lines": 519
        },
        {
          "path": "scripts/utils/dynamic-load-balancer.py",
          "lines": 1029
        },
        {
          "path": "scripts/utils/create-performance-baseline.py",
          "lines": 530
        },
        {
          "path": "scripts/utils/optimization-validator.py",
          "lines": 489
        },
        {
          "path": "scripts/utils/synthetic-load-test.py",
          "lines": 268
        },
        {
          "path": "scripts/utils/memory-pool-manager.py",
          "lines": 838
        },
        {
          "path": "scripts/utils/ollama_memory_optimizer.py",
          "lines": 272
        },
        {
          "path": "scripts/utils/compact_monitor.py",
          "lines": 241
        },
        {
          "path": "scripts/utils/distributed-autoscaler.py",
          "lines": 459
        },
        {
          "path": "scripts/utils/generate_architecture_diagram.py",
          "lines": 177
        },
        {
          "path": "scripts/utils/create-base-image-strategy.py",
          "lines": 605
        },
        {
          "path": "self-healing/scripts/predictive-monitoring.py",
          "lines": 586
        },
        {
          "path": "self-healing/scripts/automated-recovery.py",
          "lines": 551
        },
        {
          "path": "self-healing/circuit-breaker/service_monitor.py",
          "lines": 512
        },
        {
          "path": "self-healing/circuit-breaker/circuit_breaker.py",
          "lines": 550
        },
        {
          "path": "workflows/scripts/workflow_manager.py",
          "lines": 557
        },
        {
          "path": "deployment/monitoring/agent-monitor/monitor.py",
          "lines": 848
        },
        {
          "path": "deployment/autoscaling/swarm/swarm-autoscaler.py",
          "lines": 435
        },
        {
          "path": "docker/observability-monitoring-engineer/app.py",
          "lines": 52
        },
        {
          "path": "docker/agentzero/agentzero_service.py",
          "lines": 38
        },
        {
          "path": "docker/agentzero/app.py",
          "lines": 51
        },
        {
          "path": "docker/hygiene-backend/app.py",
          "lines": 52
        },
        {
          "path": "docker/python-agent-base/health_check.py",
          "lines": 11
        },
        {
          "path": "docker/agent-message-bus/app.py",
          "lines": 52
        },
        {
          "path": "docker/self-healing/app.py",
          "lines": 52
        },
        {
          "path": "docker/health-check/health_check.py",
          "lines": 171
        },
        {
          "path": "docker/context-framework/app.py",
          "lines": 16
        },
        {
          "path": "docker/context-engineering/health_check.py",
          "lines": 17
        },
        {
          "path": "docker/adapters/adapter.py",
          "lines": 261
        },
        {
          "path": "docker/knowledge-manager/knowledge_manager.py",
          "lines": 757
        },
        {
          "path": "docker/agentzero-coordinator/app.py",
          "lines": 504
        },
        {
          "path": "docker/faiss/faiss_service.py",
          "lines": 98
        },
        {
          "path": "docker/faiss/health_check.py",
          "lines": 31
        },
        {
          "path": "docker/ollama-monitor/monitor.py",
          "lines": 409
        },
        {
          "path": "docker/shellgpt/app.py",
          "lines": 16
        },
        {
          "path": "docker/health-monitor/main.py",
          "lines": 63
        },
        {
          "path": "docker/health-monitor/app.py",
          "lines": 74
        },
        {
          "path": "docker/enhanced-model-manager/model_manager.py",
          "lines": 164
        },
        {
          "path": "docker/ai-metrics-exporter/ai_metrics_exporter.py",
          "lines": 21
        },
        {
          "path": "docker/adapters/postgres/postgres_adapter.py",
          "lines": 341
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/hygiene/test_monitoring.py",
          "lines": 353
        },
        {
          "path": "tests/docker/test_containers.py",
          "lines": 911
        },
        {
          "path": "tests/load/load_test_runner.py",
          "lines": 587
        },
        {
          "path": "tests/load/locustfile.py",
          "lines": 513
        },
        {
          "path": "tests/security/test_security_comprehensive.py",
          "lines": 1085
        },
        {
          "path": "tests/integration/test_api_integration.py",
          "lines": 243
        },
        {
          "path": "tests/integration/test-monitoring-integration.py",
          "lines": 408
        },
        {
          "path": "tests/health/test_service_health.py",
          "lines": 726
        },
        {
          "path": "tests/health/__init__.py",
          "lines": 1
        },
        {
          "path": "models/optimization/performance_benchmark.py",
          "lines": 557
        },
        {
          "path": "models/optimization/optimization_orchestrator.py",
          "lines": 596
        },
        {
          "path": "security/threat-detection/advanced_detection.py",
          "lines": 965
        },
        {
          "path": "security/rasp/runtime_protection.py",
          "lines": 759
        },
        {
          "path": "chaos/scripts/monitoring-integration.py",
          "lines": 699
        },
        {
          "path": "chaos/scripts/resilience-tester.py",
          "lines": 708
        },
        {
          "path": "monitoring/security/intrusion_detection.py",
          "lines": 69
        },
        {
          "path": "monitoring/advanced/distributed_tracing.py",
          "lines": 365
        },
        {
          "path": "monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
          "lines": 476
        },
        {
          "path": "localagi/goals/autonomous_goal_achievement_system.py",
          "lines": 1156
        },
        {
          "path": "services/ai-metrics/main.py",
          "lines": 256
        },
        {
          "path": "services/resource-manager/main.py",
          "lines": 262
        },
        {
          "path": "services/automation/skyvern_service.py",
          "lines": 111
        },
        {
          "path": "services/automation/browser_use_service.py",
          "lines": 99
        },
        {
          "path": "services/codegen/gpt_engineer_service.py",
          "lines": 86
        },
        {
          "path": "services/codegen/aider_service.py",
          "lines": 79
        },
        {
          "path": "services/adapters/base_adapter.py",
          "lines": 136
        },
        {
          "path": "services/jarvis/main_simple.py",
          "lines": 322
        },
        {
          "path": "services/ml/pytorch_service.py",
          "lines": 56
        },
        {
          "path": "services/ml/tensorflow_service.py",
          "lines": 56
        },
        {
          "path": "services/ml/jax_service.py",
          "lines": 57
        },
        {
          "path": "services/faiss-vector/main.py",
          "lines": 352
        },
        {
          "path": "services/api-adapter/unified_ai_client.py",
          "lines": 405
        },
        {
          "path": "services/jarvis/tests/test_routes_minimal.py",
          "lines": 60
        }
      ]
    },
    "deployment": {
      "count": 101,
      "total_lines": 49285,
      "scripts": [
        {
          "path": "ultra_migration_test_suite.py",
          "lines": 575
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "schemas/agent_messages.py",
          "lines": 79
        },
        {
          "path": "self-healing/api_server.py",
          "lines": 660
        },
        {
          "path": "self-healing/hygiene_orchestrator.py",
          "lines": 1277
        },
        {
          "path": "workflows/deployment_automation.py",
          "lines": 378
        },
        {
          "path": "tests/test_deployed.py",
          "lines": 64
        },
        {
          "path": "tests/test_ai_agent_orchestrator.py",
          "lines": 468
        },
        {
          "path": "tests/master_dockerfile_validator.py",
          "lines": 513
        },
        {
          "path": "tests/backend_hardware_integration_ultra_test.py",
          "lines": 896
        },
        {
          "path": "security/security_orchestrator.py",
          "lines": 755
        },
        {
          "path": "monitoring/system_performance_benchmark_suite.py",
          "lines": 1206
        },
        {
          "path": "monitoring/sutazai_realtime_monitor.py",
          "lines": 563
        },
        {
          "path": "monitoring/agent-orchestrator.py",
          "lines": 719
        },
        {
          "path": "scripts/pre-commit/check-script-organization.py",
          "lines": 274
        },
        {
          "path": "scripts/pre-commit/check-agent-usage.py",
          "lines": 87
        },
        {
          "path": "scripts/pre-commit/check-deployment-scripts.py",
          "lines": 163
        },
        {
          "path": "scripts/maintenance/hygiene-system-orchestrator.py",
          "lines": 852
        },
        {
          "path": "scripts/maintenance/fix-agent-dockerfiles.py",
          "lines": 106
        },
        {
          "path": "scripts/maintenance/update-agent-auth.py",
          "lines": 377
        },
        {
          "path": "scripts/maintenance/update_approved_ports.py",
          "lines": 222
        },
        {
          "path": "scripts/maintenance/update-restart-policies.py",
          "lines": 101
        },
        {
          "path": "scripts/maintenance/fix-agent-startup.py",
          "lines": 136
        },
        {
          "path": "scripts/maintenance/advanced-rollback-system.py",
          "lines": 1524
        },
        {
          "path": "scripts/maintenance/garbage-collection-system.py",
          "lines": 806
        },
        {
          "path": "scripts/maintenance/optimize-ollama-performance.py",
          "lines": 501
        },
        {
          "path": "scripts/dockerfile-consolidation/execute_consolidation.py",
          "lines": 393
        },
        {
          "path": "scripts/deployment/check_services_health.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/optimize-load-balancing.py",
          "lines": 378
        },
        {
          "path": "scripts/deployment/configure-fault-tolerance.py",
          "lines": 493
        },
        {
          "path": "scripts/deployment/service-discovery-client.py",
          "lines": 274
        },
        {
          "path": "scripts/deployment/health_check_gateway.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/tail_results.py",
          "lines": 30
        },
        {
          "path": "scripts/deployment/migrate-agents-to-ollama.py",
          "lines": 371
        },
        {
          "path": "scripts/deployment/migrate_agent_ports.py",
          "lines": 359
        },
        {
          "path": "scripts/deployment/configure-rabbitmq.py",
          "lines": 375
        },
        {
          "path": "scripts/deployment/agent_stream_consumer.py",
          "lines": 108
        },
        {
          "path": "scripts/deployment/health_check_ollama.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/deployment-monitor.py",
          "lines": 489
        },
        {
          "path": "scripts/deployment/enqueue_task.py",
          "lines": 37
        },
        {
          "path": "scripts/deployment/register-services.py",
          "lines": 206
        },
        {
          "path": "scripts/deployment/prepare-20-agents.py",
          "lines": 246
        },
        {
          "path": "scripts/deployment/ultimate-deployment-orchestrator.py",
          "lines": 1201
        },
        {
          "path": "scripts/deployment/master-orchestrator.py",
          "lines": 504
        },
        {
          "path": "scripts/deployment/health_check_dataservices.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/resource-enforcer.py",
          "lines": 346
        },
        {
          "path": "scripts/deployment/direct_agent_activation.py",
          "lines": 353
        },
        {
          "path": "scripts/deployment/infrastructure_health_check.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/service-mesh-orchestrator.py",
          "lines": 446
        },
        {
          "path": "scripts/deployment/validate-service-mesh.py",
          "lines": 600
        },
        {
          "path": "scripts/deployment/launch_local_agents.py",
          "lines": 142
        },
        {
          "path": "scripts/deployment/configure-kong.py",
          "lines": 376
        },
        {
          "path": "scripts/deployment/fix-agent-deployment-issues.py",
          "lines": 166
        },
        {
          "path": "scripts/deployment/test-service-communication.py",
          "lines": 294
        },
        {
          "path": "scripts/deployment/activate_all_agents.py",
          "lines": 258
        },
        {
          "path": "scripts/deployment/health-check-server.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/startup_optimizer.py",
          "lines": 630
        },
        {
          "path": "scripts/deployment/ultimate-deployment-master.py",
          "lines": 1187
        },
        {
          "path": "scripts/deployment/health_check_monitoring.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/deployment/health_check_vectordb.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/ai-runtime-init.py",
          "lines": 319
        },
        {
          "path": "scripts/master/health-master.py",
          "lines": 715
        },
        {
          "path": "scripts/security/validate_cors_ultra.py",
          "lines": 281
        },
        {
          "path": "scripts/security/validate_cors_security.py",
          "lines": 362
        },
        {
          "path": "scripts/monitoring/agent-activation-monitor.py",
          "lines": 527
        },
        {
          "path": "scripts/monitoring/ultra-dockerfile-migrator.py",
          "lines": 506
        },
        {
          "path": "scripts/monitoring/debug_hardware_optimizer.py",
          "lines": 129
        },
        {
          "path": "scripts/monitoring/multi-system-integration-framework.py",
          "lines": 2675
        },
        {
          "path": "scripts/health/master-health-controller.py",
          "lines": 715
        },
        {
          "path": "scripts/health/deployment-health-checker.py",
          "lines": 290
        },
        {
          "path": "scripts/utils/health_monitor.py",
          "lines": 715
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/multi-environment-config-manager.py",
          "lines": 1368
        },
        {
          "path": "scripts/utils/generate_secure_secrets.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/analyze-agent-readiness.py",
          "lines": 141
        },
        {
          "path": "scripts/utils/startup_validator.py",
          "lines": 432
        },
        {
          "path": "scripts/utils/compact_monitor.py",
          "lines": 241
        },
        {
          "path": "scripts/utils/enforce_claude_md_simple.py",
          "lines": 397
        },
        {
          "path": "workflows/scripts/deploy_dify_workflows.py",
          "lines": 751
        },
        {
          "path": "deployment/monitoring/agent-monitor/monitor.py",
          "lines": 848
        },
        {
          "path": "deployment/autoscaling/swarm/swarm-autoscaler.py",
          "lines": 435
        },
        {
          "path": "docker/agentzero-coordinator/app.py",
          "lines": 504
        },
        {
          "path": "docker/multi-agent-coordinator/app.py",
          "lines": 386
        },
        {
          "path": "docker/edge-computing-optimizer/app.py",
          "lines": 213
        },
        {
          "path": "docker/ai-agent-orchestrator/app.py",
          "lines": 525
        },
        {
          "path": "tests/hygiene/test_performance.py",
          "lines": 579
        },
        {
          "path": "tests/hygiene/test-hygiene-system.py",
          "lines": 530
        },
        {
          "path": "tests/hygiene/test_orchestrator.py",
          "lines": 263
        },
        {
          "path": "tests/load/locustfile.py",
          "lines": 513
        },
        {
          "path": "tests/security/test-authentication.py",
          "lines": 565
        },
        {
          "path": "tests/security/test_security_comprehensive.py",
          "lines": 1085
        },
        {
          "path": "tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
          "lines": 3
        },
        {
          "path": "models/optimization/automated_model_selection.py",
          "lines": 1211
        },
        {
          "path": "models/optimization/optimization_orchestrator.py",
          "lines": 596
        },
        {
          "path": "models/optimization/quantization.py",
          "lines": 945
        },
        {
          "path": "models/optimization/knowledge_distillation.py",
          "lines": 806
        },
        {
          "path": "models/optimization/model_cache_manager.py",
          "lines": 628
        },
        {
          "path": "services/chainlit/chainlit_app.py",
          "lines": 90
        },
        {
          "path": "services/adapters/workflow_tools/dify_adapter.py",
          "lines": 366
        },
        {
          "path": "services/jarvis/core/orchestrator.py",
          "lines": 323
        }
      ]
    },
    "testing": {
      "count": 284,
      "total_lines": 114205,
      "scripts": [
        {
          "path": "test_ollama.py",
          "lines": 78
        },
        {
          "path": "hardware_api_validation_test.py",
          "lines": 421
        },
        {
          "path": "ultra_migration_test_suite.py",
          "lines": 575
        },
        {
          "path": "scripts/apply_security_fixes.py",
          "lines": 321
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "scripts/update_dockerfiles.py",
          "lines": 114
        },
        {
          "path": "workflows/deployment_automation.py",
          "lines": 378
        },
        {
          "path": "workflows/practical_examples.py",
          "lines": 357
        },
        {
          "path": "workflows/test_code_improvement.py",
          "lines": 226
        },
        {
          "path": "tests/test_integration.py",
          "lines": 697
        },
        {
          "path": "tests/execute_ultra_testing_strategy.py",
          "lines": 1005
        },
        {
          "path": "tests/test_failure_scenarios.py",
          "lines": 712
        },
        {
          "path": "tests/test_live_monitoring_validation.py",
          "lines": 390
        },
        {
          "path": "tests/test_deployed.py",
          "lines": 64
        },
        {
          "path": "tests/dockerfile_security_validator.py",
          "lines": 653
        },
        {
          "path": "tests/test_monitoring_system_comprehensive.py",
          "lines": 584
        },
        {
          "path": "tests/test_ollama_integration.py",
          "lines": 441
        },
        {
          "path": "tests/run_hardware_optimizer_tests.py",
          "lines": 301
        },
        {
          "path": "tests/specialized_tests.py",
          "lines": 449
        },
        {
          "path": "tests/frontend_final_validation.py",
          "lines": 165
        },
        {
          "path": "tests/test_connection_pool.py",
          "lines": 688
        },
        {
          "path": "tests/test_coordinator_integration.py",
          "lines": 474
        },
        {
          "path": "tests/test_external_integration.py",
          "lines": 145
        },
        {
          "path": "tests/test_architecture_enhancements.py",
          "lines": 384
        },
        {
          "path": "tests/test_performance.py",
          "lines": 790
        },
        {
          "path": "tests/performance_test_suite.py",
          "lines": 596
        },
        {
          "path": "tests/hardware_optimizer_load_runner.py",
          "lines": 336
        },
        {
          "path": "tests/test_jwt_security_fix.py",
          "lines": 268
        },
        {
          "path": "tests/uuid_migration_corrected_test.py",
          "lines": 444
        },
        {
          "path": "tests/test_ai_agent_orchestrator.py",
          "lines": 468
        },
        {
          "path": "tests/ultra_comprehensive_system_test_suite.py",
          "lines": 620
        },
        {
          "path": "tests/test_enhanced_compliance_monitor.py",
          "lines": 917
        },
        {
          "path": "tests/dockerfile_performance_validator.py",
          "lines": 479
        },
        {
          "path": "tests/dockerfile_consolidation_test_suite.py",
          "lines": 579
        },
        {
          "path": "tests/demo_load_test.py",
          "lines": 260
        },
        {
          "path": "tests/frontend_performance_ultra_test.py",
          "lines": 454
        },
        {
          "path": "tests/simplified_load_test.py",
          "lines": 791
        },
        {
          "path": "tests/test_messaging_integration.py",
          "lines": 278
        },
        {
          "path": "tests/test_smoke.py",
          "lines": 112
        },
        {
          "path": "tests/master_dockerfile_validator.py",
          "lines": 513
        },
        {
          "path": "tests/test_jwt_vulnerability_fix.py",
          "lines": 170
        },
        {
          "path": "tests/backend_hardware_integration_ultra_corrected_test.py",
          "lines": 961
        },
        {
          "path": "tests/qa_comprehensive_test_suite.py",
          "lines": 892
        },
        {
          "path": "tests/conftest.py",
          "lines": 372
        },
        {
          "path": "tests/monitoring_system_validation.py",
          "lines": 465
        },
        {
          "path": "tests/test_optional_features.py",
          "lines": 181
        },
        {
          "path": "tests/test_enhanced_detection.py",
          "lines": 168
        },
        {
          "path": "tests/test_task_assignment_coordinator.py",
          "lines": 562
        },
        {
          "path": "tests/security_test_suite.py",
          "lines": 672
        },
        {
          "path": "tests/test_monitor_status.py",
          "lines": 53
        },
        {
          "path": "tests/advanced_health_scenarios.py",
          "lines": 586
        },
        {
          "path": "tests/corrected_security_test.py",
          "lines": 138
        },
        {
          "path": "tests/test_regression.py",
          "lines": 489
        },
        {
          "path": "tests/system_baseline_test.py",
          "lines": 506
        },
        {
          "path": "tests/test_agent_detection_validation.py",
          "lines": 554
        },
        {
          "path": "tests/comprehensive_test_report_final.py",
          "lines": 545
        },
        {
          "path": "tests/run_monitoring_validation.py",
          "lines": 232
        },
        {
          "path": "tests/test_feature_flags.py",
          "lines": 240
        },
        {
          "path": "tests/health_validation_comprehensive.py",
          "lines": 588
        },
        {
          "path": "tests/test_base_agent_v2.py",
          "lines": 633
        },
        {
          "path": "tests/ai_powered_test_suite.py",
          "lines": 1423
        },
        {
          "path": "tests/backend_hardware_integration_ultra_test.py",
          "lines": 896
        },
        {
          "path": "tests/uuid_migration_test.py",
          "lines": 389
        },
        {
          "path": "tests/test_live_agent.py",
          "lines": 184
        },
        {
          "path": "tests/test_resource_arbitration_agent.py",
          "lines": 581
        },
        {
          "path": "tests/hardware_optimizer_ultra_test_suite.py",
          "lines": 1766
        },
        {
          "path": "tests/frontend_stress_ultra_validation.py",
          "lines": 440
        },
        {
          "path": "system-validator/system_validator.py",
          "lines": 598
        },
        {
          "path": "load-testing/generate-agent-tests.py",
          "lines": 528
        },
        {
          "path": "load-testing/simplified-load-test.py",
          "lines": 543
        },
        {
          "path": "load-testing/production-load-test.py",
          "lines": 777
        },
        {
          "path": "monitoring/self_healing_monitor.py",
          "lines": 331
        },
        {
          "path": "monitoring/websocket-cleanup-patch.py",
          "lines": 133
        },
        {
          "path": "monitoring/sutazai_realtime_monitor.py",
          "lines": 563
        },
        {
          "path": "monitoring/service_health_checker.py",
          "lines": 564
        },
        {
          "path": "monitoring/simple-hygiene-backend.py",
          "lines": 381
        },
        {
          "path": "monitoring/test_alerting_pipeline.py",
          "lines": 433
        },
        {
          "path": "disaster-recovery/validate-disaster-recovery.py",
          "lines": 734
        },
        {
          "path": "disaster-recovery/disaster-recovery-test-suite.py",
          "lines": 1348
        },
        {
          "path": "scripts/pre-commit/check-script-organization.py",
          "lines": 274
        },
        {
          "path": "scripts/pre-commit/validate_system_health.py",
          "lines": 166
        },
        {
          "path": "scripts/pre-commit/check-changelog-updated.py",
          "lines": 102
        },
        {
          "path": "scripts/pre-commit/check-agent-usage.py",
          "lines": 87
        },
        {
          "path": "scripts/pre-commit/check-directory-duplication.py",
          "lines": 168
        },
        {
          "path": "scripts/pre-commit/check-docker-structure.py",
          "lines": 261
        },
        {
          "path": "scripts/pre-commit/quick-system-check.py",
          "lines": 220
        },
        {
          "path": "scripts/pre-commit/check-llm-usage.py",
          "lines": 85
        },
        {
          "path": "scripts/pre-commit/check-garbage-files.py",
          "lines": 221
        },
        {
          "path": "scripts/pre-commit/check-safe-deletion.py",
          "lines": 265
        },
        {
          "path": "scripts/pre-commit/check-doc-duplication.py",
          "lines": 62
        },
        {
          "path": "scripts/pre-commit/check-python-docs.py",
          "lines": 246
        },
        {
          "path": "scripts/pre-commit/check-deployment-scripts.py",
          "lines": 163
        },
        {
          "path": "scripts/pre-commit/check-conceptual-elements.py",
          "lines": 101
        },
        {
          "path": "scripts/pre-commit/check-breaking-changes.py",
          "lines": 263
        },
        {
          "path": "scripts/pre-commit/check-doc-structure.py",
          "lines": 212
        },
        {
          "path": "scripts/pre-commit/check-script-duplication.py",
          "lines": 191
        },
        {
          "path": "scripts/maintenance/cleanup-old-requirements.py",
          "lines": 169
        },
        {
          "path": "scripts/maintenance/fix-agent-dockerfiles.py",
          "lines": 106
        },
        {
          "path": "scripts/maintenance/demo-hygiene-tests.py",
          "lines": 185
        },
        {
          "path": "scripts/maintenance/update-github-workflows-compatibility.py",
          "lines": 100
        },
        {
          "path": "scripts/maintenance/cleanup_changelogs.py",
          "lines": 95
        },
        {
          "path": "scripts/maintenance/bottleneck-eliminator.py",
          "lines": 1058
        },
        {
          "path": "scripts/maintenance/fix_container_security.py",
          "lines": 157
        },
        {
          "path": "scripts/maintenance/optimize_ollama.py",
          "lines": 251
        },
        {
          "path": "scripts/maintenance/run_hygiene_suite.py",
          "lines": 102
        },
        {
          "path": "scripts/maintenance/fix-agent-app-files.py",
          "lines": 86
        },
        {
          "path": "scripts/maintenance/fix-hygiene-memory-leak.py",
          "lines": 179
        },
        {
          "path": "scripts/maintenance/advanced-rollback-system.py",
          "lines": 1524
        },
        {
          "path": "scripts/maintenance/ultra_safe_cleanup.py",
          "lines": 378
        },
        {
          "path": "scripts/deployment/check_services_health.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/service-discovery-client.py",
          "lines": 274
        },
        {
          "path": "scripts/deployment/health_check_gateway.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/migrate-agents-to-ollama.py",
          "lines": 371
        },
        {
          "path": "scripts/deployment/migrate_agent_ports.py",
          "lines": 359
        },
        {
          "path": "scripts/deployment/health_check_ollama.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/deployment-monitor.py",
          "lines": 489
        },
        {
          "path": "scripts/deployment/enqueue_task.py",
          "lines": 37
        },
        {
          "path": "scripts/deployment/register-services.py",
          "lines": 206
        },
        {
          "path": "scripts/deployment/prepare-20-agents.py",
          "lines": 246
        },
        {
          "path": "scripts/deployment/ultimate-deployment-orchestrator.py",
          "lines": 1201
        },
        {
          "path": "scripts/deployment/health_check_dataservices.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/infrastructure_health_check.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/validate-service-mesh.py",
          "lines": 600
        },
        {
          "path": "scripts/deployment/launch_local_agents.py",
          "lines": 142
        },
        {
          "path": "scripts/deployment/configure-kong.py",
          "lines": 376
        },
        {
          "path": "scripts/deployment/fix-agent-deployment-issues.py",
          "lines": 166
        },
        {
          "path": "scripts/deployment/test-service-communication.py",
          "lines": 294
        },
        {
          "path": "scripts/deployment/activate_all_agents.py",
          "lines": 258
        },
        {
          "path": "scripts/deployment/health-check-server.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/ultimate-deployment-master.py",
          "lines": 1187
        },
        {
          "path": "scripts/deployment/health_check_monitoring.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/deployment/health_check_vectordb.py",
          "lines": 290
        },
        {
          "path": "scripts/lib/script_optimization_template.py",
          "lines": 353
        },
        {
          "path": "scripts/lib/security_utils.py",
          "lines": 377
        },
        {
          "path": "scripts/lib/__init__.py",
          "lines": 22
        },
        {
          "path": "scripts/master/test-master.py",
          "lines": 329
        },
        {
          "path": "scripts/master/health-master.py",
          "lines": 715
        },
        {
          "path": "scripts/master/monitor-master.py",
          "lines": 42
        },
        {
          "path": "scripts/security/validate_cors_ultra.py",
          "lines": 281
        },
        {
          "path": "scripts/security/validate_cors_simple.py",
          "lines": 222
        },
        {
          "path": "scripts/security/validate_cors_security.py",
          "lines": 362
        },
        {
          "path": "scripts/security/ultra_security_validation.py",
          "lines": 294
        },
        {
          "path": "scripts/testing/validate-compliance.py",
          "lines": 233
        },
        {
          "path": "scripts/testing/smoke_test_jarvis.py",
          "lines": 75
        },
        {
          "path": "scripts/testing/run_integration.py",
          "lines": 140
        },
        {
          "path": "scripts/testing/test_hardware_agent_detection.py",
          "lines": 65
        },
        {
          "path": "scripts/testing/test_enhanced_monitor.py",
          "lines": 224
        },
        {
          "path": "scripts/testing/test_gpu_detection.py",
          "lines": 172
        },
        {
          "path": "scripts/testing/demo_enhanced_monitor.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/validate_ports.py",
          "lines": 649
        },
        {
          "path": "scripts/testing/test_static_monitor.py",
          "lines": 660
        },
        {
          "path": "scripts/testing/test_static_monitor_simple.py",
          "lines": 507
        },
        {
          "path": "scripts/testing/validate_agents.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/ultra-consolidation-validator.py",
          "lines": 461
        },
        {
          "path": "scripts/testing/integration-test.py",
          "lines": 678
        },
        {
          "path": "scripts/testing/verify-hygiene-monitoring-system.py",
          "lines": 721
        },
        {
          "path": "scripts/testing/verify_claude_rules.py",
          "lines": 57
        },
        {
          "path": "scripts/testing/test_runner.py",
          "lines": 634
        },
        {
          "path": "scripts/testing/test_hardware_optimizer_detection.py",
          "lines": 135
        },
        {
          "path": "scripts/testing/deduplication-validator.py",
          "lines": 625
        },
        {
          "path": "scripts/testing/test_agent_detection.py",
          "lines": 215
        },
        {
          "path": "scripts/testing/validate-container-infrastructure.py",
          "lines": 569
        },
        {
          "path": "scripts/testing/validate-complete-system.py",
          "lines": 1354
        },
        {
          "path": "scripts/testing/validate_security_remediation.py",
          "lines": 280
        },
        {
          "path": "scripts/testing/validate_security_improvements.py",
          "lines": 259
        },
        {
          "path": "scripts/monitoring/comprehensive_monitor_validation.py",
          "lines": 528
        },
        {
          "path": "scripts/monitoring/simple_validation.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/system-resource-analyzer.py",
          "lines": 383
        },
        {
          "path": "scripts/monitoring/enhanced-compliance-monitor.py",
          "lines": 1958
        },
        {
          "path": "scripts/monitoring/validation_report.py",
          "lines": 263
        },
        {
          "path": "scripts/monitoring/identify_working_method.py",
          "lines": 238
        },
        {
          "path": "scripts/monitoring/check-python-headers.py",
          "lines": 94
        },
        {
          "path": "scripts/monitoring/system-health-validator.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/validate-production-health.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/database_health_check.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/ultra-dockerfile-migrator.py",
          "lines": 506
        },
        {
          "path": "scripts/monitoring/fix-agent-health-checks.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/debug_hardware_optimizer.py",
          "lines": 129
        },
        {
          "path": "scripts/monitoring/garbage-collection-monitor.py",
          "lines": 218
        },
        {
          "path": "scripts/monitoring/neo4j-performance-monitor.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/final_validation.py",
          "lines": 191
        },
        {
          "path": "scripts/monitoring/production-readiness-validator.py",
          "lines": 1240
        },
        {
          "path": "scripts/health/monitoring-health-aggregator.py",
          "lines": 563
        },
        {
          "path": "scripts/health/master-health-controller.py",
          "lines": 715
        },
        {
          "path": "scripts/health/pre-commit-health-validator.py",
          "lines": 166
        },
        {
          "path": "scripts/health/deployment-health-checker.py",
          "lines": 290
        },
        {
          "path": "scripts/utils/export_openapi.py",
          "lines": 62
        },
        {
          "path": "scripts/utils/coverage_reporter.py",
          "lines": 496
        },
        {
          "path": "scripts/utils/large_file_handler_demo.py",
          "lines": 102
        },
        {
          "path": "scripts/utils/health_monitor.py",
          "lines": 715
        },
        {
          "path": "scripts/utils/register_with_consul.py",
          "lines": 193
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/multi-environment-config-manager.py",
          "lines": 1368
        },
        {
          "path": "scripts/utils/analyze-agent-readiness.py",
          "lines": 141
        },
        {
          "path": "scripts/utils/optimization-validator.py",
          "lines": 489
        },
        {
          "path": "scripts/utils/synthetic-load-test.py",
          "lines": 268
        },
        {
          "path": "scripts/utils/check_naming.py",
          "lines": 116
        },
        {
          "path": "scripts/utils/startup_validator.py",
          "lines": 432
        },
        {
          "path": "scripts/utils/otp_override.py",
          "lines": 189
        },
        {
          "path": "scripts/utils/quick-container-analysis.py",
          "lines": 159
        },
        {
          "path": "scripts/utils/check_secrets.py",
          "lines": 104
        },
        {
          "path": "scripts/utils/ai-performance-validator.py",
          "lines": 538
        },
        {
          "path": "scripts/utils/final-system-validation.py",
          "lines": 1510
        },
        {
          "path": "scripts/utils/ensure_changelogs.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/enforce_claude_md_simple.py",
          "lines": 397
        },
        {
          "path": "scripts/utils/enforce_claude_md_rules.py",
          "lines": 438
        },
        {
          "path": "scripts/utils/check_requirements.py",
          "lines": 143
        },
        {
          "path": "scripts/utils/check_banned_keywords.py",
          "lines": 92
        },
        {
          "path": "scripts/utils/file_utils.py",
          "lines": 23
        },
        {
          "path": "scripts/utils/docs_fix_all_issues.py",
          "lines": 416
        },
        {
          "path": "self-healing/scripts/predictive-monitoring.py",
          "lines": 586
        },
        {
          "path": "self-healing/scripts/automated-recovery.py",
          "lines": 551
        },
        {
          "path": "self-healing/scripts/graceful-degradation.py",
          "lines": 443
        },
        {
          "path": "self-healing/circuit-breaker/circuit_breaker.py",
          "lines": 550
        },
        {
          "path": "deployment/autoscaling/swarm/swarm-autoscaler.py",
          "lines": 435
        },
        {
          "path": "docker/observability-monitoring-engineer/app.py",
          "lines": 52
        },
        {
          "path": "docker/agentzero/app.py",
          "lines": 51
        },
        {
          "path": "docker/hygiene-backend/app.py",
          "lines": 52
        },
        {
          "path": "docker/python-agent-base/health_check.py",
          "lines": 11
        },
        {
          "path": "docker/agent-message-bus/app.py",
          "lines": 52
        },
        {
          "path": "docker/self-healing/app.py",
          "lines": 52
        },
        {
          "path": "docker/health-check/health_check.py",
          "lines": 171
        },
        {
          "path": "docker/finrobot/finrobot_service.py",
          "lines": 443
        },
        {
          "path": "docker/pentestgpt/main.py",
          "lines": 63
        },
        {
          "path": "docker/hygiene-scanner/hygiene_scanner.py",
          "lines": 424
        },
        {
          "path": "docker/test-build/app.py",
          "lines": 1
        },
        {
          "path": "docker/context-engineering/health_check.py",
          "lines": 17
        },
        {
          "path": "docker/hygiene-validator/rule_validator.py",
          "lines": 236
        },
        {
          "path": "docker/adapters/adapter.py",
          "lines": 261
        },
        {
          "path": "docker/faiss/health_check.py",
          "lines": 31
        },
        {
          "path": "docker/ollama-monitor/monitor.py",
          "lines": 409
        },
        {
          "path": "docker/autogen/autogen_service.py",
          "lines": 67
        },
        {
          "path": "auth/jwt-service/main.py",
          "lines": 548
        },
        {
          "path": "tests/hygiene/test_failure_scenarios.py",
          "lines": 719
        },
        {
          "path": "tests/hygiene/test_git_hooks.py",
          "lines": 317
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/hygiene/test_performance.py",
          "lines": 579
        },
        {
          "path": "tests/hygiene/test-hygiene-system.py",
          "lines": 530
        },
        {
          "path": "tests/hygiene/test_orchestrator.py",
          "lines": 263
        },
        {
          "path": "tests/hygiene/test_fixtures.py",
          "lines": 497
        },
        {
          "path": "tests/hygiene/__init__.py",
          "lines": 7
        },
        {
          "path": "tests/hygiene/test_coordinator.py",
          "lines": 347
        },
        {
          "path": "tests/hygiene/test_monitoring.py",
          "lines": 353
        },
        {
          "path": "tests/docker/__init__.py",
          "lines": 1
        },
        {
          "path": "tests/docker/test_containers.py",
          "lines": 911
        },
        {
          "path": "tests/unit/test_security.py",
          "lines": 194
        },
        {
          "path": "tests/unit/test_brain.py",
          "lines": 128
        },
        {
          "path": "tests/load/test-ollama-high-concurrency.py",
          "lines": 617
        },
        {
          "path": "tests/load/load_test_runner.py",
          "lines": 587
        },
        {
          "path": "tests/load/__init__.py",
          "lines": 1
        },
        {
          "path": "tests/load/locustfile.py",
          "lines": 513
        },
        {
          "path": "tests/security/test_xss_protection.py",
          "lines": 382
        },
        {
          "path": "tests/security/test-authentication.py",
          "lines": 565
        },
        {
          "path": "tests/security/test_security_comprehensive.py",
          "lines": 1085
        },
        {
          "path": "tests/security/test_security_hardening.py",
          "lines": 349
        },
        {
          "path": "tests/security/__init__.py",
          "lines": 1
        },
        {
          "path": "tests/performance/load_test.py",
          "lines": 482
        },
        {
          "path": "tests/integration/test-dashboard-fix.py",
          "lines": 457
        },
        {
          "path": "tests/integration/test-neo4j-integration.py",
          "lines": 136
        },
        {
          "path": "tests/integration/test_api_integration.py",
          "lines": 243
        },
        {
          "path": "tests/integration/test-monitoring-integration.py",
          "lines": 408
        },
        {
          "path": "tests/integration/test-ollama-integration.py",
          "lines": 343
        },
        {
          "path": "tests/health/test_service_health.py",
          "lines": 726
        },
        {
          "path": "tests/health/__init__.py",
          "lines": 1
        },
        {
          "path": "tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
          "lines": 3
        },
        {
          "path": "models/optimization/performance_benchmark.py",
          "lines": 557
        },
        {
          "path": "models/optimization/ab_testing.py",
          "lines": 941
        },
        {
          "path": "security/threat-detection/advanced_detection.py",
          "lines": 965
        },
        {
          "path": "security/compliance/compliance_automation.py",
          "lines": 1267
        },
        {
          "path": "chaos/scripts/resilience-tester.py",
          "lines": 708
        },
        {
          "path": "chaos/scripts/chaos-engine.py",
          "lines": 810
        },
        {
          "path": "monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
          "lines": 476
        },
        {
          "path": "services/resource-manager/main.py",
          "lines": 262
        },
        {
          "path": "services/adapters/base_adapter.py",
          "lines": 136
        },
        {
          "path": "services/jarvis/main_simple.py",
          "lines": 322
        },
        {
          "path": "services/jarvis/main.py",
          "lines": 439
        },
        {
          "path": "services/faiss-vector/main.py",
          "lines": 352
        },
        {
          "path": "services/adapters/agent_systems/autogpt_adapter.py",
          "lines": 374
        },
        {
          "path": "services/adapters/agent_systems/letta_adapter.py",
          "lines": 327
        },
        {
          "path": "services/adapters/workflow_tools/langflow_adapter.py",
          "lines": 347
        },
        {
          "path": "services/adapters/workflow_tools/dify_adapter.py",
          "lines": 366
        },
        {
          "path": "services/jarvis/core/task_planner.py",
          "lines": 458
        },
        {
          "path": "services/jarvis/tests/test_routes_minimal.py",
          "lines": 60
        }
      ]
    },
    "maintenance": {
      "count": 141,
      "total_lines": 60236,
      "scripts": [
        {
          "path": "ultra_migration_test_suite.py",
          "lines": 575
        },
        {
          "path": "scripts/apply_security_fixes.py",
          "lines": 321
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "scripts/update_dockerfiles.py",
          "lines": 114
        },
        {
          "path": "schemas/queue_config.py",
          "lines": 179
        },
        {
          "path": "schemas/__init__.py",
          "lines": 42
        },
        {
          "path": "self-healing/api_server.py",
          "lines": 660
        },
        {
          "path": "self-healing/hygiene_orchestrator.py",
          "lines": 1277
        },
        {
          "path": "workflows/code_improvement_workflow.py",
          "lines": 645
        },
        {
          "path": "tests/test_integration.py",
          "lines": 697
        },
        {
          "path": "tests/test_failure_scenarios.py",
          "lines": 712
        },
        {
          "path": "tests/dockerfile_security_validator.py",
          "lines": 653
        },
        {
          "path": "tests/test_connection_pool.py",
          "lines": 688
        },
        {
          "path": "tests/test_jwt_security_fix.py",
          "lines": 268
        },
        {
          "path": "tests/uuid_migration_corrected_test.py",
          "lines": 444
        },
        {
          "path": "tests/test_ai_agent_orchestrator.py",
          "lines": 468
        },
        {
          "path": "tests/dockerfile_performance_validator.py",
          "lines": 479
        },
        {
          "path": "tests/test_jwt_vulnerability_fix.py",
          "lines": 170
        },
        {
          "path": "tests/qa_comprehensive_test_suite.py",
          "lines": 892
        },
        {
          "path": "tests/conftest.py",
          "lines": 372
        },
        {
          "path": "tests/test_task_assignment_coordinator.py",
          "lines": 562
        },
        {
          "path": "tests/system_baseline_test.py",
          "lines": 506
        },
        {
          "path": "tests/test_base_agent_v2.py",
          "lines": 633
        },
        {
          "path": "tests/uuid_migration_test.py",
          "lines": 389
        },
        {
          "path": "tests/test_resource_arbitration_agent.py",
          "lines": 581
        },
        {
          "path": "monitoring/enhanced-hygiene-backend.py",
          "lines": 926
        },
        {
          "path": "monitoring/logging-infrastructure.py",
          "lines": 553
        },
        {
          "path": "monitoring/websocket-cleanup-patch.py",
          "lines": 133
        },
        {
          "path": "monitoring/continuous_performance_monitor.py",
          "lines": 1102
        },
        {
          "path": "monitoring/agent-orchestrator.py",
          "lines": 719
        },
        {
          "path": "monitoring/hygiene-monitor-backend.py",
          "lines": 863
        },
        {
          "path": "monitoring/simple-hygiene-backend.py",
          "lines": 381
        },
        {
          "path": "services/external-service-registry.py",
          "lines": 299
        },
        {
          "path": "fusion/visualization/fusion_visualizer.py",
          "lines": 1033
        },
        {
          "path": "scripts/pre-commit/check-changelog-updated.py",
          "lines": 102
        },
        {
          "path": "scripts/pre-commit/check-docker-structure.py",
          "lines": 261
        },
        {
          "path": "scripts/pre-commit/check-garbage-files.py",
          "lines": 221
        },
        {
          "path": "scripts/pre-commit/check-doc-duplication.py",
          "lines": 62
        },
        {
          "path": "scripts/maintenance/hygiene-system-orchestrator.py",
          "lines": 852
        },
        {
          "path": "scripts/maintenance/complete-cleanup-and-prepare.py",
          "lines": 1093
        },
        {
          "path": "scripts/maintenance/cleanup-old-requirements.py",
          "lines": 169
        },
        {
          "path": "scripts/maintenance/fix-agent-dockerfiles.py",
          "lines": 106
        },
        {
          "path": "scripts/maintenance/update-agent-auth.py",
          "lines": 377
        },
        {
          "path": "scripts/maintenance/update_approved_ports.py",
          "lines": 222
        },
        {
          "path": "scripts/maintenance/demo-hygiene-tests.py",
          "lines": 185
        },
        {
          "path": "scripts/maintenance/safe-requirements-cleanup.py",
          "lines": 609
        },
        {
          "path": "scripts/maintenance/update-github-workflows-compatibility.py",
          "lines": 100
        },
        {
          "path": "scripts/maintenance/cleanup_changelogs.py",
          "lines": 95
        },
        {
          "path": "scripts/maintenance/bottleneck-eliminator.py",
          "lines": 1058
        },
        {
          "path": "scripts/maintenance/fix_container_security.py",
          "lines": 157
        },
        {
          "path": "scripts/maintenance/update-restart-policies.py",
          "lines": 101
        },
        {
          "path": "scripts/maintenance/rule13_garbage_collector.py",
          "lines": 399
        },
        {
          "path": "scripts/maintenance/fix-memory-limits.py",
          "lines": 326
        },
        {
          "path": "scripts/maintenance/run_hygiene_suite.py",
          "lines": 102
        },
        {
          "path": "scripts/maintenance/fix-agent-startup.py",
          "lines": 136
        },
        {
          "path": "scripts/maintenance/hygiene-enforcement-coordinator.py",
          "lines": 579
        },
        {
          "path": "scripts/maintenance/discovery.py",
          "lines": 188
        },
        {
          "path": "scripts/maintenance/fix-agent-app-files.py",
          "lines": 86
        },
        {
          "path": "scripts/maintenance/hygiene-monitor.py",
          "lines": 279
        },
        {
          "path": "scripts/maintenance/fix-hygiene-memory-leak.py",
          "lines": 179
        },
        {
          "path": "scripts/maintenance/advanced-rollback-system.py",
          "lines": 1524
        },
        {
          "path": "scripts/maintenance/garbage-collection-system.py",
          "lines": 806
        },
        {
          "path": "scripts/maintenance/ultra_safe_cleanup.py",
          "lines": 378
        },
        {
          "path": "scripts/maintenance/fix-critical-agents.py",
          "lines": 250
        },
        {
          "path": "scripts/deployment/prepare-20-agents.py",
          "lines": 246
        },
        {
          "path": "scripts/deployment/master-orchestrator.py",
          "lines": 504
        },
        {
          "path": "scripts/deployment/fix-agent-deployment-issues.py",
          "lines": 166
        },
        {
          "path": "scripts/deployment/ultimate-deployment-master.py",
          "lines": 1187
        },
        {
          "path": "scripts/lib/security_utils.py",
          "lines": 377
        },
        {
          "path": "scripts/security/fix_cors_wildcards.py",
          "lines": 360
        },
        {
          "path": "scripts/testing/run_integration.py",
          "lines": 140
        },
        {
          "path": "scripts/testing/test_enhanced_monitor.py",
          "lines": 224
        },
        {
          "path": "scripts/testing/validate_agents.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/integration-test.py",
          "lines": 678
        },
        {
          "path": "scripts/testing/verify-hygiene-monitoring-system.py",
          "lines": 721
        },
        {
          "path": "scripts/testing/validate-container-infrastructure.py",
          "lines": 569
        },
        {
          "path": "scripts/testing/validate-complete-system.py",
          "lines": 1354
        },
        {
          "path": "scripts/testing/validate_security_remediation.py",
          "lines": 280
        },
        {
          "path": "scripts/monitoring/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/static_monitor.py",
          "lines": 2400
        },
        {
          "path": "scripts/monitoring/continuous-compliance-monitor.py",
          "lines": 430
        },
        {
          "path": "scripts/monitoring/simple_validation.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/validation_report.py",
          "lines": 263
        },
        {
          "path": "scripts/monitoring/profile-hygiene-memory.py",
          "lines": 299
        },
        {
          "path": "scripts/monitoring/permanent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/distributed-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/compliance-monitor-core.py",
          "lines": 800
        },
        {
          "path": "scripts/monitoring/system-health-validator.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/validate-production-health.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/database_health_check.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/monthly-cleanup.py",
          "lines": 286
        },
        {
          "path": "scripts/monitoring/fix-agent-health-checks.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/performance-optimization.py",
          "lines": 357
        },
        {
          "path": "scripts/monitoring/garbage-collection-monitor.py",
          "lines": 218
        },
        {
          "path": "scripts/monitoring/final_validation.py",
          "lines": 191
        },
        {
          "path": "scripts/monitoring/comprehensive-agent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/health/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/health/monitoring-health-aggregator.py",
          "lines": 563
        },
        {
          "path": "scripts/utils/generate_docs_inventory.py",
          "lines": 74
        },
        {
          "path": "scripts/utils/memory_cleanup_service.py",
          "lines": 319
        },
        {
          "path": "scripts/utils/coord_bus.py",
          "lines": 149
        },
        {
          "path": "scripts/utils/register_with_consul.py",
          "lines": 193
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/remove_litellm_from_registry.py",
          "lines": 22
        },
        {
          "path": "scripts/utils/pin_all_dependencies.py",
          "lines": 246
        },
        {
          "path": "scripts/utils/check_naming.py",
          "lines": 116
        },
        {
          "path": "scripts/utils/emergency-compliance-fix.py",
          "lines": 239
        },
        {
          "path": "scripts/utils/check_secrets.py",
          "lines": 104
        },
        {
          "path": "scripts/utils/compact_monitor.py",
          "lines": 241
        },
        {
          "path": "scripts/utils/enforce_claude_md_simple.py",
          "lines": 397
        },
        {
          "path": "scripts/utils/standardize-requirements.py",
          "lines": 105
        },
        {
          "path": "scripts/utils/enforce_claude_md_rules.py",
          "lines": 438
        },
        {
          "path": "scripts/utils/add_claude_md_directive.py",
          "lines": 105
        },
        {
          "path": "scripts/utils/check_requirements.py",
          "lines": 143
        },
        {
          "path": "scripts/utils/requirements_analyzer.py",
          "lines": 380
        },
        {
          "path": "scripts/utils/file_utils.py",
          "lines": 23
        },
        {
          "path": "scripts/utils/docs_fix_all_issues.py",
          "lines": 416
        },
        {
          "path": "scripts/utils/static_discovery.py",
          "lines": 231
        },
        {
          "path": "scripts/models/ollama/update_agent_configs_to_gpt-oss.py",
          "lines": 58
        },
        {
          "path": "self-healing/graceful-degradation/feature_flags.py",
          "lines": 589
        },
        {
          "path": "docker/hygiene-backend/app.py",
          "lines": 52
        },
        {
          "path": "docker/hygiene-scanner/hygiene_scanner.py",
          "lines": 424
        },
        {
          "path": "docker/hygiene-validator/rule_validator.py",
          "lines": 236
        },
        {
          "path": "tests/hygiene/test_failure_scenarios.py",
          "lines": 719
        },
        {
          "path": "tests/hygiene/test_git_hooks.py",
          "lines": 317
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/hygiene/test_performance.py",
          "lines": 579
        },
        {
          "path": "tests/hygiene/test-hygiene-system.py",
          "lines": 530
        },
        {
          "path": "tests/hygiene/test_orchestrator.py",
          "lines": 263
        },
        {
          "path": "tests/hygiene/test_fixtures.py",
          "lines": 497
        },
        {
          "path": "tests/hygiene/__init__.py",
          "lines": 7
        },
        {
          "path": "tests/hygiene/test_coordinator.py",
          "lines": 347
        },
        {
          "path": "tests/hygiene/test_monitoring.py",
          "lines": 353
        },
        {
          "path": "tests/docker/test_containers.py",
          "lines": 911
        },
        {
          "path": "tests/security/test_security_hardening.py",
          "lines": 349
        },
        {
          "path": "tests/integration/test-dashboard-fix.py",
          "lines": 457
        },
        {
          "path": "tests/integration/test_api_integration.py",
          "lines": 243
        },
        {
          "path": "tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
          "lines": 3
        },
        {
          "path": "localagi/goals/autonomous_goal_achievement_system.py",
          "lines": 1156
        },
        {
          "path": "services/chainlit/chainlit_app.py",
          "lines": 90
        },
        {
          "path": "services/jarvis/tests/test_routes_minimal.py",
          "lines": 60
        }
      ]
    },
    "utils": {
      "count": 363,
      "total_lines": 173072,
      "scripts": [
        {
          "path": "script_consolidation_analysis.py",
          "lines": 200
        },
        {
          "path": "ULTRA_DUPLICATE_ANALYSIS.py",
          "lines": 338
        },
        {
          "path": "ultra_deep_system_analysis.py",
          "lines": 433
        },
        {
          "path": "fusion/__init__.py",
          "lines": 262
        },
        {
          "path": "scripts/apply_security_fixes.py",
          "lines": 321
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "scripts/update_dockerfiles.py",
          "lines": 114
        },
        {
          "path": "self-healing/hygiene_orchestrator.py",
          "lines": 1277
        },
        {
          "path": "workflows/code_improvement_workflow.py",
          "lines": 645
        },
        {
          "path": "workflows/simple_code_review.py",
          "lines": 182
        },
        {
          "path": "workflows/demo_workflow.py",
          "lines": 160
        },
        {
          "path": "workflows/security_scan_workflow.py",
          "lines": 469
        },
        {
          "path": "tests/execute_ultra_testing_strategy.py",
          "lines": 1005
        },
        {
          "path": "tests/test_deployed.py",
          "lines": 64
        },
        {
          "path": "tests/dockerfile_security_validator.py",
          "lines": 653
        },
        {
          "path": "tests/test_monitoring_system_comprehensive.py",
          "lines": 584
        },
        {
          "path": "tests/test_ollama_integration.py",
          "lines": 441
        },
        {
          "path": "tests/run_hardware_optimizer_tests.py",
          "lines": 301
        },
        {
          "path": "tests/specialized_tests.py",
          "lines": 449
        },
        {
          "path": "tests/test_performance.py",
          "lines": 790
        },
        {
          "path": "tests/performance_test_suite.py",
          "lines": 596
        },
        {
          "path": "tests/hardware_optimizer_load_runner.py",
          "lines": 336
        },
        {
          "path": "tests/test_enhanced_compliance_monitor.py",
          "lines": 917
        },
        {
          "path": "tests/dockerfile_performance_validator.py",
          "lines": 479
        },
        {
          "path": "tests/dockerfile_consolidation_test_suite.py",
          "lines": 579
        },
        {
          "path": "tests/demo_load_test.py",
          "lines": 260
        },
        {
          "path": "tests/frontend_performance_ultra_test.py",
          "lines": 454
        },
        {
          "path": "tests/simplified_load_test.py",
          "lines": 791
        },
        {
          "path": "tests/master_dockerfile_validator.py",
          "lines": 513
        },
        {
          "path": "tests/qa_comprehensive_test_suite.py",
          "lines": 892
        },
        {
          "path": "tests/conftest.py",
          "lines": 372
        },
        {
          "path": "tests/security_test_suite.py",
          "lines": 672
        },
        {
          "path": "tests/advanced_health_scenarios.py",
          "lines": 586
        },
        {
          "path": "tests/system_baseline_test.py",
          "lines": 506
        },
        {
          "path": "tests/comprehensive_test_report_final.py",
          "lines": 545
        },
        {
          "path": "tests/run_monitoring_validation.py",
          "lines": 232
        },
        {
          "path": "tests/health_validation_comprehensive.py",
          "lines": 588
        },
        {
          "path": "tests/ai_powered_test_suite.py",
          "lines": 1423
        },
        {
          "path": "tests/hardware_optimizer_ultra_test_suite.py",
          "lines": 1766
        },
        {
          "path": "tests/frontend_stress_ultra_validation.py",
          "lines": 440
        },
        {
          "path": "system-validator/system_validator.py",
          "lines": 598
        },
        {
          "path": "load-testing/generate-agent-tests.py",
          "lines": 528
        },
        {
          "path": "load-testing/production-load-test.py",
          "lines": 777
        },
        {
          "path": "monitoring/freeze_prevention.py",
          "lines": 885
        },
        {
          "path": "monitoring/system_performance_benchmark_suite.py",
          "lines": 1206
        },
        {
          "path": "monitoring/self_healing_monitor.py",
          "lines": 331
        },
        {
          "path": "monitoring/enhanced-hygiene-backend.py",
          "lines": 926
        },
        {
          "path": "monitoring/ollama_performance_monitor.py",
          "lines": 705
        },
        {
          "path": "monitoring/logging-infrastructure.py",
          "lines": 553
        },
        {
          "path": "monitoring/sutazai_realtime_monitor.py",
          "lines": 563
        },
        {
          "path": "monitoring/continuous_performance_monitor.py",
          "lines": 1102
        },
        {
          "path": "monitoring/ollama_agent_monitor.py",
          "lines": 871
        },
        {
          "path": "monitoring/agent-orchestrator.py",
          "lines": 719
        },
        {
          "path": "monitoring/hygiene-monitor-backend.py",
          "lines": 863
        },
        {
          "path": "monitoring/comprehensive_report_generator.py",
          "lines": 973
        },
        {
          "path": "monitoring/service_health_checker.py",
          "lines": 564
        },
        {
          "path": "monitoring/simple-hygiene-backend.py",
          "lines": 381
        },
        {
          "path": "monitoring/realtime_dashboard.py",
          "lines": 993
        },
        {
          "path": "disaster-recovery/emergency-shutdown-coordinator.py",
          "lines": 1089
        },
        {
          "path": "disaster-recovery/validate-disaster-recovery.py",
          "lines": 734
        },
        {
          "path": "disaster-recovery/backup-coordinator.py",
          "lines": 984
        },
        {
          "path": "disaster-recovery/point-in-time-recovery.py",
          "lines": 1048
        },
        {
          "path": "disaster-recovery/disaster-recovery-test-suite.py",
          "lines": 1348
        },
        {
          "path": "services/ollama_service.py",
          "lines": 478
        },
        {
          "path": "fusion/core/unified_representation.py",
          "lines": 669
        },
        {
          "path": "fusion/core/multi_modal_fusion_coordinator.py",
          "lines": 984
        },
        {
          "path": "fusion/core/cross_modal_learning.py",
          "lines": 903
        },
        {
          "path": "fusion/visualization/fusion_visualizer.py",
          "lines": 1033
        },
        {
          "path": "scripts/pre-commit/check-script-organization.py",
          "lines": 274
        },
        {
          "path": "scripts/pre-commit/validate_system_health.py",
          "lines": 166
        },
        {
          "path": "scripts/pre-commit/check-changelog-updated.py",
          "lines": 102
        },
        {
          "path": "scripts/pre-commit/check-agent-usage.py",
          "lines": 87
        },
        {
          "path": "scripts/pre-commit/check-directory-duplication.py",
          "lines": 168
        },
        {
          "path": "scripts/pre-commit/check-docker-structure.py",
          "lines": 261
        },
        {
          "path": "scripts/pre-commit/quick-system-check.py",
          "lines": 220
        },
        {
          "path": "scripts/pre-commit/check-llm-usage.py",
          "lines": 85
        },
        {
          "path": "scripts/pre-commit/check-garbage-files.py",
          "lines": 221
        },
        {
          "path": "scripts/pre-commit/check-safe-deletion.py",
          "lines": 265
        },
        {
          "path": "scripts/pre-commit/check-doc-duplication.py",
          "lines": 62
        },
        {
          "path": "scripts/pre-commit/check-python-docs.py",
          "lines": 246
        },
        {
          "path": "scripts/pre-commit/check-deployment-scripts.py",
          "lines": 163
        },
        {
          "path": "scripts/pre-commit/check-conceptual-elements.py",
          "lines": 101
        },
        {
          "path": "scripts/pre-commit/check-breaking-changes.py",
          "lines": 263
        },
        {
          "path": "scripts/pre-commit/check-doc-structure.py",
          "lines": 212
        },
        {
          "path": "scripts/pre-commit/check-script-duplication.py",
          "lines": 191
        },
        {
          "path": "scripts/database/database_monitor.py",
          "lines": 453
        },
        {
          "path": "scripts/maintenance/hygiene-system-orchestrator.py",
          "lines": 852
        },
        {
          "path": "scripts/maintenance/complete-cleanup-and-prepare.py",
          "lines": 1093
        },
        {
          "path": "scripts/maintenance/cleanup-old-requirements.py",
          "lines": 169
        },
        {
          "path": "scripts/maintenance/remove_fantasy_elements.py",
          "lines": 149
        },
        {
          "path": "scripts/maintenance/fix-agent-dockerfiles.py",
          "lines": 106
        },
        {
          "path": "scripts/maintenance/update-agent-auth.py",
          "lines": 377
        },
        {
          "path": "scripts/maintenance/update_approved_ports.py",
          "lines": 222
        },
        {
          "path": "scripts/maintenance/demo-hygiene-tests.py",
          "lines": 185
        },
        {
          "path": "scripts/maintenance/ultra-script-consolidation.py",
          "lines": 679
        },
        {
          "path": "scripts/maintenance/safe-requirements-cleanup.py",
          "lines": 609
        },
        {
          "path": "scripts/maintenance/update-github-workflows-compatibility.py",
          "lines": 100
        },
        {
          "path": "scripts/maintenance/cleanup_changelogs.py",
          "lines": 95
        },
        {
          "path": "scripts/maintenance/post_status.py",
          "lines": 40
        },
        {
          "path": "scripts/maintenance/optimize-agent-utilization.py",
          "lines": 779
        },
        {
          "path": "scripts/maintenance/bottleneck-eliminator.py",
          "lines": 1058
        },
        {
          "path": "scripts/maintenance/fix_container_security.py",
          "lines": 157
        },
        {
          "path": "scripts/maintenance/rule13_garbage_collector.py",
          "lines": 399
        },
        {
          "path": "scripts/maintenance/optimize_ollama.py",
          "lines": 251
        },
        {
          "path": "scripts/maintenance/fix-memory-limits.py",
          "lines": 326
        },
        {
          "path": "scripts/maintenance/consolidate_requirements.py",
          "lines": 161
        },
        {
          "path": "scripts/maintenance/run_hygiene_suite.py",
          "lines": 102
        },
        {
          "path": "scripts/maintenance/fix-agent-startup.py",
          "lines": 136
        },
        {
          "path": "scripts/maintenance/hygiene-enforcement-coordinator.py",
          "lines": 579
        },
        {
          "path": "scripts/maintenance/discovery.py",
          "lines": 188
        },
        {
          "path": "scripts/maintenance/fix-agent-app-files.py",
          "lines": 86
        },
        {
          "path": "scripts/maintenance/hygiene-monitor.py",
          "lines": 279
        },
        {
          "path": "scripts/maintenance/fix-hygiene-memory-leak.py",
          "lines": 179
        },
        {
          "path": "scripts/maintenance/advanced-rollback-system.py",
          "lines": 1524
        },
        {
          "path": "scripts/maintenance/garbage-collection-system.py",
          "lines": 806
        },
        {
          "path": "scripts/maintenance/optimize-ollama-performance.py",
          "lines": 501
        },
        {
          "path": "scripts/maintenance/ultra_safe_cleanup.py",
          "lines": 378
        },
        {
          "path": "scripts/maintenance/fix-critical-agents.py",
          "lines": 250
        },
        {
          "path": "scripts/maintenance/remove_hardcoded_secrets.py",
          "lines": 106
        },
        {
          "path": "scripts/dockerfile-consolidation/execute_consolidation.py",
          "lines": 393
        },
        {
          "path": "scripts/deployment/check_services_health.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/optimize-load-balancing.py",
          "lines": 378
        },
        {
          "path": "scripts/deployment/configure-fault-tolerance.py",
          "lines": 493
        },
        {
          "path": "scripts/deployment/service-discovery-client.py",
          "lines": 274
        },
        {
          "path": "scripts/deployment/health_check_gateway.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/migrate-agents-to-ollama.py",
          "lines": 371
        },
        {
          "path": "scripts/deployment/migrate_agent_ports.py",
          "lines": 359
        },
        {
          "path": "scripts/deployment/configure-rabbitmq.py",
          "lines": 375
        },
        {
          "path": "scripts/deployment/agent_stream_consumer.py",
          "lines": 108
        },
        {
          "path": "scripts/deployment/health_check_ollama.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/deployment-monitor.py",
          "lines": 489
        },
        {
          "path": "scripts/deployment/register-services.py",
          "lines": 206
        },
        {
          "path": "scripts/deployment/prepare-20-agents.py",
          "lines": 246
        },
        {
          "path": "scripts/deployment/master-orchestrator.py",
          "lines": 504
        },
        {
          "path": "scripts/deployment/health_check_dataservices.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/direct_agent_activation.py",
          "lines": 353
        },
        {
          "path": "scripts/deployment/infrastructure_health_check.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/service-mesh-orchestrator.py",
          "lines": 446
        },
        {
          "path": "scripts/deployment/configure-kong.py",
          "lines": 376
        },
        {
          "path": "scripts/deployment/fix-agent-deployment-issues.py",
          "lines": 166
        },
        {
          "path": "scripts/deployment/test-service-communication.py",
          "lines": 294
        },
        {
          "path": "scripts/deployment/activate_all_agents.py",
          "lines": 258
        },
        {
          "path": "scripts/deployment/health-check-server.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/startup_optimizer.py",
          "lines": 630
        },
        {
          "path": "scripts/deployment/health_check_monitoring.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/health_check_vectordb.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/ai-runtime-init.py",
          "lines": 319
        },
        {
          "path": "scripts/lib/script_optimization_template.py",
          "lines": 353
        },
        {
          "path": "scripts/lib/security_utils.py",
          "lines": 377
        },
        {
          "path": "scripts/lib/__init__.py",
          "lines": 22
        },
        {
          "path": "scripts/lib/logging_utils.py",
          "lines": 212
        },
        {
          "path": "scripts/master/test-master.py",
          "lines": 329
        },
        {
          "path": "scripts/onboarding/generate_kickoff_deck.py",
          "lines": 83
        },
        {
          "path": "scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
          "lines": 301
        },
        {
          "path": "scripts/security/validate_cors_ultra.py",
          "lines": 281
        },
        {
          "path": "scripts/security/validate_cors_simple.py",
          "lines": 222
        },
        {
          "path": "scripts/security/fix_cors_wildcards.py",
          "lines": 360
        },
        {
          "path": "scripts/security/ultra_security_validation.py",
          "lines": 294
        },
        {
          "path": "scripts/testing/validate-compliance.py",
          "lines": 233
        },
        {
          "path": "scripts/testing/smoke_test_jarvis.py",
          "lines": 75
        },
        {
          "path": "scripts/testing/run_integration.py",
          "lines": 140
        },
        {
          "path": "scripts/testing/test_enhanced_monitor.py",
          "lines": 224
        },
        {
          "path": "scripts/testing/test_gpu_detection.py",
          "lines": 172
        },
        {
          "path": "scripts/testing/demo_enhanced_monitor.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/validate_ports.py",
          "lines": 649
        },
        {
          "path": "scripts/testing/test_static_monitor.py",
          "lines": 660
        },
        {
          "path": "scripts/testing/test_static_monitor_simple.py",
          "lines": 507
        },
        {
          "path": "scripts/testing/validate_agents.py",
          "lines": 128
        },
        {
          "path": "scripts/testing/ultra-consolidation-validator.py",
          "lines": 461
        },
        {
          "path": "scripts/testing/integration-test.py",
          "lines": 678
        },
        {
          "path": "scripts/testing/verify-hygiene-monitoring-system.py",
          "lines": 721
        },
        {
          "path": "scripts/testing/verify_claude_rules.py",
          "lines": 57
        },
        {
          "path": "scripts/testing/test_runner.py",
          "lines": 634
        },
        {
          "path": "scripts/testing/test_hardware_optimizer_detection.py",
          "lines": 135
        },
        {
          "path": "scripts/testing/deduplication-validator.py",
          "lines": 625
        },
        {
          "path": "scripts/testing/test_agent_detection.py",
          "lines": 215
        },
        {
          "path": "scripts/testing/validate-container-infrastructure.py",
          "lines": 569
        },
        {
          "path": "scripts/testing/validate-complete-system.py",
          "lines": 1354
        },
        {
          "path": "scripts/testing/validate_security_remediation.py",
          "lines": 280
        },
        {
          "path": "scripts/testing/validate_security_improvements.py",
          "lines": 259
        },
        {
          "path": "scripts/monitoring/monitor-ai-services.py",
          "lines": 260
        },
        {
          "path": "scripts/monitoring/comprehensive_monitor_validation.py",
          "lines": 528
        },
        {
          "path": "scripts/monitoring/static_monitor.py",
          "lines": 2400
        },
        {
          "path": "scripts/monitoring/continuous-compliance-monitor.py",
          "lines": 430
        },
        {
          "path": "scripts/monitoring/simple_validation.py",
          "lines": 127
        },
        {
          "path": "scripts/monitoring/system-resource-analyzer.py",
          "lines": 383
        },
        {
          "path": "scripts/monitoring/enhanced-compliance-monitor.py",
          "lines": 1958
        },
        {
          "path": "scripts/monitoring/validation_report.py",
          "lines": 263
        },
        {
          "path": "scripts/monitoring/profile-hygiene-memory.py",
          "lines": 299
        },
        {
          "path": "scripts/monitoring/identify_working_method.py",
          "lines": 238
        },
        {
          "path": "scripts/monitoring/check-python-headers.py",
          "lines": 94
        },
        {
          "path": "scripts/monitoring/agent-activation-monitor.py",
          "lines": 527
        },
        {
          "path": "scripts/monitoring/compliance-monitor-core.py",
          "lines": 800
        },
        {
          "path": "scripts/monitoring/system-health-validator.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/performance-profiler-suite.py",
          "lines": 1274
        },
        {
          "path": "scripts/monitoring/validate-production-health.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/hardware-optimization-master.py",
          "lines": 931
        },
        {
          "path": "scripts/monitoring/database_health_check.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/monthly-cleanup.py",
          "lines": 286
        },
        {
          "path": "scripts/monitoring/ultra-dockerfile-migrator.py",
          "lines": 506
        },
        {
          "path": "scripts/monitoring/performance-monitor.py",
          "lines": 71
        },
        {
          "path": "scripts/monitoring/performance-optimization.py",
          "lines": 357
        },
        {
          "path": "scripts/monitoring/debug_hardware_optimizer.py",
          "lines": 129
        },
        {
          "path": "scripts/monitoring/redis_performance_monitor.py",
          "lines": 575
        },
        {
          "path": "scripts/monitoring/infrastructure-monitor.py",
          "lines": 320
        },
        {
          "path": "scripts/monitoring/garbage-collection-monitor.py",
          "lines": 218
        },
        {
          "path": "scripts/monitoring/final_validation.py",
          "lines": 191
        },
        {
          "path": "scripts/monitoring/resource-pool-coordinator.py",
          "lines": 1015
        },
        {
          "path": "scripts/monitoring/multi-system-integration-framework.py",
          "lines": 2675
        },
        {
          "path": "scripts/monitoring/monitoring-master.py",
          "lines": 471
        },
        {
          "path": "scripts/monitoring/production-readiness-validator.py",
          "lines": 1240
        },
        {
          "path": "scripts/health/monitoring-health-aggregator.py",
          "lines": 563
        },
        {
          "path": "scripts/health/pre-commit-health-validator.py",
          "lines": 166
        },
        {
          "path": "scripts/health/deployment-health-checker.py",
          "lines": 290
        },
        {
          "path": "scripts/utils/export_openapi.py",
          "lines": 62
        },
        {
          "path": "scripts/utils/generate_docs_inventory.py",
          "lines": 74
        },
        {
          "path": "scripts/utils/coverage_reporter.py",
          "lines": 496
        },
        {
          "path": "scripts/utils/memory_cleanup_service.py",
          "lines": 319
        },
        {
          "path": "scripts/utils/coord_bus.py",
          "lines": 149
        },
        {
          "path": "scripts/utils/large_file_handler_demo.py",
          "lines": 102
        },
        {
          "path": "scripts/utils/health_monitor.py",
          "lines": 715
        },
        {
          "path": "scripts/utils/register_with_consul.py",
          "lines": 193
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/multi-environment-config-manager.py",
          "lines": 1368
        },
        {
          "path": "scripts/utils/distributed-task-queue.py",
          "lines": 519
        },
        {
          "path": "scripts/utils/dynamic-load-balancer.py",
          "lines": 1029
        },
        {
          "path": "scripts/utils/generate_secure_secrets.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/create-performance-baseline.py",
          "lines": 530
        },
        {
          "path": "scripts/utils/analyze-agent-readiness.py",
          "lines": 141
        },
        {
          "path": "scripts/utils/extract_port_mappings.py",
          "lines": 127
        },
        {
          "path": "scripts/utils/remove_litellm_from_registry.py",
          "lines": 22
        },
        {
          "path": "scripts/utils/create-container-requirements-map.py",
          "lines": 335
        },
        {
          "path": "scripts/utils/summarize_openapi.py",
          "lines": 55
        },
        {
          "path": "scripts/utils/analyze-docker-requirements.py",
          "lines": 254
        },
        {
          "path": "scripts/utils/optimization-validator.py",
          "lines": 489
        },
        {
          "path": "scripts/utils/database_connection_pool_setup.py",
          "lines": 457
        },
        {
          "path": "scripts/utils/synthetic-load-test.py",
          "lines": 268
        },
        {
          "path": "scripts/utils/pin_all_dependencies.py",
          "lines": 246
        },
        {
          "path": "scripts/utils/check_naming.py",
          "lines": 116
        },
        {
          "path": "scripts/utils/database_operations.py",
          "lines": 411
        },
        {
          "path": "scripts/utils/intelligent-cache-system.py",
          "lines": 952
        },
        {
          "path": "scripts/utils/startup_validator.py",
          "lines": 432
        },
        {
          "path": "scripts/utils/memory-pool-manager.py",
          "lines": 838
        },
        {
          "path": "scripts/utils/ollama_memory_optimizer.py",
          "lines": 272
        },
        {
          "path": "scripts/utils/scan_localhost.py",
          "lines": 103
        },
        {
          "path": "scripts/utils/external-service-discovery.py",
          "lines": 332
        },
        {
          "path": "scripts/utils/emergency-compliance-fix.py",
          "lines": 239
        },
        {
          "path": "scripts/utils/otp_override.py",
          "lines": 189
        },
        {
          "path": "scripts/utils/quick-container-analysis.py",
          "lines": 159
        },
        {
          "path": "scripts/utils/check_secrets.py",
          "lines": 104
        },
        {
          "path": "scripts/utils/optimize_transformers.py",
          "lines": 992
        },
        {
          "path": "scripts/utils/ai-performance-validator.py",
          "lines": 538
        },
        {
          "path": "scripts/utils/final-system-validation.py",
          "lines": 1510
        },
        {
          "path": "scripts/utils/ensure_changelogs.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/audit_docs.py",
          "lines": 76
        },
        {
          "path": "scripts/utils/compact_monitor.py",
          "lines": 241
        },
        {
          "path": "scripts/utils/enforce_claude_md_simple.py",
          "lines": 397
        },
        {
          "path": "scripts/utils/standardize-requirements.py",
          "lines": 105
        },
        {
          "path": "scripts/utils/enforce_claude_md_rules.py",
          "lines": 438
        },
        {
          "path": "scripts/utils/distributed-autoscaler.py",
          "lines": 459
        },
        {
          "path": "scripts/utils/add_claude_md_directive.py",
          "lines": 105
        },
        {
          "path": "scripts/utils/check_requirements.py",
          "lines": 143
        },
        {
          "path": "scripts/utils/requirements_analyzer.py",
          "lines": 380
        },
        {
          "path": "scripts/utils/check_banned_keywords.py",
          "lines": 92
        },
        {
          "path": "scripts/utils/generate_architecture_diagram.py",
          "lines": 177
        },
        {
          "path": "scripts/utils/file_utils.py",
          "lines": 23
        },
        {
          "path": "scripts/utils/logging_utils.py",
          "lines": 29
        },
        {
          "path": "scripts/utils/dependency_analyzer.py",
          "lines": 424
        },
        {
          "path": "scripts/utils/docs_fix_all_issues.py",
          "lines": 416
        },
        {
          "path": "scripts/utils/static_discovery.py",
          "lines": 231
        },
        {
          "path": "scripts/utils/create-base-image-strategy.py",
          "lines": 605
        },
        {
          "path": "self-healing/scripts/circuit-breaker.py",
          "lines": 409
        },
        {
          "path": "self-healing/scripts/predictive-monitoring.py",
          "lines": 586
        },
        {
          "path": "self-healing/scripts/automated-recovery.py",
          "lines": 551
        },
        {
          "path": "self-healing/scripts/graceful-degradation.py",
          "lines": 443
        },
        {
          "path": "self-healing/circuit-breaker/circuit_breaker.py",
          "lines": 550
        },
        {
          "path": "self-healing/graceful-degradation/fallback_handlers.py",
          "lines": 634
        },
        {
          "path": "self-healing/graceful-degradation/feature_flags.py",
          "lines": 589
        },
        {
          "path": "workflows/scripts/deploy_dify_workflows.py",
          "lines": 751
        },
        {
          "path": "deployment/monitoring/agent-monitor/monitor.py",
          "lines": 848
        },
        {
          "path": "docker/data-analysis-engineer/app.py",
          "lines": 219
        },
        {
          "path": "docker/awesome-code-ai/awesome_code_service.py",
          "lines": 199
        },
        {
          "path": "docker/awesome-code-ai/code_ai_manager.py",
          "lines": 312
        },
        {
          "path": "docker/resource-arbitration-agent/app.py",
          "lines": 460
        },
        {
          "path": "docker/finrobot/finrobot_service.py",
          "lines": 443
        },
        {
          "path": "docker/hygiene-scanner/hygiene_scanner.py",
          "lines": 424
        },
        {
          "path": "docker/hygiene-validator/rule_validator.py",
          "lines": 236
        },
        {
          "path": "docker/langchain-agents/langchain_agent_server.py",
          "lines": 277
        },
        {
          "path": "docker/adapters/adapter.py",
          "lines": 261
        },
        {
          "path": "docker/knowledge-manager/knowledge_manager.py",
          "lines": 757
        },
        {
          "path": "docker/document-knowledge-manager/app.py",
          "lines": 220
        },
        {
          "path": "docker/task-assignment-coordinator/app.py",
          "lines": 612
        },
        {
          "path": "docker/deep-local-brain-builder/app.py",
          "lines": 219
        },
        {
          "path": "docker/agentzero-coordinator/app.py",
          "lines": 504
        },
        {
          "path": "docker/documind/documind_service.py",
          "lines": 324
        },
        {
          "path": "docker/faiss/health_check.py",
          "lines": 31
        },
        {
          "path": "docker/ollama-monitor/monitor.py",
          "lines": 409
        },
        {
          "path": "docker/multi-agent-coordinator/app.py",
          "lines": 386
        },
        {
          "path": "docker/edge-computing-optimizer/app.py",
          "lines": 213
        },
        {
          "path": "docker/enhanced-model-manager/enhanced_model_service.py",
          "lines": 286
        },
        {
          "path": "docker/ai-agent-orchestrator/app.py",
          "lines": 525
        },
        {
          "path": "docker/templates/generate-dockerfile.py",
          "lines": 175
        },
        {
          "path": "auth/service-account-manager/main.py",
          "lines": 696
        },
        {
          "path": "auth/jwt-service/main.py",
          "lines": 548
        },
        {
          "path": "auth/rbac-engine/main.py",
          "lines": 728
        },
        {
          "path": "tests/hygiene/test_failure_scenarios.py",
          "lines": 719
        },
        {
          "path": "tests/hygiene/test_git_hooks.py",
          "lines": 317
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/hygiene/test_performance.py",
          "lines": 579
        },
        {
          "path": "tests/hygiene/test-hygiene-system.py",
          "lines": 530
        },
        {
          "path": "tests/hygiene/test_orchestrator.py",
          "lines": 263
        },
        {
          "path": "tests/hygiene/test_fixtures.py",
          "lines": 497
        },
        {
          "path": "tests/hygiene/test_coordinator.py",
          "lines": 347
        },
        {
          "path": "tests/hygiene/test_monitoring.py",
          "lines": 353
        },
        {
          "path": "tests/docker/test_containers.py",
          "lines": 911
        },
        {
          "path": "tests/load/load_test_runner.py",
          "lines": 587
        },
        {
          "path": "tests/security/test_security_comprehensive.py",
          "lines": 1085
        },
        {
          "path": "tests/security/test_security_hardening.py",
          "lines": 349
        },
        {
          "path": "tests/performance/load_test.py",
          "lines": 482
        },
        {
          "path": "tests/integration/test-dashboard-fix.py",
          "lines": 457
        },
        {
          "path": "tests/integration/test-monitoring-integration.py",
          "lines": 408
        },
        {
          "path": "tests/integration/test-ollama-integration.py",
          "lines": 343
        },
        {
          "path": "tests/health/test_service_health.py",
          "lines": 726
        },
        {
          "path": "IMPORTANT/00_inventory/generate_inventory.py",
          "lines": 282
        },
        {
          "path": "models/optimization/performance_benchmark.py",
          "lines": 557
        },
        {
          "path": "models/optimization/automated_model_selection.py",
          "lines": 1211
        },
        {
          "path": "models/optimization/model_compression.py",
          "lines": 546
        },
        {
          "path": "models/optimization/optimization_orchestrator.py",
          "lines": 596
        },
        {
          "path": "models/optimization/quantization.py",
          "lines": 945
        },
        {
          "path": "models/optimization/ab_testing.py",
          "lines": 941
        },
        {
          "path": "models/optimization/neural_architecture_optimizer.py",
          "lines": 486
        },
        {
          "path": "models/optimization/performance_benchmarking.py",
          "lines": 1364
        },
        {
          "path": "models/optimization/ensemble_optimization.py",
          "lines": 977
        },
        {
          "path": "models/optimization/continuous_learning.py",
          "lines": 957
        },
        {
          "path": "models/optimization/knowledge_distillation.py",
          "lines": 806
        },
        {
          "path": "models/optimization/quantization_pipeline.py",
          "lines": 446
        },
        {
          "path": "models/optimization/model_cache_manager.py",
          "lines": 628
        },
        {
          "path": "security/agent-communication/secure_agent_comm.py",
          "lines": 951
        },
        {
          "path": "security/defense-in-depth/network_security.py",
          "lines": 640
        },
        {
          "path": "security/threat-detection/advanced_detection.py",
          "lines": 965
        },
        {
          "path": "security/rasp/runtime_protection.py",
          "lines": 759
        },
        {
          "path": "security/compliance/compliance_automation.py",
          "lines": 1267
        },
        {
          "path": "security/zero-trust/architecture.py",
          "lines": 482
        },
        {
          "path": "security/incident-response/incident_response.py",
          "lines": 1385
        },
        {
          "path": "security/vulnerability-management/vuln_scanner.py",
          "lines": 1098
        },
        {
          "path": "chaos/scripts/docker-integration.py",
          "lines": 426
        },
        {
          "path": "monitoring/security/intrusion_detection.py",
          "lines": 69
        },
        {
          "path": "monitoring/advanced/distributed_tracing.py",
          "lines": 365
        },
        {
          "path": "monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
          "lines": 476
        },
        {
          "path": "localagi/protocols/autonomous_coordination_protocols.py",
          "lines": 1093
        },
        {
          "path": "services/resource-manager/main.py",
          "lines": 262
        },
        {
          "path": "services/api-adapter/unified_ai_client.py",
          "lines": 405
        },
        {
          "path": "services/adapters/specialized_tools/finrobot_adapter.py",
          "lines": 384
        },
        {
          "path": "services/adapters/specialized_tools/__init__.py",
          "lines": 7
        },
        {
          "path": "services/adapters/workflow_tools/langflow_adapter.py",
          "lines": 347
        },
        {
          "path": "services/adapters/workflow_tools/__init__.py",
          "lines": 8
        },
        {
          "path": "services/adapters/workflow_tools/dify_adapter.py",
          "lines": 366
        },
        {
          "path": "services/jarvis/core/voice_interface_minimal.py",
          "lines": 331
        },
        {
          "path": "services/jarvis/core/orchestrator.py",
          "lines": 323
        },
        {
          "path": "services/jarvis/core/plugin_manager.py",
          "lines": 443
        },
        {
          "path": "services/jarvis/core/voice_interface.py",
          "lines": 476
        },
        {
          "path": "services/jarvis/core/memory_manager.py",
          "lines": 516
        },
        {
          "path": "services/jarvis/tests/test_routes_minimal.py",
          "lines": 60
        }
      ]
    },
    "automation": {
      "count": 88,
      "total_lines": 55101,
      "scripts": [
        {
          "path": "scripts/apply_security_fixes.py",
          "lines": 321
        },
        {
          "path": "self-healing/hygiene_orchestrator.py",
          "lines": 1277
        },
        {
          "path": "workflows/deployment_automation.py",
          "lines": 378
        },
        {
          "path": "workflows/practical_examples.py",
          "lines": 357
        },
        {
          "path": "workflows/simple_code_review.py",
          "lines": 182
        },
        {
          "path": "workflows/security_scan_workflow.py",
          "lines": 469
        },
        {
          "path": "tests/execute_ultra_testing_strategy.py",
          "lines": 1005
        },
        {
          "path": "tests/run_hardware_optimizer_tests.py",
          "lines": 301
        },
        {
          "path": "tests/hardware_optimizer_load_runner.py",
          "lines": 336
        },
        {
          "path": "tests/ultra_comprehensive_system_test_suite.py",
          "lines": 620
        },
        {
          "path": "tests/demo_load_test.py",
          "lines": 260
        },
        {
          "path": "tests/simplified_load_test.py",
          "lines": 791
        },
        {
          "path": "tests/conftest.py",
          "lines": 372
        },
        {
          "path": "tests/test_base_agent_v2.py",
          "lines": 633
        },
        {
          "path": "tests/ai_powered_test_suite.py",
          "lines": 1423
        },
        {
          "path": "tests/hardware_optimizer_ultra_test_suite.py",
          "lines": 1766
        },
        {
          "path": "system-validator/system_validator.py",
          "lines": 598
        },
        {
          "path": "security/security_orchestrator.py",
          "lines": 755
        },
        {
          "path": "monitoring/freeze_prevention.py",
          "lines": 885
        },
        {
          "path": "monitoring/self_healing_monitor.py",
          "lines": 331
        },
        {
          "path": "monitoring/continuous_performance_monitor.py",
          "lines": 1102
        },
        {
          "path": "monitoring/hygiene-monitor-backend.py",
          "lines": 863
        },
        {
          "path": "monitoring/comprehensive_report_generator.py",
          "lines": 973
        },
        {
          "path": "disaster-recovery/backup-coordinator.py",
          "lines": 984
        },
        {
          "path": "disaster-recovery/point-in-time-recovery.py",
          "lines": 1048
        },
        {
          "path": "services/ollama_service.py",
          "lines": 478
        },
        {
          "path": "scripts/pre-commit/check-agent-usage.py",
          "lines": 87
        },
        {
          "path": "scripts/maintenance/bottleneck-eliminator.py",
          "lines": 1058
        },
        {
          "path": "scripts/maintenance/advanced-rollback-system.py",
          "lines": 1524
        },
        {
          "path": "scripts/maintenance/garbage-collection-system.py",
          "lines": 806
        },
        {
          "path": "scripts/maintenance/optimize-ollama-performance.py",
          "lines": 501
        },
        {
          "path": "scripts/dockerfile-consolidation/execute_consolidation.py",
          "lines": 393
        },
        {
          "path": "scripts/deployment/migrate_agent_ports.py",
          "lines": 359
        },
        {
          "path": "scripts/deployment/deployment-monitor.py",
          "lines": 489
        },
        {
          "path": "scripts/deployment/ultimate-deployment-orchestrator.py",
          "lines": 1201
        },
        {
          "path": "scripts/deployment/resource-enforcer.py",
          "lines": 346
        },
        {
          "path": "scripts/deployment/ultimate-deployment-master.py",
          "lines": 1187
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/lib/__init__.py",
          "lines": 22
        },
        {
          "path": "scripts/lib/logging_utils.py",
          "lines": 212
        },
        {
          "path": "scripts/automation/analyze_docker_builds.py",
          "lines": 67
        },
        {
          "path": "scripts/monitoring/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/permanent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/distributed-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/compliance-monitor-core.py",
          "lines": 800
        },
        {
          "path": "scripts/monitoring/performance-profiler-suite.py",
          "lines": 1274
        },
        {
          "path": "scripts/monitoring/fix-agent-health-checks.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/resource-pool-coordinator.py",
          "lines": 1015
        },
        {
          "path": "scripts/monitoring/comprehensive-agent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/health/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/utils/memory_cleanup_service.py",
          "lines": 319
        },
        {
          "path": "scripts/utils/multi-environment-config-manager.py",
          "lines": 1368
        },
        {
          "path": "scripts/utils/analyze-agent-readiness.py",
          "lines": 141
        },
        {
          "path": "scripts/utils/enforce_claude_md_rules.py",
          "lines": 438
        },
        {
          "path": "scripts/utils/generate_architecture_diagram.py",
          "lines": 177
        },
        {
          "path": "self-healing/scripts/circuit-breaker.py",
          "lines": 409
        },
        {
          "path": "self-healing/scripts/automated-recovery.py",
          "lines": 551
        },
        {
          "path": "self-healing/circuit-breaker/circuit_breaker.py",
          "lines": 550
        },
        {
          "path": "workflows/scripts/workflow_manager.py",
          "lines": 557
        },
        {
          "path": "workflows/scripts/deploy_dify_workflows.py",
          "lines": 751
        },
        {
          "path": "deployment/monitoring/agent-monitor/monitor.py",
          "lines": 848
        },
        {
          "path": "deployment/autoscaling/swarm/swarm-autoscaler.py",
          "lines": 435
        },
        {
          "path": "docker/fsdp/fsdp_service.py",
          "lines": 238
        },
        {
          "path": "docker/knowledge-manager/knowledge_manager.py",
          "lines": 757
        },
        {
          "path": "docker/autogpt-real/agent.py",
          "lines": 405
        },
        {
          "path": "docker/localagi/localagi_service.py",
          "lines": 109
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/unit/test_brain.py",
          "lines": 128
        },
        {
          "path": "tests/load/load_test_runner.py",
          "lines": 587
        },
        {
          "path": "tests/load/locustfile.py",
          "lines": 513
        },
        {
          "path": "tests/integration/test-dashboard-fix.py",
          "lines": 457
        },
        {
          "path": "models/optimization/performance_benchmark.py",
          "lines": 557
        },
        {
          "path": "models/optimization/automated_model_selection.py",
          "lines": 1211
        },
        {
          "path": "models/optimization/model_compression.py",
          "lines": 546
        },
        {
          "path": "models/optimization/optimization_orchestrator.py",
          "lines": 596
        },
        {
          "path": "models/optimization/batch_processing_optimizer.py",
          "lines": 483
        },
        {
          "path": "models/optimization/knowledge_distillation.py",
          "lines": 806
        },
        {
          "path": "security/threat-detection/advanced_detection.py",
          "lines": 965
        },
        {
          "path": "security/compliance/compliance_automation.py",
          "lines": 1267
        },
        {
          "path": "security/incident-response/incident_response.py",
          "lines": 1385
        },
        {
          "path": "security/vulnerability-management/vuln_scanner.py",
          "lines": 1098
        },
        {
          "path": "chaos/scripts/chaos-monkey.py",
          "lines": 640
        },
        {
          "path": "chaos/scripts/chaos-engine.py",
          "lines": 810
        },
        {
          "path": "monitoring/advanced/distributed_tracing.py",
          "lines": 365
        },
        {
          "path": "services/automation/skyvern_service.py",
          "lines": 111
        },
        {
          "path": "services/automation/browser_use_service.py",
          "lines": 99
        },
        {
          "path": "services/chainlit/chainlit_app.py",
          "lines": 90
        },
        {
          "path": "services/adapters/workflow_tools/langflow_adapter.py",
          "lines": 347
        }
      ]
    },
    "security": {
      "count": 154,
      "total_lines": 75535,
      "scripts": [
        {
          "path": "script_consolidation_analysis.py",
          "lines": 200
        },
        {
          "path": "ultra_deep_system_analysis.py",
          "lines": 433
        },
        {
          "path": "fusion/__init__.py",
          "lines": 262
        },
        {
          "path": "scripts/apply_security_fixes.py",
          "lines": 321
        },
        {
          "path": "self-healing/api_server.py",
          "lines": 660
        },
        {
          "path": "workflows/code_improvement_workflow.py",
          "lines": 645
        },
        {
          "path": "workflows/practical_examples.py",
          "lines": 357
        },
        {
          "path": "workflows/security_scan_workflow.py",
          "lines": 469
        },
        {
          "path": "tests/execute_ultra_testing_strategy.py",
          "lines": 1005
        },
        {
          "path": "tests/dockerfile_security_validator.py",
          "lines": 653
        },
        {
          "path": "tests/run_hardware_optimizer_tests.py",
          "lines": 301
        },
        {
          "path": "tests/hardware_optimizer_load_runner.py",
          "lines": 336
        },
        {
          "path": "tests/test_jwt_security_fix.py",
          "lines": 268
        },
        {
          "path": "tests/ultra_comprehensive_system_test_suite.py",
          "lines": 620
        },
        {
          "path": "tests/dockerfile_performance_validator.py",
          "lines": 479
        },
        {
          "path": "tests/dockerfile_consolidation_test_suite.py",
          "lines": 579
        },
        {
          "path": "tests/demo_load_test.py",
          "lines": 260
        },
        {
          "path": "tests/simplified_load_test.py",
          "lines": 791
        },
        {
          "path": "tests/master_dockerfile_validator.py",
          "lines": 513
        },
        {
          "path": "tests/test_jwt_vulnerability_fix.py",
          "lines": 170
        },
        {
          "path": "tests/backend_hardware_integration_ultra_corrected_test.py",
          "lines": 961
        },
        {
          "path": "tests/qa_comprehensive_test_suite.py",
          "lines": 892
        },
        {
          "path": "tests/security_test_suite.py",
          "lines": 672
        },
        {
          "path": "tests/test_monitor_status.py",
          "lines": 53
        },
        {
          "path": "tests/advanced_health_scenarios.py",
          "lines": 586
        },
        {
          "path": "tests/corrected_security_test.py",
          "lines": 138
        },
        {
          "path": "tests/comprehensive_test_report_final.py",
          "lines": 545
        },
        {
          "path": "tests/backend_hardware_integration_ultra_test.py",
          "lines": 896
        },
        {
          "path": "tests/hardware_optimizer_ultra_test_suite.py",
          "lines": 1766
        },
        {
          "path": "security/security_orchestrator.py",
          "lines": 755
        },
        {
          "path": "load-testing/simplified-load-test.py",
          "lines": 543
        },
        {
          "path": "load-testing/production-load-test.py",
          "lines": 777
        },
        {
          "path": "monitoring/enhanced-hygiene-backend.py",
          "lines": 926
        },
        {
          "path": "monitoring/logging-infrastructure.py",
          "lines": 553
        },
        {
          "path": "monitoring/agent-orchestrator.py",
          "lines": 719
        },
        {
          "path": "monitoring/hygiene-monitor-backend.py",
          "lines": 863
        },
        {
          "path": "monitoring/simple-hygiene-backend.py",
          "lines": 381
        },
        {
          "path": "monitoring/realtime_dashboard.py",
          "lines": 993
        },
        {
          "path": "fusion/core/unified_representation.py",
          "lines": 669
        },
        {
          "path": "fusion/core/multi_modal_fusion_coordinator.py",
          "lines": 984
        },
        {
          "path": "fusion/core/cross_modal_learning.py",
          "lines": 903
        },
        {
          "path": "fusion/visualization/fusion_visualizer.py",
          "lines": 1033
        },
        {
          "path": "fusion/pipeline/realtime_fusion_pipeline.py",
          "lines": 917
        },
        {
          "path": "scripts/pre-commit/validate_system_health.py",
          "lines": 166
        },
        {
          "path": "scripts/pre-commit/check-agent-usage.py",
          "lines": 87
        },
        {
          "path": "scripts/database/database_monitor.py",
          "lines": 453
        },
        {
          "path": "scripts/maintenance/update-agent-auth.py",
          "lines": 377
        },
        {
          "path": "scripts/maintenance/ultra-script-consolidation.py",
          "lines": 679
        },
        {
          "path": "scripts/maintenance/update-github-workflows-compatibility.py",
          "lines": 100
        },
        {
          "path": "scripts/maintenance/fix_container_security.py",
          "lines": 157
        },
        {
          "path": "scripts/maintenance/remove_hardcoded_secrets.py",
          "lines": 106
        },
        {
          "path": "scripts/dockerfile-consolidation/execute_consolidation.py",
          "lines": 393
        },
        {
          "path": "scripts/deployment/check_services_health.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/optimize-load-balancing.py",
          "lines": 378
        },
        {
          "path": "scripts/deployment/health_check_gateway.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/configure-rabbitmq.py",
          "lines": 375
        },
        {
          "path": "scripts/deployment/health_check_ollama.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/health_check_dataservices.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/infrastructure_health_check.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/launch_local_agents.py",
          "lines": 142
        },
        {
          "path": "scripts/deployment/health-check-server.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/health_check_monitoring.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/deployment/health_check_vectordb.py",
          "lines": 290
        },
        {
          "path": "scripts/deployment/ai-runtime-init.py",
          "lines": 319
        },
        {
          "path": "scripts/lib/script_optimization_template.py",
          "lines": 353
        },
        {
          "path": "scripts/lib/security_utils.py",
          "lines": 377
        },
        {
          "path": "scripts/lib/__init__.py",
          "lines": 22
        },
        {
          "path": "scripts/lib/logging_utils.py",
          "lines": 212
        },
        {
          "path": "scripts/master/health-master.py",
          "lines": 715
        },
        {
          "path": "scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
          "lines": 301
        },
        {
          "path": "scripts/security/validate_cors_ultra.py",
          "lines": 281
        },
        {
          "path": "scripts/security/validate_cors_simple.py",
          "lines": 222
        },
        {
          "path": "scripts/security/fix_cors_wildcards.py",
          "lines": 360
        },
        {
          "path": "scripts/security/validate_cors_security.py",
          "lines": 362
        },
        {
          "path": "scripts/security/ultra_security_validation.py",
          "lines": 294
        },
        {
          "path": "scripts/testing/validate_ports.py",
          "lines": 649
        },
        {
          "path": "scripts/testing/ultra-consolidation-validator.py",
          "lines": 461
        },
        {
          "path": "scripts/testing/test_runner.py",
          "lines": 634
        },
        {
          "path": "scripts/testing/deduplication-validator.py",
          "lines": 625
        },
        {
          "path": "scripts/testing/validate_security_remediation.py",
          "lines": 280
        },
        {
          "path": "scripts/testing/validate_security_improvements.py",
          "lines": 259
        },
        {
          "path": "scripts/monitoring/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/comprehensive_monitor_validation.py",
          "lines": 528
        },
        {
          "path": "scripts/monitoring/permanent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/distributed-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/system-health-validator.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/validate-production-health.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/database_health_check.py",
          "lines": 563
        },
        {
          "path": "scripts/monitoring/ultra-dockerfile-migrator.py",
          "lines": 506
        },
        {
          "path": "scripts/monitoring/fix-agent-health-checks.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/monitoring-master.py",
          "lines": 471
        },
        {
          "path": "scripts/monitoring/comprehensive-agent-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/monitoring/production-readiness-validator.py",
          "lines": 1240
        },
        {
          "path": "scripts/health/container-health-monitor.py",
          "lines": 411
        },
        {
          "path": "scripts/health/monitoring-health-aggregator.py",
          "lines": 563
        },
        {
          "path": "scripts/health/master-health-controller.py",
          "lines": 715
        },
        {
          "path": "scripts/health/pre-commit-health-validator.py",
          "lines": 166
        },
        {
          "path": "scripts/health/deployment-health-checker.py",
          "lines": 290
        },
        {
          "path": "scripts/utils/coverage_reporter.py",
          "lines": 496
        },
        {
          "path": "scripts/utils/large_file_handler_demo.py",
          "lines": 102
        },
        {
          "path": "scripts/utils/health_monitor.py",
          "lines": 715
        },
        {
          "path": "scripts/utils/coordination_tracker.py",
          "lines": 345
        },
        {
          "path": "scripts/utils/multi-environment-config-manager.py",
          "lines": 1368
        },
        {
          "path": "scripts/utils/generate_secure_secrets.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/database_connection_pool_setup.py",
          "lines": 457
        },
        {
          "path": "scripts/utils/pin_all_dependencies.py",
          "lines": 246
        },
        {
          "path": "scripts/utils/database_operations.py",
          "lines": 411
        },
        {
          "path": "scripts/utils/scan_localhost.py",
          "lines": 103
        },
        {
          "path": "scripts/utils/check_secrets.py",
          "lines": 104
        },
        {
          "path": "scripts/utils/ensure_changelogs.py",
          "lines": 101
        },
        {
          "path": "scripts/utils/requirements_analyzer.py",
          "lines": 380
        },
        {
          "path": "scripts/utils/dependency_analyzer.py",
          "lines": 424
        },
        {
          "path": "self-healing/circuit-breaker/service_monitor.py",
          "lines": 512
        },
        {
          "path": "self-healing/circuit-breaker/circuit_breaker.py",
          "lines": 550
        },
        {
          "path": "self-healing/graceful-degradation/fallback_handlers.py",
          "lines": 634
        },
        {
          "path": "self-healing/graceful-degradation/feature_flags.py",
          "lines": 589
        },
        {
          "path": "deployment/monitoring/agent-monitor/monitor.py",
          "lines": 848
        },
        {
          "path": "docker/awesome-code-ai/awesome_code_service.py",
          "lines": 199
        },
        {
          "path": "docker/finrobot/finrobot_service.py",
          "lines": 443
        },
        {
          "path": "docker/langchain-agents/langchain_agent_server.py",
          "lines": 277
        },
        {
          "path": "docker/knowledge-manager/knowledge_manager.py",
          "lines": 757
        },
        {
          "path": "docker/documind/documind_service.py",
          "lines": 324
        },
        {
          "path": "docker/templates/generate-dockerfile.py",
          "lines": 175
        },
        {
          "path": "docker/code-improver/code_improver.py",
          "lines": 283
        },
        {
          "path": "auth/service-account-manager/main.py",
          "lines": 696
        },
        {
          "path": "auth/jwt-service/main.py",
          "lines": 548
        },
        {
          "path": "auth/rbac-engine/main.py",
          "lines": 728
        },
        {
          "path": "tests/hygiene/test-all-rule-combinations.py",
          "lines": 1022
        },
        {
          "path": "tests/hygiene/__init__.py",
          "lines": 7
        },
        {
          "path": "tests/unit/test_security.py",
          "lines": 194
        },
        {
          "path": "tests/security/test_xss_protection.py",
          "lines": 382
        },
        {
          "path": "tests/security/test-authentication.py",
          "lines": 565
        },
        {
          "path": "tests/security/test_security_comprehensive.py",
          "lines": 1085
        },
        {
          "path": "tests/security/test_security_hardening.py",
          "lines": 349
        },
        {
          "path": "tests/security/__init__.py",
          "lines": 1
        },
        {
          "path": "tests/integration/test-neo4j-integration.py",
          "lines": 136
        },
        {
          "path": "tests/integration/test_api_integration.py",
          "lines": 243
        },
        {
          "path": "tests/integration/test-monitoring-integration.py",
          "lines": 408
        },
        {
          "path": "security/agent-communication/secure_agent_comm.py",
          "lines": 951
        },
        {
          "path": "security/defense-in-depth/network_security.py",
          "lines": 640
        },
        {
          "path": "security/threat-detection/advanced_detection.py",
          "lines": 965
        },
        {
          "path": "security/rasp/runtime_protection.py",
          "lines": 759
        },
        {
          "path": "security/compliance/compliance_automation.py",
          "lines": 1267
        },
        {
          "path": "security/zero-trust/architecture.py",
          "lines": 482
        },
        {
          "path": "security/incident-response/incident_response.py",
          "lines": 1385
        },
        {
          "path": "security/vulnerability-management/vuln_scanner.py",
          "lines": 1098
        },
        {
          "path": "monitoring/security/intrusion_detection.py",
          "lines": 69
        },
        {
          "path": "services/resource-manager/main.py",
          "lines": 262
        },
        {
          "path": "services/jarvis/main_simple.py",
          "lines": 322
        },
        {
          "path": "services/jarvis/main.py",
          "lines": 439
        },
        {
          "path": "services/jarvis/main_basic.py",
          "lines": 388
        },
        {
          "path": "services/langchain/main.py",
          "lines": 258
        },
        {
          "path": "services/faiss-vector/main.py",
          "lines": 352
        }
      ]
    },
    "analysis": {
      "count": 47,
      "total_lines": 21013,
      "scripts": [
        {
          "path": "script_consolidation_analysis.py",
          "lines": 200
        },
        {
          "path": "ULTRA_DUPLICATE_ANALYSIS.py",
          "lines": 338
        },
        {
          "path": "ultra_deep_system_analysis.py",
          "lines": 433
        },
        {
          "path": "scripts/consolidation_analysis.py",
          "lines": 327
        },
        {
          "path": "workflows/code_improvement_workflow.py",
          "lines": 645
        },
        {
          "path": "workflows/practical_examples.py",
          "lines": 357
        },
        {
          "path": "workflows/test_code_improvement.py",
          "lines": 226
        },
        {
          "path": "workflows/demo_workflow.py",
          "lines": 160
        },
        {
          "path": "workflows/security_scan_workflow.py",
          "lines": 469
        },
        {
          "path": "tests/backend_hardware_integration_ultra_corrected_test.py",
          "lines": 961
        },
        {
          "path": "tests/test_monitor_status.py",
          "lines": 53
        },
        {
          "path": "tests/corrected_security_test.py",
          "lines": 138
        },
        {
          "path": "security/security_orchestrator.py",
          "lines": 755
        },
        {
          "path": "scripts/pre-commit/quick-system-check.py",
          "lines": 220
        },
        {
          "path": "scripts/maintenance/update-restart-policies.py",
          "lines": 101
        },
        {
          "path": "scripts/dockerfile-consolidation/execute_consolidation.py",
          "lines": 393
        },
        {
          "path": "scripts/deployment/migrate_agent_ports.py",
          "lines": 359
        },
        {
          "path": "scripts/deployment/manage-environments.py",
          "lines": 650
        },
        {
          "path": "scripts/automation/analyze_docker_builds.py",
          "lines": 67
        },
        {
          "path": "scripts/security/ultra_security_validation.py",
          "lines": 294
        },
        {
          "path": "scripts/testing/test_agent_detection.py",
          "lines": 215
        },
        {
          "path": "scripts/testing/validate_security_remediation.py",
          "lines": 280
        },
        {
          "path": "scripts/monitoring/system-resource-analyzer.py",
          "lines": 383
        },
        {
          "path": "scripts/monitoring/profile-hygiene-memory.py",
          "lines": 299
        },
        {
          "path": "scripts/monitoring/compliance-monitor-core.py",
          "lines": 800
        },
        {
          "path": "scripts/monitoring/performance-profiler-suite.py",
          "lines": 1274
        },
        {
          "path": "scripts/monitoring/hardware-optimization-master.py",
          "lines": 931
        },
        {
          "path": "scripts/monitoring/redis_performance_monitor.py",
          "lines": 575
        },
        {
          "path": "scripts/monitoring/multi-system-integration-framework.py",
          "lines": 2675
        },
        {
          "path": "scripts/utils/coverage_reporter.py",
          "lines": 496
        },
        {
          "path": "scripts/utils/analyze-agent-readiness.py",
          "lines": 141
        },
        {
          "path": "scripts/utils/create-container-requirements-map.py",
          "lines": 335
        },
        {
          "path": "scripts/utils/analyze-docker-requirements.py",
          "lines": 254
        },
        {
          "path": "scripts/utils/pin_all_dependencies.py",
          "lines": 246
        },
        {
          "path": "scripts/utils/scan_localhost.py",
          "lines": 103
        },
        {
          "path": "scripts/utils/external-service-discovery.py",
          "lines": 332
        },
        {
          "path": "scripts/utils/audit_docs.py",
          "lines": 76
        },
        {
          "path": "scripts/utils/requirements_analyzer.py",
          "lines": 380
        },
        {
          "path": "scripts/utils/dependency_analyzer.py",
          "lines": 424
        },
        {
          "path": "scripts/utils/create-base-image-strategy.py",
          "lines": 605
        },
        {
          "path": "docker/hygiene-scanner/hygiene_scanner.py",
          "lines": 424
        },
        {
          "path": "docker/code-improver/code_improver.py",
          "lines": 283
        },
        {
          "path": "tests/unit/test_brain.py",
          "lines": 128
        },
        {
          "path": "IMPORTANT/00_inventory/generate_inventory.py",
          "lines": 282
        },
        {
          "path": "security/rasp/runtime_protection.py",
          "lines": 759
        },
        {
          "path": "security/vulnerability-management/vuln_scanner.py",
          "lines": 1098
        },
        {
          "path": "monitoring/security/intrusion_detection.py",
          "lines": 69
        }
      ]
    }
  },
  "top_largest_scripts": [
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
      "relative_path": "scripts/monitoring/multi-system-integration-framework.py",
      "name": "multi-system-integration-framework.py",
      "size": 115305,
      "lines": 2675,
      "hash": "0893d3ac9d35c8498fe1467454712ff7",
      "category": [
        "monitoring",
        "deployment",
        "utils",
        "analysis"
      ],
      "imports": [
        "websocket",
        "kubernetes",
        "yaml",
        "json",
        "neo4j",
        "threading",
        "statistics",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "prometheus_client.parser",
        "psutil",
        "argparse",
        "sys",
        "psycopg2",
        "dataclasses",
        "prometheus_client",
        "os",
        "collections",
        "docker",
        "time",
        "requests",
        "datetime",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_classify_docker_service",
        "class:RollbackManager",
        "generate_integration_report",
        "_generate_recommendations",
        "detect_anomalies",
        "_store_discovered_system",
        "_classify_k8s_service",
        "class:AnomalyDetector",
        "_init_kubernetes_client",
        "_group_data_for_fusion",
        "class:SystemType",
        "class:SystemEndpoint",
        "class:HealthStatus",
        "class:MultiModalData",
        "_store_system_health",
        "class:MultiSystemIntegrationFramework",
        "class:SystemHealth",
        "_log_integration_event",
        "main",
        "_init_database",
        "class:IntegrationState",
        "_check_metric_anomaly",
        "class:IntegrationRule",
        "__init__",
        "_compare_data_schemas",
        "_are_systems_complementary",
        "_init_redis_client",
        "_init_docker_client",
        "_load_config"
      ],
      "description": "Multi-System Integration Framework for SutazAI\n==============================================\nPurpose: Advanced integration framework for orchestrating multi-modal data fusion across systems\nUsage: py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/static_monitor.py",
      "relative_path": "scripts/monitoring/static_monitor.py",
      "name": "static_monitor.py",
      "size": 109977,
      "lines": 2400,
      "hash": "f17f3a1b913b413578efeec1e219bbd5",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "requests.adapters",
        "json",
        "socket",
        "xml.etree.ElementTree",
        "threading",
        "logging",
        "urllib3.util.retry",
        "re",
        "typing",
        "concurrent.futures",
        "select",
        "pathlib",
        "pynvml",
        "psutil",
        "sys",
        "os",
        "collections",
        "termios",
        "time",
        "requests",
        "datetime",
        "tty",
        "subprocess"
      ],
      "functions": [
        "_detect_wsl2_gpu",
        "_detect_nvidia_proc_info",
        "_get_wsl2_directx_stats",
        "_get_nvidia_gpustat_stats",
        "_setup_logging",
        "_test_nvidia_smi_path",
        "_detect_amd_gpu",
        "class:EnhancedMonitor",
        "_get_nvidia_smi_paths",
        "_get_display_name",
        "get_color",
        "_parse_health_response",
        "_get_port_ranges_by_type",
        "_test_port_connection",
        "clear_line",
        "_handle_keyboard_input",
        "_detect_nvidia_gpu",
        "get_gpu_stats",
        "_get_nvidia_stats_csv",
        "_get_generic_stats",
        "_parse_container_status",
        "_test_nvidia_smi_xml",
        "run",
        "_get_nvidia_wsl2_proc_stats",
        "_get_keyboard_input",
        "_update_refresh_rate",
        "_calculate_network_stats",
        "_get_agent_endpoint",
        "_get_trend",
        "move_to",
        "_discover_container_agents",
        "_test_nvidia_smi_csv",
        "_detect_intel_gpu",
        "cleanup",
        "_get_container_info",
        "get_ai_agents_status",
        "get_system_stats",
        "_verify_agent_endpoint",
        "_parse_nvidia_xml",
        "_is_agent_deployed",
        "_detect_nvidia_wsl2_fallbacks",
        "create_bar",
        "main",
        "_get_nvidia_stats_xml",
        "_get_amd_stats",
        "_get_intel_stats",
        "_extract_endpoint_from_config",
        "_load_agent_registry",
        "_detect_wsl_environment",
        "__init__",
        "_detect_gpu_capabilities",
        "_get_nvidia_pynvml_stats",
        "get_docker_containers",
        "get_ollama_models",
        "_detect_nvidia_gpustat",
        "_parse_nvidia_xml_stats",
        "_check_agent_health",
        "_get_nvidia_stats",
        "_generate_alert_message",
        "_load_config",
        "_detect_generic_gpu",
        "_get_agent_type",
        "_setup_keyboard_input"
      ],
      "description": "Enhanced Static System Monitor - Production Ready\n==============================================================\n\nComprehensive system and AI agent monitoring with adaptive features:\n- Adaptive refres",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/enhanced-compliance-monitor.py",
      "relative_path": "scripts/monitoring/enhanced-compliance-monitor.py",
      "name": "enhanced-compliance-monitor.py",
      "size": 84935,
      "lines": 1958,
      "hash": "3996f5e5329d413c57c3b02e079634f6",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "re",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "collections",
        "logging.handlers",
        "time",
        "datetime",
        "subprocess"
      ],
      "functions": [
        "_analyze_script_purpose",
        "class:SystemHealthMetrics",
        "class:RuleViolation",
        "_load_exclusions",
        "_generate_recommendations",
        "_fix_rule_violations",
        "run_daemon_mode",
        "_should_exclude_path",
        "_validate_system_integration",
        "_create_backup",
        "_save_transaction",
        "_init_state_database",
        "run_compliance_check",
        "auto_fix_violations",
        "check_rule_7_script_organization",
        "validate_system_integrity",
        "_collect_system_metrics",
        "_is_safe_to_delete",
        "generate_report",
        "_get_recent_reports",
        "__post_init__",
        "class:ChangeTransaction",
        "class:EnhancedComplianceMonitor",
        "main",
        "_check_file_for_fantasy_elements",
        "check_rule_12_deployment_script",
        "_is_legitimate_file",
        "_load_rules_config",
        "_generate_insights",
        "_fix_script_organization",
        "_fix_garbage_files",
        "_fix_fantasy_elements",
        "__init__",
        "_rollback_transaction",
        "cleanup_old_data",
        "check_rule_1_fantasy_elements",
        "_signal_handler",
        "_fix_deployment_scripts",
        "_build_dependency_graph",
        "_load_config",
        "_create_transaction",
        "check_rule_13_garbage_files"
      ],
      "description": "Enhanced Production-Ready Compliance Monitoring System for SutazAI\n=================================================================\nPurpose: Enterprise-grade compliance monitoring with 100% reliabili",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
      "relative_path": "tests/hardware_optimizer_ultra_test_suite.py",
      "name": "hardware_optimizer_ultra_test_suite.py",
      "size": 75432,
      "lines": 1766,
      "hash": "732178aa43cab59c497881451773bf65",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "json",
        "socket",
        "statistics",
        "threading",
        "traceback",
        "logging",
        "hashlib",
        "string",
        "gc",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "matplotlib",
        "shutil",
        "psutil",
        "pytest",
        "sys",
        "functools",
        "dataclasses",
        "tempfile",
        "os",
        "aiohttp",
        "gzip",
        "random",
        "matplotlib.pyplot",
        "time",
        "requests",
        "numpy",
        "resource",
        "datetime",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "_create_empty_metrics",
        "_generate_recommendations",
        "class:SystemMonitor",
        "_create_duplicate_files",
        "run_stress_tests",
        "test_error_injection_and_recovery",
        "_run_memory_exhaustion_test",
        "_create_edge_case_files",
        "_run_volume_test",
        "_create_test_data",
        "stop",
        "_create_response_time_chart",
        "_setup_test_environment",
        "_create_compressible_files",
        "_create_temp_files",
        "_create_large_files",
        "class:EndpointSpec",
        "run_error_injection_tests",
        "run_security_boundary_tests",
        "run_standalone_testing",
        "class:SecurityTestResult",
        "_run_endurance_test",
        "test_security_boundary_testing",
        "_create_memory_usage_chart",
        "tester",
        "_make_spike_request",
        "class:UltraHardwareOptimizerTester",
        "_monitor_loop",
        "_calculate_summary",
        "class:LoadTestMetrics",
        "_create_throughput_chart",
        "_create_success_rate_chart",
        "class:TestHardwareOptimizerUltra",
        "start",
        "_memory_test_request",
        "__init__",
        "cleanup_test_environment",
        "generate_performance_charts",
        "generate_comprehensive_report",
        "_verify_service_health",
        "test_stress_testing_scenarios",
        "_run_spike_test"
      ],
      "description": "ULTRA-CRITICAL AUTOMATED TESTING SPECIALIST - HARDWARE RESOURCE OPTIMIZER\n==========================================================================\n\nUltra-comprehensive automated testing suite for ha",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
      "relative_path": "scripts/maintenance/advanced-rollback-system.py",
      "name": "advanced-rollback-system.py",
      "size": 60979,
      "lines": 1524,
      "hash": "2c4aa830bd892ae8c941c64feb7db6b7",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "time",
        "datetime",
        "tarfile",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "_init_database",
        "get_snapshot",
        "_hash_file",
        "_create_archive",
        "class:SnapshotComponent",
        "class:AdvancedRollbackSystem",
        "class:SnapshotDatabase",
        "class:SystemStateCapture",
        "list_snapshots",
        "store_rollback_operation",
        "__init__",
        "class:RecoveryStrategy",
        "class:RollbackOperation",
        "class:SystemSnapshot",
        "class:RollbackExecutor",
        "class:RollbackStatus",
        "class:SnapshotType",
        "store_snapshot"
      ],
      "description": "Advanced Rollback System for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    Sophisticated rollback and recovery system that provides automated rollback\n    capabilities with state recovery, snapshot managem",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/final-system-validation.py",
      "relative_path": "scripts/utils/final-system-validation.py",
      "name": "final-system-validation.py",
      "size": 64355,
      "lines": 1510,
      "hash": "d901dc2c30e779788d8a96d63978171e",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "statistics",
        "typing",
        "pkg_resources",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp",
        "hashlib"
      ],
      "functions": [
        "class:AIQualityAssessmentEngine",
        "_determine_certification_status",
        "class:SystemComplianceReport",
        "_calculate_compliance_percentage",
        "_compare_to_benchmarks",
        "_load_quality_patterns",
        "_calculate_metric_score",
        "class:FinalSystemValidator",
        "_score_to_quality_level",
        "_generate_ai_insights",
        "_calculate_status_counts",
        "assess_reliability_quality",
        "class:ValidationMetrics",
        "assess_security_quality",
        "_identify_improvement_priorities",
        "assess_performance_quality",
        "_load_benchmark_standards",
        "_create_error_result",
        "_score_to_status",
        "_score_to_grade",
        "__init__",
        "_generate_final_recommendations",
        "generate_overall_assessment"
      ],
      "description": "Purpose: Final comprehensive system validation with AI-powered quality assurance\nUsage: python final-system-validation.py [--mode MODE] [--output-format FORMAT]\nRequirements: Complete system must be o",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/ai_powered_test_suite.py",
      "relative_path": "tests/ai_powered_test_suite.py",
      "name": "ai_powered_test_suite.py",
      "size": 54682,
      "lines": 1423,
      "hash": "85e7d77b0f523b448d44804a5f1a0cb6",
      "category": [
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "transformers",
        "time",
        "requests",
        "numpy",
        "pytest",
        "json",
        "datetime",
        "typing",
        "traceback",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "hypothesis"
      ],
      "functions": [
        "class:TestResult",
        "_generate_basic_api_tests",
        "generate_api_tests",
        "_generate_edge_case_tests",
        "_generate_recommendations",
        "class:SystemEndpoint",
        "class:SutazAITestSuite",
        "__init__",
        "class:AITestGenerator",
        "_generate_performance_tests",
        "make_request",
        "_calculate_health_score",
        "_generate_test_report",
        "_generate_security_tests"
      ],
      "description": "SutazAI Advanced AI-Powered Testing Suite\n==========================================\n\nThis module implements comprehensive AI-powered testing strategies including:\n- Automated test generation using tr",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/incident-response/incident_response.py",
      "relative_path": "security/incident-response/incident_response.py",
      "name": "incident_response.py",
      "size": 58119,
      "lines": 1385,
      "hash": "1f10f2afce11146c2b6e69a1ef3b67da",
      "category": [
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "email",
        "psycopg2.extras",
        "json",
        "threading",
        "bcrypt",
        "logging",
        "email.mime.text",
        "hashlib",
        "string",
        "smtplib",
        "enum",
        "typing",
        "concurrent.futures",
        "email.mime.multipart",
        "shutil",
        "psutil",
        "psycopg2",
        "dataclasses",
        "secrets",
        "tempfile",
        "os",
        "docker",
        "time",
        "requests",
        "email.mime.base",
        "datetime",
        "tarfile",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_calculate_file_hash",
        "_generate_incident_id",
        "class:IncidentType",
        "class:IncidentSeverity",
        "class:SecurityIncident",
        "_setup_forensic_storage",
        "stop_incident_monitoring",
        "class:IncidentStatus",
        "class:ForensicArtifact",
        "_map_threat_to_severity",
        "class:IncidentResponseEngine",
        "_load_active_incidents",
        "_map_threat_to_incident_type",
        "_initialize_components",
        "get_incident_statistics",
        "_load_response_playbooks",
        "_generate_artifact_id",
        "__init__",
        "class:ResponseAction"
      ],
      "description": "Automated Incident Response and Forensics Framework\nImplements comprehensive incident detection, response, and forensic analysis",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
      "relative_path": "scripts/utils/multi-environment-config-manager.py",
      "name": "multi-environment-config-manager.py",
      "size": 53738,
      "lines": 1368,
      "hash": "6187a7b3816a3623386fbc7a466ea91b",
      "category": [
        "deployment",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "cryptography.fernet",
        "hashlib",
        "string",
        "enum",
        "re",
        "typing",
        "concurrent.futures",
        "pathlib",
        "base64",
        "cryptography.hazmat.primitives",
        "shutil",
        "argparse",
        "sys",
        "dataclasses",
        "secrets",
        "tempfile",
        "os",
        "cryptography.hazmat.primitives.kdf.pbkdf2",
        "time",
        "datetime",
        "jinja2",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "store_template",
        "_validate_secure_password",
        "_get_or_create_master_key",
        "_generate_password_filter",
        "class:SecretManager",
        "_validate_required",
        "class:ConfigType",
        "_generate_secret_filter",
        "_validate_url",
        "_create_cipher",
        "class:ConfigValue",
        "class:ConfigValidator",
        "class:MultiEnvironmentConfigManager",
        "get_template",
        "class:SecretType",
        "create_environment",
        "_generate_default_secrets",
        "validate_config_value",
        "generate_password",
        "class:ConfigTemplate",
        "generate_api_key",
        "render_template",
        "_load_default_templates",
        "store_environment_config",
        "_get_docker_compose_template",
        "_generate_default_config_values",
        "validate_environment_config",
        "rotate_secrets",
        "_validate_type",
        "decrypt_secret",
        "_calculate_checksum",
        "_get_app_config_template",
        "class:EnvironmentConfig",
        "class:ConfigDatabase",
        "encrypt_secret",
        "compare_environments",
        "_init_database",
        "_validate_environment_specific",
        "_increment_version",
        "class:ConfigDeployer",
        "_validate_email",
        "class:Environment",
        "_encrypt_filter",
        "list_environments",
        "get_environment_config",
        "_validate_port",
        "update_environment_config",
        "__init__",
        "class:SecretValue",
        "class:TemplateEngine",
        "_validate_pattern",
        "_validate_range"
      ],
      "description": "Multi-Environment Configuration Manager for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    Sophisticated configuration management system that handles multiple\n    environments (dev, staging, production) wit",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/performance_benchmarking.py",
      "relative_path": "models/optimization/performance_benchmarking.py",
      "name": "performance_benchmarking.py",
      "size": 53566,
      "lines": 1364,
      "hash": "f11a4b5f6251b209af88cb389ee5aba9",
      "category": [
        "utils"
      ],
      "imports": [
        "torch",
        "json",
        "statistics",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "multiprocessing",
        "gc",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "psutil",
        "dataclasses",
        "os",
        "seaborn",
        "collections",
        "aiohttp",
        "matplotlib.pyplot",
        "time",
        "numpy",
        "resource",
        "pandas",
        "asyncio"
      ],
      "functions": [
        "_compare_models",
        "_analyze_results",
        "_generate_recommendations",
        "class:SystemMonitor",
        "class:BenchmarkConfig",
        "class:BenchmarkSuite",
        "get_resource_summary",
        "class:ModelBenchmarker",
        "class:BenchmarkResult",
        "stop_monitoring",
        "get_resource_data",
        "_plot_model_comparison",
        "_generate_default_prompts",
        "start_monitoring",
        "create_stress_test_benchmark",
        "class:BenchmarkType",
        "_analyze_overall_performance",
        "create_throughput_benchmark",
        "_analyze_model_performance",
        "generate_report",
        "_monitor_loop",
        "class:LoadGenerator",
        "class:LoadPattern",
        "_init_database",
        "get_request_rate",
        "_plot_throughput_over_time",
        "should_send_request",
        "__init__",
        "_assess_response_quality",
        "_plot_latency_distribution",
        "_plot_system_resources",
        "create_latency_benchmark"
      ],
      "description": "Comprehensive Performance Benchmarking Suite for SutazAI\nImplements advanced benchmarking, profiling, and performance analysis",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate-complete-system.py",
      "relative_path": "scripts/testing/validate-complete-system.py",
      "name": "validate-complete-system.py",
      "size": 54361,
      "lines": 1354,
      "hash": "9a703489b576601ac044f7917767afab",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "typing",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:ValidationResult",
        "_generate_validation_report",
        "_generate_recommendations",
        "class:SystemValidationReport",
        "__init__",
        "_get_system_health_summary",
        "class:CompleteSystemValidator"
      ],
      "description": "Purpose: Complete end-to-end system validation for hygiene enforcement\nUsage: python validate-complete-system.py [--test-mode MODE] [--output-format FORMAT]\nRequirements: All system components must be",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/disaster-recovery-test-suite.py",
      "relative_path": "disaster-recovery/disaster-recovery-test-suite.py",
      "name": "disaster-recovery-test-suite.py",
      "size": 49896,
      "lines": 1348,
      "hash": "2b59766dc1d1cc6417d447a2e84a8e7b",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "socket",
        "threading",
        "sqlite3",
        "logging",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "docker",
        "time",
        "datetime",
        "redis",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "test_network_partition_recovery",
        "test_disk_full_recovery",
        "test_single_agent_failure",
        "run_all_tests",
        "_execute_test",
        "test_agent_orchestrator_failure",
        "test_database_backup_restore",
        "test_service_mesh_component_failure",
        "test_multiple_agent_failure",
        "test_jwt_token_invalidation",
        "class:TestCase",
        "test_volume_mount_failure",
        "_setup_test_environment",
        "test_rpo_measurement",
        "class:TestCategory",
        "_define_test_cases",
        "test_dns_failure_recovery",
        "test_database_corruption_recovery",
        "class:TestExecution",
        "test_backup_integrity_validation",
        "generate_report",
        "_run_with_timeout",
        "_init_test_database",
        "test_load_balancer_failure",
        "_save_test_result",
        "test_database_connection_failure",
        "main",
        "test_auth_service_outage",
        "test_incremental_backup_chain",
        "test_rto_measurement",
        "__init__",
        "cleanup_test_environment",
        "target",
        "class:DisasterRecoveryTestSuite"
      ],
      "description": "SutazAI Disaster Recovery Test Suite\nComprehensive testing framework for disaster recovery procedures without causing disruption.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
      "relative_path": "self-healing/hygiene_orchestrator.py",
      "name": "hygiene_orchestrator.py",
      "size": 47982,
      "lines": 1277,
      "hash": "37d967e8b05b52f9130e29176ea0f69b",
      "category": [
        "monitoring",
        "deployment",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "logging",
        "email.mime.text",
        "hashlib",
        "smtplib",
        "re",
        "typing",
        "signal",
        "concurrent.futures",
        "email.mime.multipart",
        "pathlib",
        "sklearn.ensemble",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "gzip",
        "docker",
        "time",
        "requests",
        "numpy",
        "sklearn.preprocessing",
        "datetime",
        "git",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "get_recent_violations",
        "get_status",
        "_fix_delete",
        "class:IntegrationManager",
        "execute_fix",
        "_should_ignore_path",
        "_generate_proper_name",
        "class:SelfHealingOrchestrator",
        "record_fix_action",
        "_setup_logging",
        "get_ci_status",
        "trigger_ci_pipeline",
        "class:ViolationPattern",
        "record_health_metrics",
        "_should_ignore_file",
        "_fix_rename",
        "_create_backup",
        "class:HygieneViolationDetector",
        "_generate_action_id",
        "stop",
        "_check_file_against_pattern",
        "manual_scan",
        "_load_config",
        "_collect_health_metrics",
        "_detect_pattern_violations",
        "_walk_project_files",
        "rollback_fix",
        "_assess_risk_level",
        "send_notification",
        "class:HygieneDatabase",
        "set_dry_run",
        "class:SystemHealth",
        "_determine_target_directory",
        "_init_git",
        "_send_discord",
        "_init_docker",
        "_retrain_anomaly_detector",
        "_fix_move",
        "_send_slack",
        "class:PredictiveHealthMonitor",
        "_filter_fixable_violations",
        "main",
        "_fix_compress",
        "detect_violations",
        "_send_email",
        "_predict_ml_anomalies",
        "_load_violation_patterns",
        "predict_issues",
        "class:FixAction",
        "signal_handler",
        "__init__",
        "class:AutoFixEngine",
        "_load_ignore_patterns",
        "init_database",
        "record_violation",
        "get_fix_success_rate"
      ],
      "description": "Self-Healing Codebase Hygiene Orchestrator\n\nAutomatically detects and fixes codebase hygiene violations while maintaining safety.\nIntegrates with existing monitoring and CI/CD systems.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
      "relative_path": "scripts/monitoring/performance-profiler-suite.py",
      "name": "performance-profiler-suite.py",
      "size": 51965,
      "lines": 1274,
      "hash": "4c5169dcad4fa9cc581fcb0a41565cb1",
      "category": [
        "monitoring",
        "utils",
        "automation",
        "analysis"
      ],
      "imports": [
        "json",
        "threading",
        "statistics",
        "logging",
        "cProfile",
        "pstats",
        "multiprocessing",
        "gc",
        "typing",
        "signal",
        "io",
        "pathlib",
        "tracemalloc",
        "contextlib",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "docker",
        "time",
        "resource",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "detect_agent_bottlenecks",
        "class:PerformanceRecommendation",
        "_memory_recommendations",
        "class:IOProfile",
        "class:BottleneckDetector",
        "_contention_recommendations",
        "_io_recommendations",
        "stop",
        "_network_recommendations",
        "_detect_cpu_bottlenecks",
        "_prioritize_recommendations",
        "analyze_memory_profile",
        "_profile_container",
        "profile_agent_containers",
        "priority_score",
        "get_metrics_summary",
        "class:CPUProfile",
        "class:MemoryProfile",
        "class:RecommendationEngine",
        "class:SystemBottleneck",
        "class:AgentProfiler",
        "_collect_system_metrics",
        "_detect_memory_bottlenecks",
        "class:SystemResourceMonitor",
        "_categorize_bottleneck",
        "_monitor_loop",
        "_detect_io_bottlenecks",
        "memory_profile",
        "generate_recommendations",
        "class:ProcessProfiler",
        "analyze_cpu_profile",
        "export_analysis",
        "_detect_network_bottlenecks",
        "start",
        "_cpu_recommendations",
        "_deduplicate_recommendations",
        "__init__",
        "analyze_system_bottlenecks",
        "class:PerformanceProfilerSuite",
        "cpu_profile",
        "_create_summary_report",
        "_detect_resource_contention"
      ],
      "description": "Performance Profiler Suite for SutazAI\n======================================\n\nPurpose: Comprehensive performance profiling and bottleneck identification for 131-agent system\nUsage: python scripts/per",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/compliance/compliance_automation.py",
      "relative_path": "security/compliance/compliance_automation.py",
      "name": "compliance_automation.py",
      "size": 53664,
      "lines": 1267,
      "hash": "10c4d181179e221fadf5d70c6a991bd2",
      "category": [
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "psycopg2.extras",
        "os",
        "enum",
        "yaml",
        "requests",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "threading",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "redis",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "class:ComplianceEngine",
        "_generate_compliance_report",
        "class:ControlSeverity",
        "_load_default_controls",
        "get_compliance_status",
        "class:AssessmentResult",
        "class:ComplianceFramework",
        "class:ComplianceStatus",
        "_setup_evidence_collection",
        "class:ComplianceControl",
        "_generate_evidence_id",
        "_initialize_components",
        "_load_compliance_controls",
        "class:ComplianceReport",
        "class:ComplianceEvidence",
        "_store_default_controls",
        "__init__",
        "_generate_report_id",
        "stop_continuous_monitoring"
      ],
      "description": "Security Compliance Automation System\nImplements automated compliance checking for SOC2, ISO27001, PCI-DSS, and other frameworks",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
      "relative_path": "scripts/monitoring/production-readiness-validator.py",
      "name": "production-readiness-validator.py",
      "size": 50044,
      "lines": 1240,
      "hash": "8bf0c02f0c7ad90716086b87b00808c4",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "psutil",
        "enhanced_compliance_monitor",
        "argparse",
        "sys",
        "json",
        "datetime",
        "queue",
        "threading",
        "typing",
        "sqlite3",
        "concurrent.futures",
        "logging",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "_calculate_overall_status",
        "concurrent_task",
        "_validate_database_integrity",
        "class:ProductionReadinessValidator",
        "_validate_disaster_recovery",
        "_validate_configuration",
        "run_validation",
        "generate_report",
        "_validate_monitoring_alerting",
        "_validate_integration",
        "_validate_scalability",
        "main",
        "_validate_error_handling",
        "_validate_system_requirements",
        "worker",
        "_validate_security_safety",
        "_can_import",
        "__init__",
        "_update_summary",
        "_validate_performance_benchmarks",
        "_validate_load_performance"
      ],
      "description": "Production Readiness Validator for Enhanced Compliance Monitor\n============================================================\nPurpose: Comprehensive validation that the compliance monitoring system is p",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/automated_model_selection.py",
      "relative_path": "models/optimization/automated_model_selection.py",
      "name": "automated_model_selection.py",
      "size": 47484,
      "lines": 1211,
      "hash": "c59544dae1cbac45e2519bd5b19b727a",
      "category": [
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "torch",
        "json",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "psutil",
        "dataclasses",
        "os",
        "collections",
        "aiohttp",
        "time",
        "numpy",
        "asyncio"
      ],
      "functions": [
        "get_status",
        "class:AutoDeployer",
        "_select_adaptive",
        "class:SelectionStrategy",
        "_calculate_cost_efficiency",
        "_select_reinforcement_learning",
        "class:ModelSelectionOrchestrator",
        "class:DeploymentMode",
        "_apply_context_adjustments",
        "_select_by_performance",
        "_adapt_selection_weights",
        "_select_by_cost",
        "_calculate_resource_efficiency",
        "class:ModelProfile",
        "_select_by_q_values",
        "_select_hybrid",
        "add_model_profile",
        "_load_configuration",
        "get_selection_statistics",
        "update_performance",
        "class:ResourceConstraint",
        "class:ModelSelectionEngine",
        "select_model",
        "class:ResourceConstraints",
        "_calculate_performance_score",
        "update_model_performance",
        "_evaluate_canary_metrics",
        "_calculate_reliability_score",
        "_create_default_configuration",
        "_suitable_for_task",
        "_get_context_key",
        "__init__",
        "_get_q_value",
        "_calculate_reward",
        "_meets_constraints",
        "record_selection_outcome",
        "_select_by_resources",
        "class:SelectionContext"
      ],
      "description": "Automated Model Selection System for SutazAI\nImplements intelligent model selection with resource-aware deployment",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/system_performance_benchmark_suite.py",
      "relative_path": "monitoring/system_performance_benchmark_suite.py",
      "name": "system_performance_benchmark_suite.py",
      "size": 49247,
      "lines": 1206,
      "hash": "b09020aa3b325da6e3179f7958488482",
      "category": [
        "monitoring",
        "deployment",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "statistics",
        "sqlite3",
        "logging",
        "typing",
        "concurrent.futures",
        "pathlib",
        "prometheus_client.parser",
        "psutil",
        "sys",
        "dataclasses",
        "seaborn",
        "docker",
        "matplotlib.pyplot",
        "time",
        "requests",
        "numpy",
        "datetime",
        "platform",
        "pandas",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:ServiceMeshBenchmark",
        "class:AgentPerformanceBenchmark",
        "predict_resource_usage",
        "class:BenchmarkResult",
        "analyze_sla_compliance",
        "discover_agents",
        "class:SystemPerformanceBenchmarkSuite",
        "store_system_snapshot",
        "class:AGIOrchestrationBenchmark",
        "store_benchmark_result",
        "get_system_info",
        "get_docker_version",
        "class:SystemResourceMonitor",
        "generate_recommendations",
        "init_agent_benchmarks",
        "class:SystemSnapshot",
        "load_config",
        "get_container_stats",
        "get_system_snapshot",
        "class:PerformanceForecastingModel",
        "__init__",
        "init_database",
        "generate_performance_forecast"
      ],
      "description": "SutazAI System Performance Benchmark Suite\n==========================================\n\nComprehensive benchmarking framework for the entire SutazAI ecosystem including:\n- 90+ AI agents across all categ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
      "relative_path": "scripts/deployment/ultimate-deployment-orchestrator.py",
      "name": "ultimate-deployment-orchestrator.py",
      "size": 45942,
      "lines": 1201,
      "hash": "5eace739ab27c365c7de4a2386a48daf",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "websockets",
        "sqlite3",
        "traceback",
        "logging",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "aiohttp",
        "time",
        "datetime",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:RollbackManager",
        "_load_agent_configurations",
        "class:AgentConfig",
        "class:UltimateDeploymentOrchestrator",
        "_create_agent_batches",
        "class:CanaryDeployment",
        "class:DeploymentPhase",
        "create_rollback_point",
        "class:HealthChecker",
        "class:DeploymentState",
        "_restore_environment",
        "class:DisasterRecoveryManager",
        "_generate_dashboard_html",
        "class:DeploymentDashboard",
        "_check_resource_exhaustion",
        "_capture_docker_state",
        "class:ServiceStatus",
        "__init__",
        "_select_canary_agents",
        "_signal_handler"
      ],
      "description": "Ultimate Automated Deployment Orchestrator for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    The FINAL, PERFECT deployment solution that ensures 1000% reliability\n    for all 131 AI agents in the SutazAI e",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
      "relative_path": "scripts/deployment/ultimate-deployment-master.py",
      "name": "ultimate-deployment-master.py",
      "size": 47475,
      "lines": 1187,
      "hash": "79b5e56f49dcd0c1d48f475a9b7a78a8",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "automation"
      ],
      "imports": [
        "json",
        "threading",
        "websockets",
        "sqlite3",
        "traceback",
        "logging",
        "advanced_rollback_system",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "psutil",
        "argparse",
        "sys",
        "importlib.util",
        "dataclasses",
        "os",
        "aiohttp",
        "time",
        "datetime",
        "platform",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:DeploymentStatus",
        "__init__",
        "class:DeploymentCommand",
        "class:SystemState",
        "_signal_handler",
        "class:UltimateDeploymentMaster"
      ],
      "description": "Ultimate Deployment Master for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    The FINAL, ULTIMATE deployment automation system that orchestrates all\n    components of the SutazAI ecosystem with 1000% reliab",
      "shebang": true,
      "executable": true
    }
  ],
  "duplicates": {
    "exact_duplicate": [
      "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
      "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
      "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
      "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
      "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
      "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
      "/opt/sutazaiapp/scripts/master/health-master.py",
      "/opt/sutazaiapp/scripts/health/master-health-controller.py",
      "/opt/sutazaiapp/scripts/utils/health_monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
      "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
      "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
      "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
      "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
      "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py"
    ],
    "functional_duplicate": [
      "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
      "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
      "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
      "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
      "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
      "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
      "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
      "/opt/sutazaiapp/scripts/deployment/tail_results.py",
      "/opt/sutazaiapp/scripts/deployment/enqueue_task.py",
      "/opt/sutazaiapp/scripts/master/health-master.py",
      "/opt/sutazaiapp/scripts/health/master-health-controller.py",
      "/opt/sutazaiapp/scripts/utils/health_monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
      "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
      "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
      "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
      "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
      "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
      "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
      "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
      "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
      "/opt/sutazaiapp/docker/data-analysis-engineer/app.py",
      "/opt/sutazaiapp/docker/document-knowledge-manager/app.py",
      "/opt/sutazaiapp/docker/deep-local-brain-builder/app.py",
      "/opt/sutazaiapp/docker/edge-computing-optimizer/app.py",
      "/opt/sutazaiapp/docker/observability-monitoring-engineer/app.py",
      "/opt/sutazaiapp/docker/agentzero/app.py",
      "/opt/sutazaiapp/docker/hygiene-backend/app.py",
      "/opt/sutazaiapp/docker/agent-message-bus/app.py",
      "/opt/sutazaiapp/docker/self-healing/app.py",
      "/opt/sutazaiapp/docker/context-framework/app.py",
      "/opt/sutazaiapp/docker/shellgpt/app.py",
      "/opt/sutazaiapp/services/automation/skyvern_service.py",
      "/opt/sutazaiapp/services/automation/browser_use_service.py",
      "/opt/sutazaiapp/services/codegen/aider_service.py",
      "/opt/sutazaiapp/services/jarvis/main_simple.py",
      "/opt/sutazaiapp/services/jarvis/main_basic.py"
    ]
  },
  "consolidation_plan": {
    "monitoring": {
      "target_file": "scripts/monitoring/system_monitor.py",
      "source_scripts": [
        "/opt/sutazaiapp/ultra_migration_test_suite.py",
        "/opt/sutazaiapp/ultra_deep_system_analysis.py",
        "/opt/sutazaiapp/fusion/__init__.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/schemas/base.py",
        "/opt/sutazaiapp/schemas/queue_config.py",
        "/opt/sutazaiapp/schemas/system_messages.py",
        "/opt/sutazaiapp/schemas/__init__.py",
        "/opt/sutazaiapp/self-healing/api_server.py",
        "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
        "/opt/sutazaiapp/self-healing/circuit_breaker.py",
        "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
        "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
        "/opt/sutazaiapp/tests/test_live_monitoring_validation.py",
        "/opt/sutazaiapp/tests/test_monitoring_system_comprehensive.py",
        "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
        "/opt/sutazaiapp/tests/frontend_final_validation.py",
        "/opt/sutazaiapp/tests/test_performance.py",
        "/opt/sutazaiapp/tests/performance_test_suite.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
        "/opt/sutazaiapp/tests/test_enhanced_compliance_monitor.py",
        "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_corrected_test.py",
        "/opt/sutazaiapp/tests/monitoring_system_validation.py",
        "/opt/sutazaiapp/tests/test_enhanced_detection.py",
        "/opt/sutazaiapp/tests/test_task_assignment_coordinator.py",
        "/opt/sutazaiapp/tests/test_monitor_status.py",
        "/opt/sutazaiapp/tests/advanced_health_scenarios.py",
        "/opt/sutazaiapp/tests/system_baseline_test.py",
        "/opt/sutazaiapp/tests/test_agent_detection_validation.py",
        "/opt/sutazaiapp/tests/run_monitoring_validation.py",
        "/opt/sutazaiapp/tests/health_validation_comprehensive.py",
        "/opt/sutazaiapp/tests/test_base_agent_v2.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_test.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
        "/opt/sutazaiapp/monitoring/freeze_prevention.py",
        "/opt/sutazaiapp/monitoring/system_performance_benchmark_suite.py",
        "/opt/sutazaiapp/monitoring/self_healing_monitor.py",
        "/opt/sutazaiapp/monitoring/enhanced-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/ollama_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/logging-infrastructure.py",
        "/opt/sutazaiapp/monitoring/websocket-cleanup-patch.py",
        "/opt/sutazaiapp/monitoring/sutazai_realtime_monitor.py",
        "/opt/sutazaiapp/monitoring/continuous_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/ollama_agent_monitor.py",
        "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
        "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
        "/opt/sutazaiapp/monitoring/performance_forecasting_models.py",
        "/opt/sutazaiapp/monitoring/comprehensive_report_generator.py",
        "/opt/sutazaiapp/monitoring/service_health_checker.py",
        "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/realtime_dashboard.py",
        "/opt/sutazaiapp/monitoring/test_alerting_pipeline.py",
        "/opt/sutazaiapp/fusion/visualization/fusion_visualizer.py",
        "/opt/sutazaiapp/fusion/pipeline/realtime_fusion_pipeline.py",
        "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
        "/opt/sutazaiapp/scripts/database/database_monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize-agent-utilization.py",
        "/opt/sutazaiapp/scripts/maintenance/consolidate_requirements.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-hygiene-memory-leak.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra_safe_cleanup.py",
        "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
        "/opt/sutazaiapp/scripts/deployment/service-discovery-client.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
        "/opt/sutazaiapp/scripts/deployment/agent_stream_consumer.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
        "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
        "/opt/sutazaiapp/scripts/deployment/register-services.py",
        "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
        "/opt/sutazaiapp/scripts/deployment/resource-enforcer.py",
        "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
        "/opt/sutazaiapp/scripts/deployment/launch_local_agents.py",
        "/opt/sutazaiapp/scripts/deployment/configure-kong.py",
        "/opt/sutazaiapp/scripts/deployment/test-service-communication.py",
        "/opt/sutazaiapp/scripts/deployment/activate_all_agents.py",
        "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
        "/opt/sutazaiapp/scripts/lib/__init__.py",
        "/opt/sutazaiapp/scripts/master/health-master.py",
        "/opt/sutazaiapp/scripts/master/monitor-master.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_security.py",
        "/opt/sutazaiapp/scripts/testing/smoke_test_jarvis.py",
        "/opt/sutazaiapp/scripts/testing/test_hardware_agent_detection.py",
        "/opt/sutazaiapp/scripts/testing/test_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/demo_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor_simple.py",
        "/opt/sutazaiapp/scripts/testing/ultra-consolidation-validator.py",
        "/opt/sutazaiapp/scripts/testing/integration-test.py",
        "/opt/sutazaiapp/scripts/testing/verify-hygiene-monitoring-system.py",
        "/opt/sutazaiapp/scripts/testing/test_hardware_optimizer_detection.py",
        "/opt/sutazaiapp/scripts/testing/test_agent_detection.py",
        "/opt/sutazaiapp/scripts/monitoring/monitor-ai-services.py",
        "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive_monitor_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/static_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/continuous-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/system-resource-analyzer.py",
        "/opt/sutazaiapp/scripts/monitoring/enhanced-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/validation_report.py",
        "/opt/sutazaiapp/scripts/monitoring/profile-hygiene-memory.py",
        "/opt/sutazaiapp/scripts/monitoring/identify_working_method.py",
        "/opt/sutazaiapp/scripts/monitoring/check-python-headers.py",
        "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/agent-activation-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
        "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
        "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
        "/opt/sutazaiapp/scripts/monitoring/hardware-optimization-master.py",
        "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
        "/opt/sutazaiapp/scripts/monitoring/monthly-cleanup.py",
        "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
        "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-optimization.py",
        "/opt/sutazaiapp/scripts/monitoring/debug_hardware_optimizer.py",
        "/opt/sutazaiapp/scripts/monitoring/redis_performance_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/infrastructure-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/garbage-collection-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/neo4j-performance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/resource-pool-coordinator.py",
        "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
        "/opt/sutazaiapp/scripts/monitoring/monitoring-master.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
        "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
        "/opt/sutazaiapp/scripts/health/master-health-controller.py",
        "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
        "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
        "/opt/sutazaiapp/scripts/utils/health_monitor.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/distributed-task-queue.py",
        "/opt/sutazaiapp/scripts/utils/dynamic-load-balancer.py",
        "/opt/sutazaiapp/scripts/utils/create-performance-baseline.py",
        "/opt/sutazaiapp/scripts/utils/optimization-validator.py",
        "/opt/sutazaiapp/scripts/utils/synthetic-load-test.py",
        "/opt/sutazaiapp/scripts/utils/memory-pool-manager.py",
        "/opt/sutazaiapp/scripts/utils/ollama_memory_optimizer.py",
        "/opt/sutazaiapp/scripts/utils/compact_monitor.py",
        "/opt/sutazaiapp/scripts/utils/distributed-autoscaler.py",
        "/opt/sutazaiapp/scripts/utils/generate_architecture_diagram.py",
        "/opt/sutazaiapp/scripts/utils/create-base-image-strategy.py",
        "/opt/sutazaiapp/self-healing/scripts/predictive-monitoring.py",
        "/opt/sutazaiapp/self-healing/scripts/automated-recovery.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/service_monitor.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
        "/opt/sutazaiapp/workflows/scripts/workflow_manager.py",
        "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
        "/opt/sutazaiapp/deployment/autoscaling/swarm/swarm-autoscaler.py",
        "/opt/sutazaiapp/docker/observability-monitoring-engineer/app.py",
        "/opt/sutazaiapp/docker/agentzero/agentzero_service.py",
        "/opt/sutazaiapp/docker/agentzero/app.py",
        "/opt/sutazaiapp/docker/hygiene-backend/app.py",
        "/opt/sutazaiapp/docker/python-agent-base/health_check.py",
        "/opt/sutazaiapp/docker/agent-message-bus/app.py",
        "/opt/sutazaiapp/docker/self-healing/app.py",
        "/opt/sutazaiapp/docker/health-check/health_check.py",
        "/opt/sutazaiapp/docker/context-framework/app.py",
        "/opt/sutazaiapp/docker/context-engineering/health_check.py",
        "/opt/sutazaiapp/docker/adapters/adapter.py",
        "/opt/sutazaiapp/docker/knowledge-manager/knowledge_manager.py",
        "/opt/sutazaiapp/docker/agentzero-coordinator/app.py",
        "/opt/sutazaiapp/docker/faiss/faiss_service.py",
        "/opt/sutazaiapp/docker/faiss/health_check.py",
        "/opt/sutazaiapp/docker/ollama-monitor/monitor.py",
        "/opt/sutazaiapp/docker/shellgpt/app.py",
        "/opt/sutazaiapp/docker/health-monitor/main.py",
        "/opt/sutazaiapp/docker/health-monitor/app.py",
        "/opt/sutazaiapp/docker/enhanced-model-manager/model_manager.py",
        "/opt/sutazaiapp/docker/ai-metrics-exporter/ai_metrics_exporter.py",
        "/opt/sutazaiapp/docker/adapters/postgres/postgres_adapter.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/hygiene/test_monitoring.py",
        "/opt/sutazaiapp/tests/docker/test_containers.py",
        "/opt/sutazaiapp/tests/load/load_test_runner.py",
        "/opt/sutazaiapp/tests/load/locustfile.py",
        "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
        "/opt/sutazaiapp/tests/integration/test_api_integration.py",
        "/opt/sutazaiapp/tests/integration/test-monitoring-integration.py",
        "/opt/sutazaiapp/tests/health/test_service_health.py",
        "/opt/sutazaiapp/tests/health/__init__.py",
        "/opt/sutazaiapp/models/optimization/performance_benchmark.py",
        "/opt/sutazaiapp/models/optimization/optimization_orchestrator.py",
        "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
        "/opt/sutazaiapp/security/rasp/runtime_protection.py",
        "/opt/sutazaiapp/chaos/scripts/monitoring-integration.py",
        "/opt/sutazaiapp/chaos/scripts/resilience-tester.py",
        "/opt/sutazaiapp/monitoring/security/intrusion_detection.py",
        "/opt/sutazaiapp/monitoring/advanced/distributed_tracing.py",
        "/opt/sutazaiapp/monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
        "/opt/sutazaiapp/localagi/goals/autonomous_goal_achievement_system.py",
        "/opt/sutazaiapp/services/ai-metrics/main.py",
        "/opt/sutazaiapp/services/resource-manager/main.py",
        "/opt/sutazaiapp/services/automation/skyvern_service.py",
        "/opt/sutazaiapp/services/automation/browser_use_service.py",
        "/opt/sutazaiapp/services/codegen/gpt_engineer_service.py",
        "/opt/sutazaiapp/services/codegen/aider_service.py",
        "/opt/sutazaiapp/services/adapters/base_adapter.py",
        "/opt/sutazaiapp/services/jarvis/main_simple.py",
        "/opt/sutazaiapp/services/ml/pytorch_service.py",
        "/opt/sutazaiapp/services/ml/tensorflow_service.py",
        "/opt/sutazaiapp/services/ml/jax_service.py",
        "/opt/sutazaiapp/services/faiss-vector/main.py",
        "/opt/sutazaiapp/services/api-adapter/unified_ai_client.py",
        "/opt/sutazaiapp/services/jarvis/tests/test_routes_minimal.py"
      ],
      "total_scripts": 218,
      "total_lines": 102358
    },
    "deployment": {
      "target_file": "scripts/deployment/deployment_manager.py",
      "source_scripts": [
        "/opt/sutazaiapp/ultra_migration_test_suite.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/schemas/agent_messages.py",
        "/opt/sutazaiapp/self-healing/api_server.py",
        "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
        "/opt/sutazaiapp/workflows/deployment_automation.py",
        "/opt/sutazaiapp/tests/test_deployed.py",
        "/opt/sutazaiapp/tests/test_ai_agent_orchestrator.py",
        "/opt/sutazaiapp/tests/master_dockerfile_validator.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_test.py",
        "/opt/sutazaiapp/security/security_orchestrator.py",
        "/opt/sutazaiapp/monitoring/system_performance_benchmark_suite.py",
        "/opt/sutazaiapp/monitoring/sutazai_realtime_monitor.py",
        "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-script-organization.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-deployment-scripts.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-system-orchestrator.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
        "/opt/sutazaiapp/scripts/maintenance/update-agent-auth.py",
        "/opt/sutazaiapp/scripts/maintenance/update_approved_ports.py",
        "/opt/sutazaiapp/scripts/maintenance/update-restart-policies.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-startup.py",
        "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
        "/opt/sutazaiapp/scripts/maintenance/garbage-collection-system.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize-ollama-performance.py",
        "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
        "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
        "/opt/sutazaiapp/scripts/deployment/optimize-load-balancing.py",
        "/opt/sutazaiapp/scripts/deployment/configure-fault-tolerance.py",
        "/opt/sutazaiapp/scripts/deployment/service-discovery-client.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
        "/opt/sutazaiapp/scripts/deployment/tail_results.py",
        "/opt/sutazaiapp/scripts/deployment/migrate-agents-to-ollama.py",
        "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
        "/opt/sutazaiapp/scripts/deployment/configure-rabbitmq.py",
        "/opt/sutazaiapp/scripts/deployment/agent_stream_consumer.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
        "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
        "/opt/sutazaiapp/scripts/deployment/enqueue_task.py",
        "/opt/sutazaiapp/scripts/deployment/register-services.py",
        "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/master-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
        "/opt/sutazaiapp/scripts/deployment/resource-enforcer.py",
        "/opt/sutazaiapp/scripts/deployment/direct_agent_activation.py",
        "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
        "/opt/sutazaiapp/scripts/deployment/service-mesh-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/validate-service-mesh.py",
        "/opt/sutazaiapp/scripts/deployment/launch_local_agents.py",
        "/opt/sutazaiapp/scripts/deployment/configure-kong.py",
        "/opt/sutazaiapp/scripts/deployment/fix-agent-deployment-issues.py",
        "/opt/sutazaiapp/scripts/deployment/test-service-communication.py",
        "/opt/sutazaiapp/scripts/deployment/activate_all_agents.py",
        "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
        "/opt/sutazaiapp/scripts/deployment/startup_optimizer.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
        "/opt/sutazaiapp/scripts/deployment/ai-runtime-init.py",
        "/opt/sutazaiapp/scripts/master/health-master.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_security.py",
        "/opt/sutazaiapp/scripts/monitoring/agent-activation-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
        "/opt/sutazaiapp/scripts/monitoring/debug_hardware_optimizer.py",
        "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
        "/opt/sutazaiapp/scripts/health/master-health-controller.py",
        "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
        "/opt/sutazaiapp/scripts/utils/health_monitor.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
        "/opt/sutazaiapp/scripts/utils/generate_secure_secrets.py",
        "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
        "/opt/sutazaiapp/scripts/utils/startup_validator.py",
        "/opt/sutazaiapp/scripts/utils/compact_monitor.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_simple.py",
        "/opt/sutazaiapp/workflows/scripts/deploy_dify_workflows.py",
        "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
        "/opt/sutazaiapp/deployment/autoscaling/swarm/swarm-autoscaler.py",
        "/opt/sutazaiapp/docker/agentzero-coordinator/app.py",
        "/opt/sutazaiapp/docker/multi-agent-coordinator/app.py",
        "/opt/sutazaiapp/docker/edge-computing-optimizer/app.py",
        "/opt/sutazaiapp/docker/ai-agent-orchestrator/app.py",
        "/opt/sutazaiapp/tests/hygiene/test_performance.py",
        "/opt/sutazaiapp/tests/hygiene/test-hygiene-system.py",
        "/opt/sutazaiapp/tests/hygiene/test_orchestrator.py",
        "/opt/sutazaiapp/tests/load/locustfile.py",
        "/opt/sutazaiapp/tests/security/test-authentication.py",
        "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
        "/opt/sutazaiapp/tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
        "/opt/sutazaiapp/models/optimization/automated_model_selection.py",
        "/opt/sutazaiapp/models/optimization/optimization_orchestrator.py",
        "/opt/sutazaiapp/models/optimization/quantization.py",
        "/opt/sutazaiapp/models/optimization/knowledge_distillation.py",
        "/opt/sutazaiapp/models/optimization/model_cache_manager.py",
        "/opt/sutazaiapp/services/chainlit/chainlit_app.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/dify_adapter.py",
        "/opt/sutazaiapp/services/jarvis/core/orchestrator.py"
      ],
      "total_scripts": 101,
      "total_lines": 49285
    },
    "testing": {
      "target_file": "scripts/testing/test_runner.py",
      "source_scripts": [
        "/opt/sutazaiapp/test_ollama.py",
        "/opt/sutazaiapp/hardware_api_validation_test.py",
        "/opt/sutazaiapp/ultra_migration_test_suite.py",
        "/opt/sutazaiapp/scripts/apply_security_fixes.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/scripts/update_dockerfiles.py",
        "/opt/sutazaiapp/workflows/deployment_automation.py",
        "/opt/sutazaiapp/workflows/practical_examples.py",
        "/opt/sutazaiapp/workflows/test_code_improvement.py",
        "/opt/sutazaiapp/tests/test_integration.py",
        "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
        "/opt/sutazaiapp/tests/test_failure_scenarios.py",
        "/opt/sutazaiapp/tests/test_live_monitoring_validation.py",
        "/opt/sutazaiapp/tests/test_deployed.py",
        "/opt/sutazaiapp/tests/dockerfile_security_validator.py",
        "/opt/sutazaiapp/tests/test_monitoring_system_comprehensive.py",
        "/opt/sutazaiapp/tests/test_ollama_integration.py",
        "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
        "/opt/sutazaiapp/tests/specialized_tests.py",
        "/opt/sutazaiapp/tests/frontend_final_validation.py",
        "/opt/sutazaiapp/tests/test_connection_pool.py",
        "/opt/sutazaiapp/tests/test_coordinator_integration.py",
        "/opt/sutazaiapp/tests/test_external_integration.py",
        "/opt/sutazaiapp/tests/test_architecture_enhancements.py",
        "/opt/sutazaiapp/tests/test_performance.py",
        "/opt/sutazaiapp/tests/performance_test_suite.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
        "/opt/sutazaiapp/tests/test_jwt_security_fix.py",
        "/opt/sutazaiapp/tests/uuid_migration_corrected_test.py",
        "/opt/sutazaiapp/tests/test_ai_agent_orchestrator.py",
        "/opt/sutazaiapp/tests/ultra_comprehensive_system_test_suite.py",
        "/opt/sutazaiapp/tests/test_enhanced_compliance_monitor.py",
        "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
        "/opt/sutazaiapp/tests/dockerfile_consolidation_test_suite.py",
        "/opt/sutazaiapp/tests/demo_load_test.py",
        "/opt/sutazaiapp/tests/frontend_performance_ultra_test.py",
        "/opt/sutazaiapp/tests/simplified_load_test.py",
        "/opt/sutazaiapp/tests/test_messaging_integration.py",
        "/opt/sutazaiapp/tests/test_smoke.py",
        "/opt/sutazaiapp/tests/master_dockerfile_validator.py",
        "/opt/sutazaiapp/tests/test_jwt_vulnerability_fix.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_corrected_test.py",
        "/opt/sutazaiapp/tests/qa_comprehensive_test_suite.py",
        "/opt/sutazaiapp/tests/conftest.py",
        "/opt/sutazaiapp/tests/monitoring_system_validation.py",
        "/opt/sutazaiapp/tests/test_optional_features.py",
        "/opt/sutazaiapp/tests/test_enhanced_detection.py",
        "/opt/sutazaiapp/tests/test_task_assignment_coordinator.py",
        "/opt/sutazaiapp/tests/security_test_suite.py",
        "/opt/sutazaiapp/tests/test_monitor_status.py",
        "/opt/sutazaiapp/tests/advanced_health_scenarios.py",
        "/opt/sutazaiapp/tests/corrected_security_test.py",
        "/opt/sutazaiapp/tests/test_regression.py",
        "/opt/sutazaiapp/tests/system_baseline_test.py",
        "/opt/sutazaiapp/tests/test_agent_detection_validation.py",
        "/opt/sutazaiapp/tests/comprehensive_test_report_final.py",
        "/opt/sutazaiapp/tests/run_monitoring_validation.py",
        "/opt/sutazaiapp/tests/test_feature_flags.py",
        "/opt/sutazaiapp/tests/health_validation_comprehensive.py",
        "/opt/sutazaiapp/tests/test_base_agent_v2.py",
        "/opt/sutazaiapp/tests/ai_powered_test_suite.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_test.py",
        "/opt/sutazaiapp/tests/uuid_migration_test.py",
        "/opt/sutazaiapp/tests/test_live_agent.py",
        "/opt/sutazaiapp/tests/test_resource_arbitration_agent.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
        "/opt/sutazaiapp/tests/frontend_stress_ultra_validation.py",
        "/opt/sutazaiapp/system-validator/system_validator.py",
        "/opt/sutazaiapp/load-testing/generate-agent-tests.py",
        "/opt/sutazaiapp/load-testing/simplified-load-test.py",
        "/opt/sutazaiapp/load-testing/production-load-test.py",
        "/opt/sutazaiapp/monitoring/self_healing_monitor.py",
        "/opt/sutazaiapp/monitoring/websocket-cleanup-patch.py",
        "/opt/sutazaiapp/monitoring/sutazai_realtime_monitor.py",
        "/opt/sutazaiapp/monitoring/service_health_checker.py",
        "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/test_alerting_pipeline.py",
        "/opt/sutazaiapp/disaster-recovery/validate-disaster-recovery.py",
        "/opt/sutazaiapp/disaster-recovery/disaster-recovery-test-suite.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-script-organization.py",
        "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-changelog-updated.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-directory-duplication.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-docker-structure.py",
        "/opt/sutazaiapp/scripts/pre-commit/quick-system-check.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-llm-usage.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-garbage-files.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-safe-deletion.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-doc-duplication.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-python-docs.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-deployment-scripts.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-conceptual-elements.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-breaking-changes.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-doc-structure.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-script-duplication.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup-old-requirements.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
        "/opt/sutazaiapp/scripts/maintenance/demo-hygiene-tests.py",
        "/opt/sutazaiapp/scripts/maintenance/update-github-workflows-compatibility.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup_changelogs.py",
        "/opt/sutazaiapp/scripts/maintenance/bottleneck-eliminator.py",
        "/opt/sutazaiapp/scripts/maintenance/fix_container_security.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize_ollama.py",
        "/opt/sutazaiapp/scripts/maintenance/run_hygiene_suite.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-app-files.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-hygiene-memory-leak.py",
        "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra_safe_cleanup.py",
        "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
        "/opt/sutazaiapp/scripts/deployment/service-discovery-client.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
        "/opt/sutazaiapp/scripts/deployment/migrate-agents-to-ollama.py",
        "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
        "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
        "/opt/sutazaiapp/scripts/deployment/enqueue_task.py",
        "/opt/sutazaiapp/scripts/deployment/register-services.py",
        "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
        "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
        "/opt/sutazaiapp/scripts/deployment/validate-service-mesh.py",
        "/opt/sutazaiapp/scripts/deployment/launch_local_agents.py",
        "/opt/sutazaiapp/scripts/deployment/configure-kong.py",
        "/opt/sutazaiapp/scripts/deployment/fix-agent-deployment-issues.py",
        "/opt/sutazaiapp/scripts/deployment/test-service-communication.py",
        "/opt/sutazaiapp/scripts/deployment/activate_all_agents.py",
        "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
        "/opt/sutazaiapp/scripts/lib/script_optimization_template.py",
        "/opt/sutazaiapp/scripts/lib/security_utils.py",
        "/opt/sutazaiapp/scripts/lib/__init__.py",
        "/opt/sutazaiapp/scripts/master/test-master.py",
        "/opt/sutazaiapp/scripts/master/health-master.py",
        "/opt/sutazaiapp/scripts/master/monitor-master.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_simple.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_security.py",
        "/opt/sutazaiapp/scripts/security/ultra_security_validation.py",
        "/opt/sutazaiapp/scripts/testing/validate-compliance.py",
        "/opt/sutazaiapp/scripts/testing/smoke_test_jarvis.py",
        "/opt/sutazaiapp/scripts/testing/run_integration.py",
        "/opt/sutazaiapp/scripts/testing/test_hardware_agent_detection.py",
        "/opt/sutazaiapp/scripts/testing/test_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_gpu_detection.py",
        "/opt/sutazaiapp/scripts/testing/demo_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/validate_ports.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor_simple.py",
        "/opt/sutazaiapp/scripts/testing/validate_agents.py",
        "/opt/sutazaiapp/scripts/testing/ultra-consolidation-validator.py",
        "/opt/sutazaiapp/scripts/testing/integration-test.py",
        "/opt/sutazaiapp/scripts/testing/verify-hygiene-monitoring-system.py",
        "/opt/sutazaiapp/scripts/testing/verify_claude_rules.py",
        "/opt/sutazaiapp/scripts/testing/test_runner.py",
        "/opt/sutazaiapp/scripts/testing/test_hardware_optimizer_detection.py",
        "/opt/sutazaiapp/scripts/testing/deduplication-validator.py",
        "/opt/sutazaiapp/scripts/testing/test_agent_detection.py",
        "/opt/sutazaiapp/scripts/testing/validate-container-infrastructure.py",
        "/opt/sutazaiapp/scripts/testing/validate-complete-system.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_improvements.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive_monitor_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/system-resource-analyzer.py",
        "/opt/sutazaiapp/scripts/monitoring/enhanced-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/validation_report.py",
        "/opt/sutazaiapp/scripts/monitoring/identify_working_method.py",
        "/opt/sutazaiapp/scripts/monitoring/check-python-headers.py",
        "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
        "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
        "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
        "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
        "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
        "/opt/sutazaiapp/scripts/monitoring/debug_hardware_optimizer.py",
        "/opt/sutazaiapp/scripts/monitoring/garbage-collection-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/neo4j-performance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
        "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
        "/opt/sutazaiapp/scripts/health/master-health-controller.py",
        "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
        "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
        "/opt/sutazaiapp/scripts/utils/export_openapi.py",
        "/opt/sutazaiapp/scripts/utils/coverage_reporter.py",
        "/opt/sutazaiapp/scripts/utils/large_file_handler_demo.py",
        "/opt/sutazaiapp/scripts/utils/health_monitor.py",
        "/opt/sutazaiapp/scripts/utils/register_with_consul.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
        "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
        "/opt/sutazaiapp/scripts/utils/optimization-validator.py",
        "/opt/sutazaiapp/scripts/utils/synthetic-load-test.py",
        "/opt/sutazaiapp/scripts/utils/check_naming.py",
        "/opt/sutazaiapp/scripts/utils/startup_validator.py",
        "/opt/sutazaiapp/scripts/utils/otp_override.py",
        "/opt/sutazaiapp/scripts/utils/quick-container-analysis.py",
        "/opt/sutazaiapp/scripts/utils/check_secrets.py",
        "/opt/sutazaiapp/scripts/utils/ai-performance-validator.py",
        "/opt/sutazaiapp/scripts/utils/final-system-validation.py",
        "/opt/sutazaiapp/scripts/utils/ensure_changelogs.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_simple.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_rules.py",
        "/opt/sutazaiapp/scripts/utils/check_requirements.py",
        "/opt/sutazaiapp/scripts/utils/check_banned_keywords.py",
        "/opt/sutazaiapp/scripts/utils/file_utils.py",
        "/opt/sutazaiapp/scripts/utils/docs_fix_all_issues.py",
        "/opt/sutazaiapp/self-healing/scripts/predictive-monitoring.py",
        "/opt/sutazaiapp/self-healing/scripts/automated-recovery.py",
        "/opt/sutazaiapp/self-healing/scripts/graceful-degradation.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
        "/opt/sutazaiapp/deployment/autoscaling/swarm/swarm-autoscaler.py",
        "/opt/sutazaiapp/docker/observability-monitoring-engineer/app.py",
        "/opt/sutazaiapp/docker/agentzero/app.py",
        "/opt/sutazaiapp/docker/hygiene-backend/app.py",
        "/opt/sutazaiapp/docker/python-agent-base/health_check.py",
        "/opt/sutazaiapp/docker/agent-message-bus/app.py",
        "/opt/sutazaiapp/docker/self-healing/app.py",
        "/opt/sutazaiapp/docker/health-check/health_check.py",
        "/opt/sutazaiapp/docker/finrobot/finrobot_service.py",
        "/opt/sutazaiapp/docker/pentestgpt/main.py",
        "/opt/sutazaiapp/docker/hygiene-scanner/hygiene_scanner.py",
        "/opt/sutazaiapp/docker/test-build/app.py",
        "/opt/sutazaiapp/docker/context-engineering/health_check.py",
        "/opt/sutazaiapp/docker/hygiene-validator/rule_validator.py",
        "/opt/sutazaiapp/docker/adapters/adapter.py",
        "/opt/sutazaiapp/docker/faiss/health_check.py",
        "/opt/sutazaiapp/docker/ollama-monitor/monitor.py",
        "/opt/sutazaiapp/docker/autogen/autogen_service.py",
        "/opt/sutazaiapp/auth/jwt-service/main.py",
        "/opt/sutazaiapp/tests/hygiene/test_failure_scenarios.py",
        "/opt/sutazaiapp/tests/hygiene/test_git_hooks.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/hygiene/test_performance.py",
        "/opt/sutazaiapp/tests/hygiene/test-hygiene-system.py",
        "/opt/sutazaiapp/tests/hygiene/test_orchestrator.py",
        "/opt/sutazaiapp/tests/hygiene/test_fixtures.py",
        "/opt/sutazaiapp/tests/hygiene/__init__.py",
        "/opt/sutazaiapp/tests/hygiene/test_coordinator.py",
        "/opt/sutazaiapp/tests/hygiene/test_monitoring.py",
        "/opt/sutazaiapp/tests/docker/__init__.py",
        "/opt/sutazaiapp/tests/docker/test_containers.py",
        "/opt/sutazaiapp/tests/unit/test_security.py",
        "/opt/sutazaiapp/tests/unit/test_brain.py",
        "/opt/sutazaiapp/tests/load/test-ollama-high-concurrency.py",
        "/opt/sutazaiapp/tests/load/load_test_runner.py",
        "/opt/sutazaiapp/tests/load/__init__.py",
        "/opt/sutazaiapp/tests/load/locustfile.py",
        "/opt/sutazaiapp/tests/security/test_xss_protection.py",
        "/opt/sutazaiapp/tests/security/test-authentication.py",
        "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
        "/opt/sutazaiapp/tests/security/test_security_hardening.py",
        "/opt/sutazaiapp/tests/security/__init__.py",
        "/opt/sutazaiapp/tests/performance/load_test.py",
        "/opt/sutazaiapp/tests/integration/test-dashboard-fix.py",
        "/opt/sutazaiapp/tests/integration/test-neo4j-integration.py",
        "/opt/sutazaiapp/tests/integration/test_api_integration.py",
        "/opt/sutazaiapp/tests/integration/test-monitoring-integration.py",
        "/opt/sutazaiapp/tests/integration/test-ollama-integration.py",
        "/opt/sutazaiapp/tests/health/test_service_health.py",
        "/opt/sutazaiapp/tests/health/__init__.py",
        "/opt/sutazaiapp/tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
        "/opt/sutazaiapp/models/optimization/performance_benchmark.py",
        "/opt/sutazaiapp/models/optimization/ab_testing.py",
        "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
        "/opt/sutazaiapp/security/compliance/compliance_automation.py",
        "/opt/sutazaiapp/chaos/scripts/resilience-tester.py",
        "/opt/sutazaiapp/chaos/scripts/chaos-engine.py",
        "/opt/sutazaiapp/monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
        "/opt/sutazaiapp/services/resource-manager/main.py",
        "/opt/sutazaiapp/services/adapters/base_adapter.py",
        "/opt/sutazaiapp/services/jarvis/main_simple.py",
        "/opt/sutazaiapp/services/jarvis/main.py",
        "/opt/sutazaiapp/services/faiss-vector/main.py",
        "/opt/sutazaiapp/services/adapters/agent_systems/autogpt_adapter.py",
        "/opt/sutazaiapp/services/adapters/agent_systems/letta_adapter.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/langflow_adapter.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/dify_adapter.py",
        "/opt/sutazaiapp/services/jarvis/core/task_planner.py",
        "/opt/sutazaiapp/services/jarvis/tests/test_routes_minimal.py"
      ],
      "total_scripts": 284,
      "total_lines": 114205
    },
    "maintenance": {
      "target_file": "scripts/maintenance/maintenance_manager.py",
      "source_scripts": [
        "/opt/sutazaiapp/ultra_migration_test_suite.py",
        "/opt/sutazaiapp/scripts/apply_security_fixes.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/scripts/update_dockerfiles.py",
        "/opt/sutazaiapp/schemas/queue_config.py",
        "/opt/sutazaiapp/schemas/__init__.py",
        "/opt/sutazaiapp/self-healing/api_server.py",
        "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
        "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
        "/opt/sutazaiapp/tests/test_integration.py",
        "/opt/sutazaiapp/tests/test_failure_scenarios.py",
        "/opt/sutazaiapp/tests/dockerfile_security_validator.py",
        "/opt/sutazaiapp/tests/test_connection_pool.py",
        "/opt/sutazaiapp/tests/test_jwt_security_fix.py",
        "/opt/sutazaiapp/tests/uuid_migration_corrected_test.py",
        "/opt/sutazaiapp/tests/test_ai_agent_orchestrator.py",
        "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
        "/opt/sutazaiapp/tests/test_jwt_vulnerability_fix.py",
        "/opt/sutazaiapp/tests/qa_comprehensive_test_suite.py",
        "/opt/sutazaiapp/tests/conftest.py",
        "/opt/sutazaiapp/tests/test_task_assignment_coordinator.py",
        "/opt/sutazaiapp/tests/system_baseline_test.py",
        "/opt/sutazaiapp/tests/test_base_agent_v2.py",
        "/opt/sutazaiapp/tests/uuid_migration_test.py",
        "/opt/sutazaiapp/tests/test_resource_arbitration_agent.py",
        "/opt/sutazaiapp/monitoring/enhanced-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/logging-infrastructure.py",
        "/opt/sutazaiapp/monitoring/websocket-cleanup-patch.py",
        "/opt/sutazaiapp/monitoring/continuous_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
        "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
        "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
        "/opt/sutazaiapp/services/external-service-registry.py",
        "/opt/sutazaiapp/fusion/visualization/fusion_visualizer.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-changelog-updated.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-docker-structure.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-garbage-files.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-doc-duplication.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-system-orchestrator.py",
        "/opt/sutazaiapp/scripts/maintenance/complete-cleanup-and-prepare.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup-old-requirements.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
        "/opt/sutazaiapp/scripts/maintenance/update-agent-auth.py",
        "/opt/sutazaiapp/scripts/maintenance/update_approved_ports.py",
        "/opt/sutazaiapp/scripts/maintenance/demo-hygiene-tests.py",
        "/opt/sutazaiapp/scripts/maintenance/safe-requirements-cleanup.py",
        "/opt/sutazaiapp/scripts/maintenance/update-github-workflows-compatibility.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup_changelogs.py",
        "/opt/sutazaiapp/scripts/maintenance/bottleneck-eliminator.py",
        "/opt/sutazaiapp/scripts/maintenance/fix_container_security.py",
        "/opt/sutazaiapp/scripts/maintenance/update-restart-policies.py",
        "/opt/sutazaiapp/scripts/maintenance/rule13_garbage_collector.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-memory-limits.py",
        "/opt/sutazaiapp/scripts/maintenance/run_hygiene_suite.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-startup.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-enforcement-coordinator.py",
        "/opt/sutazaiapp/scripts/maintenance/discovery.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-app-files.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-hygiene-memory-leak.py",
        "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
        "/opt/sutazaiapp/scripts/maintenance/garbage-collection-system.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra_safe_cleanup.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-critical-agents.py",
        "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
        "/opt/sutazaiapp/scripts/deployment/master-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/fix-agent-deployment-issues.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
        "/opt/sutazaiapp/scripts/lib/security_utils.py",
        "/opt/sutazaiapp/scripts/security/fix_cors_wildcards.py",
        "/opt/sutazaiapp/scripts/testing/run_integration.py",
        "/opt/sutazaiapp/scripts/testing/test_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/validate_agents.py",
        "/opt/sutazaiapp/scripts/testing/integration-test.py",
        "/opt/sutazaiapp/scripts/testing/verify-hygiene-monitoring-system.py",
        "/opt/sutazaiapp/scripts/testing/validate-container-infrastructure.py",
        "/opt/sutazaiapp/scripts/testing/validate-complete-system.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
        "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/static_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/continuous-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/validation_report.py",
        "/opt/sutazaiapp/scripts/monitoring/profile-hygiene-memory.py",
        "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
        "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
        "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
        "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
        "/opt/sutazaiapp/scripts/monitoring/monthly-cleanup.py",
        "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-optimization.py",
        "/opt/sutazaiapp/scripts/monitoring/garbage-collection-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
        "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
        "/opt/sutazaiapp/scripts/utils/generate_docs_inventory.py",
        "/opt/sutazaiapp/scripts/utils/memory_cleanup_service.py",
        "/opt/sutazaiapp/scripts/utils/coord_bus.py",
        "/opt/sutazaiapp/scripts/utils/register_with_consul.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/remove_litellm_from_registry.py",
        "/opt/sutazaiapp/scripts/utils/pin_all_dependencies.py",
        "/opt/sutazaiapp/scripts/utils/check_naming.py",
        "/opt/sutazaiapp/scripts/utils/emergency-compliance-fix.py",
        "/opt/sutazaiapp/scripts/utils/check_secrets.py",
        "/opt/sutazaiapp/scripts/utils/compact_monitor.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_simple.py",
        "/opt/sutazaiapp/scripts/utils/standardize-requirements.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_rules.py",
        "/opt/sutazaiapp/scripts/utils/add_claude_md_directive.py",
        "/opt/sutazaiapp/scripts/utils/check_requirements.py",
        "/opt/sutazaiapp/scripts/utils/requirements_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/file_utils.py",
        "/opt/sutazaiapp/scripts/utils/docs_fix_all_issues.py",
        "/opt/sutazaiapp/scripts/utils/static_discovery.py",
        "/opt/sutazaiapp/scripts/models/ollama/update_agent_configs_to_gpt-oss.py",
        "/opt/sutazaiapp/self-healing/graceful-degradation/feature_flags.py",
        "/opt/sutazaiapp/docker/hygiene-backend/app.py",
        "/opt/sutazaiapp/docker/hygiene-scanner/hygiene_scanner.py",
        "/opt/sutazaiapp/docker/hygiene-validator/rule_validator.py",
        "/opt/sutazaiapp/tests/hygiene/test_failure_scenarios.py",
        "/opt/sutazaiapp/tests/hygiene/test_git_hooks.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/hygiene/test_performance.py",
        "/opt/sutazaiapp/tests/hygiene/test-hygiene-system.py",
        "/opt/sutazaiapp/tests/hygiene/test_orchestrator.py",
        "/opt/sutazaiapp/tests/hygiene/test_fixtures.py",
        "/opt/sutazaiapp/tests/hygiene/__init__.py",
        "/opt/sutazaiapp/tests/hygiene/test_coordinator.py",
        "/opt/sutazaiapp/tests/hygiene/test_monitoring.py",
        "/opt/sutazaiapp/tests/docker/test_containers.py",
        "/opt/sutazaiapp/tests/security/test_security_hardening.py",
        "/opt/sutazaiapp/tests/integration/test-dashboard-fix.py",
        "/opt/sutazaiapp/tests/integration/test_api_integration.py",
        "/opt/sutazaiapp/tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
        "/opt/sutazaiapp/localagi/goals/autonomous_goal_achievement_system.py",
        "/opt/sutazaiapp/services/chainlit/chainlit_app.py",
        "/opt/sutazaiapp/services/jarvis/tests/test_routes_minimal.py"
      ],
      "total_scripts": 141,
      "total_lines": 60236
    },
    "utils": {
      "target_file": "scripts/utils/common_utils.py",
      "source_scripts": [
        "/opt/sutazaiapp/script_consolidation_analysis.py",
        "/opt/sutazaiapp/ULTRA_DUPLICATE_ANALYSIS.py",
        "/opt/sutazaiapp/ultra_deep_system_analysis.py",
        "/opt/sutazaiapp/fusion/__init__.py",
        "/opt/sutazaiapp/scripts/apply_security_fixes.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/scripts/update_dockerfiles.py",
        "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
        "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
        "/opt/sutazaiapp/workflows/simple_code_review.py",
        "/opt/sutazaiapp/workflows/demo_workflow.py",
        "/opt/sutazaiapp/workflows/security_scan_workflow.py",
        "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
        "/opt/sutazaiapp/tests/test_deployed.py",
        "/opt/sutazaiapp/tests/dockerfile_security_validator.py",
        "/opt/sutazaiapp/tests/test_monitoring_system_comprehensive.py",
        "/opt/sutazaiapp/tests/test_ollama_integration.py",
        "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
        "/opt/sutazaiapp/tests/specialized_tests.py",
        "/opt/sutazaiapp/tests/test_performance.py",
        "/opt/sutazaiapp/tests/performance_test_suite.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
        "/opt/sutazaiapp/tests/test_enhanced_compliance_monitor.py",
        "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
        "/opt/sutazaiapp/tests/dockerfile_consolidation_test_suite.py",
        "/opt/sutazaiapp/tests/demo_load_test.py",
        "/opt/sutazaiapp/tests/frontend_performance_ultra_test.py",
        "/opt/sutazaiapp/tests/simplified_load_test.py",
        "/opt/sutazaiapp/tests/master_dockerfile_validator.py",
        "/opt/sutazaiapp/tests/qa_comprehensive_test_suite.py",
        "/opt/sutazaiapp/tests/conftest.py",
        "/opt/sutazaiapp/tests/security_test_suite.py",
        "/opt/sutazaiapp/tests/advanced_health_scenarios.py",
        "/opt/sutazaiapp/tests/system_baseline_test.py",
        "/opt/sutazaiapp/tests/comprehensive_test_report_final.py",
        "/opt/sutazaiapp/tests/run_monitoring_validation.py",
        "/opt/sutazaiapp/tests/health_validation_comprehensive.py",
        "/opt/sutazaiapp/tests/ai_powered_test_suite.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
        "/opt/sutazaiapp/tests/frontend_stress_ultra_validation.py",
        "/opt/sutazaiapp/system-validator/system_validator.py",
        "/opt/sutazaiapp/load-testing/generate-agent-tests.py",
        "/opt/sutazaiapp/load-testing/production-load-test.py",
        "/opt/sutazaiapp/monitoring/freeze_prevention.py",
        "/opt/sutazaiapp/monitoring/system_performance_benchmark_suite.py",
        "/opt/sutazaiapp/monitoring/self_healing_monitor.py",
        "/opt/sutazaiapp/monitoring/enhanced-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/ollama_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/logging-infrastructure.py",
        "/opt/sutazaiapp/monitoring/sutazai_realtime_monitor.py",
        "/opt/sutazaiapp/monitoring/continuous_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/ollama_agent_monitor.py",
        "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
        "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
        "/opt/sutazaiapp/monitoring/comprehensive_report_generator.py",
        "/opt/sutazaiapp/monitoring/service_health_checker.py",
        "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/realtime_dashboard.py",
        "/opt/sutazaiapp/disaster-recovery/emergency-shutdown-coordinator.py",
        "/opt/sutazaiapp/disaster-recovery/validate-disaster-recovery.py",
        "/opt/sutazaiapp/disaster-recovery/backup-coordinator.py",
        "/opt/sutazaiapp/disaster-recovery/point-in-time-recovery.py",
        "/opt/sutazaiapp/disaster-recovery/disaster-recovery-test-suite.py",
        "/opt/sutazaiapp/services/ollama_service.py",
        "/opt/sutazaiapp/fusion/core/unified_representation.py",
        "/opt/sutazaiapp/fusion/core/multi_modal_fusion_coordinator.py",
        "/opt/sutazaiapp/fusion/core/cross_modal_learning.py",
        "/opt/sutazaiapp/fusion/visualization/fusion_visualizer.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-script-organization.py",
        "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-changelog-updated.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-directory-duplication.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-docker-structure.py",
        "/opt/sutazaiapp/scripts/pre-commit/quick-system-check.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-llm-usage.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-garbage-files.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-safe-deletion.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-doc-duplication.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-python-docs.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-deployment-scripts.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-conceptual-elements.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-breaking-changes.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-doc-structure.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-script-duplication.py",
        "/opt/sutazaiapp/scripts/database/database_monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-system-orchestrator.py",
        "/opt/sutazaiapp/scripts/maintenance/complete-cleanup-and-prepare.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup-old-requirements.py",
        "/opt/sutazaiapp/scripts/maintenance/remove_fantasy_elements.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
        "/opt/sutazaiapp/scripts/maintenance/update-agent-auth.py",
        "/opt/sutazaiapp/scripts/maintenance/update_approved_ports.py",
        "/opt/sutazaiapp/scripts/maintenance/demo-hygiene-tests.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra-script-consolidation.py",
        "/opt/sutazaiapp/scripts/maintenance/safe-requirements-cleanup.py",
        "/opt/sutazaiapp/scripts/maintenance/update-github-workflows-compatibility.py",
        "/opt/sutazaiapp/scripts/maintenance/cleanup_changelogs.py",
        "/opt/sutazaiapp/scripts/maintenance/post_status.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize-agent-utilization.py",
        "/opt/sutazaiapp/scripts/maintenance/bottleneck-eliminator.py",
        "/opt/sutazaiapp/scripts/maintenance/fix_container_security.py",
        "/opt/sutazaiapp/scripts/maintenance/rule13_garbage_collector.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize_ollama.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-memory-limits.py",
        "/opt/sutazaiapp/scripts/maintenance/consolidate_requirements.py",
        "/opt/sutazaiapp/scripts/maintenance/run_hygiene_suite.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-startup.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-enforcement-coordinator.py",
        "/opt/sutazaiapp/scripts/maintenance/discovery.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-agent-app-files.py",
        "/opt/sutazaiapp/scripts/maintenance/hygiene-monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-hygiene-memory-leak.py",
        "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
        "/opt/sutazaiapp/scripts/maintenance/garbage-collection-system.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize-ollama-performance.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra_safe_cleanup.py",
        "/opt/sutazaiapp/scripts/maintenance/fix-critical-agents.py",
        "/opt/sutazaiapp/scripts/maintenance/remove_hardcoded_secrets.py",
        "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
        "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
        "/opt/sutazaiapp/scripts/deployment/optimize-load-balancing.py",
        "/opt/sutazaiapp/scripts/deployment/configure-fault-tolerance.py",
        "/opt/sutazaiapp/scripts/deployment/service-discovery-client.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
        "/opt/sutazaiapp/scripts/deployment/migrate-agents-to-ollama.py",
        "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
        "/opt/sutazaiapp/scripts/deployment/configure-rabbitmq.py",
        "/opt/sutazaiapp/scripts/deployment/agent_stream_consumer.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
        "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
        "/opt/sutazaiapp/scripts/deployment/register-services.py",
        "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
        "/opt/sutazaiapp/scripts/deployment/master-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
        "/opt/sutazaiapp/scripts/deployment/direct_agent_activation.py",
        "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
        "/opt/sutazaiapp/scripts/deployment/service-mesh-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/configure-kong.py",
        "/opt/sutazaiapp/scripts/deployment/fix-agent-deployment-issues.py",
        "/opt/sutazaiapp/scripts/deployment/test-service-communication.py",
        "/opt/sutazaiapp/scripts/deployment/activate_all_agents.py",
        "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
        "/opt/sutazaiapp/scripts/deployment/startup_optimizer.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
        "/opt/sutazaiapp/scripts/deployment/ai-runtime-init.py",
        "/opt/sutazaiapp/scripts/lib/script_optimization_template.py",
        "/opt/sutazaiapp/scripts/lib/security_utils.py",
        "/opt/sutazaiapp/scripts/lib/__init__.py",
        "/opt/sutazaiapp/scripts/lib/logging_utils.py",
        "/opt/sutazaiapp/scripts/master/test-master.py",
        "/opt/sutazaiapp/scripts/onboarding/generate_kickoff_deck.py",
        "/opt/sutazaiapp/scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_simple.py",
        "/opt/sutazaiapp/scripts/security/fix_cors_wildcards.py",
        "/opt/sutazaiapp/scripts/security/ultra_security_validation.py",
        "/opt/sutazaiapp/scripts/testing/validate-compliance.py",
        "/opt/sutazaiapp/scripts/testing/smoke_test_jarvis.py",
        "/opt/sutazaiapp/scripts/testing/run_integration.py",
        "/opt/sutazaiapp/scripts/testing/test_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_gpu_detection.py",
        "/opt/sutazaiapp/scripts/testing/demo_enhanced_monitor.py",
        "/opt/sutazaiapp/scripts/testing/validate_ports.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor.py",
        "/opt/sutazaiapp/scripts/testing/test_static_monitor_simple.py",
        "/opt/sutazaiapp/scripts/testing/validate_agents.py",
        "/opt/sutazaiapp/scripts/testing/ultra-consolidation-validator.py",
        "/opt/sutazaiapp/scripts/testing/integration-test.py",
        "/opt/sutazaiapp/scripts/testing/verify-hygiene-monitoring-system.py",
        "/opt/sutazaiapp/scripts/testing/verify_claude_rules.py",
        "/opt/sutazaiapp/scripts/testing/test_runner.py",
        "/opt/sutazaiapp/scripts/testing/test_hardware_optimizer_detection.py",
        "/opt/sutazaiapp/scripts/testing/deduplication-validator.py",
        "/opt/sutazaiapp/scripts/testing/test_agent_detection.py",
        "/opt/sutazaiapp/scripts/testing/validate-container-infrastructure.py",
        "/opt/sutazaiapp/scripts/testing/validate-complete-system.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_improvements.py",
        "/opt/sutazaiapp/scripts/monitoring/monitor-ai-services.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive_monitor_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/static_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/continuous-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/system-resource-analyzer.py",
        "/opt/sutazaiapp/scripts/monitoring/enhanced-compliance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/validation_report.py",
        "/opt/sutazaiapp/scripts/monitoring/profile-hygiene-memory.py",
        "/opt/sutazaiapp/scripts/monitoring/identify_working_method.py",
        "/opt/sutazaiapp/scripts/monitoring/check-python-headers.py",
        "/opt/sutazaiapp/scripts/monitoring/agent-activation-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
        "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
        "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
        "/opt/sutazaiapp/scripts/monitoring/hardware-optimization-master.py",
        "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
        "/opt/sutazaiapp/scripts/monitoring/monthly-cleanup.py",
        "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-optimization.py",
        "/opt/sutazaiapp/scripts/monitoring/debug_hardware_optimizer.py",
        "/opt/sutazaiapp/scripts/monitoring/redis_performance_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/infrastructure-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/garbage-collection-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/resource-pool-coordinator.py",
        "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
        "/opt/sutazaiapp/scripts/monitoring/monitoring-master.py",
        "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
        "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
        "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
        "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
        "/opt/sutazaiapp/scripts/utils/export_openapi.py",
        "/opt/sutazaiapp/scripts/utils/generate_docs_inventory.py",
        "/opt/sutazaiapp/scripts/utils/coverage_reporter.py",
        "/opt/sutazaiapp/scripts/utils/memory_cleanup_service.py",
        "/opt/sutazaiapp/scripts/utils/coord_bus.py",
        "/opt/sutazaiapp/scripts/utils/large_file_handler_demo.py",
        "/opt/sutazaiapp/scripts/utils/health_monitor.py",
        "/opt/sutazaiapp/scripts/utils/register_with_consul.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
        "/opt/sutazaiapp/scripts/utils/distributed-task-queue.py",
        "/opt/sutazaiapp/scripts/utils/dynamic-load-balancer.py",
        "/opt/sutazaiapp/scripts/utils/generate_secure_secrets.py",
        "/opt/sutazaiapp/scripts/utils/create-performance-baseline.py",
        "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
        "/opt/sutazaiapp/scripts/utils/extract_port_mappings.py",
        "/opt/sutazaiapp/scripts/utils/remove_litellm_from_registry.py",
        "/opt/sutazaiapp/scripts/utils/create-container-requirements-map.py",
        "/opt/sutazaiapp/scripts/utils/summarize_openapi.py",
        "/opt/sutazaiapp/scripts/utils/analyze-docker-requirements.py",
        "/opt/sutazaiapp/scripts/utils/optimization-validator.py",
        "/opt/sutazaiapp/scripts/utils/database_connection_pool_setup.py",
        "/opt/sutazaiapp/scripts/utils/synthetic-load-test.py",
        "/opt/sutazaiapp/scripts/utils/pin_all_dependencies.py",
        "/opt/sutazaiapp/scripts/utils/check_naming.py",
        "/opt/sutazaiapp/scripts/utils/database_operations.py",
        "/opt/sutazaiapp/scripts/utils/intelligent-cache-system.py",
        "/opt/sutazaiapp/scripts/utils/startup_validator.py",
        "/opt/sutazaiapp/scripts/utils/memory-pool-manager.py",
        "/opt/sutazaiapp/scripts/utils/ollama_memory_optimizer.py",
        "/opt/sutazaiapp/scripts/utils/scan_localhost.py",
        "/opt/sutazaiapp/scripts/utils/external-service-discovery.py",
        "/opt/sutazaiapp/scripts/utils/emergency-compliance-fix.py",
        "/opt/sutazaiapp/scripts/utils/otp_override.py",
        "/opt/sutazaiapp/scripts/utils/quick-container-analysis.py",
        "/opt/sutazaiapp/scripts/utils/check_secrets.py",
        "/opt/sutazaiapp/scripts/utils/optimize_transformers.py",
        "/opt/sutazaiapp/scripts/utils/ai-performance-validator.py",
        "/opt/sutazaiapp/scripts/utils/final-system-validation.py",
        "/opt/sutazaiapp/scripts/utils/ensure_changelogs.py",
        "/opt/sutazaiapp/scripts/utils/audit_docs.py",
        "/opt/sutazaiapp/scripts/utils/compact_monitor.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_simple.py",
        "/opt/sutazaiapp/scripts/utils/standardize-requirements.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_rules.py",
        "/opt/sutazaiapp/scripts/utils/distributed-autoscaler.py",
        "/opt/sutazaiapp/scripts/utils/add_claude_md_directive.py",
        "/opt/sutazaiapp/scripts/utils/check_requirements.py",
        "/opt/sutazaiapp/scripts/utils/requirements_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/check_banned_keywords.py",
        "/opt/sutazaiapp/scripts/utils/generate_architecture_diagram.py",
        "/opt/sutazaiapp/scripts/utils/file_utils.py",
        "/opt/sutazaiapp/scripts/utils/logging_utils.py",
        "/opt/sutazaiapp/scripts/utils/dependency_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/docs_fix_all_issues.py",
        "/opt/sutazaiapp/scripts/utils/static_discovery.py",
        "/opt/sutazaiapp/scripts/utils/create-base-image-strategy.py",
        "/opt/sutazaiapp/self-healing/scripts/circuit-breaker.py",
        "/opt/sutazaiapp/self-healing/scripts/predictive-monitoring.py",
        "/opt/sutazaiapp/self-healing/scripts/automated-recovery.py",
        "/opt/sutazaiapp/self-healing/scripts/graceful-degradation.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
        "/opt/sutazaiapp/self-healing/graceful-degradation/fallback_handlers.py",
        "/opt/sutazaiapp/self-healing/graceful-degradation/feature_flags.py",
        "/opt/sutazaiapp/workflows/scripts/deploy_dify_workflows.py",
        "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
        "/opt/sutazaiapp/docker/data-analysis-engineer/app.py",
        "/opt/sutazaiapp/docker/awesome-code-ai/awesome_code_service.py",
        "/opt/sutazaiapp/docker/awesome-code-ai/code_ai_manager.py",
        "/opt/sutazaiapp/docker/resource-arbitration-agent/app.py",
        "/opt/sutazaiapp/docker/finrobot/finrobot_service.py",
        "/opt/sutazaiapp/docker/hygiene-scanner/hygiene_scanner.py",
        "/opt/sutazaiapp/docker/hygiene-validator/rule_validator.py",
        "/opt/sutazaiapp/docker/langchain-agents/langchain_agent_server.py",
        "/opt/sutazaiapp/docker/adapters/adapter.py",
        "/opt/sutazaiapp/docker/knowledge-manager/knowledge_manager.py",
        "/opt/sutazaiapp/docker/document-knowledge-manager/app.py",
        "/opt/sutazaiapp/docker/task-assignment-coordinator/app.py",
        "/opt/sutazaiapp/docker/deep-local-brain-builder/app.py",
        "/opt/sutazaiapp/docker/agentzero-coordinator/app.py",
        "/opt/sutazaiapp/docker/documind/documind_service.py",
        "/opt/sutazaiapp/docker/faiss/health_check.py",
        "/opt/sutazaiapp/docker/ollama-monitor/monitor.py",
        "/opt/sutazaiapp/docker/multi-agent-coordinator/app.py",
        "/opt/sutazaiapp/docker/edge-computing-optimizer/app.py",
        "/opt/sutazaiapp/docker/enhanced-model-manager/enhanced_model_service.py",
        "/opt/sutazaiapp/docker/ai-agent-orchestrator/app.py",
        "/opt/sutazaiapp/docker/templates/generate-dockerfile.py",
        "/opt/sutazaiapp/auth/service-account-manager/main.py",
        "/opt/sutazaiapp/auth/jwt-service/main.py",
        "/opt/sutazaiapp/auth/rbac-engine/main.py",
        "/opt/sutazaiapp/tests/hygiene/test_failure_scenarios.py",
        "/opt/sutazaiapp/tests/hygiene/test_git_hooks.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/hygiene/test_performance.py",
        "/opt/sutazaiapp/tests/hygiene/test-hygiene-system.py",
        "/opt/sutazaiapp/tests/hygiene/test_orchestrator.py",
        "/opt/sutazaiapp/tests/hygiene/test_fixtures.py",
        "/opt/sutazaiapp/tests/hygiene/test_coordinator.py",
        "/opt/sutazaiapp/tests/hygiene/test_monitoring.py",
        "/opt/sutazaiapp/tests/docker/test_containers.py",
        "/opt/sutazaiapp/tests/load/load_test_runner.py",
        "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
        "/opt/sutazaiapp/tests/security/test_security_hardening.py",
        "/opt/sutazaiapp/tests/performance/load_test.py",
        "/opt/sutazaiapp/tests/integration/test-dashboard-fix.py",
        "/opt/sutazaiapp/tests/integration/test-monitoring-integration.py",
        "/opt/sutazaiapp/tests/integration/test-ollama-integration.py",
        "/opt/sutazaiapp/tests/health/test_service_health.py",
        "/opt/sutazaiapp/IMPORTANT/00_inventory/generate_inventory.py",
        "/opt/sutazaiapp/models/optimization/performance_benchmark.py",
        "/opt/sutazaiapp/models/optimization/automated_model_selection.py",
        "/opt/sutazaiapp/models/optimization/model_compression.py",
        "/opt/sutazaiapp/models/optimization/optimization_orchestrator.py",
        "/opt/sutazaiapp/models/optimization/quantization.py",
        "/opt/sutazaiapp/models/optimization/ab_testing.py",
        "/opt/sutazaiapp/models/optimization/neural_architecture_optimizer.py",
        "/opt/sutazaiapp/models/optimization/performance_benchmarking.py",
        "/opt/sutazaiapp/models/optimization/ensemble_optimization.py",
        "/opt/sutazaiapp/models/optimization/continuous_learning.py",
        "/opt/sutazaiapp/models/optimization/knowledge_distillation.py",
        "/opt/sutazaiapp/models/optimization/quantization_pipeline.py",
        "/opt/sutazaiapp/models/optimization/model_cache_manager.py",
        "/opt/sutazaiapp/security/agent-communication/secure_agent_comm.py",
        "/opt/sutazaiapp/security/defense-in-depth/network_security.py",
        "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
        "/opt/sutazaiapp/security/rasp/runtime_protection.py",
        "/opt/sutazaiapp/security/compliance/compliance_automation.py",
        "/opt/sutazaiapp/security/zero-trust/architecture.py",
        "/opt/sutazaiapp/security/incident-response/incident_response.py",
        "/opt/sutazaiapp/security/vulnerability-management/vuln_scanner.py",
        "/opt/sutazaiapp/chaos/scripts/docker-integration.py",
        "/opt/sutazaiapp/monitoring/security/intrusion_detection.py",
        "/opt/sutazaiapp/monitoring/advanced/distributed_tracing.py",
        "/opt/sutazaiapp/monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
        "/opt/sutazaiapp/localagi/protocols/autonomous_coordination_protocols.py",
        "/opt/sutazaiapp/services/resource-manager/main.py",
        "/opt/sutazaiapp/services/api-adapter/unified_ai_client.py",
        "/opt/sutazaiapp/services/adapters/specialized_tools/finrobot_adapter.py",
        "/opt/sutazaiapp/services/adapters/specialized_tools/__init__.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/langflow_adapter.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/__init__.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/dify_adapter.py",
        "/opt/sutazaiapp/services/jarvis/core/voice_interface_minimal.py",
        "/opt/sutazaiapp/services/jarvis/core/orchestrator.py",
        "/opt/sutazaiapp/services/jarvis/core/plugin_manager.py",
        "/opt/sutazaiapp/services/jarvis/core/voice_interface.py",
        "/opt/sutazaiapp/services/jarvis/core/memory_manager.py",
        "/opt/sutazaiapp/services/jarvis/tests/test_routes_minimal.py"
      ],
      "total_scripts": 363,
      "total_lines": 173072
    },
    "automation": {
      "target_file": "scripts/automation/automation_engine.py",
      "source_scripts": [
        "/opt/sutazaiapp/scripts/apply_security_fixes.py",
        "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
        "/opt/sutazaiapp/workflows/deployment_automation.py",
        "/opt/sutazaiapp/workflows/practical_examples.py",
        "/opt/sutazaiapp/workflows/simple_code_review.py",
        "/opt/sutazaiapp/workflows/security_scan_workflow.py",
        "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
        "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
        "/opt/sutazaiapp/tests/ultra_comprehensive_system_test_suite.py",
        "/opt/sutazaiapp/tests/demo_load_test.py",
        "/opt/sutazaiapp/tests/simplified_load_test.py",
        "/opt/sutazaiapp/tests/conftest.py",
        "/opt/sutazaiapp/tests/test_base_agent_v2.py",
        "/opt/sutazaiapp/tests/ai_powered_test_suite.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
        "/opt/sutazaiapp/system-validator/system_validator.py",
        "/opt/sutazaiapp/security/security_orchestrator.py",
        "/opt/sutazaiapp/monitoring/freeze_prevention.py",
        "/opt/sutazaiapp/monitoring/self_healing_monitor.py",
        "/opt/sutazaiapp/monitoring/continuous_performance_monitor.py",
        "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
        "/opt/sutazaiapp/monitoring/comprehensive_report_generator.py",
        "/opt/sutazaiapp/disaster-recovery/backup-coordinator.py",
        "/opt/sutazaiapp/disaster-recovery/point-in-time-recovery.py",
        "/opt/sutazaiapp/services/ollama_service.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
        "/opt/sutazaiapp/scripts/maintenance/bottleneck-eliminator.py",
        "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
        "/opt/sutazaiapp/scripts/maintenance/garbage-collection-system.py",
        "/opt/sutazaiapp/scripts/maintenance/optimize-ollama-performance.py",
        "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
        "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
        "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
        "/opt/sutazaiapp/scripts/deployment/resource-enforcer.py",
        "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/lib/__init__.py",
        "/opt/sutazaiapp/scripts/lib/logging_utils.py",
        "/opt/sutazaiapp/scripts/automation/analyze_docker_builds.py",
        "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
        "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
        "/opt/sutazaiapp/scripts/monitoring/resource-pool-coordinator.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
        "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/utils/memory_cleanup_service.py",
        "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
        "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
        "/opt/sutazaiapp/scripts/utils/enforce_claude_md_rules.py",
        "/opt/sutazaiapp/scripts/utils/generate_architecture_diagram.py",
        "/opt/sutazaiapp/self-healing/scripts/circuit-breaker.py",
        "/opt/sutazaiapp/self-healing/scripts/automated-recovery.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
        "/opt/sutazaiapp/workflows/scripts/workflow_manager.py",
        "/opt/sutazaiapp/workflows/scripts/deploy_dify_workflows.py",
        "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
        "/opt/sutazaiapp/deployment/autoscaling/swarm/swarm-autoscaler.py",
        "/opt/sutazaiapp/docker/fsdp/fsdp_service.py",
        "/opt/sutazaiapp/docker/knowledge-manager/knowledge_manager.py",
        "/opt/sutazaiapp/docker/autogpt-real/agent.py",
        "/opt/sutazaiapp/docker/localagi/localagi_service.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/unit/test_brain.py",
        "/opt/sutazaiapp/tests/load/load_test_runner.py",
        "/opt/sutazaiapp/tests/load/locustfile.py",
        "/opt/sutazaiapp/tests/integration/test-dashboard-fix.py",
        "/opt/sutazaiapp/models/optimization/performance_benchmark.py",
        "/opt/sutazaiapp/models/optimization/automated_model_selection.py",
        "/opt/sutazaiapp/models/optimization/model_compression.py",
        "/opt/sutazaiapp/models/optimization/optimization_orchestrator.py",
        "/opt/sutazaiapp/models/optimization/batch_processing_optimizer.py",
        "/opt/sutazaiapp/models/optimization/knowledge_distillation.py",
        "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
        "/opt/sutazaiapp/security/compliance/compliance_automation.py",
        "/opt/sutazaiapp/security/incident-response/incident_response.py",
        "/opt/sutazaiapp/security/vulnerability-management/vuln_scanner.py",
        "/opt/sutazaiapp/chaos/scripts/chaos-monkey.py",
        "/opt/sutazaiapp/chaos/scripts/chaos-engine.py",
        "/opt/sutazaiapp/monitoring/advanced/distributed_tracing.py",
        "/opt/sutazaiapp/services/automation/skyvern_service.py",
        "/opt/sutazaiapp/services/automation/browser_use_service.py",
        "/opt/sutazaiapp/services/chainlit/chainlit_app.py",
        "/opt/sutazaiapp/services/adapters/workflow_tools/langflow_adapter.py"
      ],
      "total_scripts": 88,
      "total_lines": 55101
    },
    "security": {
      "target_file": "scripts/security/security_validator.py",
      "source_scripts": [
        "/opt/sutazaiapp/script_consolidation_analysis.py",
        "/opt/sutazaiapp/ultra_deep_system_analysis.py",
        "/opt/sutazaiapp/fusion/__init__.py",
        "/opt/sutazaiapp/scripts/apply_security_fixes.py",
        "/opt/sutazaiapp/self-healing/api_server.py",
        "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
        "/opt/sutazaiapp/workflows/practical_examples.py",
        "/opt/sutazaiapp/workflows/security_scan_workflow.py",
        "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
        "/opt/sutazaiapp/tests/dockerfile_security_validator.py",
        "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
        "/opt/sutazaiapp/tests/test_jwt_security_fix.py",
        "/opt/sutazaiapp/tests/ultra_comprehensive_system_test_suite.py",
        "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
        "/opt/sutazaiapp/tests/dockerfile_consolidation_test_suite.py",
        "/opt/sutazaiapp/tests/demo_load_test.py",
        "/opt/sutazaiapp/tests/simplified_load_test.py",
        "/opt/sutazaiapp/tests/master_dockerfile_validator.py",
        "/opt/sutazaiapp/tests/test_jwt_vulnerability_fix.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_corrected_test.py",
        "/opt/sutazaiapp/tests/qa_comprehensive_test_suite.py",
        "/opt/sutazaiapp/tests/security_test_suite.py",
        "/opt/sutazaiapp/tests/test_monitor_status.py",
        "/opt/sutazaiapp/tests/advanced_health_scenarios.py",
        "/opt/sutazaiapp/tests/corrected_security_test.py",
        "/opt/sutazaiapp/tests/comprehensive_test_report_final.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_test.py",
        "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
        "/opt/sutazaiapp/security/security_orchestrator.py",
        "/opt/sutazaiapp/load-testing/simplified-load-test.py",
        "/opt/sutazaiapp/load-testing/production-load-test.py",
        "/opt/sutazaiapp/monitoring/enhanced-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/logging-infrastructure.py",
        "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
        "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
        "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
        "/opt/sutazaiapp/monitoring/realtime_dashboard.py",
        "/opt/sutazaiapp/fusion/core/unified_representation.py",
        "/opt/sutazaiapp/fusion/core/multi_modal_fusion_coordinator.py",
        "/opt/sutazaiapp/fusion/core/cross_modal_learning.py",
        "/opt/sutazaiapp/fusion/visualization/fusion_visualizer.py",
        "/opt/sutazaiapp/fusion/pipeline/realtime_fusion_pipeline.py",
        "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
        "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
        "/opt/sutazaiapp/scripts/database/database_monitor.py",
        "/opt/sutazaiapp/scripts/maintenance/update-agent-auth.py",
        "/opt/sutazaiapp/scripts/maintenance/ultra-script-consolidation.py",
        "/opt/sutazaiapp/scripts/maintenance/update-github-workflows-compatibility.py",
        "/opt/sutazaiapp/scripts/maintenance/fix_container_security.py",
        "/opt/sutazaiapp/scripts/maintenance/remove_hardcoded_secrets.py",
        "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
        "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
        "/opt/sutazaiapp/scripts/deployment/optimize-load-balancing.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
        "/opt/sutazaiapp/scripts/deployment/configure-rabbitmq.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
        "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
        "/opt/sutazaiapp/scripts/deployment/launch_local_agents.py",
        "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
        "/opt/sutazaiapp/scripts/deployment/ai-runtime-init.py",
        "/opt/sutazaiapp/scripts/lib/script_optimization_template.py",
        "/opt/sutazaiapp/scripts/lib/security_utils.py",
        "/opt/sutazaiapp/scripts/lib/__init__.py",
        "/opt/sutazaiapp/scripts/lib/logging_utils.py",
        "/opt/sutazaiapp/scripts/master/health-master.py",
        "/opt/sutazaiapp/scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_simple.py",
        "/opt/sutazaiapp/scripts/security/fix_cors_wildcards.py",
        "/opt/sutazaiapp/scripts/security/validate_cors_security.py",
        "/opt/sutazaiapp/scripts/security/ultra_security_validation.py",
        "/opt/sutazaiapp/scripts/testing/validate_ports.py",
        "/opt/sutazaiapp/scripts/testing/ultra-consolidation-validator.py",
        "/opt/sutazaiapp/scripts/testing/test_runner.py",
        "/opt/sutazaiapp/scripts/testing/deduplication-validator.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_improvements.py",
        "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive_monitor_validation.py",
        "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
        "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
        "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
        "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
        "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
        "/opt/sutazaiapp/scripts/monitoring/monitoring-master.py",
        "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
        "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
        "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
        "/opt/sutazaiapp/scripts/health/master-health-controller.py",
        "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
        "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
        "/opt/sutazaiapp/scripts/utils/coverage_reporter.py",
        "/opt/sutazaiapp/scripts/utils/large_file_handler_demo.py",
        "/opt/sutazaiapp/scripts/utils/health_monitor.py",
        "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
        "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
        "/opt/sutazaiapp/scripts/utils/generate_secure_secrets.py",
        "/opt/sutazaiapp/scripts/utils/database_connection_pool_setup.py",
        "/opt/sutazaiapp/scripts/utils/pin_all_dependencies.py",
        "/opt/sutazaiapp/scripts/utils/database_operations.py",
        "/opt/sutazaiapp/scripts/utils/scan_localhost.py",
        "/opt/sutazaiapp/scripts/utils/check_secrets.py",
        "/opt/sutazaiapp/scripts/utils/ensure_changelogs.py",
        "/opt/sutazaiapp/scripts/utils/requirements_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/dependency_analyzer.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/service_monitor.py",
        "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
        "/opt/sutazaiapp/self-healing/graceful-degradation/fallback_handlers.py",
        "/opt/sutazaiapp/self-healing/graceful-degradation/feature_flags.py",
        "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
        "/opt/sutazaiapp/docker/awesome-code-ai/awesome_code_service.py",
        "/opt/sutazaiapp/docker/finrobot/finrobot_service.py",
        "/opt/sutazaiapp/docker/langchain-agents/langchain_agent_server.py",
        "/opt/sutazaiapp/docker/knowledge-manager/knowledge_manager.py",
        "/opt/sutazaiapp/docker/documind/documind_service.py",
        "/opt/sutazaiapp/docker/templates/generate-dockerfile.py",
        "/opt/sutazaiapp/docker/code-improver/code_improver.py",
        "/opt/sutazaiapp/auth/service-account-manager/main.py",
        "/opt/sutazaiapp/auth/jwt-service/main.py",
        "/opt/sutazaiapp/auth/rbac-engine/main.py",
        "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
        "/opt/sutazaiapp/tests/hygiene/__init__.py",
        "/opt/sutazaiapp/tests/unit/test_security.py",
        "/opt/sutazaiapp/tests/security/test_xss_protection.py",
        "/opt/sutazaiapp/tests/security/test-authentication.py",
        "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
        "/opt/sutazaiapp/tests/security/test_security_hardening.py",
        "/opt/sutazaiapp/tests/security/__init__.py",
        "/opt/sutazaiapp/tests/integration/test-neo4j-integration.py",
        "/opt/sutazaiapp/tests/integration/test_api_integration.py",
        "/opt/sutazaiapp/tests/integration/test-monitoring-integration.py",
        "/opt/sutazaiapp/security/agent-communication/secure_agent_comm.py",
        "/opt/sutazaiapp/security/defense-in-depth/network_security.py",
        "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
        "/opt/sutazaiapp/security/rasp/runtime_protection.py",
        "/opt/sutazaiapp/security/compliance/compliance_automation.py",
        "/opt/sutazaiapp/security/zero-trust/architecture.py",
        "/opt/sutazaiapp/security/incident-response/incident_response.py",
        "/opt/sutazaiapp/security/vulnerability-management/vuln_scanner.py",
        "/opt/sutazaiapp/monitoring/security/intrusion_detection.py",
        "/opt/sutazaiapp/services/resource-manager/main.py",
        "/opt/sutazaiapp/services/jarvis/main_simple.py",
        "/opt/sutazaiapp/services/jarvis/main.py",
        "/opt/sutazaiapp/services/jarvis/main_basic.py",
        "/opt/sutazaiapp/services/langchain/main.py",
        "/opt/sutazaiapp/services/faiss-vector/main.py"
      ],
      "total_scripts": 154,
      "total_lines": 75535
    },
    "analysis": {
      "target_file": "scripts/analysis/system_analyzer.py",
      "source_scripts": [
        "/opt/sutazaiapp/script_consolidation_analysis.py",
        "/opt/sutazaiapp/ULTRA_DUPLICATE_ANALYSIS.py",
        "/opt/sutazaiapp/ultra_deep_system_analysis.py",
        "/opt/sutazaiapp/scripts/consolidation_analysis.py",
        "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
        "/opt/sutazaiapp/workflows/practical_examples.py",
        "/opt/sutazaiapp/workflows/test_code_improvement.py",
        "/opt/sutazaiapp/workflows/demo_workflow.py",
        "/opt/sutazaiapp/workflows/security_scan_workflow.py",
        "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_corrected_test.py",
        "/opt/sutazaiapp/tests/test_monitor_status.py",
        "/opt/sutazaiapp/tests/corrected_security_test.py",
        "/opt/sutazaiapp/security/security_orchestrator.py",
        "/opt/sutazaiapp/scripts/pre-commit/quick-system-check.py",
        "/opt/sutazaiapp/scripts/maintenance/update-restart-policies.py",
        "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
        "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
        "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
        "/opt/sutazaiapp/scripts/automation/analyze_docker_builds.py",
        "/opt/sutazaiapp/scripts/security/ultra_security_validation.py",
        "/opt/sutazaiapp/scripts/testing/test_agent_detection.py",
        "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
        "/opt/sutazaiapp/scripts/monitoring/system-resource-analyzer.py",
        "/opt/sutazaiapp/scripts/monitoring/profile-hygiene-memory.py",
        "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
        "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
        "/opt/sutazaiapp/scripts/monitoring/hardware-optimization-master.py",
        "/opt/sutazaiapp/scripts/monitoring/redis_performance_monitor.py",
        "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
        "/opt/sutazaiapp/scripts/utils/coverage_reporter.py",
        "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
        "/opt/sutazaiapp/scripts/utils/create-container-requirements-map.py",
        "/opt/sutazaiapp/scripts/utils/analyze-docker-requirements.py",
        "/opt/sutazaiapp/scripts/utils/pin_all_dependencies.py",
        "/opt/sutazaiapp/scripts/utils/scan_localhost.py",
        "/opt/sutazaiapp/scripts/utils/external-service-discovery.py",
        "/opt/sutazaiapp/scripts/utils/audit_docs.py",
        "/opt/sutazaiapp/scripts/utils/requirements_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/dependency_analyzer.py",
        "/opt/sutazaiapp/scripts/utils/create-base-image-strategy.py",
        "/opt/sutazaiapp/docker/hygiene-scanner/hygiene_scanner.py",
        "/opt/sutazaiapp/docker/code-improver/code_improver.py",
        "/opt/sutazaiapp/tests/unit/test_brain.py",
        "/opt/sutazaiapp/IMPORTANT/00_inventory/generate_inventory.py",
        "/opt/sutazaiapp/security/rasp/runtime_protection.py",
        "/opt/sutazaiapp/security/vulnerability-management/vuln_scanner.py",
        "/opt/sutazaiapp/monitoring/security/intrusion_detection.py"
      ],
      "total_scripts": 47,
      "total_lines": 21013
    }
  },
  "detailed_scripts": [
    {
      "path": "/opt/sutazaiapp/test_ollama.py",
      "relative_path": "test_ollama.py",
      "name": "test_ollama.py",
      "size": 2400,
      "lines": 78,
      "hash": "16892ac4168c66ce1b3c2d27dfc0cbbd",
      "category": [
        "testing"
      ],
      "imports": [
        "json",
        "time",
        "requests",
        "sys"
      ],
      "functions": [
        "test_ollama"
      ],
      "description": "Test and diagnose Ollama performance issues",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/hardware_api_validation_test.py",
      "relative_path": "hardware_api_validation_test.py",
      "name": "hardware_api_validation_test.py",
      "size": 19004,
      "lines": 421,
      "hash": "eda16f1bcc8b61ff7c7b7f3ba81646d2",
      "category": [
        "testing"
      ],
      "imports": [
        "time",
        "json",
        "datetime",
        "sys",
        "threading",
        "typing",
        "concurrent.futures",
        "traceback",
        "dataclasses",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:TestResult",
        "__init__",
        "class:HardwareAPIValidator",
        "_validate_response",
        "_generate_final_report"
      ],
      "description": "ULTRA-COMPREHENSIVE Hardware Resource Optimizer API Validation Test Suite\nPerforms exhaustive testing of all endpoints with detailed reporting",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/script_consolidation_analysis.py",
      "relative_path": "script_consolidation_analysis.py",
      "name": "script_consolidation_analysis.py",
      "size": 7322,
      "lines": 200,
      "hash": "8452f6a8e1212bc68ebb2babeccec184",
      "category": [
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "json",
        "pathlib",
        "os",
        "collections",
        "hashlib"
      ],
      "functions": [
        "get_file_hash",
        "analyze_scripts",
        "categorize_scripts"
      ],
      "description": "ULTRA SCRIPT CONSOLIDATION ANALYSIS TOOL\nPurpose: Analyze and categorize all scripts in the codebase for safe consolidation\nAuthor: Ultra System Architect\nDate: 2025-08-10",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/ULTRA_DUPLICATE_ANALYSIS.py",
      "relative_path": "ULTRA_DUPLICATE_ANALYSIS.py",
      "name": "ULTRA_DUPLICATE_ANALYSIS.py",
      "size": 13911,
      "lines": 338,
      "hash": "6277b459035d8db1c7b0f8ccd1f86661",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "json",
        "difflib",
        "typing",
        "pathlib",
        "subprocess",
        "os",
        "collections",
        "hashlib"
      ],
      "functions": [
        "calculate_md5",
        "similarity_ratio",
        "get_file_content",
        "find_docker_compose_script_references",
        "class:UltraDuplicateAnalyzer",
        "__init__",
        "find_exact_duplicates",
        "find_near_duplicates",
        "analyze_build_scripts",
        "generate_mergeable_files_report",
        "generate_recommendations",
        "analyze_test_scripts",
        "run_comprehensive_analysis"
      ],
      "description": "ULTRA CODE REVIEWER - COMPREHENSIVE DUPLICATE ANALYSIS\nAnalyzes exact duplicates and near-duplicates in the SutazAI codebase.\nFollows CODEBASE RULE 4: Reuse Before Creating",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/ultra_migration_test_suite.py",
      "relative_path": "ultra_migration_test_suite.py",
      "name": "ultra_migration_test_suite.py",
      "size": 23438,
      "lines": 575,
      "hash": "ccddd799091d46d724fcbb52f53c7d9a",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "datetime",
        "sys",
        "typing",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:UltraMigrationTester",
        "run_comprehensive_test",
        "cleanup_test_containers",
        "test_health_endpoint",
        "run_command",
        "generate_report",
        "test_python_version",
        "__init__",
        "run_all_tests",
        "test_non_root_user",
        "main",
        "test_service_functionality",
        "test_docker_build",
        "test_container_startup"
      ],
      "description": "ULTRA Migration Test Suite\nComprehensive testing of recently migrated services to master base Dockerfiles\n\nServices Under Test:\n- agent-message-bus (port 8080)\n- self-healing (port 8080) \n- data-analy",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/ultra_deep_system_analysis.py",
      "relative_path": "ultra_deep_system_analysis.py",
      "name": "ultra_deep_system_analysis.py",
      "size": 18371,
      "lines": 433,
      "hash": "c3e0eacaddd093b4a32ef96b3ed8d3f1",
      "category": [
        "monitoring",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "shlex",
        "time",
        "requests",
        "json",
        "sys",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "analyze_code_quality",
        "calculate_compliance_score",
        "check_service_endpoints",
        "generate_report",
        "class:UltraSystemAnalyzer",
        "run_continuous_monitoring",
        "__init__",
        "monitor_agent_progress",
        "save_results",
        "main",
        "check_security_status",
        "_clear_screen",
        "analyze_containers"
      ],
      "description": "ULTRA-DEEP SYSTEM ANALYSIS & REAL-TIME MONITORING\nAgent: ARCH-001 (Master System Architect)\nPurpose: Continuous system analysis and 200-agent coordination monitoring",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/__init__.py",
      "relative_path": "fusion/__init__.py",
      "name": "__init__.py",
      "size": 7276,
      "lines": 262,
      "hash": "8ecb654aff972b0addb934dd432a7260",
      "category": [
        "monitoring",
        "utils",
        "security"
      ],
      "imports": [
        "visualization.fusion_visualizer",
        "core.cross_modal_learning",
        "importlib.util",
        "core.unified_representation",
        "core.multi_modal_fusion_coordinator",
        "logging",
        "pipeline.realtime_fusion_pipeline"
      ],
      "functions": [
        "get_version_info",
        "integrate_with_sutazai",
        "get_version",
        "check_requirements",
        "create_fusion_system"
      ],
      "description": "SutazAI Multi-Modal Fusion System\n\nA comprehensive multi-modal fusion coordination system for the SutazAI platform\nthat enables seamless integration and understanding across different data modalities.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/apply_security_fixes.py",
      "relative_path": "scripts/apply_security_fixes.py",
      "name": "apply_security_fixes.py",
      "size": 12531,
      "lines": 321,
      "hash": "f39736c2bcbd613bf2fbd9a66d529724",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "lib.security_utils",
        "argparse",
        "sys",
        "json",
        "re",
        "lib.logging_utils",
        "typing",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "fix_script_security",
        "main"
      ],
      "description": "SutazAI Script Security Fix Application\n\nApplies comprehensive security fixes to all shell scripts in the SutazAI system.\nAddresses infinite loops, eval usage, parameter injection, and other security ",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/consolidation_analysis.py",
      "relative_path": "scripts/consolidation_analysis.py",
      "name": "consolidation_analysis.py",
      "size": 13732,
      "lines": 327,
      "hash": "5871acc75798f8e22cd1391addd4fea0",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "utils",
        "analysis"
      ],
      "imports": [
        "json",
        "re",
        "typing",
        "ast",
        "pathlib",
        "os",
        "collections",
        "hashlib"
      ],
      "functions": [
        "_analyze_script",
        "analyze_all_scripts",
        "find_duplicates",
        "generate_report",
        "print_summary",
        "__init__",
        "_categorize_script",
        "class:ScriptAnalyzer",
        "_extract_imports",
        "_extract_functions",
        "main",
        "_extract_description",
        "create_consolidation_plan",
        "_should_analyze"
      ],
      "description": "Python Script Consolidation Analysis\n====================================\nAnalyzes all Python scripts in the codebase to identify:\n1. Duplicate functionality\n2. Consolidation opportunities  \n3. Script",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/update_dockerfiles.py",
      "relative_path": "scripts/update_dockerfiles.py",
      "name": "update_dockerfiles.py",
      "size": 4838,
      "lines": 114,
      "hash": "f3f9dfdc65ec58f65b1e0ac20bbd275f",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "pathlib",
        "os",
        "re",
        "glob"
      ],
      "functions": [
        "update_dockerfile",
        "main"
      ],
      "description": "ULTRA-THINKING GARBAGE-COLLECTOR EXPERT - Dockerfile Requirements Updater\nUpdates all Dockerfiles to use the new consolidated requirements structure.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/base.py",
      "relative_path": "schemas/base.py",
      "name": "base.py",
      "size": 2823,
      "lines": 99,
      "hash": "76deaa02cc3d462c326dbe9c52b1f7d1",
      "category": [
        "monitoring"
      ],
      "imports": [
        "enum",
        "uuid",
        "datetime",
        "typing",
        "pydantic"
      ],
      "functions": [
        "class:Priority",
        "class:BaseMessage",
        "class:AgentStatus",
        "class:ResourceType",
        "class:Config",
        "class:MessageType",
        "class:TaskStatus"
      ],
      "description": "Base message schemas and enums for all agent communications.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/queue_config.py",
      "relative_path": "schemas/queue_config.py",
      "name": "queue_config.py",
      "size": 5160,
      "lines": 179,
      "hash": "a54697b19ea278d8eaf4e1620e82a1dc",
      "category": [
        "monitoring",
        "maintenance"
      ],
      "imports": [
        "enum",
        "typing"
      ],
      "functions": [
        "class:ExchangeConfig",
        "class:QueueArguments",
        "agent_queue",
        "standard_queue",
        "class:RoutingKeys",
        "priority_queue",
        "durable_queue",
        "class:QueueConfig",
        "class:MessageTTL"
      ],
      "description": "Centralized RabbitMQ queue and exchange configuration.\nAll queue names and routing keys are defined here.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/resource_messages.py",
      "relative_path": "schemas/resource_messages.py",
      "name": "resource_messages.py",
      "size": 3801,
      "lines": 96,
      "hash": "78f90de3cd9e3c7f2f0a0c3aac0bbb1e",
      "category": [
        "misc"
      ],
      "imports": [
        "pydantic",
        "datetime",
        "base",
        "typing"
      ],
      "functions": [
        "class:ResourceReleaseMessage",
        "class:ResourceRequestMessage",
        "class:ResourceStatusMessage",
        "class:ResourceAllocationMessage"
      ],
      "description": "Resource-related message schemas for allocation and management.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/system_messages.py",
      "relative_path": "schemas/system_messages.py",
      "name": "system_messages.py",
      "size": 3043,
      "lines": 75,
      "hash": "3d8c5c79d34bf3ce79bad500b06fc4e8",
      "category": [
        "monitoring"
      ],
      "imports": [
        "pydantic",
        "datetime",
        "base",
        "typing"
      ],
      "functions": [
        "class:AcknowledgementMessage",
        "class:SystemHealthMessage",
        "class:ErrorMessage",
        "class:SystemAlertMessage"
      ],
      "description": "System-level message schemas for health, alerts, and errors.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/__init__.py",
      "relative_path": "schemas/__init__.py",
      "name": "__init__.py",
      "size": 960,
      "lines": 42,
      "hash": "7e17fc165a9766755b9e0aa9216d34a1",
      "category": [
        "monitoring",
        "maintenance"
      ],
      "imports": [
        "resource_messages",
        "system_messages",
        "agent_messages",
        "task_messages"
      ],
      "functions": [],
      "description": "Centralized message schemas for inter-agent communication.\nAll message contracts are defined here to ensure consistency.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/task_messages.py",
      "relative_path": "schemas/task_messages.py",
      "name": "task_messages.py",
      "size": 3695,
      "lines": 92,
      "hash": "cf1e6fa593bdafb3133cbe5826fa2b90",
      "category": [
        "misc"
      ],
      "imports": [
        "pydantic",
        "datetime",
        "base",
        "typing"
      ],
      "functions": [
        "class:TaskResponseMessage",
        "class:TaskAssignmentMessage",
        "class:TaskCompletionMessage",
        "class:TaskRequestMessage",
        "class:TaskStatusUpdateMessage"
      ],
      "description": "Task-related message schemas for request, assignment, and completion.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/schemas/agent_messages.py",
      "relative_path": "schemas/agent_messages.py",
      "name": "agent_messages.py",
      "size": 3195,
      "lines": 79,
      "hash": "248c26627bdc973ec64ed637707abb1b",
      "category": [
        "deployment"
      ],
      "imports": [
        "pydantic",
        "datetime",
        "base",
        "typing"
      ],
      "functions": [
        "class:AgentCapabilityMessage",
        "class:AgentHeartbeatMessage",
        "class:AgentRegistrationMessage",
        "class:AgentStatusMessage"
      ],
      "description": "Agent-related message schemas for registration, heartbeat, and status.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/api_server.py",
      "relative_path": "self-healing/api_server.py",
      "name": "api_server.py",
      "size": 23956,
      "lines": 660,
      "hash": "c5e1cf70c41739c8b1866d7e7d6c3e9d",
      "category": [
        "monitoring",
        "deployment",
        "maintenance",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "argparse",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "pydantic",
        "sqlite3",
        "hygiene_orchestrator",
        "logging",
        "fastapi.responses",
        "asyncio"
      ],
      "functions": [
        "class:SystemHealthResponse",
        "run_server",
        "class:ViolationResponse",
        "get_orchestrator",
        "class:FixActionResponse",
        "class:ConfigUpdateRequest",
        "class:ScanRequest"
      ],
      "description": "Self-Healing Orchestrator API Server\n\nProvides REST API endpoints for monitoring and controlling the hygiene orchestrator.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/hygiene_orchestrator.py",
      "relative_path": "self-healing/hygiene_orchestrator.py",
      "name": "hygiene_orchestrator.py",
      "size": 47982,
      "lines": 1277,
      "hash": "37d967e8b05b52f9130e29176ea0f69b",
      "category": [
        "monitoring",
        "deployment",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "logging",
        "email.mime.text",
        "hashlib",
        "smtplib",
        "re",
        "typing",
        "signal",
        "concurrent.futures",
        "email.mime.multipart",
        "pathlib",
        "sklearn.ensemble",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "gzip",
        "docker",
        "time",
        "requests",
        "numpy",
        "sklearn.preprocessing",
        "datetime",
        "git",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "get_recent_violations",
        "get_status",
        "_fix_delete",
        "class:IntegrationManager",
        "execute_fix",
        "_should_ignore_path",
        "_generate_proper_name",
        "class:SelfHealingOrchestrator",
        "record_fix_action",
        "_setup_logging",
        "get_ci_status",
        "trigger_ci_pipeline",
        "class:ViolationPattern",
        "record_health_metrics",
        "_should_ignore_file",
        "_fix_rename",
        "_create_backup",
        "class:HygieneViolationDetector",
        "_generate_action_id",
        "stop",
        "_check_file_against_pattern",
        "manual_scan",
        "_load_config",
        "_collect_health_metrics",
        "_detect_pattern_violations",
        "_walk_project_files",
        "rollback_fix",
        "_assess_risk_level",
        "send_notification",
        "class:HygieneDatabase",
        "set_dry_run",
        "class:SystemHealth",
        "_determine_target_directory",
        "_init_git",
        "_send_discord",
        "_init_docker",
        "_retrain_anomaly_detector",
        "_fix_move",
        "_send_slack",
        "class:PredictiveHealthMonitor",
        "_filter_fixable_violations",
        "main",
        "_fix_compress",
        "detect_violations",
        "_send_email",
        "_predict_ml_anomalies",
        "_load_violation_patterns",
        "predict_issues",
        "class:FixAction",
        "signal_handler",
        "__init__",
        "class:AutoFixEngine",
        "_load_ignore_patterns",
        "init_database",
        "record_violation",
        "get_fix_success_rate"
      ],
      "description": "Self-Healing Codebase Hygiene Orchestrator\n\nAutomatically detects and fixes codebase hygiene violations while maintaining safety.\nIntegrates with existing monitoring and CI/CD systems.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/circuit_breaker.py",
      "relative_path": "self-healing/circuit_breaker.py",
      "name": "circuit_breaker.py",
      "size": 16653,
      "lines": 426,
      "hash": "9b67b2c598011314d1f343bfe881b8e9",
      "category": [
        "monitoring"
      ],
      "imports": [
        "time",
        "os",
        "enum",
        "json",
        "datetime",
        "sys",
        "neo4j",
        "threading",
        "typing",
        "signal",
        "aioredis",
        "logging",
        "dataclasses",
        "asyncpg",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:CircuitBreakerState",
        "get_metrics",
        "_record_failure",
        "setup_routes",
        "_should_attempt_reset",
        "signal_handler",
        "class:CircuitBreakerMetrics",
        "__init__",
        "class:CircuitBreakerService",
        "reset",
        "class:CircuitBreaker",
        "_record_success",
        "class:CircuitBreakerOpenException"
      ],
      "description": "Circuit Breaker Service for SutazAI System\nImplements circuit breaker pattern to prevent cascading failures",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/code_improvement_workflow.py",
      "relative_path": "workflows/code_improvement_workflow.py",
      "name": "code_improvement_workflow.py",
      "size": 25913,
      "lines": 645,
      "hash": "577fa4ecc2fb3bf482c6c1280e036161",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "re",
        "collections",
        "typing",
        "ast",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "analyze_complexity",
        "class:ImprovementReport",
        "class:TestingQAValidatorAnalyzer",
        "_get_qa_fix",
        "class:CodeImprovementWorkflow",
        "find_code_patterns",
        "class:CodeAnalyzer",
        "_generate_improvements",
        "_calculate_metrics",
        "_get_ml_fix",
        "generate_report_text",
        "class:SeniorAIEngineerAnalyzer",
        "save_report",
        "get_python_files",
        "analyze",
        "class:CodeIssue",
        "__init__",
        "class:CodeMetrics",
        "read_file",
        "class:InfrastructureDevOpsAnalyzer"
      ],
      "description": "Code Improvement Workflow\nAnalyzes code quality and suggests improvements using multiple AI agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/deployment_automation.py",
      "relative_path": "workflows/deployment_automation.py",
      "name": "deployment_automation.py",
      "size": 13369,
      "lines": 378,
      "hash": "150b4a3655b8e834898bdb206c6a30fa",
      "category": [
        "deployment",
        "testing",
        "automation"
      ],
      "imports": [
        "httpx",
        "os",
        "json",
        "datetime",
        "typing",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:DeploymentWorkflow",
        "_check_docker",
        "__init__"
      ],
      "description": "Deployment Automation Workflow\nPractical example of automating deployments with SutazAI",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/practical_examples.py",
      "relative_path": "workflows/practical_examples.py",
      "name": "practical_examples.py",
      "size": 13138,
      "lines": 357,
      "hash": "12d66ac57ca27729fe3bee0a50a257b7",
      "category": [
        "testing",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "httpx",
        "json",
        "datetime",
        "typing",
        "asyncio"
      ],
      "functions": [
        "_generate_recommendations",
        "class:SutazAIWorkflows",
        "__init__"
      ],
      "description": "Practical workflow examples for SutazAI task automation platform\nDemonstrates real-world use cases without conceptual elements",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/simple_code_review.py",
      "relative_path": "workflows/simple_code_review.py",
      "name": "simple_code_review.py",
      "size": 5927,
      "lines": 182,
      "hash": "501155fe6799fa7adb4c310ba82dee6c",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "httpx",
        "os",
        "json",
        "typing",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "__init__",
        "class:CodeReviewWorkflow"
      ],
      "description": "Simple Code Review Workflow\nA practical example of using SutazAI for automated code review",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/test_code_improvement.py",
      "relative_path": "workflows/test_code_improvement.py",
      "name": "test_code_improvement.py",
      "size": 9360,
      "lines": 226,
      "hash": "5de9140ff3ad04ae946ecd2de3b2ba05",
      "category": [
        "testing",
        "analysis"
      ],
      "imports": [
        "httpx",
        "time",
        "workflows.code_improvement_workflow",
        "json",
        "datetime",
        "asyncio"
      ],
      "functions": [],
      "description": "Test script for code improvement workflow\nDemonstrates analyzing the backend/app directory and getting improvement suggestions",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/workflows/demo_workflow.py",
      "relative_path": "workflows/demo_workflow.py",
      "name": "demo_workflow.py",
      "size": 5595,
      "lines": 160,
      "hash": "66f22346c9d0404e85199e2d6ba6c7b6",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "workflows.code_improvement_workflow",
        "os",
        "sys",
        "traceback",
        "pathlib",
        "asyncio"
      ],
      "functions": [],
      "description": "Simple demonstration of the code improvement workflow\nShows how to analyze code and get actionable improvements",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/workflows/security_scan_workflow.py",
      "relative_path": "workflows/security_scan_workflow.py",
      "name": "security_scan_workflow.py",
      "size": 18586,
      "lines": 469,
      "hash": "f694670d89873b7c8b6c04345bb7ee97",
      "category": [
        "utils",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "httpx",
        "os",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "_generate_summary",
        "class:SecurityScanWorkflow",
        "__init__"
      ],
      "description": "Security Scanning Workflow\nAutomated security analysis using local AI agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_integration.py",
      "relative_path": "tests/test_integration.py",
      "name": "test_integration.py",
      "size": 28545,
      "lines": 697,
      "hash": "2b4b32fa4773c9d8d3b634e5ee00b709",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "core.circuit_breaker",
        "agents.core.base_agent",
        "unittest.mock",
        "time",
        "core.ollama_pool",
        "os",
        "pytest",
        "core.ollama_integration",
        "json",
        "sys",
        "datetime",
        "tempfile",
        "asyncio"
      ],
      "functions": [
        "mock_ollama",
        "mock_ollama_call",
        "mock_heartbeat",
        "create_agent",
        "agent_factory",
        "class:TestErrorPropagationIntegration",
        "mock_completion",
        "mock_model_response",
        "track_step",
        "mock_ollama_failure",
        "mock_ollama_with_tracking",
        "class:TestMultiAgentCoordination",
        "mock_get_task",
        "mock_registration",
        "track_error",
        "class:TestAgentOllamaIntegration",
        "decorator",
        "class:TestSystemIntegration",
        "verify_model_config",
        "class:TestConfigurationIntegration",
        "integration_agent",
        "wrapper"
      ],
      "description": "Integration tests for Ollama integration with all 131 agents\nTests end-to-end functionality, agent coordination, and system interactions",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/execute_ultra_testing_strategy.py",
      "relative_path": "tests/execute_ultra_testing_strategy.py",
      "name": "execute_ultra_testing_strategy.py",
      "size": 41033,
      "lines": 1005,
      "hash": "44f36203a01cb8e16a68d61ccf5270a2",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "enum",
        "argparse",
        "json",
        "sys",
        "datetime",
        "statistics",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "to_dict",
        "generate_report",
        "print_summary",
        "class:UltraTestOrchestrator",
        "__init__",
        "class:TestStatus",
        "class:TestPriority"
      ],
      "description": "ULTRA-COMPREHENSIVE TESTING STRATEGY EXECUTION FRAMEWORK\nImplements the complete testing strategy with automated execution, \nmonitoring, and reporting capabilities.\n\nAuthor: ULTRA SYSTEM ARCHITECT\nDat",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_failure_scenarios.py",
      "relative_path": "tests/test_failure_scenarios.py",
      "name": "test_failure_scenarios.py",
      "size": 29056,
      "lines": 712,
      "hash": "a4eb452b310f5d5154e02d3b0cc8c60c",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "core.circuit_breaker",
        "agents.core.base_agent",
        "asyncio",
        "httpx",
        "unittest.mock",
        "time",
        "pytest",
        "core.ollama_pool",
        "core.ollama_integration",
        "sys",
        "datetime",
        "json",
        "tempfile",
        "os"
      ],
      "functions": [
        "test_agent",
        "connection_pool",
        "mock_model_response",
        "class:TestResourceExhaustionScenarios",
        "class:TestConnectionPoolFailures",
        "class:TestDataCorruptionScenarios",
        "ollama_integration",
        "class:TestCircuitBreakerFailures",
        "class:TestAgentFailureScenarios",
        "intermittent_failure",
        "class:TestOllamaServiceFailures",
        "class:TestNetworkFailures",
        "mock_failed_pull",
        "circuit_breaker"
      ],
      "description": "Comprehensive failure scenario tests for Ollama integration\nTests resilience, error handling, recovery, and fault tolerance",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_live_monitoring_validation.py",
      "relative_path": "tests/test_live_monitoring_validation.py",
      "name": "test_live_monitoring_validation.py",
      "size": 14780,
      "lines": 390,
      "hash": "fa2bf46ef5420b87d34c29de414a056a",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "requests",
        "json",
        "sys",
        "datetime",
        "re",
        "os",
        "subprocess"
      ],
      "functions": [
        "_extract_port",
        "test_monitoring_system_integration",
        "_parse_docker_status",
        "_check_health_endpoint",
        "test_agent_health_endpoints",
        "generate_report",
        "class:LiveMonitoringValidator",
        "__init__",
        "run_live_validation",
        "test_docker_container_detection",
        "test_status_consistency"
      ],
      "description": "Live Monitoring System Validation\n=================================\n\nTests the monitoring system against the actual running SutazAI system.\nValidates that the monitoring system correctly detects and r",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_deployed.py",
      "relative_path": "tests/test_deployed.py",
      "name": "test_deployed.py",
      "size": 2145,
      "lines": 64,
      "hash": "535cd47cb6fbf8fea19929fef130739c",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "subprocess",
        "pathlib"
      ],
      "functions": [
        "test_is_deployed"
      ],
      "description": "Test why _is_agent_deployed returns False",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/dockerfile_security_validator.py",
      "relative_path": "tests/dockerfile_security_validator.py",
      "name": "dockerfile_security_validator.py",
      "size": 27350,
      "lines": 653,
      "hash": "314d1cdc5e06e63e76b6b18c267a5cc0",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "yaml",
        "json",
        "datetime",
        "sys",
        "re",
        "typing",
        "logging",
        "pathlib",
        "tempfile",
        "os",
        "subprocess"
      ],
      "functions": [
        "_check_network_isolation",
        "run_comprehensive_security_validation",
        "validate_container_runtime_security",
        "_scan_vulnerabilities",
        "class:DockerfileSecurityValidator",
        "_check_non_root_user",
        "_check_resource_limits",
        "_load_compliance_rules",
        "_get_vulnerability_severity",
        "_check_security_options",
        "_generate_security_recommendations",
        "_check_compliance",
        "main",
        "_check_privileged_mode",
        "_grade_security_score",
        "save_security_results",
        "_load_security_patterns",
        "_check_readonly_rootfs",
        "analyze_dockerfile_security",
        "__init__",
        "_calculate_security_score",
        "scan_container_vulnerabilities"
      ],
      "description": "SutazAI Dockerfile Security Validation Module\nUltra QA Validator - Security & Compliance Testing for Consolidation\n\nThis module validates that Dockerfile consolidation maintains or improves\nsecurity p",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_monitoring_system_comprehensive.py",
      "relative_path": "tests/test_monitoring_system_comprehensive.py",
      "name": "test_monitoring_system_comprehensive.py",
      "size": 24272,
      "lines": 584,
      "hash": "2577afc351b05a89e64dfbe305700297",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "quick_status_check",
        "pytest",
        "json",
        "sys",
        "datetime",
        "threading",
        "concurrent.futures",
        "pathlib",
        "static_monitor",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "test_monitor_initialization",
        "test_agent_registry_validation",
        "class:EnhancedMonitor",
        "class:TestQuickStatusCheck",
        "class:TestValidationScenarios",
        "test_agent_health_status_mapping",
        "class:TestMonitoringPerformance",
        "class:TestAgentRegistry",
        "tearDown",
        "class:TestMonitoringSystemBase",
        "test_network_timeout_handling",
        "class:TestMonitoringEdgeCases",
        "test_malformed_agent_registry",
        "setUp",
        "test_memory_usage_optimization",
        "test_get_system_status",
        "run_comprehensive_tests",
        "test_agent_registry_loading",
        "test_end_to_end_monitoring",
        "test_concurrent_health_checks",
        "test_docker_command_failure",
        "test_agent_validation_rules",
        "__init__",
        "test_docker_container_detection",
        "class:TestStaticMonitorCore",
        "test_configuration_consistency",
        "class:TestIntegrationScenarios",
        "test_empty_container_list"
      ],
      "description": "Comprehensive Test Suite for SutazAI Monitoring System\n=====================================================\n\nThis test suite validates all aspects of the monitoring system including:\n- Agent detectio",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_ollama_integration.py",
      "relative_path": "tests/test_ollama_integration.py",
      "name": "test_ollama_integration.py",
      "size": 19766,
      "lines": 441,
      "hash": "691d53a742f5780b4cee9b56600268ba",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "agents.core.base_agent",
        "httpx",
        "time",
        "os",
        "json",
        "datetime",
        "sys",
        "typing",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "__init__",
        "generate_report",
        "class:OllamaIntegrationTester"
      ],
      "description": "Comprehensive Ollama Integration Test for SutazAI Agents\nTests connectivity and functionality of all 131 agents with Ollama",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/run_hardware_optimizer_tests.py",
      "relative_path": "tests/run_hardware_optimizer_tests.py",
      "name": "run_hardware_optimizer_tests.py",
      "size": 11386,
      "lines": 301,
      "hash": "263cce19cb5e2ee80ffa4d730c92ca25",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "sys",
        "json",
        "concurrent.futures",
        "traceback",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "test_service_health",
        "run_comprehensive_basic_tests",
        "__init__",
        "test_security_basics",
        "test_basic_endpoints",
        "test_simple_load",
        "main",
        "make_request",
        "class:BasicHardwareOptimizerTester"
      ],
      "description": "HARDWARE OPTIMIZER TEST EXECUTION SCRIPT\n========================================\n\nSimple test execution script that runs a subset of the comprehensive tests\nto validate functionality and provide imme",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/specialized_tests.py",
      "relative_path": "tests/specialized_tests.py",
      "name": "specialized_tests.py",
      "size": 17173,
      "lines": 449,
      "hash": "dfe6f46df55f4d2a45aff96f0c8e6844",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "json",
        "datetime",
        "threading",
        "concurrent.futures",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "make_api_call",
        "class:SpecializedTestSuite",
        "__init__"
      ],
      "description": "Specialized Test Cases for SutazAI System\n=========================================\n\nThis module contains specialized test cases to address specific issues\nand improve test coverage for edge cases and",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/frontend_final_validation.py",
      "relative_path": "tests/frontend_final_validation.py",
      "name": "frontend_final_validation.py",
      "size": 6329,
      "lines": 165,
      "hash": "6b91a985eefd9bad9b413eb53387c6aa",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "datetime",
        "subprocess"
      ],
      "functions": [
        "validate_frontend_health"
      ],
      "description": "Ultra QA Team Lead - Final Frontend Validation\nPost-stress testing functional validation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_connection_pool.py",
      "relative_path": "tests/test_connection_pool.py",
      "name": "test_connection_pool.py",
      "size": 25921,
      "lines": 688,
      "hash": "8238ce3b7e844991812f5e6f51423138",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "httpx",
        "time",
        "unittest.mock",
        "os",
        "pytest",
        "core.ollama_pool",
        "sys",
        "datetime",
        "asyncio"
      ],
      "functions": [
        "test_pool_stats_defaults",
        "class:TestFactoryFunction",
        "class:TestPoolStats",
        "class:TestModelCache",
        "class:TestOllamaConnectionPool",
        "test_pool_connection_creation",
        "class:TestConnectionState",
        "pool_config",
        "test_create_ollama_pool",
        "test_model_cache_creation",
        "pool",
        "test_initialization",
        "test_get_stats",
        "test_update_average_response_time",
        "test_connection_state_values",
        "class:TestPoolConnection"
      ],
      "description": "Comprehensive unit tests for OllamaConnectionPool\nTests connection management, pooling, model caching, and resource optimization",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_coordinator_integration.py",
      "relative_path": "tests/test_coordinator_integration.py",
      "name": "test_coordinator_integration.py",
      "size": 15931,
      "lines": 474,
      "hash": "f9972a054800a6cb56bd1c266cd442c0",
      "category": [
        "testing"
      ],
      "imports": [
        "agents.core.rabbitmq_client",
        "schemas.system_messages",
        "schemas.task_messages",
        "uuid",
        "json",
        "sys",
        "datetime",
        "typing",
        "logging",
        "schemas.agent_messages",
        "asyncio",
        "schemas.base"
      ],
      "functions": [
        "__init__",
        "class:CoordinatorIntegrationTest"
      ],
      "description": "Integration tests for Task Assignment Coordinator\nTests concurrent task assignments, agent selection, and failure handling.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_external_integration.py",
      "relative_path": "tests/test_external_integration.py",
      "name": "test_external_integration.py",
      "size": 5921,
      "lines": 145,
      "hash": "f438757d9c9bb33098b5f08d1f2e8b2e",
      "category": [
        "testing"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "pytest",
        "json",
        "typing"
      ],
      "functions": [
        "test_api_gateway_health",
        "setup_class",
        "test_adapter_metrics_endpoint",
        "class:TestExternalIntegration",
        "test_container_network_connectivity",
        "run_integration_tests",
        "test_prometheus_metrics",
        "test_postgres_adapter_health",
        "test_redis_adapter_health",
        "test_service_registration",
        "test_health_check_propagation",
        "test_api_gateway_routing",
        "test_service_discovery_health",
        "wait_for_service"
      ],
      "description": "Purpose: Test external service integration functionality\nUsage: python test_external_integration.py\nRequirements: pytest, requests, docker",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/test_architecture_enhancements.py",
      "relative_path": "tests/test_architecture_enhancements.py",
      "name": "test_architecture_enhancements.py",
      "size": 13920,
      "lines": 384,
      "hash": "cca96a916d8613570fb9d337958b20f8",
      "category": [
        "testing"
      ],
      "imports": [
        "pika",
        "httpx",
        "time",
        "json",
        "datetime",
        "typing",
        "consul",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:EnhancementTestSuite",
        "print_summary",
        "__init__"
      ],
      "description": "Test Suite for SutazAI Architecture Enhancements\nValidates service mesh, AI agents, and system integration",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_performance.py",
      "relative_path": "tests/test_performance.py",
      "name": "test_performance.py",
      "size": 32476,
      "lines": 790,
      "hash": "45ea46b8c594b70a085e4e3e4d82e228",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "core.circuit_breaker",
        "agents.core.base_agent",
        "unittest.mock",
        "psutil",
        "time",
        "os",
        "pytest",
        "core.ollama_pool",
        "core.ollama_integration",
        "sys",
        "datetime",
        "core.request_queue",
        "statistics",
        "threading",
        "concurrent.futures",
        "asyncio"
      ],
      "functions": [
        "class:TestConnectionPoolPerformance",
        "class:TestSystemWidePerfomance",
        "record_request",
        "connection_pool",
        "stop_monitoring",
        "class:TestAgentPerformance",
        "class:TestPerformanceBenchmarks",
        "class:TestPerformanceMetrics",
        "class:TestResourceOptimization",
        "__init__",
        "_monitor_resources",
        "decrement_concurrent",
        "start_monitoring",
        "increment_concurrent",
        "get_summary",
        "mock_agent",
        "test_benchmark_thresholds_defined",
        "resource_monitor"
      ],
      "description": "Performance tests for Ollama integration with all 131 agents\nTests load handling, memory usage, response times, and resource optimization",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/performance_test_suite.py",
      "relative_path": "tests/performance_test_suite.py",
      "name": "performance_test_suite.py",
      "size": 23674,
      "lines": 596,
      "hash": "54ba7c696d82a608a707bb23ffe3d7b8",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "random",
        "json",
        "datetime",
        "gc",
        "statistics",
        "typing",
        "threading",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:PerformanceMetrics",
        "avg_response_time",
        "success_rate",
        "duration",
        "_generate_performance_summary",
        "requests_per_second",
        "p99_response_time",
        "__init__",
        "user_session",
        "median_response_time",
        "monitor_memory",
        "class:PerformanceTestSuite",
        "p95_response_time",
        "run_sync_load_test"
      ],
      "description": "SutazAI Performance Testing Suite\n================================\n\nComprehensive performance testing including:\n- Load testing with configurable concurrent users\n- Response time benchmarking\n- Memory",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hardware_optimizer_load_runner.py",
      "relative_path": "tests/hardware_optimizer_load_runner.py",
      "name": "hardware_optimizer_load_runner.py",
      "size": 14329,
      "lines": 336,
      "hash": "7f0ab37b98455078c7286d5d14a3d9ff",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "os",
        "hardware_optimizer_ultra_test_suite",
        "sys",
        "json",
        "traceback",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "_print_load_test_summary",
        "_analyze_load_test_results",
        "__init__",
        "class:LoadTestRunner",
        "_create_results_directory",
        "_generate_load_test_recommendations"
      ],
      "description": "ULTRA-CRITICAL LOAD TESTING RUNNER FOR HARDWARE RESOURCE OPTIMIZER\n==================================================================\n\nDedicated load testing runner that focuses specifically on concur",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_jwt_security_fix.py",
      "relative_path": "tests/test_jwt_security_fix.py",
      "name": "test_jwt_security_fix.py",
      "size": 9191,
      "lines": 268,
      "hash": "1315606b4207a09b1237891b1445bdb3",
      "category": [
        "testing",
        "maintenance",
        "security"
      ],
      "imports": [
        "jwt",
        "time",
        "datetime",
        "json",
        "base64",
        "os"
      ],
      "functions": [
        "test_expired_token_handling",
        "test_valid_token_verification",
        "create_valid_token",
        "test_forged_token_rejection",
        "test_tampered_payload",
        "main",
        "test_algorithm_confusion_attack",
        "create_forged_token"
      ],
      "description": "Test script to validate JWT security fix\nEnsures that signature verification is enforced and token forgery is prevented",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/uuid_migration_corrected_test.py",
      "relative_path": "tests/uuid_migration_corrected_test.py",
      "name": "uuid_migration_corrected_test.py",
      "size": 18538,
      "lines": 444,
      "hash": "da642c319ac9f5d6fd97c9541fbe7d78",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "time",
        "requests",
        "string",
        "json",
        "datetime",
        "typing",
        "asyncio",
        "random"
      ],
      "functions": [
        "test_model_consistency",
        "test_cors_and_security_headers",
        "class:UUIDMigrationCorrectedTester",
        "test_service_integration",
        "log_result",
        "__init__",
        "log_error",
        "test_api_endpoints_data_types",
        "test_auth_status_endpoint",
        "test_backend_health",
        "test_database_schema_verification",
        "main",
        "run_comprehensive_corrected_test_suite",
        "test_user_authentication",
        "test_hardware_optimization_endpoint"
      ],
      "description": "ULTRA UUID Migration Validation Test Suite - CORRECTED VERSION\nComprehensive testing for UUID/INTEGER migration fix",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_ai_agent_orchestrator.py",
      "relative_path": "tests/test_ai_agent_orchestrator.py",
      "name": "test_ai_agent_orchestrator.py",
      "size": 16374,
      "lines": 468,
      "hash": "8c969bdf967d6cc0df0b66d7eec63d6a",
      "category": [
        "deployment",
        "testing",
        "maintenance"
      ],
      "imports": [
        "unittest.mock",
        "os",
        "pytest",
        "ai_agent_orchestrator.app",
        "core.messaging",
        "json",
        "datetime",
        "sys",
        "asyncio"
      ],
      "functions": [
        "class:TestAIAgentOrchestrator",
        "class:TestOrchestratorIntegration"
      ],
      "description": "Unit and integration tests for AI Agent Orchestrator",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/ultra_comprehensive_system_test_suite.py",
      "relative_path": "tests/ultra_comprehensive_system_test_suite.py",
      "name": "ultra_comprehensive_system_test_suite.py",
      "size": 24237,
      "lines": 620,
      "hash": "fec1c372138083f72c85f634272db3c8",
      "category": [
        "testing",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "os",
        "json",
        "neo4j",
        "datetime",
        "sys",
        "psycopg2",
        "typing",
        "logging",
        "asyncio",
        "redis",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "__init__",
        "test_container_security",
        "test_performance_metrics",
        "class:SutazAISystemTester",
        "log_test_result"
      ],
      "description": "ULTRA COMPREHENSIVE SUTAZAI SYSTEM TEST SUITE\n==============================================\n\nThis automated test suite validates the entire SutazAI system with zero tolerance for failures.\nTests all ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_enhanced_compliance_monitor.py",
      "relative_path": "tests/test_enhanced_compliance_monitor.py",
      "name": "test_enhanced_compliance_monitor.py",
      "size": 35199,
      "lines": 917,
      "hash": "a39b50fad67f7f6567f79a642298989b",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "unittest.mock",
        "time",
        "pytest",
        "sys",
        "json",
        "datetime",
        "threading",
        "sqlite3",
        "pathlib",
        "tempfile",
        "os",
        "enhanced_compliance_monitor",
        "shutil"
      ],
      "functions": [
        "test_system_integrity_validation",
        "test_rule_12_deployment_script",
        "test_creation",
        "class:TestChangeTransaction",
        "test_rule_13_garbage_files",
        "test_transaction_system",
        "mock_sleep",
        "class:TestRuleViolation",
        "test_system_integration_validation",
        "test_auto_fix_script_organization",
        "test_data_cleanup",
        "test_rule_7_script_organization",
        "test_error_handling_and_recovery",
        "class:TestIntegrationFlows",
        "test_concurrent_operations",
        "test_system_metrics_collection",
        "test_path_exclusion",
        "test_performance_under_load",
        "test_compliance_check_integration",
        "test_dependency_graph_building",
        "test_transaction_rollback",
        "test_config_loading",
        "run_scan",
        "monitor",
        "temp_project_root",
        "test_auto_fix_garbage_files",
        "test_initialization",
        "test_safe_mode_protection",
        "class:TestSystemHealthMetrics",
        "test_individual_rule_checks",
        "class:TestEnhancedComplianceMonitor",
        "test_report_generation",
        "create_violations",
        "test_auto_fix_fantasy_elements",
        "test_rule_1_fantasy_elements_detection",
        "test_daemon_mode_shutdown",
        "test_full_scan_and_fix_workflow",
        "pytest_configure"
      ],
      "description": "Comprehensive Test Suite for Enhanced Compliance Monitor\n=======================================================\nPurpose: 100% test coverage for production-ready compliance monitoring system\nRequireme",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/dockerfile_performance_validator.py",
      "relative_path": "tests/dockerfile_performance_validator.py",
      "name": "dockerfile_performance_validator.py",
      "size": 21030,
      "lines": 479,
      "hash": "47460a197d89dd153bd57b09d5739adf",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "json",
        "datetime",
        "sys",
        "statistics",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "_grade_response_time",
        "__init__",
        "_grade_resource_usage",
        "save_performance_results",
        "class:DockerfilePerformanceValidator",
        "measure_container_resources"
      ],
      "description": "SutazAI Dockerfile Performance Validation Module\nUltra QA Validator - Performance & Load Testing for Consolidation\n\nThis module validates that Dockerfile consolidation maintains or improves\nperformanc",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/dockerfile_consolidation_test_suite.py",
      "relative_path": "tests/dockerfile_consolidation_test_suite.py",
      "name": "dockerfile_consolidation_test_suite.py",
      "size": 23091,
      "lines": 579,
      "hash": "4c2677a27f7485c4848030c2b03024fe",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "pytest",
        "yaml",
        "sys",
        "json",
        "datetime",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "tempfile",
        "os",
        "subprocess"
      ],
      "functions": [
        "_calculate_grade",
        "test_dockerfile_syntax",
        "_generate_recommendations",
        "class:DockerfileValidationSuite",
        "__init__",
        "test_service_build",
        "discover_dockerfiles",
        "test_security_compliance",
        "run_comprehensive_validation",
        "save_results",
        "test_base_image_usage",
        "test_build_optimization",
        "main",
        "test_health_check_functionality",
        "test_resource_usage"
      ],
      "description": "SutazAI Dockerfile Consolidation Test Suite\nUltra QA Validator - Comprehensive Python Test Suite\n\nThis module provides detailed testing for Dockerfile consolidation,\ncomplementing the shell validation",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/demo_load_test.py",
      "relative_path": "tests/demo_load_test.py",
      "name": "demo_load_test.py",
      "size": 10668,
      "lines": 260,
      "hash": "1745a7aa4a051e81f5642443432f5127",
      "category": [
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "os",
        "hardware_optimizer_ultra_test_suite",
        "sys",
        "json",
        "traceback",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "class:DemoLoadTester",
        "_analyze_demo_results",
        "__init__",
        "_print_demo_summary"
      ],
      "description": "DEMO LOAD TEST - HARDWARE OPTIMIZER ULTRA TESTING\n==================================================\n\nDemonstration of the ultra-comprehensive load testing capabilities.\nThis script runs a subset of t",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/frontend_performance_ultra_test.py",
      "relative_path": "tests/frontend_performance_ultra_test.py",
      "name": "frontend_performance_ultra_test.py",
      "size": 18973,
      "lines": 454,
      "hash": "54e5ac63d185df5dcf620af2af6cbe77",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "psutil",
        "time",
        "requests",
        "json",
        "datetime",
        "sys",
        "threading",
        "typing",
        "statistics",
        "concurrent.futures",
        "os",
        "subprocess"
      ],
      "functions": [
        "perform_load_testing",
        "class:FrontendPerformanceValidator",
        "validate_functionality",
        "run_comprehensive_test",
        "_parse_memory_string",
        "measure_load_time",
        "__init__",
        "save_results",
        "_generate_validation_summary",
        "main",
        "get_container_stats",
        "make_requests",
        "test_caching_mechanisms"
      ],
      "description": "Ultra QA Team Lead - Frontend Performance Validation Test\nValidates claimed 70% load time improvement and 60% memory reduction",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/simplified_load_test.py",
      "relative_path": "tests/simplified_load_test.py",
      "name": "simplified_load_test.py",
      "size": 32319,
      "lines": 791,
      "hash": "ff1f7612a3c3d9a22fd872071df8b55f",
      "category": [
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "hashlib",
        "json",
        "sys",
        "datetime",
        "threading",
        "statistics",
        "typing",
        "concurrent.futures",
        "traceback",
        "logging",
        "dataclasses",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "_create_empty_result",
        "_generate_recommendations",
        "print_summary",
        "class:SystemMonitor",
        "run_all_tests",
        "run_load_test_for_endpoint",
        "make_single_request",
        "run_security_tests",
        "_create_test_data",
        "stop",
        "_setup_test_environment",
        "class:EndpointSpec",
        "cleanup",
        "generate_report",
        "class:LoadTestResult",
        "__post_init__",
        "class:SimplifiedLoadTester",
        "_monitor_loop",
        "main",
        "worker",
        "start",
        "__init__",
        "run_comprehensive_load_tests",
        "analyze_results",
        "_verify_service_health"
      ],
      "description": "SIMPLIFIED LOAD TESTING FOR HARDWARE OPTIMIZER\n===============================================\n\nComprehensive load testing using only Python standard libraries.\nThis provides the same functionality as",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_messaging_integration.py",
      "relative_path": "tests/test_messaging_integration.py",
      "name": "test_messaging_integration.py",
      "size": 9195,
      "lines": 278,
      "hash": "24f59f50021a65f61e3e73f667c7c2bb",
      "category": [
        "testing"
      ],
      "imports": [
        "agents.core.rabbitmq_client",
        "schemas.resource_messages",
        "schemas.task_messages",
        "os",
        "json",
        "datetime",
        "sys",
        "logging",
        "schemas.agent_messages",
        "asyncio",
        "schemas.base"
      ],
      "functions": [
        "class:MessagingIntegrationTest",
        "__init__"
      ],
      "description": "Integration tests for RabbitMQ messaging between agents.\nTests real message flow using the centralized schemas.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_smoke.py",
      "relative_path": "tests/test_smoke.py",
      "name": "test_smoke.py",
      "size": 2705,
      "lines": 112,
      "hash": "3613f1ab64ac5cb0726bd382515f85b9",
      "category": [
        "testing"
      ],
      "imports": [
        "os",
        "pytest",
        "app",
        "sys",
        "asyncio"
      ],
      "functions": [
        "test_basic_math",
        "test_list_operations",
        "test_class_method",
        "test_fixture_usage",
        "class:TestBasicClass",
        "test_python_version",
        "test_exception_handling",
        "test_import_backend",
        "test_with_marker",
        "test_dict_operations",
        "test_parametrized",
        "test_string_operations"
      ],
      "description": "Purpose: Basic smoke tests to verify testing infrastructure works\nUsage: pytest tests/test_smoke.py\nRequirements: pytest",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/master_dockerfile_validator.py",
      "relative_path": "tests/master_dockerfile_validator.py",
      "name": "master_dockerfile_validator.py",
      "size": 21047,
      "lines": 513,
      "hash": "ec2deb1670abcf6c4be72497af1054b6",
      "category": [
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "tests.dockerfile_performance_validator",
        "os",
        "tests.dockerfile_security_validator",
        "sys",
        "json",
        "datetime",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "tests.dockerfile_consolidation_test_suite",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "run_shell_validation",
        "print_executive_summary",
        "calculate_final_assessment",
        "__init__",
        "run_consolidation_validation",
        "run_security_validation",
        "save_master_report",
        "class:MasterDockerfileValidator"
      ],
      "description": "SutazAI Master Dockerfile Consolidation Validator\nUltra QA Validator - Master Test Orchestration & Reporting\n\nThis is the master validator that orchestrates all Dockerfile consolidation\nvalidation tes",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/test_jwt_vulnerability_fix.py",
      "relative_path": "tests/test_jwt_vulnerability_fix.py",
      "name": "test_jwt_vulnerability_fix.py",
      "size": 5570,
      "lines": 170,
      "hash": "859bbdce838e8706051474c8762be12f",
      "category": [
        "testing",
        "maintenance",
        "security"
      ],
      "imports": [
        "sys",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_all_jwt_decode_usage",
        "check_jwt_service_file",
        "main"
      ],
      "description": "Simple test to verify the JWT vulnerability fix in auth/jwt-service/main.py\nTests that verify=False has been removed and signature verification is enforced",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_corrected_test.py",
      "relative_path": "tests/backend_hardware_integration_ultra_corrected_test.py",
      "name": "backend_hardware_integration_ultra_corrected_test.py",
      "size": 38923,
      "lines": 961,
      "hash": "0cb8d0597bb961e1144d4b302043db8c",
      "category": [
        "monitoring",
        "testing",
        "security",
        "analysis"
      ],
      "imports": [
        "time",
        "requests",
        "uuid",
        "json",
        "datetime",
        "statistics",
        "typing",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "class:TestResult",
        "test_backend_authentication_enforcement",
        "test_data_transformation_analysis",
        "time_request",
        "class:EndpointTest",
        "test_error_handling_mechanisms",
        "test_service_discovery",
        "run_all_tests",
        "__init__",
        "make_health_request",
        "add_result",
        "main",
        "test_direct_hardware_communication",
        "class:CorrectedBackendHardwareIntegrationTest",
        "test_performance_analysis",
        "validate_status_response",
        "validate_health_response",
        "test_concurrent_load_analysis"
      ],
      "description": "ULTRA-CORRECTED Backend Hardware Integration Test Suite\n=====================================================\n\nThis is the corrected version of the comprehensive backend-to-hardware integration test,\n",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/qa_comprehensive_test_suite.py",
      "relative_path": "tests/qa_comprehensive_test_suite.py",
      "name": "qa_comprehensive_test_suite.py",
      "size": 41377,
      "lines": 892,
      "hash": "6d7416b33ce7ae33ffe5b7f83b8c7fe4",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "_test_performance_requirements",
        "_test_concurrent_load",
        "run_all_tests",
        "concurrent_memory_optimization",
        "_test_integration_points",
        "_record_fail",
        "_test_all_endpoints",
        "concurrent_docker_operation",
        "_record_warning",
        "_test_event_loop_fixes",
        "_test_thread_safety",
        "_test_error_handling",
        "_record_pass",
        "_test_basic_connectivity",
        "main",
        "_test_recovery_mechanisms",
        "_generate_final_report",
        "class:UltraComprehensiveQATestSuite",
        "__init__",
        "make_request",
        "_test_security_vulnerabilities"
      ],
      "description": "ULTRA-COMPREHENSIVE QA TEST SUITE for Hardware Resource Optimizer\nQA Team Lead: ULTRA-TEST all fixes applied to hardware-resource-optimizer\n\nCRITICAL FIXES BEING TESTED:\n1. Event loop conflict resolut",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/conftest.py",
      "relative_path": "tests/conftest.py",
      "name": "conftest.py",
      "size": 11693,
      "lines": 372,
      "hash": "06fbda6761ce8980f4f54235c1b58748",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "core.circuit_breaker",
        "agents.core.base_agent",
        "unittest.mock",
        "core.ollama_pool",
        "core.request_queue",
        "os",
        "pytest",
        "sys",
        "json",
        "datetime",
        "gc",
        "logging",
        "tempfile",
        "asyncio"
      ],
      "functions": [
        "health_check",
        "sample_task_result",
        "heartbeat",
        "class:MockOllamaService",
        "mock_generate",
        "sample_task",
        "mock_chat",
        "register_agent",
        "mock_model_list",
        "get_response",
        "complete_task",
        "pytest_collection_modifyitems",
        "set_response",
        "get_next_task",
        "mock_request_queue",
        "assert_valid_task_result",
        "pytest_runtest_makereport",
        "mock_connection_pool",
        "assert_valid_agent_metrics",
        "assert_performance_within_bounds",
        "mock_embeddings",
        "class:MockBackendService",
        "class:TestAssertions",
        "temp_config_file",
        "mock_environment",
        "pytest_runtest_setup",
        "mock_ollama_service",
        "assert_memory_usage_reasonable",
        "mock_backend_service",
        "assertions",
        "mock_circuit_breaker",
        "event_loop",
        "__init__",
        "add_task",
        "cleanup_test_environment",
        "pytest_configure"
      ],
      "description": "Global pytest configuration and fixtures for Ollama integration tests\nProvides common fixtures, utilities, and test configuration",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/monitoring_system_validation.py",
      "relative_path": "tests/monitoring_system_validation.py",
      "name": "monitoring_system_validation.py",
      "size": 20842,
      "lines": 465,
      "hash": "bf31bd4382b7de68d9e3b99c1dd1fe76",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "datetime",
        "typing",
        "logging",
        "subprocess"
      ],
      "functions": [
        "test_service_health_consistency",
        "log_result",
        "__init__",
        "test_docker_health_checks",
        "run_monitoring_validation",
        "class:MonitoringSystemValidator",
        "test_log_aggregation",
        "test_performance_monitoring_accuracy",
        "main",
        "test_prometheus_metrics_collection",
        "test_grafana_dashboard_access"
      ],
      "description": "MONITORING SYSTEM VALIDATION\nHardware Resource Optimizer Service - Monitoring Health Validation\n\nThis validates ALL monitoring systems accuracy:\n- Prometheus metrics collection\n- Grafana dashboard acc",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_optional_features.py",
      "relative_path": "tests/test_optional_features.py",
      "name": "test_optional_features.py",
      "size": 7139,
      "lines": 181,
      "hash": "01bf1902b7949843d6e0bc7c51ca8494",
      "category": [
        "testing"
      ],
      "imports": [
        "backend.app.services.code_completion.interfaces",
        "unittest.mock",
        "backend.app.services.training.interfaces",
        "pytest",
        "sys",
        "backend.app.services.training.factory",
        "backend.app.api.v1.features",
        "backend.app.core.config",
        "backend.app.services.training.fsdp_trainer",
        "backend.app.services.code_completion.factory",
        "os",
        "backend.app.services.training.default_trainer"
      ],
      "functions": [
        "class:TestTrainingFactory",
        "test_tabby_client_when_enabled",
        "class:TestOptionalImports",
        "class:TestCodeCompletionFactory",
        "class:TestFeatureFlags",
        "test_default_trainer_handles_missing_torch",
        "test_null_client_when_disabled",
        "test_fsdp_trainer_handles_missing_torch",
        "test_fsdp_trainer_when_enabled",
        "class:TestFeatureEndpoint",
        "test_default_trainer_when_disabled",
        "test_flags_from_environment",
        "test_default_flags_disabled",
        "setup_method"
      ],
      "description": "Tests for optional feature flags and service abstractions",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_enhanced_detection.py",
      "relative_path": "tests/test_enhanced_detection.py",
      "name": "test_enhanced_detection.py",
      "size": 6572,
      "lines": 168,
      "hash": "5b1f810c91d88bfb5886a7e7f7a76196",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "subprocess",
        "typing"
      ],
      "functions": [
        "test_enhanced_detection",
        "_parse_container_status",
        "_get_container_info_enhanced"
      ],
      "description": "Test enhanced container detection",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_task_assignment_coordinator.py",
      "relative_path": "tests/test_task_assignment_coordinator.py",
      "name": "test_task_assignment_coordinator.py",
      "size": 20146,
      "lines": 562,
      "hash": "8c529416ff2a36cd7c194b9230eee519",
      "category": [
        "monitoring",
        "testing",
        "maintenance"
      ],
      "imports": [
        "unittest.mock",
        "os",
        "pytest",
        "core.messaging",
        "json",
        "datetime",
        "sys",
        "task_assignment_coordinator.app",
        "asyncio",
        "heapq"
      ],
      "functions": [
        "class:TestCoordinatorIntegration",
        "class:TestTaskAssignmentCoordinator"
      ],
      "description": "Unit and integration tests for Task Assignment Coordinator",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/security_test_suite.py",
      "relative_path": "tests/security_test_suite.py",
      "name": "security_test_suite.py",
      "size": 26166,
      "lines": 672,
      "hash": "3c83ed7283cd382a062b6c7b69d5b847",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "asyncio",
        "time",
        "requests",
        "json",
        "datetime",
        "re",
        "typing",
        "logging",
        "pathlib",
        "urllib.parse"
      ],
      "functions": [
        "test_information_disclosure",
        "_get_header_recommendations",
        "test_http_security_headers",
        "test_rate_limiting",
        "test_authentication_bypass",
        "_generate_security_summary",
        "__init__",
        "test_cors_configuration",
        "class:SecurityTestSuite",
        "test_input_validation"
      ],
      "description": "SutazAI Security Testing Suite\n=============================\n\nComprehensive security testing including:\n- Input validation and sanitization\n- Authentication and authorization\n- SQL injection protectio",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_monitor_status.py",
      "relative_path": "tests/test_monitor_status.py",
      "name": "test_monitor_status.py",
      "size": 1666,
      "lines": 53,
      "hash": "818b58ed222f81705bcc57767e75705c",
      "category": [
        "monitoring",
        "testing",
        "security",
        "analysis"
      ],
      "imports": [
        "sys",
        "traceback",
        "static_monitor"
      ],
      "functions": [
        "test_monitor"
      ],
      "description": "Test monitor agent status display",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/advanced_health_scenarios.py",
      "relative_path": "tests/advanced_health_scenarios.py",
      "name": "advanced_health_scenarios.py",
      "size": 25936,
      "lines": 586,
      "hash": "a285dc596c46e1f049aa19c45fe43a70",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "psutil",
        "time",
        "requests",
        "json",
        "datetime",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "os",
        "subprocess",
        "random"
      ],
      "functions": [
        "test_ollama_dependency_failure",
        "run_advanced_scenarios",
        "test_endpoint",
        "test_service_restart_recovery",
        "test_cpu_spike_handling",
        "log_result",
        "__init__",
        "test_sustained_load",
        "class:AdvancedHealthScenarios",
        "cpu_spike_simulation",
        "main",
        "test_memory_leak_detection",
        "monitor_resources",
        "get_container_stats",
        "test_edge_cases"
      ],
      "description": "ADVANCED HEALTH VALIDATION SCENARIOS\nHardware Resource Optimizer Service - Deep Dive Testing\n\nThis extends the basic health validation with advanced scenarios:\n- Service restart recovery testing\n- Mem",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/corrected_security_test.py",
      "relative_path": "tests/corrected_security_test.py",
      "name": "corrected_security_test.py",
      "size": 4917,
      "lines": 138,
      "hash": "2ad0ddc0cb61a589c2ce669c96d4c4b6",
      "category": [
        "testing",
        "security",
        "analysis"
      ],
      "imports": [
        "json",
        "requests",
        "datetime",
        "sys"
      ],
      "functions": [
        "test_path_traversal_protection",
        "main"
      ],
      "description": "CORRECTED Security Test for Hardware Resource Optimizer\nTests path traversal protection with proper response validation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_regression.py",
      "relative_path": "tests/test_regression.py",
      "name": "test_regression.py",
      "size": 19097,
      "lines": 489,
      "hash": "ab66e520b9b0073020e2c666960e28ed",
      "category": [
        "testing"
      ],
      "imports": [
        "agents.core.base_agent",
        "unittest.mock",
        "time",
        "psutil",
        "os",
        "pytest",
        "core.ollama_integration",
        "sys",
        "json",
        "gc",
        "tempfile",
        "asyncio"
      ],
      "functions": [
        "test_config_loading_backward_compatibility",
        "class:TestBackwardCompatibility",
        "class:TestExistingAgentTypes",
        "legacy_agent",
        "test_synchronous_ollama_query_compatibility",
        "test_model_assignment_stability",
        "test_metrics_compatibility",
        "class:TestPerformanceRegression",
        "test_base_agent_alias_compatibility",
        "class:TestIntegrationRegression",
        "test_initialization_backward_compatibility",
        "test_model_config_parameter_stability",
        "test_unknown_agent_fallback_stability",
        "class:TestOllamaConfigRegression",
        "class:TestExistingAgentMethods",
        "test_environment_variable_compatibility",
        "class:TestLegacyBehaviorPreservation"
      ],
      "description": "Regression tests for Ollama integration\nEnsures backward compatibility and existing functionality continues to work",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/system_baseline_test.py",
      "relative_path": "tests/system_baseline_test.py",
      "name": "system_baseline_test.py",
      "size": 22506,
      "lines": 506,
      "hash": "02093b43512810162ce44be018c6ed57",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "psutil",
        "time",
        "os",
        "json",
        "datetime",
        "sys",
        "typing",
        "logging",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "__init__",
        "class:SystemBaselineTester"
      ],
      "description": "SutazAI System Baseline Testing Suite\n====================================\n\nComprehensive baseline testing before cleanup operations.\nTests all 28 containers, services, APIs, and integrations.\n\nCreate",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_agent_detection_validation.py",
      "relative_path": "tests/test_agent_detection_validation.py",
      "name": "test_agent_detection_validation.py",
      "size": 22073,
      "lines": 554,
      "hash": "ed9ed9a1cab67c0afbe9c4dd8700446d",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "requests",
        "pytest",
        "json",
        "sys",
        "concurrent.futures",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:TestAgentValidationRules",
        "test_health_status_precedence",
        "test_communication_config_structure",
        "class:TestAgentDetectionCore",
        "test_combined_status_reporting",
        "test_agent_priority_handling",
        "mock_health_response",
        "setUp",
        "test_actual_docker_integration",
        "_is_valid_agent_config",
        "class:TestAgentStatusIntegration",
        "_determine_final_status",
        "test_agent_configuration_validation",
        "test_health_check_responses",
        "test_health_status_parsing",
        "test_docker_container_name_patterns",
        "run_agent_detection_tests",
        "class:TestRealSystemValidation"
      ],
      "description": "Agent Detection and Validation Test Suite\n=========================================\n\nSpecialized tests for agent detection, health validation, and status reporting.\nTests the core logic that determine",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/comprehensive_test_report_final.py",
      "relative_path": "tests/comprehensive_test_report_final.py",
      "name": "comprehensive_test_report_final.py",
      "size": 24261,
      "lines": 545,
      "hash": "c4317415009a8963222b1151893180ae",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "datetime",
        "typing",
        "glob",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "_get_grade",
        "calculate_overall_system_score",
        "generate_executive_summary",
        "__init__",
        "generate_detailed_analysis",
        "generate_recommendations",
        "load_latest_reports",
        "class:ComprehensiveTestReportGenerator"
      ],
      "description": "SutazAI Final Comprehensive Test Report Generator\n===============================================\n\nThis script generates a final comprehensive test report combining results from:\n- AI-powered comprehe",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/run_monitoring_validation.py",
      "relative_path": "tests/run_monitoring_validation.py",
      "name": "run_monitoring_validation.py",
      "size": 7386,
      "lines": 232,
      "hash": "89f12c34646ffd7e70c96747c7e07ebf",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "datetime",
        "json",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "run_test_suite",
        "run_validation",
        "main"
      ],
      "description": "SutazAI Monitoring System Validation Runner\n==========================================\n\nComprehensive validation script that runs all monitoring system tests\nand generates a complete validation report",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_feature_flags.py",
      "relative_path": "tests/test_feature_flags.py",
      "name": "test_feature_flags.py",
      "size": 8720,
      "lines": 240,
      "hash": "777c7626cfde126f7be92a5893c61036",
      "category": [
        "testing"
      ],
      "imports": [
        "unittest.mock",
        "backend.app.core",
        "pytest",
        "yaml",
        "sys",
        "backend.app.main",
        "backend.app.services.training.factory",
        "backend.app.services.code_completion.null_client",
        "backend.app.services.code_completion.tabby_client",
        "backend.app.core.config",
        "backend.app.services.training.fsdp_trainer",
        "backend.app.services.code_completion.factory",
        "os",
        "fastapi.testclient",
        "backend.app.services.training.default_trainer"
      ],
      "functions": [
        "class:TestCodeCompletionFactory",
        "test_null_client_when_disabled",
        "test_default_trainer_methods",
        "test_default_trainer_when_disabled",
        "test_enable_tabby_via_env",
        "test_tabby_imports_optional",
        "class:TestOptionalDependencies",
        "test_features_endpoint_metadata",
        "test_null_client_methods",
        "test_fsdp_profile_exists",
        "test_features_endpoint_default",
        "class:TestTrainingFactory",
        "test_tabby_profile_exists",
        "test_fsdp_trainer_when_enabled",
        "class:TestFeaturesEndpoint",
        "test_tabby_client_when_enabled",
        "class:TestFeatureFlags",
        "class:TestDockerComposeProfiles",
        "test_default_feature_flags",
        "client",
        "test_enable_fsdp_via_env",
        "test_fsdp_imports_optional",
        "test_features_endpoint_enabled",
        "setup_method"
      ],
      "description": "Tests for optional feature flags functionality",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/health_validation_comprehensive.py",
      "relative_path": "tests/health_validation_comprehensive.py",
      "name": "health_validation_comprehensive.py",
      "size": 25370,
      "lines": 588,
      "hash": "6ae45d521cfb079849f172209787d1ce",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "psutil",
        "time",
        "requests",
        "json",
        "datetime",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "subprocess"
      ],
      "functions": [
        "test_performance_thresholds",
        "test_service_endpoints_comprehensive",
        "test_network_resilience",
        "test_basic_health_endpoints",
        "test_resource_monitoring_accuracy",
        "test_dependency_health",
        "log_result",
        "__init__",
        "run_comprehensive_health_validation",
        "log_error",
        "test_error_handling",
        "make_request",
        "main",
        "test_internal_container_health",
        "class:HealthValidationSuite",
        "test_concurrent_requests"
      ],
      "description": "ULTRA-COMPREHENSIVE HEALTH VALIDATION SUITE\nHardware Resource Optimizer Service - ALL SCENARIOS\n\nThis test suite validates ALL operational scenarios with ZERO tolerance for failures.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_base_agent_v2.py",
      "relative_path": "tests/test_base_agent_v2.py",
      "name": "test_base_agent_v2.py",
      "size": 23548,
      "lines": 633,
      "hash": "3276cc1f69691ef0043ac41dcd04537a",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "automation"
      ],
      "imports": [
        "agents.core.base_agent",
        "unittest.mock",
        "httpx",
        "os",
        "pytest",
        "json",
        "sys",
        "datetime",
        "tempfile",
        "asyncio"
      ],
      "functions": [
        "test_query_ollama_sync_running_loop",
        "test_agent_metrics_defaults",
        "test_update_metrics_failed",
        "test_load_config_missing_file",
        "test_agent_status_values",
        "class:TestAgentMetrics",
        "test_backward_compatibility_alias",
        "test_load_config_success",
        "class:TestBaseAgentV2",
        "class:TestAgentStatus",
        "test_query_ollama_sync_not_running",
        "test_task_result_defaults",
        "class:TestTaskResult",
        "test_load_config_invalid_json",
        "test_initialization",
        "temp_config",
        "test_task_result_creation",
        "agent",
        "test_update_metrics_completed"
      ],
      "description": "Comprehensive unit tests for BaseAgentV2\nTests all aspects of the enhanced base agent implementation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/ai_powered_test_suite.py",
      "relative_path": "tests/ai_powered_test_suite.py",
      "name": "ai_powered_test_suite.py",
      "size": 54682,
      "lines": 1423,
      "hash": "85e7d77b0f523b448d44804a5f1a0cb6",
      "category": [
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "transformers",
        "time",
        "requests",
        "numpy",
        "pytest",
        "json",
        "datetime",
        "typing",
        "traceback",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "hypothesis"
      ],
      "functions": [
        "class:TestResult",
        "_generate_basic_api_tests",
        "generate_api_tests",
        "_generate_edge_case_tests",
        "_generate_recommendations",
        "class:SystemEndpoint",
        "class:SutazAITestSuite",
        "__init__",
        "class:AITestGenerator",
        "_generate_performance_tests",
        "make_request",
        "_calculate_health_score",
        "_generate_test_report",
        "_generate_security_tests"
      ],
      "description": "SutazAI Advanced AI-Powered Testing Suite\n==========================================\n\nThis module implements comprehensive AI-powered testing strategies including:\n- Automated test generation using tr",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/backend_hardware_integration_ultra_test.py",
      "relative_path": "tests/backend_hardware_integration_ultra_test.py",
      "name": "backend_hardware_integration_ultra_test.py",
      "size": 36086,
      "lines": 896,
      "hash": "041ddde12e74f36a82fd804035e8f3a8",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "uuid",
        "json",
        "datetime",
        "statistics",
        "typing",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "class:TestResult",
        "setup_authentication",
        "test_backend_proxy_endpoints",
        "test_direct_hardware_service",
        "time_request",
        "class:EndpointTest",
        "test_cache_effectiveness",
        "__init__",
        "test_direct_vs_proxy_performance",
        "run_all_tests",
        "test_data_validation",
        "add_result",
        "test_error_handling",
        "test_monitoring_integration",
        "make_request",
        "class:BackendHardwareIntegrationUltraTest",
        "main",
        "test_concurrent_load"
      ],
      "description": "ULTRA-COMPREHENSIVE Backend Hardware Integration Test Suite\n=========================================================\n\nThis test suite performs the most thorough validation of backend-to-hardware-serv",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/uuid_migration_test.py",
      "relative_path": "tests/uuid_migration_test.py",
      "name": "uuid_migration_test.py",
      "size": 15198,
      "lines": 389,
      "hash": "bbc226653b070933582e8c7f1d361fc6",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "time",
        "requests",
        "string",
        "json",
        "datetime",
        "typing",
        "asyncio",
        "random"
      ],
      "functions": [
        "test_api_data_types",
        "run_comprehensive_test_suite",
        "test_user_login",
        "generate_test_user_data",
        "test_service_connectivity",
        "log_result",
        "__init__",
        "test_authenticated_endpoints",
        "log_error",
        "class:UUIDMigrationTester",
        "test_backend_health",
        "test_database_crud_operations",
        "main",
        "test_user_registration"
      ],
      "description": "ULTRA UUID Migration Validation Test Suite\nComprehensive testing for UUID/INTEGER migration fix",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_live_agent.py",
      "relative_path": "tests/test_live_agent.py",
      "name": "test_live_agent.py",
      "size": 5961,
      "lines": 184,
      "hash": "09685f3424b71ef31965eeae255a0287",
      "category": [
        "testing"
      ],
      "imports": [
        "agents.core.base_agent",
        "os",
        "pytest",
        "core.ollama_integration",
        "sys",
        "datetime",
        "socket",
        "logging",
        "asyncio"
      ],
      "functions": [
        "class:TestAgent",
        "__init__",
        "_is_port_open"
      ],
      "description": "Live Agent Integration Test\nTests a real agent using the BaseAgentV2 framework with Ollama",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/test_resource_arbitration_agent.py",
      "relative_path": "tests/test_resource_arbitration_agent.py",
      "name": "test_resource_arbitration_agent.py",
      "size": 22729,
      "lines": 581,
      "hash": "10f12f114cf437f8e0f7128e50809f52",
      "category": [
        "testing",
        "maintenance"
      ],
      "imports": [
        "unittest.mock",
        "os",
        "pytest",
        "core.messaging",
        "json",
        "datetime",
        "sys",
        "resource_arbitration_agent.app",
        "asyncio"
      ],
      "functions": [
        "class:TestResourceArbitrationIntegration",
        "class:TestResourceArbitrationAgent"
      ],
      "description": "Unit and integration tests for Resource Arbitration Agent",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hardware_optimizer_ultra_test_suite.py",
      "relative_path": "tests/hardware_optimizer_ultra_test_suite.py",
      "name": "hardware_optimizer_ultra_test_suite.py",
      "size": 75432,
      "lines": 1766,
      "hash": "732178aa43cab59c497881451773bf65",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "json",
        "socket",
        "statistics",
        "threading",
        "traceback",
        "logging",
        "hashlib",
        "string",
        "gc",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "matplotlib",
        "shutil",
        "psutil",
        "pytest",
        "sys",
        "functools",
        "dataclasses",
        "tempfile",
        "os",
        "aiohttp",
        "gzip",
        "random",
        "matplotlib.pyplot",
        "time",
        "requests",
        "numpy",
        "resource",
        "datetime",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "_create_empty_metrics",
        "_generate_recommendations",
        "class:SystemMonitor",
        "_create_duplicate_files",
        "run_stress_tests",
        "test_error_injection_and_recovery",
        "_run_memory_exhaustion_test",
        "_create_edge_case_files",
        "_run_volume_test",
        "_create_test_data",
        "stop",
        "_create_response_time_chart",
        "_setup_test_environment",
        "_create_compressible_files",
        "_create_temp_files",
        "_create_large_files",
        "class:EndpointSpec",
        "run_error_injection_tests",
        "run_security_boundary_tests",
        "run_standalone_testing",
        "class:SecurityTestResult",
        "_run_endurance_test",
        "test_security_boundary_testing",
        "_create_memory_usage_chart",
        "tester",
        "_make_spike_request",
        "class:UltraHardwareOptimizerTester",
        "_monitor_loop",
        "_calculate_summary",
        "class:LoadTestMetrics",
        "_create_throughput_chart",
        "_create_success_rate_chart",
        "class:TestHardwareOptimizerUltra",
        "start",
        "_memory_test_request",
        "__init__",
        "cleanup_test_environment",
        "generate_performance_charts",
        "generate_comprehensive_report",
        "_verify_service_health",
        "test_stress_testing_scenarios",
        "_run_spike_test"
      ],
      "description": "ULTRA-CRITICAL AUTOMATED TESTING SPECIALIST - HARDWARE RESOURCE OPTIMIZER\n==========================================================================\n\nUltra-comprehensive automated testing suite for ha",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/frontend_stress_ultra_validation.py",
      "relative_path": "tests/frontend_stress_ultra_validation.py",
      "name": "frontend_stress_ultra_validation.py",
      "size": 18478,
      "lines": 440,
      "hash": "cc56d9c0dbeae46bd10fb457b636eca8",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "json",
        "datetime",
        "sys",
        "threading",
        "typing",
        "statistics",
        "concurrent.futures",
        "os",
        "subprocess"
      ],
      "functions": [
        "_generate_stress_analysis",
        "monitor_memory",
        "_parse_memory_string",
        "memory_pressure_test",
        "__init__",
        "run_stress_validation",
        "extreme_load_test",
        "save_results",
        "calculate_degradation",
        "percentile",
        "main",
        "class:FrontendStressValidator",
        "get_container_stats",
        "make_aggressive_requests"
      ],
      "description": "Ultra QA Team Lead - Frontend Stress Testing and Validation\nExtended testing for extreme load scenarios and memory pressure",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/system-validator/system_validator.py",
      "relative_path": "system-validator/system_validator.py",
      "name": "system_validator.py",
      "size": 21866,
      "lines": 598,
      "hash": "240cb7900c517f08b7e6180f7d7db347",
      "category": [
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "jsonschema",
        "json",
        "socket",
        "logging",
        "apscheduler.schedulers.background",
        "typing",
        "pathlib",
        "abc",
        "psutil",
        "pytest",
        "argparse",
        "sys",
        "psycopg2",
        "dataclasses",
        "os",
        "hypothesis",
        "docker",
        "time",
        "requests",
        "numpy",
        "datetime",
        "asyncio",
        "redis"
      ],
      "functions": [
        "get_status",
        "query",
        "_detect_hardware",
        "class:ContinuousSystemValidator",
        "class:PrometheusClient",
        "_scale_service",
        "_check_duplicate_services",
        "_get_workers",
        "class:ComprehensiveSystemInvestigator",
        "_start_transactions",
        "_start_long_tasks",
        "investigate_system",
        "_initialize_components",
        "class:ValidationResult",
        "class:MicroserviceCoordinationValidator",
        "class:AlertManager",
        "main",
        "_generate_load",
        "_establish_websockets",
        "_check_security_issues",
        "_check_memory_leaks",
        "class:ReliabilityMonitoringValidator",
        "_check_port_conflicts",
        "class:HardwareProfile",
        "__init__",
        "class:SystemValidator",
        "_publish_to_queue",
        "class:SlackClient",
        "_calculate_resource_limits",
        "_get_resource_usage"
      ],
      "description": "System Validator - Comprehensive System Validation Implementation",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/security/security_orchestrator.py",
      "relative_path": "security/security_orchestrator.py",
      "name": "security_orchestrator.py",
      "size": 32015,
      "lines": 755,
      "hash": "ee5095d7dbdf3782874c16f996d638ca",
      "category": [
        "deployment",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "agent_communication.secure_agent_comm",
        "json",
        "threading",
        "zero_trust.architecture",
        "logging",
        "email.mime.text",
        "smtplib",
        "enum",
        "typing",
        "signal",
        "email.mime.multipart",
        "threat_detection.advanced_detection",
        "vulnerability_management.vuln_scanner",
        "compliance.compliance_automation",
        "incident_response.incident_response",
        "defense_in_depth.network_security",
        "sys",
        "dataclasses",
        "os",
        "aiohttp",
        "time",
        "datetime",
        "rasp.runtime_protection",
        "asyncio"
      ],
      "functions": [
        "class:SecuritySystemStatus",
        "_update_system_status",
        "get_status",
        "class:SecurityOrchestrationStatus",
        "_update_overall_status",
        "_setup_logging",
        "__init__",
        "_signal_handler",
        "class:SecurityOrchestrator",
        "_load_config"
      ],
      "description": "Security Orchestrator\nMain orchestration system for comprehensive security hardening framework",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/load-testing/generate-agent-tests.py",
      "relative_path": "load-testing/generate-agent-tests.py",
      "name": "generate-agent-tests.py",
      "size": 17018,
      "lines": 528,
      "hash": "d237d226e17c1cea412c176ecf834f61",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "sys",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "generate_agent_categories",
        "generate_k6_test_script",
        "load_agent_registry",
        "get_agent_port_mapping",
        "main"
      ],
      "description": "Dynamic Agent Load Test Generator for SutazAI\nGenerates load tests for all 69+ agents dynamically from the agent registry.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/load-testing/simplified-load-test.py",
      "relative_path": "load-testing/simplified-load-test.py",
      "name": "simplified-load-test.py",
      "size": 23685,
      "lines": 543,
      "hash": "3ecfb0259d4738495d38a74b177ea6a6",
      "category": [
        "testing",
        "security"
      ],
      "imports": [
        "time",
        "os",
        "random",
        "json",
        "sys",
        "datetime",
        "statistics",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "to_dict",
        "class:LoadTestResult",
        "__init__",
        "class:SimplifiedLoadTester",
        "analyze_results",
        "main"
      ],
      "description": "SutazAI Simplified Production Load Testing\nAdapted for current running services\n\nAuthor: QA Team Lead\nDate: 2025-08-05\nVersion: 1.0",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/load-testing/production-load-test.py",
      "relative_path": "load-testing/production-load-test.py",
      "name": "production-load-test.py",
      "size": 34179,
      "lines": 777,
      "hash": "5f99b8b5f855ec8ec35b23b4e9e4340f",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "os",
        "argparse",
        "json",
        "sys",
        "datetime",
        "random",
        "statistics",
        "typing",
        "threading",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:TestResult",
        "to_dict",
        "generate_report",
        "__init__",
        "main",
        "class:SutazAILoadTester"
      ],
      "description": "SutazAI Production Load Testing Suite\nComprehensive load testing framework for SutazAI production environment\n\nAuthor: QA Team Lead\nDate: 2025-08-04\nVersion: 1.0",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/monitoring/freeze_prevention.py",
      "relative_path": "monitoring/freeze_prevention.py",
      "name": "freeze_prevention.py",
      "size": 35292,
      "lines": 885,
      "hash": "f8ce51c2d736d4a4d3ae8bf5256d113f",
      "category": [
        "monitoring",
        "utils",
        "automation"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "sys",
        "datetime",
        "json",
        "typing",
        "signal",
        "sqlite3",
        "logging",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:FreezePreventionSystem",
        "get_status",
        "class:PreventiveAction",
        "signal_handler",
        "__init__",
        "_determine_severity",
        "class:SystemState",
        "_init_database",
        "_calculate_freeze_risk"
      ],
      "description": "System Freeze Prevention for SutazAI Ollama Agents\nAdvanced monitoring and automatic intervention to prevent system freezes",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/system_performance_benchmark_suite.py",
      "relative_path": "monitoring/system_performance_benchmark_suite.py",
      "name": "system_performance_benchmark_suite.py",
      "size": 49247,
      "lines": 1206,
      "hash": "b09020aa3b325da6e3179f7958488482",
      "category": [
        "monitoring",
        "deployment",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "statistics",
        "sqlite3",
        "logging",
        "typing",
        "concurrent.futures",
        "pathlib",
        "prometheus_client.parser",
        "psutil",
        "sys",
        "dataclasses",
        "seaborn",
        "docker",
        "matplotlib.pyplot",
        "time",
        "requests",
        "numpy",
        "datetime",
        "platform",
        "pandas",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:ServiceMeshBenchmark",
        "class:AgentPerformanceBenchmark",
        "predict_resource_usage",
        "class:BenchmarkResult",
        "analyze_sla_compliance",
        "discover_agents",
        "class:SystemPerformanceBenchmarkSuite",
        "store_system_snapshot",
        "class:AGIOrchestrationBenchmark",
        "store_benchmark_result",
        "get_system_info",
        "get_docker_version",
        "class:SystemResourceMonitor",
        "generate_recommendations",
        "init_agent_benchmarks",
        "class:SystemSnapshot",
        "load_config",
        "get_container_stats",
        "get_system_snapshot",
        "class:PerformanceForecastingModel",
        "__init__",
        "init_database",
        "generate_performance_forecast"
      ],
      "description": "SutazAI System Performance Benchmark Suite\n==========================================\n\nComprehensive benchmarking framework for the entire SutazAI ecosystem including:\n- 90+ AI agents across all categ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/self_healing_monitor.py",
      "relative_path": "monitoring/self_healing_monitor.py",
      "name": "self_healing_monitor.py",
      "size": 13866,
      "lines": 331,
      "hash": "75d6f99435150a106d1712ac9ffbd114",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "sys",
        "typing",
        "signal",
        "logging",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "signal_handler",
        "__init__",
        "class:SelfHealingMonitor",
        "class:ServiceHealth",
        "_calculate_cpu_usage"
      ],
      "description": "Self-Healing Monitor for SutazAI System\nMonitors critical services and automatically restarts failed containers",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/enhanced-hygiene-backend.py",
      "relative_path": "monitoring/enhanced-hygiene-backend.py",
      "name": "enhanced-hygiene-backend.py",
      "size": 36402,
      "lines": 926,
      "hash": "937ef04e86300f84ba42ffcb048ce3b2",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "psutil",
        "time",
        "os",
        "json",
        "datetime",
        "socket",
        "typing",
        "redis.asyncio",
        "aiohttp_cors",
        "structlog",
        "logging",
        "pathlib",
        "uvloop",
        "asyncpg",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:SafeJSONEncoder",
        "create_app",
        "class:EnhancedHygieneBackend",
        "_safe_serialize",
        "default",
        "__init__",
        "encode",
        "iterencode"
      ],
      "description": "Enhanced Hygiene Monitor Backend - Production-Ready Containerized Version\nPurpose: Real-time monitoring with PostgreSQL persistence and Redis caching\nAuthor: Sutazai Backend API Architect\nVersion: 3.0",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/ollama_performance_monitor.py",
      "relative_path": "monitoring/ollama_performance_monitor.py",
      "name": "ollama_performance_monitor.py",
      "size": 28380,
      "lines": 705,
      "hash": "7d9785a38da6fdc3e9a7553c5a0c6952",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "argparse",
        "json",
        "datetime",
        "sys",
        "typing",
        "redis.asyncio",
        "signal",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "to_dict",
        "signal_handler",
        "__init__",
        "class:OllamaMetrics",
        "class:SystemMetrics",
        "class:OllamaPerformanceMonitor"
      ],
      "description": "Comprehensive Ollama Performance Monitor\nReal-time monitoring of Ollama instances for 174+ concurrent connections",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/logging-infrastructure.py",
      "relative_path": "monitoring/logging-infrastructure.py",
      "name": "logging-infrastructure.py",
      "size": 20414,
      "lines": 553,
      "hash": "f24b407c03f332e2d64430593fff1e6f",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "watchdog.events",
        "uuid",
        "json",
        "threading",
        "sqlite3",
        "logging",
        "re",
        "typing",
        "pathlib",
        "shutil",
        "watchdog.observers",
        "dataclasses",
        "os",
        "queue",
        "collections",
        "gzip",
        "logging.handlers",
        "time",
        "aiofiles",
        "datetime",
        "asyncio"
      ],
      "functions": [
        "add_log_entry",
        "debug",
        "class:LogAggregator",
        "get_recent_logs",
        "class:LogEntry",
        "error",
        "_process_log_file",
        "on_modified",
        "search_logs",
        "format",
        "get_log_stats",
        "_parse_log_line",
        "_broadcast_log_entry",
        "class:StructuredLogger",
        "info",
        "create_agent_logger",
        "_init_database",
        "setup_logging_infrastructure",
        "_store_log_entry",
        "class:JsonFormatter",
        "_update_stats",
        "class:LogFileWatcher",
        "_process_log_queue",
        "_extract_error_pattern",
        "__init__",
        "warning"
      ],
      "description": "Comprehensive Logging Infrastructure for Hygiene Monitoring\nPurpose: Structured logging, rotation, aggregation, and real-time log streaming\nAuthor: AI Observability and Monitoring Engineer\nVersion: 1.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/websocket-cleanup-patch.py",
      "relative_path": "monitoring/websocket-cleanup-patch.py",
      "name": "websocket-cleanup-patch.py",
      "size": 5093,
      "lines": 133,
      "hash": "ffddfb6a69519a8db32ee462b03514e4",
      "category": [
        "monitoring",
        "testing",
        "maintenance"
      ],
      "imports": [
        "psutil"
      ],
      "functions": [],
      "description": "Purpose: WebSocket cleanup patch for hygiene monitoring backend\nUsage: Apply this patch to fix memory leaks in WebSocket handling\nRequirements: None - this is a code patch",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/sutazai_realtime_monitor.py",
      "relative_path": "monitoring/sutazai_realtime_monitor.py",
      "name": "sutazai_realtime_monitor.py",
      "size": 26272,
      "lines": 563,
      "hash": "aa7bf4fba6e4c586eb6c74c567f3b970",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "os",
        "requests",
        "argparse",
        "json",
        "datetime",
        "sys",
        "socket",
        "typing",
        "traceback",
        "logging",
        "pathlib",
        "prometheus_client",
        "asyncio"
      ],
      "functions": [
        "parse_args",
        "check_network_connectivity",
        "generate_report",
        "print_summary",
        "__init__",
        "save_report",
        "get_system_stats",
        "class:SutazAIMonitor",
        "load_service_configs",
        "get_container_stats",
        "check_docker_containers"
      ],
      "description": "SutazAI Real-Time Deployment Monitor\nPurpose: Comprehensive monitoring of all SutazAI services and infrastructure\nUsage: python sutazai_realtime_monitor.py [--interval SECONDS] [--alert-threshold PERC",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/monitoring/continuous_performance_monitor.py",
      "relative_path": "monitoring/continuous_performance_monitor.py",
      "name": "continuous_performance_monitor.py",
      "size": 40823,
      "lines": 1102,
      "hash": "b9132c8a095c7448ce9009d908b0ad85",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "flask",
        "threading",
        "sqlite3",
        "logging",
        "email.mime.text",
        "smtplib",
        "typing",
        "flask_socketio",
        "concurrent.futures",
        "email.mime.multipart",
        "pathlib",
        "psutil",
        "dataclasses",
        "queue",
        "performance_forecasting_models",
        "docker",
        "time",
        "requests",
        "datetime",
        "asyncio"
      ],
      "functions": [
        "class:ContinuousPerformanceMonitor",
        "stop_collection",
        "broadcast_alert",
        "process_sla_violation",
        "class:SLAManager",
        "load_sla_config",
        "get_longest_violation_duration",
        "get_recent_metrics",
        "setup_flask_app",
        "get_violation_summary",
        "class:PerformanceMetric",
        "handle_connect",
        "class:PerformanceDashboard",
        "create_alert",
        "stop_monitoring",
        "run",
        "class:MetricsCollector",
        "dashboard_home",
        "stop_alert_processing",
        "class:PerformanceAlert",
        "broadcast_metrics",
        "setup_alert_handlers",
        "get_forecast_api",
        "group_violations_by_component",
        "get_agent_port",
        "determine_impact_level",
        "class:AlertManager",
        "store_metric",
        "load_config",
        "check_sla_violation",
        "generate_recommended_actions",
        "get_sla_violations_api",
        "get_metrics_api",
        "get_alerts_api",
        "handle_disconnect",
        "__init__",
        "get_active_violations",
        "init_database",
        "class:SLAViolation"
      ],
      "description": "Continuous Performance Monitoring System for SutazAI\n===================================================\n\nReal-time performance monitoring with:\n- Live metrics collection and analysis\n- SLA violation ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/ollama_agent_monitor.py",
      "relative_path": "monitoring/ollama_agent_monitor.py",
      "name": "ollama_agent_monitor.py",
      "size": 35039,
      "lines": 871,
      "hash": "a391a39b14a2cc76adf79ad0cc265910",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "typing",
        "sqlite3",
        "logging",
        "dataclasses",
        "contextlib",
        "prometheus_client",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:AgentHealthMetrics",
        "class:OllamaSystemMetrics",
        "_setup_prometheus_metrics",
        "__init__",
        "_init_database",
        "class:OllamaAgentMonitor"
      ],
      "description": "Ollama Agent Monitoring System\nComprehensive monitoring for 131 agents with Ollama integration to prevent freezes",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/agent-orchestrator.py",
      "relative_path": "monitoring/agent-orchestrator.py",
      "name": "agent-orchestrator.py",
      "size": 27215,
      "lines": 719,
      "hash": "d3f2b194d330b64ed35052a8ce89d5c3",
      "category": [
        "monitoring",
        "deployment",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "psutil",
        "time",
        "os",
        "enum",
        "uuid",
        "json",
        "datetime",
        "queue",
        "threading",
        "typing",
        "logging_infrastructure",
        "signal",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:HygieneAgent",
        "_generate_summary_report",
        "_execute_task",
        "submit_task",
        "class:AgentMetrics",
        "class:LogAggregator",
        "_create_default_agents",
        "_execute_scan_task",
        "_generate_detailed_report",
        "stop",
        "class:TaskPriority",
        "class:AgentOrchestrator",
        "_execute_cleanup_task",
        "_send_heartbeat",
        "agent_heartbeat",
        "class:AgentStatus",
        "get_agent_status",
        "_worker_loop",
        "class:AgentTask",
        "_scan_directory",
        "create_agent_logger",
        "_update_average_duration",
        "_scan_file",
        "start",
        "_scheduler_loop",
        "__init__",
        "_execute_fix_task",
        "assign_task",
        "_execute_report_task",
        "_find_suitable_agent",
        "get_task_statistics",
        "_execute_validate_task"
      ],
      "description": "Hygiene Agent Orchestrator - Real-time Agent Management and Tracking\nPurpose: Track, coordinate, and monitor all hygiene enforcement agents\nAuthor: AI Observability and Monitoring Engineer\nVersion: 1.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/hygiene-monitor-backend.py",
      "relative_path": "monitoring/hygiene-monitor-backend.py",
      "name": "hygiene-monitor-backend.py",
      "size": 33917,
      "lines": 863,
      "hash": "f13d39db4f2c28b527787026bc14e19c",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "uuid",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "re",
        "typing",
        "concurrent.futures",
        "pathlib",
        "psutil",
        "dataclasses",
        "os",
        "collections",
        "aiohttp",
        "random",
        "schedule",
        "time",
        "datetime",
        "glob",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "create_app",
        "class:RuleViolation",
        "__init__",
        "get_dashboard_data",
        "class:EnforcementAction",
        "class:SystemMetrics",
        "class:HygieneMonitorBackend",
        "class:AgentHealth",
        "_init_database"
      ],
      "description": "Hygiene Monitor Backend - Real-time Data Collection and API Server\nPurpose: Collect actual metrics, violations, and system data for the dashboard\nAuthor: AI Observability and Monitoring Engineer\nVersi",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/performance_forecasting_models.py",
      "relative_path": "monitoring/performance_forecasting_models.py",
      "name": "performance_forecasting_models.py",
      "size": 34719,
      "lines": 890,
      "hash": "4ba656e07f981f968e92c6eb6bafda00",
      "category": [
        "monitoring"
      ],
      "imports": [
        "json",
        "tensorflow.keras.layers",
        "sqlite3",
        "logging",
        "statsmodels.api",
        "statsmodels.tsa.arima.model",
        "tensorflow.keras.optimizers",
        "typing",
        "sklearn.metrics",
        "statsmodels.tsa.holtwinters",
        "statsmodels.tsa.seasonal",
        "pathlib",
        "sklearn.ensemble",
        "tensorflow",
        "dataclasses",
        "seaborn",
        "prophet",
        "warnings",
        "matplotlib.pyplot",
        "tensorflow.keras.models",
        "numpy",
        "sklearn.preprocessing",
        "datetime",
        "pandas"
      ],
      "functions": [
        "class:ForecastResult",
        "generate_capacity_predictions",
        "detect_anomalies",
        "class:PerformanceForecastingSystem",
        "inverse_transform_predictions",
        "class:AnomalyDetector",
        "setup_ensemble",
        "class:LSTMForecaster",
        "generate_visualization",
        "build_model",
        "load_historical_data",
        "analyze_trend",
        "forecast",
        "add_model",
        "class:TimeSeriesPreprocessor",
        "prepare_data",
        "class:ProphetForecaster",
        "prepare_sequences",
        "class:ARIMAForecaster",
        "generate_recommendations",
        "find_optimal_order",
        "predict_anomalies",
        "calculate_accuracy",
        "fit",
        "class:CapacityPrediction",
        "__init__",
        "generate_forecast",
        "detect_seasonality",
        "class:EnsembleForecaster"
      ],
      "description": "Advanced Performance Forecasting Models for SutazAI System\n=========================================================\n\nImplements sophisticated forecasting algorithms for system performance prediction:",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/comprehensive_report_generator.py",
      "relative_path": "monitoring/comprehensive_report_generator.py",
      "name": "comprehensive_report_generator.py",
      "size": 39404,
      "lines": 973,
      "hash": "86613068e363a09bf6d78eda884e8869",
      "category": [
        "monitoring",
        "utils",
        "automation"
      ],
      "imports": [
        "matplotlib.pyplot",
        "numpy",
        "yaml",
        "argparse",
        "json",
        "datetime",
        "jinja2",
        "typing",
        "pandas",
        "sqlite3",
        "logging",
        "pathlib",
        "dataclasses",
        "system_performance_benchmark_suite",
        "seaborn",
        "weasyprint",
        "performance_forecasting_models"
      ],
      "functions": [
        "generate_trend_chart",
        "generate_json_report",
        "get_performance_summary",
        "class:ReportSection",
        "class:PerformanceInsight",
        "analyze_trends",
        "generate_insights",
        "generate_performance_overview_chart",
        "class:ChartGenerator",
        "generate_pdf_report",
        "generate_insights_chart",
        "get_system_info",
        "generate_recommendations",
        "main",
        "load_config",
        "_generate_component_insights",
        "generate_csv_exports",
        "__init__",
        "class:ComprehensiveReportGenerator",
        "generate_comprehensive_report",
        "generate_html_report",
        "class:DataAnalyzer"
      ],
      "description": "Comprehensive Performance Report Generator for SutazAI System\n===========================================================\n\nGenerates detailed performance reports with:\n- Executive summaries and techni",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/service_health_checker.py",
      "relative_path": "monitoring/service_health_checker.py",
      "name": "service_health_checker.py",
      "size": 22272,
      "lines": 564,
      "hash": "10ea704af47fbaeec3dee8c4942a29a0",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "argparse",
        "json",
        "sys",
        "datetime",
        "neo4j",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "parse_args",
        "__init__",
        "print_health_report",
        "save_results",
        "class:ServiceHealthChecker"
      ],
      "description": "SutazAI Service Health Checker\nPurpose: Dedicated health checking for core services including Ollama, databases, and AI components\nUsage: python service_health_checker.py [--service SERVICE_NAME] [--a",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/monitoring/simple-hygiene-backend.py",
      "relative_path": "monitoring/simple-hygiene-backend.py",
      "name": "simple-hygiene-backend.py",
      "size": 13362,
      "lines": 381,
      "hash": "4b95cc7e0d0b1045dc3c8b1c9f5b10bf",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "psutil",
        "time",
        "os",
        "json",
        "datetime",
        "sqlite3",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "create_app",
        "_store_violation",
        "scan_violations",
        "class:SimpleMonitoringBackend",
        "__init__",
        "get_dashboard_data",
        "_store_metrics",
        "_init_database",
        "collect_system_metrics"
      ],
      "description": "Simple Hygiene Monitor Backend - Minimal Real-time Data Collection\nPurpose: Simplified version for immediate testing\nAuthor: AI Observability and Monitoring Engineer\nVersion: 1.0.0 - Minimal Working V",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/realtime_dashboard.py",
      "relative_path": "monitoring/realtime_dashboard.py",
      "name": "realtime_dashboard.py",
      "size": 36862,
      "lines": 993,
      "hash": "4268f4d5549837a1522d1c424204605b",
      "category": [
        "monitoring",
        "utils",
        "security"
      ],
      "imports": [
        "os",
        "json",
        "sys",
        "datetime",
        "typing",
        "aiohttp_cors",
        "sqlite3",
        "signal",
        "monitoring.ollama_agent_monitor",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "stop",
        "_generate_dashboard_html",
        "_setup_routes",
        "signal_handler",
        "__init__",
        "class:RealtimeDashboard"
      ],
      "description": "Real-time Monitoring Dashboard for SutazAI Ollama Agents\nProvides web-based real-time monitoring interface",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/test_alerting_pipeline.py",
      "relative_path": "monitoring/test_alerting_pipeline.py",
      "name": "test_alerting_pipeline.py",
      "size": 17406,
      "lines": 433,
      "hash": "06faabea8788e5f30212fdeeaa344960",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "datetime",
        "sys",
        "typing",
        "logging",
        "os",
        "subprocess"
      ],
      "functions": [
        "test_specific_alerts",
        "generate_test_report",
        "test_notification_channels",
        "class:AlertingTestSuite",
        "test_service_discovery",
        "create_test_alert",
        "__init__",
        "test_alert_rules_loaded",
        "cleanup_test_alerts",
        "run_full_test_suite",
        "test_alertmanager_connectivity",
        "test_prometheus_connectivity",
        "main",
        "verify_alert_delivery"
      ],
      "description": "SutazAI Production Alerting Pipeline Test Suite\nTests all critical alerting functionality end-to-end",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/emergency-shutdown-coordinator.py",
      "relative_path": "disaster-recovery/emergency-shutdown-coordinator.py",
      "name": "emergency-shutdown-coordinator.py",
      "size": 45377,
      "lines": 1089,
      "hash": "df9859cdc7d9c8c0b531f82a9dc3c48e",
      "category": [
        "utils"
      ],
      "imports": [
        "json",
        "threading",
        "sqlite3",
        "logging",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "docker",
        "time",
        "datetime",
        "redis",
        "subprocess"
      ],
      "functions": [
        "initiate_emergency_shutdown",
        "_persist_critical_state",
        "_drain_queues_and_connections",
        "class:ServiceShutdownConfig",
        "_shutdown_generic_service",
        "_shutdown_databases",
        "_execute_shutdown_sequence",
        "setup_deadman_switch",
        "class:ShutdownState",
        "abort_emergency_shutdown",
        "_shutdown_application_service",
        "_graceful_process_termination",
        "_setup_signal_handlers",
        "_update_shutdown_event",
        "class:ShutdownPhase",
        "touch_deadman_switch",
        "_shutdown_docker_containers",
        "_broadcast_shutdown_notification",
        "_force_process_termination",
        "_shutdown_services",
        "_log_service_action",
        "main",
        "_init_database",
        "_load_service_configs",
        "class:EmergencyShutdownCoordinator",
        "_monitor_system",
        "_log_shutdown_event",
        "touch_periodically",
        "get_shutdown_status",
        "__init__",
        "class:ShutdownTrigger",
        "_cleanup_resources",
        "signal_handler"
      ],
      "description": "SutazAI Emergency Shutdown Coordinator\nComprehensive emergency shutdown system with state preservation and graceful degradation.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/validate-disaster-recovery.py",
      "relative_path": "disaster-recovery/validate-disaster-recovery.py",
      "name": "validate-disaster-recovery.py",
      "size": 27616,
      "lines": 734,
      "hash": "9736bd7b4521cddc15df090362c04ebe",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "typing",
        "sqlite3",
        "urllib.request",
        "logging",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_backup_coordinator",
        "check_system_resources",
        "check_backup_integrity",
        "validate_all",
        "check_emergency_shutdown_coordinator",
        "check_network_connectivity",
        "_generate_recommendations",
        "__init__",
        "check_database_integrity",
        "check_recovery_procedures",
        "check_storage_health",
        "class:DisasterRecoveryValidator",
        "check_service_health",
        "check_monitoring_systems",
        "main"
      ],
      "description": "SutazAI Disaster Recovery Validation Script\nQuick validation of disaster recovery preparedness and system resilience.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/backup-coordinator.py",
      "relative_path": "disaster-recovery/backup-coordinator.py",
      "name": "backup-coordinator.py",
      "size": 39107,
      "lines": 984,
      "hash": "11522e54ea0bb9667a3fdb627c5d7843",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "json",
        "threading",
        "sqlite3",
        "logging",
        "cryptography.fernet",
        "hashlib",
        "typing",
        "concurrent.futures",
        "pathlib",
        "base64",
        "cryptography.hazmat.primitives",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "cryptography.hazmat.primitives.kdf.pbkdf2",
        "schedule",
        "time",
        "datetime",
        "tarfile",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_save_job_config",
        "_get_last_backup_id",
        "_log_backup_event",
        "class:BackupJob",
        "_backup_containers",
        "_backup_database",
        "class:BackupCoordinator",
        "get_backup_status",
        "_load_backup_jobs",
        "_decrypt_file",
        "class:BackupMetadata",
        "_encrypt_file",
        "_backup_files",
        "_init_encryption",
        "schedule_backups",
        "_update_backup_metadata",
        "_verify_backup",
        "emergency_backup_all",
        "_generate_recovery_instructions",
        "_calculate_checksum",
        "create_backup",
        "main",
        "_backup_system_state",
        "_init_database",
        "_save_backup_metadata",
        "_get_last_backup_time",
        "_cleanup_old_backups",
        "_check_system_resources",
        "run_scheduler",
        "restore_backup",
        "shutdown",
        "__init__",
        "_copy_to_offsite"
      ],
      "description": "SutazAI Backup Coordinator\nComprehensive backup system for all critical data and system state preservation.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/point-in-time-recovery.py",
      "relative_path": "disaster-recovery/point-in-time-recovery.py",
      "name": "point-in-time-recovery.py",
      "size": 44108,
      "lines": 1048,
      "hash": "56f7bcd1a3b9ba0cada9f5f11610fafa",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "json",
        "pickle",
        "threading",
        "sqlite3",
        "logging",
        "cryptography.fernet",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "time",
        "datetime",
        "tarfile",
        "subprocess"
      ],
      "functions": [
        "class:TransactionLog",
        "class:RecoveryPointType",
        "_start_auto_checkpoints",
        "_start_transaction_logging",
        "_log_recovery_operation",
        "_calculate_file_checksum",
        "_get_current_transaction_log_position",
        "_save_recovery_point",
        "_update_recovery_operation",
        "list_recovery_points",
        "_init_databases",
        "create_recovery_point",
        "get_recovery_status",
        "recover_to_point",
        "_apply_transaction",
        "_load_configuration",
        "_verify_recovery_point",
        "log_transaction",
        "_create_data_snapshot",
        "class:PointInTimeRecovery",
        "_create_recovery_instructions",
        "main",
        "_cleanup_old_recovery_points",
        "_replay_transactions",
        "class:RecoveryPoint",
        "recover_to_time",
        "__init__",
        "create_auto_checkpoint",
        "_estimate_recovery_time",
        "class:RecoveryStatus",
        "_restore_data_snapshot",
        "_collect_system_state"
      ],
      "description": "SutazAI Point-in-Time Recovery System\nComprehensive recovery system with transaction logs and state restoration.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/disaster-recovery/disaster-recovery-test-suite.py",
      "relative_path": "disaster-recovery/disaster-recovery-test-suite.py",
      "name": "disaster-recovery-test-suite.py",
      "size": 49896,
      "lines": 1348,
      "hash": "2b59766dc1d1cc6417d447a2e84a8e7b",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "socket",
        "threading",
        "sqlite3",
        "logging",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "docker",
        "time",
        "datetime",
        "redis",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "test_network_partition_recovery",
        "test_disk_full_recovery",
        "test_single_agent_failure",
        "run_all_tests",
        "_execute_test",
        "test_agent_orchestrator_failure",
        "test_database_backup_restore",
        "test_service_mesh_component_failure",
        "test_multiple_agent_failure",
        "test_jwt_token_invalidation",
        "class:TestCase",
        "test_volume_mount_failure",
        "_setup_test_environment",
        "test_rpo_measurement",
        "class:TestCategory",
        "_define_test_cases",
        "test_dns_failure_recovery",
        "test_database_corruption_recovery",
        "class:TestExecution",
        "test_backup_integrity_validation",
        "generate_report",
        "_run_with_timeout",
        "_init_test_database",
        "test_load_balancer_failure",
        "_save_test_result",
        "test_database_connection_failure",
        "main",
        "test_auth_service_outage",
        "test_incremental_backup_chain",
        "test_rto_measurement",
        "__init__",
        "cleanup_test_environment",
        "target",
        "class:DisasterRecoveryTestSuite"
      ],
      "description": "SutazAI Disaster Recovery Test Suite\nComprehensive testing framework for disaster recovery procedures without causing disruption.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/external-service-registry.py",
      "relative_path": "services/external-service-registry.py",
      "name": "external-service-registry.py",
      "size": 10850,
      "lines": 299,
      "hash": "c604595fd3bc8ba548d364cb47a3823f",
      "category": [
        "maintenance"
      ],
      "imports": [
        "argparse",
        "json",
        "datetime",
        "sys",
        "typing",
        "consul",
        "redis"
      ],
      "functions": [
        "update_service_status",
        "register_service",
        "list_services",
        "__init__",
        "class:ServiceRegistry",
        "get_services_by_type",
        "get_service_health",
        "remove_service",
        "main",
        "get_service"
      ],
      "description": "Purpose: Central registry for all external services integrated with SutazAI\nUsage: python external-service-registry.py [--list] [--add SERVICE] [--remove SERVICE]\nRequirements: redis, consul-py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/ollama_service.py",
      "relative_path": "services/ollama_service.py",
      "name": "ollama_service.py",
      "size": 15597,
      "lines": 478,
      "hash": "b44b4a128df70d06194ccaf2e3ebb23d",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "httpx",
        "json",
        "datetime",
        "typing",
        "redis.asyncio",
        "pydantic",
        "functools",
        "logging",
        "asyncio",
        "backoff",
        "hashlib"
      ],
      "functions": [
        "class:GenerationResponse",
        "_optimize_prompt",
        "class:OllamaService",
        "__init__",
        "class:GenerationRequest",
        "_create_cache_key"
      ],
      "description": "Optimized Ollama Service for SutazAI\nProvides efficient LLM integration with caching, batching, and TinyLlama optimizations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/core/unified_representation.py",
      "relative_path": "fusion/core/unified_representation.py",
      "name": "unified_representation.py",
      "size": 27210,
      "lines": 669,
      "hash": "b06e9e8cee658a7f552d88dcdc942076",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "numpy",
        "enum",
        "multi_modal_fusion_coordinator",
        "uuid",
        "torch",
        "json",
        "yaml",
        "pickle",
        "collections",
        "typing",
        "torch.nn",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "torch.nn.functional"
      ],
      "functions": [
        "map_to_semantic_space",
        "to_dict",
        "_load_semantic_concepts",
        "class:SemanticSpaceMapper",
        "get_adaptation_suggestions",
        "should_adapt",
        "from_dict",
        "export_representation",
        "class:AdaptiveRepresentationLearner",
        "import_representation",
        "class:UnifiedRepresentation",
        "record_usage",
        "find_similar_representations",
        "get_framework_statistics",
        "forward",
        "initialize_encoder",
        "_calculate_confidence",
        "class:RepresentationLevel",
        "_analyze_contexts",
        "__init__",
        "_load_config",
        "class:CrossModalEncoder",
        "class:UnifiedRepresentationFramework",
        "get_representation_analytics"
      ],
      "description": "Unified Representation Framework for Multi-Modal Fusion\n\nThis module provides a unified representation space that enables seamless \nintegration and understanding across different data modalities in th",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/core/multi_modal_fusion_coordinator.py",
      "relative_path": "fusion/core/multi_modal_fusion_coordinator.py",
      "name": "multi_modal_fusion_coordinator.py",
      "size": 39983,
      "lines": 984,
      "hash": "00600682da788ac5048697ca2b3be501",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "torch.nn.functional",
        "time",
        "numpy",
        "enum",
        "uuid",
        "torch",
        "json",
        "yaml",
        "collections",
        "threading",
        "typing",
        "torch.nn",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "queue"
      ],
      "functions": [
        "_visual_to_features",
        "_max_confidence_fusion",
        "class:LateFusionProcessor",
        "_voting_fusion",
        "get_processing_statistics",
        "class:ModalityType",
        "class:CrossModalAttention",
        "_clean_old_data",
        "class:EarlyFusionProcessor",
        "get_synchronized_batch",
        "__post_init__",
        "_weighted_average_fusion",
        "add_data",
        "_sensor_to_features",
        "class:ModalityData",
        "class:FusionStrategy",
        "forward",
        "class:MultiModalFusionCoordinator",
        "fuse",
        "_text_to_features",
        "class:TemporalSynchronizer",
        "__init__",
        "class:FusionResult",
        "_voice_to_features",
        "_load_config"
      ],
      "description": "Multi-Modal Fusion Coordinator for SutazAI Platform\n\nThis system enables coordinated processing and understanding of multiple data modalities\nsimultaneously, including text, voice, visual data, and se",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/core/cross_modal_learning.py",
      "relative_path": "fusion/core/cross_modal_learning.py",
      "name": "cross_modal_learning.py",
      "size": 35570,
      "lines": 903,
      "hash": "1ef25fc529b7d4e13de0fbad9b479476",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "uuid",
        "torch",
        "json",
        "yaml",
        "pickle",
        "threading",
        "logging",
        "torch.optim",
        "enum",
        "typing",
        "unified_representation",
        "concurrent.futures",
        "pathlib",
        "torch.utils.data",
        "dataclasses",
        "collections",
        "torch.nn.functional",
        "time",
        "numpy",
        "multi_modal_fusion_coordinator",
        "torch.nn",
        "asyncio"
      ],
      "functions": [
        "add_training_samples",
        "add_training_sample",
        "transfer_features",
        "class:CrossModalSample",
        "__len__",
        "add_modality",
        "class:LearningMetrics",
        "__getitem__",
        "initialize_learners",
        "get_cross_modal_similarity",
        "get_learning_statistics",
        "train_transfer",
        "class:CrossModalDataset",
        "class:LearningStrategy",
        "class:ModalityTransferLearner",
        "forward",
        "class:CrossModalLearningSystem",
        "__init__",
        "_contrastive_loss",
        "class:ContrastiveLearningModule",
        "_load_config",
        "class:CrossModalAttentionLearner"
      ],
      "description": "Cross-Modal Learning System for SutazAI Multi-Modal Fusion\n\nThis module implements advanced cross-modal learning capabilities including:\n- Contrastive learning across modalities\n- Cross-modal transfer",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/visualization/fusion_visualizer.py",
      "relative_path": "fusion/visualization/fusion_visualizer.py",
      "name": "fusion_visualizer.py",
      "size": 38306,
      "lines": 1033,
      "hash": "7f1df27cf305ea3ca151a40170a304d3",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "threading",
        "networkx",
        "websockets",
        "sqlite3",
        "sklearn.decomposition",
        "logging",
        "core.multi_modal_fusion_coordinator",
        "umap",
        "plotly.subplots",
        "streamlit",
        "plotly.graph_objects",
        "typing",
        "io",
        "pathlib",
        "base64",
        "dataclasses",
        "seaborn",
        "sklearn.manifold",
        "collections",
        "matplotlib.pyplot",
        "time",
        "numpy",
        "datetime",
        "pandas",
        "core.unified_representation",
        "pipeline.realtime_fusion_pipeline",
        "asyncio",
        "plotly.express"
      ],
      "functions": [
        "stop_collection",
        "class:VisualizationConfig",
        "class:DataCollector",
        "_inject_custom_css",
        "_render_fusion_analysis",
        "start_collection",
        "_render_performance_analysis",
        "run_dashboard",
        "_export_data",
        "add_representation",
        "_render_sidebar",
        "class:FusionVisualizer",
        "_render_debugging_tools",
        "_render_realtime_metrics",
        "_store_metrics",
        "_render_representation_space",
        "_setup_database",
        "add_fusion_result",
        "_websocket_loop",
        "main",
        "_process_websocket_data",
        "__init__",
        "get_metrics_data",
        "_export_plots"
      ],
      "description": "Multi-Modal Fusion Visualization and Debugging Tools\n\nThis module provides comprehensive visualization and debugging capabilities \nfor the SutazAI multi-modal fusion system, including:\n\n- Real-time fu",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/fusion/pipeline/realtime_fusion_pipeline.py",
      "relative_path": "fusion/pipeline/realtime_fusion_pipeline.py",
      "name": "realtime_fusion_pipeline.py",
      "size": 35310,
      "lines": 917,
      "hash": "c1044172ae41041023a949ed912aae10",
      "category": [
        "monitoring",
        "security"
      ],
      "imports": [
        "uuid",
        "yaml",
        "json",
        "threading",
        "websockets",
        "logging",
        "enum",
        "gc",
        "typing",
        "signal",
        "unified_representation",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "psutil",
        "dataclasses",
        "heapq",
        "collections",
        "queue",
        "aiohttp",
        "time",
        "numpy",
        "multi_modal_fusion_coordinator",
        "asyncio"
      ],
      "functions": [
        "class:ProcessingPriority",
        "record_worker_usage",
        "class:ProcessingRequest",
        "scale_workers",
        "get_metrics_history",
        "class:LoadBalancer",
        "put",
        "should_scale_down",
        "class:StreamBuffer",
        "class:PipelineMetrics",
        "class:RealTimeFusionPipeline",
        "release_worker",
        "__lt__",
        "get_batch",
        "should_scale_up",
        "clear",
        "size",
        "class:ProcessingResponse",
        "class:PipelineStage",
        "__init__",
        "_signal_handler",
        "class:AutoScaler",
        "_load_config",
        "select_worker",
        "get",
        "get_pipeline_status"
      ],
      "description": "Real-Time Multi-Modal Fusion Processing Pipeline\n\nThis module implements a high-performance, real-time processing pipeline for \nmulti-modal fusion in the SutazAI platform. It handles streaming data fr",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-script-organization.py",
      "relative_path": "scripts/pre-commit/check-script-organization.py",
      "name": "check-script-organization.py",
      "size": 10418,
      "lines": 274,
      "hash": "0659f872458d0e9fe197401d9863638b",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "check_script_header",
        "__init__",
        "class:ScriptOrganizationChecker",
        "check_script_location",
        "check_script_naming",
        "main",
        "check_script_permissions",
        "_suggest_subdirectory"
      ],
      "description": "Purpose: Validate script organization and structure (Rule 7 enforcement)\nUsage: python check-script-organization.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/validate_system_health.py",
      "relative_path": "scripts/pre-commit/validate_system_health.py",
      "name": "validate_system_health.py",
      "size": 5604,
      "lines": 166,
      "hash": "a5e199280160353e0a3f6cffc1340edb",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "argparse",
        "master_health_controller",
        "sys",
        "io",
        "pathlib",
        "contextlib"
      ],
      "functions": [
        "quick_service_check",
        "class:PreCommitHealthValidator",
        "validate_critical_services",
        "__init__",
        "validate_system",
        "main",
        "check_docker_containers"
      ],
      "description": "PRE-COMMIT HEALTH VALIDATOR\nQuick system health validation before allowing commits\n\nConsolidated from:\n- validate_system_health.py (pre-commit)\n- quick-system-check.py (pre-commit)\n\nPurpose: Ensure sy",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-changelog-updated.py",
      "relative_path": "scripts/pre-commit/check-changelog-updated.py",
      "name": "check-changelog-updated.py",
      "size": 3318,
      "lines": 102,
      "hash": "e63276e002599e7064cb04f25abe19db",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "__future__",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "changelog_has_new_entry",
        "file_staged",
        "get_staged_files",
        "main",
        "run_git"
      ],
      "description": "Rule 19: Require docs/CHANGELOG.md update in every commit.\n\n- Fails commit if there are staged changes but docs/CHANGELOG.md is not staged\n  with an added entry line matching the required format:\n  [T",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-agent-usage.py",
      "relative_path": "scripts/pre-commit/check-agent-usage.py",
      "name": "check-agent-usage.py",
      "size": 3141,
      "lines": 87,
      "hash": "7b5ba403fbdf994025f89074b6f1ac65",
      "category": [
        "deployment",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "typing"
      ],
      "functions": [
        "main",
        "check_agent_usage"
      ],
      "description": "Purpose: Verify correct AI agent selection and usage (Rule 14 enforcement)\nUsage: python check-agent-usage.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-directory-duplication.py",
      "relative_path": "scripts/pre-commit/check-directory-duplication.py",
      "name": "check-directory-duplication.py",
      "size": 6495,
      "lines": 168,
      "hash": "7e1617bd3546bf822b7b1583133326a6",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "check_specific_duplications",
        "main",
        "get_dir_structure",
        "find_duplicate_patterns",
        "check_content_similarity"
      ],
      "description": "Purpose: Check for duplicate directories (Rule 9 enforcement)\nUsage: python check-directory-duplication.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-docker-structure.py",
      "relative_path": "scripts/pre-commit/check-docker-structure.py",
      "name": "check-docker-structure.py",
      "size": 10291,
      "lines": 261,
      "hash": "274ef5ffe39ebb21dff71f310052bcab",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "yaml",
        "sys",
        "json",
        "re",
        "typing",
        "pathlib"
      ],
      "functions": [
        "class:DockerStructureValidator",
        "__init__",
        "check_dockerfile",
        "main",
        "check_docker_compose",
        "check_docker_structure"
      ],
      "description": "Purpose: Validate Docker structure is clean and modular (Rule 11 enforcement)\nUsage: python check-docker-structure.py <file1> <file2> ...\nRequirements: Python 3.8+, docker (optional for advanced check",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/quick-system-check.py",
      "relative_path": "scripts/pre-commit/quick-system-check.py",
      "name": "quick-system-check.py",
      "size": 8605,
      "lines": 220,
      "hash": "7d8974582a74731b89e0065b1bb0dc26",
      "category": [
        "testing",
        "utils",
        "analysis"
      ],
      "imports": [
        "yaml",
        "sys",
        "json",
        "typing",
        "ast",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "_is_stdlib_module",
        "check_import_integrity",
        "check_dependencies",
        "__init__",
        "check_git_status",
        "main",
        "check_test_coverage",
        "check_config_files",
        "class:QuickSystemAnalyzer"
      ],
      "description": "Purpose: Quick system analysis to ensure changes don't break functionality (Rule 3)\nUsage: python quick-system-check.py\nRequirements: Python 3.8+, git",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-llm-usage.py",
      "relative_path": "scripts/pre-commit/check-llm-usage.py",
      "name": "check-llm-usage.py",
      "size": 2475,
      "lines": 85,
      "hash": "cc2a07f89c11f7a89ea9e0c60436ffa2",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "typing"
      ],
      "functions": [
        "check_llm_usage",
        "main"
      ],
      "description": "Purpose: Verify Ollama/GPT-OSS usage compliance (Rule 16 enforcement)\nUsage: python check-llm-usage.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-garbage-files.py",
      "relative_path": "scripts/pre-commit/check-garbage-files.py",
      "name": "check-garbage-files.py",
      "size": 6067,
      "lines": 221,
      "hash": "5101e30c346b637a6785170f25185f43",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "typing"
      ],
      "functions": [
        "check_file_content",
        "is_garbage_file",
        "main"
      ],
      "description": "Purpose: Detect and prevent garbage files from being committed (Rule 13)\nUsage: python check-garbage-files.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-safe-deletion.py",
      "relative_path": "scripts/pre-commit/check-safe-deletion.py",
      "name": "check-safe-deletion.py",
      "size": 9409,
      "lines": 265,
      "hash": "6ee33b4c468fcbbd53c0d54851840985",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "subprocess",
        "pathlib",
        "typing"
      ],
      "functions": [
        "check_documentation_references",
        "get_deleted_files",
        "__init__",
        "class:SafeDeletionChecker",
        "main",
        "find_references",
        "check_test_coverage",
        "analyze_deletion_safety"
      ],
      "description": "Purpose: Verify that file deletions are safe and won't break functionality (Rule 10)\nUsage: python check-safe-deletion.py\nRequirements: Python 3.8+, git",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-doc-duplication.py",
      "relative_path": "scripts/pre-commit/check-doc-duplication.py",
      "name": "check-doc-duplication.py",
      "size": 1797,
      "lines": 62,
      "hash": "259eedb5195ddf93f574f7950bad2bd9",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "pathlib",
        "hashlib"
      ],
      "functions": [
        "check_files",
        "main",
        "calculate_content_hash"
      ],
      "description": "Purpose: Check for documentation duplication (Rule 15 enforcement)\nUsage: python check-doc-duplication.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-python-docs.py",
      "relative_path": "scripts/pre-commit/check-python-docs.py",
      "name": "check-python-docs.py",
      "size": 8900,
      "lines": 246,
      "hash": "f68c13dcc00d89530689c817a796bf5b",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "ast",
        "pathlib"
      ],
      "functions": [
        "class:PythonDocChecker",
        "visit_If",
        "__init__",
        "check_file_header",
        "check_script_organization",
        "main",
        "_check_module_docstring_format",
        "visit_FunctionDef",
        "visit_Module",
        "visit_ClassDef"
      ],
      "description": "Purpose: Verify Python scripts have proper documentation (Rule 8 enforcement)\nUsage: python check-python-docs.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-deployment-scripts.py",
      "relative_path": "scripts/pre-commit/check-deployment-scripts.py",
      "name": "check-deployment-scripts.py",
      "size": 5653,
      "lines": 163,
      "hash": "7e583c540a6ae0b8f88645a3f3b0723f",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "subprocess",
        "pathlib",
        "typing"
      ],
      "functions": [
        "find_deployment_scripts",
        "check_canonical_script",
        "check_deployment_script_quality",
        "main"
      ],
      "description": "Purpose: Verify single canonical deployment script (Rule 12 enforcement)\nUsage: python check-deployment-scripts.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-conceptual-elements.py",
      "relative_path": "scripts/pre-commit/check-conceptual-elements.py",
      "name": "check-conceptual-elements.py",
      "size": 3357,
      "lines": 101,
      "hash": "fc14b6718cc06be99855e1f0be2bb8b4",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "typing"
      ],
      "functions": [
        "check_file_for_fantasy_elements",
        "main"
      ],
      "description": "Purpose: Check for conceptual/placeholder code elements (Rule 1 enforcement)\nUsage: python check-conceptual-elements.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-breaking-changes.py",
      "relative_path": "scripts/pre-commit/check-breaking-changes.py",
      "name": "check-breaking-changes.py",
      "size": 10121,
      "lines": 263,
      "hash": "6d7a16bbcf3c84d59d0e0e64b0707749",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "check_file_deletions",
        "check_dependency_changes",
        "get_deleted_files",
        "check_api_changes",
        "get_staged_files",
        "__init__",
        "class:BreakingChangeDetector",
        "check_config_changes",
        "main"
      ],
      "description": "Purpose: Detect potential breaking changes in commits (Rule 2 enforcement)\nUsage: python check-breaking-changes.py\nRequirements: Python 3.8+, git",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-doc-structure.py",
      "relative_path": "scripts/pre-commit/check-doc-structure.py",
      "name": "check-doc-structure.py",
      "size": 7505,
      "lines": 212,
      "hash": "149537e39559790789b550495e8fad6f",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "typing"
      ],
      "functions": [
        "check_doc_naming",
        "class:DocStructureChecker",
        "check_doc_structure",
        "__init__",
        "check_doc_location",
        "main",
        "check_doc_duplication"
      ],
      "description": "Purpose: Validate documentation structure and organization (Rule 6 enforcement)\nUsage: python check-doc-structure.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/pre-commit/check-script-duplication.py",
      "relative_path": "scripts/pre-commit/check-script-duplication.py",
      "name": "check-script-duplication.py",
      "size": 7025,
      "lines": 191,
      "hash": "d35e430f88060977cb0c778fa411b2c2",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "ast",
        "pathlib",
        "hashlib"
      ],
      "functions": [
        "__init__",
        "check_similar_functionality",
        "_calculate_similarity",
        "class:ScriptDuplicationChecker",
        "main",
        "_normalize_content",
        "get_function_signatures",
        "check_content_similarity"
      ],
      "description": "Purpose: Check for script duplication and enforce reuse (Rule 4 enforcement)\nUsage: python check-script-duplication.py <file1> <file2> ...\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/database/database_monitor.py",
      "relative_path": "scripts/database/database_monitor.py",
      "name": "database_monitor.py",
      "size": 17089,
      "lines": 453,
      "hash": "e7472a5a37f5de89e6c13a38e69929f7",
      "category": [
        "monitoring",
        "utils",
        "security"
      ],
      "imports": [
        "psutil",
        "time",
        "os",
        "json",
        "datetime",
        "typing",
        "logging",
        "asyncpg",
        "asyncio"
      ],
      "functions": [
        "__init__",
        "class:DatabaseMonitor"
      ],
      "description": "SutazAI Database Health Monitor\nReal-time PostgreSQL monitoring with alerting\nAuthor: DBA Administrator\nDate: 2025-08-09",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/hygiene-system-orchestrator.py",
      "relative_path": "scripts/maintenance/hygiene-system-orchestrator.py",
      "name": "hygiene-system-orchestrator.py",
      "size": 34947,
      "lines": 852,
      "hash": "d24231f32257117b4088947f9ec3567b",
      "category": [
        "deployment",
        "maintenance",
        "utils"
      ],
      "imports": [
        "asyncio",
        "time",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "os",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:ServiceStatus",
        "_load_configuration",
        "_get_system_resources",
        "_calculate_startup_order",
        "__init__",
        "_generate_health_recommendations",
        "class:HygieneSystemOrchestrator",
        "visit",
        "class:HealthChecker",
        "_signal_handler",
        "_find_service_pid",
        "_log_health_report",
        "_deep_merge",
        "class:SystemHealthReport"
      ],
      "description": "Purpose: Master orchestrator for the complete hygiene enforcement system\nUsage: python hygiene-system-orchestrator.py [--mode MODE] [--config CONFIG]\nRequirements: All system components must be availa",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/complete-cleanup-and-prepare.py",
      "relative_path": "scripts/maintenance/complete-cleanup-and-prepare.py",
      "name": "complete-cleanup-and-prepare.py",
      "size": 28125,
      "lines": 1093,
      "hash": "cea4dc74106d8088e8af31fa78033604",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "create_database_schema",
        "create_deployment_guide",
        "create_docker_deployment",
        "cleanup_report",
        "clean_agents_directory",
        "create_backup",
        "create_testing_specs",
        "remove_fantasy_documentation",
        "create_coding_ready_docs",
        "consolidate_requirements"
      ],
      "description": "COMPLETE CLEANUP AND DOCUMENTATION PREPARATION SCRIPT\nRemoves ALL conceptual elements and prepares coding-ready documentation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/cleanup-old-requirements.py",
      "relative_path": "scripts/maintenance/cleanup-old-requirements.py",
      "name": "cleanup-old-requirements.py",
      "size": 5680,
      "lines": 169,
      "hash": "5c9818a0e7da28a2013d35001a0a443a",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "typing",
        "logging",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "remove_file",
        "backup_file",
        "main"
      ],
      "description": "Requirements Cleanup Script - SutazAI System\nSafely removes old requirements files after consolidation\n\nGenerated: 2025-08-07\nPurpose: Clean up redundant requirements files while preserving critical o",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/remove_fantasy_elements.py",
      "relative_path": "scripts/maintenance/remove_fantasy_elements.py",
      "name": "remove_fantasy_elements.py",
      "size": 4902,
      "lines": 149,
      "hash": "8ac4df482d8bcd54495e751b70f08cec",
      "category": [
        "utils"
      ],
      "imports": [
        "datetime",
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "is_protected",
        "run",
        "__init__",
        "update_changelog",
        "clean_file",
        "class:FantasyRemover"
      ],
      "description": "INTELLIGENT conceptual Elements Remover\nRemoves AGI/ASI/quantum/automated references WITHOUT breaking LocalAGI/BigAGI services",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-agent-dockerfiles.py",
      "relative_path": "scripts/maintenance/fix-agent-dockerfiles.py",
      "name": "fix-agent-dockerfiles.py",
      "size": 2846,
      "lines": 106,
      "hash": "2c368ef553b4d39da3e51f4a42a4c983",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib"
      ],
      "functions": [
        "fix_dockerfile",
        "main"
      ],
      "description": "Fix agent Dockerfiles to ensure correct startup",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/update-agent-auth.py",
      "relative_path": "scripts/maintenance/update-agent-auth.py",
      "name": "update-agent-auth.py",
      "size": 15585,
      "lines": 377,
      "hash": "8e06a7d1caf5b84e0a8cfd0074263d87",
      "category": [
        "deployment",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "httpx",
        "os",
        "json",
        "typing",
        "structlog",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "__init__",
        "update_agent_config_file",
        "update_python_agent",
        "class:AgentAuthUpdater",
        "generate_auth_config",
        "update_docker_compose_env"
      ],
      "description": "Update AI Agent configurations with authentication credentials",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/update_approved_ports.py",
      "relative_path": "scripts/maintenance/update_approved_ports.py",
      "name": "update_approved_ports.py",
      "size": 8329,
      "lines": 222,
      "hash": "7c4453ba6adea3a6cc30aca4da653638",
      "category": [
        "deployment",
        "maintenance",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "datetime",
        "os",
        "shutil"
      ],
      "functions": [
        "verify_changes",
        "update_docker_compose",
        "update_agent_configs",
        "update_resource_arbitration_agent",
        "update_port_registry",
        "main",
        "backup_file"
      ],
      "description": "Update all service ports to use only approved port list:\n10010, 10104, 11015, 8589, 8587, 8551, 8002\n\nThis script reassigns ports for all services to comply with the port policy.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/demo-hygiene-tests.py",
      "relative_path": "scripts/maintenance/demo-hygiene-tests.py",
      "name": "demo-hygiene-tests.py",
      "size": 5906,
      "lines": 185,
      "hash": "a7f482267cae9f15555d5baa12721f66",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "time",
        "subprocess",
        "pathlib"
      ],
      "functions": [
        "main"
      ],
      "description": "Purpose: Demonstration script showing comprehensive hygiene testing system\nUsage: python demo-hygiene-tests.py [--quick]\nRequirements: All hygiene testing components",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/ultra-script-consolidation.py",
      "relative_path": "scripts/maintenance/ultra-script-consolidation.py",
      "name": "ultra-script-consolidation.py",
      "size": 24395,
      "lines": 679,
      "hash": "54d332dd5bd9f7866f65588fbf328f49",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "shutil",
        "requests",
        "argparse",
        "sys",
        "json",
        "datetime",
        "collections",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "create_monitoring_master",
        "validate_service_health",
        "class:UltraScriptConsolidator",
        "validate_imports",
        "create_checksums",
        "cleanup_obsolete",
        "create_rollback_script",
        "validate_docker_builds",
        "select_canonical",
        "intelligent_consolidation",
        "create_inventory",
        "validate_functionality",
        "consolidate_duplicates",
        "archive_script",
        "rollback",
        "categorize_script",
        "generate_report",
        "validate_references",
        "main",
        "analyze_scripts",
        "execute",
        "create_test_master",
        "create_deployment_master",
        "__init__",
        "create_comprehensive_backup"
      ],
      "description": "ULTRA SCRIPT CONSOLIDATION EXECUTOR\nPurpose: Safely consolidate 1,203 scripts down to 350 with zero functionality loss\nAuthor: Ultra System Architect\nDate: 2025-08-10",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/safe-requirements-cleanup.py",
      "relative_path": "scripts/maintenance/safe-requirements-cleanup.py",
      "name": "safe-requirements-cleanup.py",
      "size": 23732,
      "lines": 609,
      "hash": "b3c545d09ec4050f0535b2b789a4b194",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "shutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "os",
        "collections",
        "hashlib"
      ],
      "functions": [
        "execute_cleanup",
        "analyze_duplicates_and_redundancy",
        "_calculate_file_hash",
        "_classify_requirements_type",
        "generate_report",
        "__init__",
        "_extract_service_name",
        "verify_action_safety",
        "_generate_markdown_report",
        "_is_file_referenced",
        "class:SafeRequirementsCleanup",
        "create_backup",
        "main",
        "run_comprehensive_cleanup",
        "plan_cleanup_actions",
        "discover_requirements_files"
      ],
      "description": "Purpose: Safe requirements file cleanup with backup and rollback capabilities\nUsage: python safe-requirements-cleanup.py [--dry-run] [--backup-dir PATH] [--execute]\nRequirements: Python 3.8+, hashlib,",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/update-github-workflows-compatibility.py",
      "relative_path": "scripts/maintenance/update-github-workflows-compatibility.py",
      "name": "update-github-workflows-compatibility.py",
      "size": 3999,
      "lines": 100,
      "hash": "35cf18319869a138c4ecb2f32b86de7a",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "yaml",
        "json",
        "re",
        "pathlib",
        "os"
      ],
      "functions": [
        "update_workflow_file",
        "main"
      ],
      "description": "GitHub Actions Workflow Compatibility Updater\nUpdates workflows to use flexible script discovery during migration",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/cleanup_changelogs.py",
      "relative_path": "scripts/maintenance/cleanup_changelogs.py",
      "name": "cleanup_changelogs.py",
      "size": 3442,
      "lines": 95,
      "hash": "e760ad02bcf56df48a410bd7b1850ef2",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib"
      ],
      "functions": [
        "is_auto_generated",
        "has_real_content",
        "main"
      ],
      "description": "Smart CHANGELOG cleanup - removes auto-generated templates while preserving important ones",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/post_status.py",
      "relative_path": "scripts/maintenance/post_status.py",
      "name": "post_status.py",
      "size": 1279,
      "lines": 40,
      "hash": "9e81641610e8f6c0974ffe0625dd5444",
      "category": [
        "utils"
      ],
      "imports": [
        "json",
        "sys",
        "datetime",
        "__future__",
        "pathlib",
        "os"
      ],
      "functions": [
        "main"
      ],
      "description": "Append a status message to coordination bus and ledger.\nUsage: post_status.py AGENT_ID PHASE TASK_ID STATUS SUMMARY [ARTIFACT]",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/optimize-agent-utilization.py",
      "relative_path": "scripts/maintenance/optimize-agent-utilization.py",
      "name": "optimize-agent-utilization.py",
      "size": 31693,
      "lines": 779,
      "hash": "a30cadf2354f5fc791317929a55bac39",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "_generate_performance_forecast",
        "_generate_recommendations",
        "create_performance_metrics_dashboard",
        "_calculate_cpu_percent",
        "class:SystemPerformanceForecaster",
        "configure_agent_pooling",
        "setup_workload_distribution",
        "_generate_optimized_compose_config",
        "_fix_health_check_configurations",
        "analyze_current_state",
        "_calculate_utilization_metrics",
        "implement_dynamic_allocation",
        "_restart_unhealthy_agents",
        "main",
        "_update_agent_resource_limits",
        "_generate_monitoring_script",
        "test_full_load",
        "_apply_gradual_configuration_changes",
        "generate_optimization_report",
        "__init__",
        "_check_agent_health",
        "identify_bottlenecks"
      ],
      "description": "SutazAI Agent Utilization Optimizer\nSystem Performance Forecasting Specialist Implementation\n\nPurpose: Optimize SutazAI for 100% agent utilization\nUsage: python scripts/optimize-agent-utilization.py [",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/bottleneck-eliminator.py",
      "relative_path": "scripts/maintenance/bottleneck-eliminator.py",
      "name": "bottleneck-eliminator.py",
      "size": 41964,
      "lines": 1058,
      "hash": "6b9256485bc7ce0900aa47a1de7ccb14",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "json",
        "threading",
        "statistics",
        "logging",
        "typing",
        "signal",
        "pathlib",
        "sklearn.ensemble",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "time",
        "numpy",
        "sklearn.preprocessing",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:BottleneckPredictor",
        "class:IOBottleneckStrategy",
        "extract_features",
        "class:ContainerBottleneckStrategy",
        "class:EliminationAction",
        "class:EliminationResult",
        "generate_actions",
        "class:BottleneckSignature",
        "class:BottleneckEliminator",
        "can_handle",
        "get_comprehensive_stats",
        "validate_elimination",
        "class:MemoryBottleneckStrategy",
        "train_predictor",
        "class:EliminationStrategy",
        "signal_handler",
        "__init__",
        "class:CPUBottleneckStrategy",
        "export_stats",
        "predict_bottleneck"
      ],
      "description": "Bottleneck Eliminator for SutazAI\n=================================\n\nPurpose: Automated bottleneck identification and elimination for maximum performance\nUsage: python scripts/bottleneck-eliminator.py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix_container_security.py",
      "relative_path": "scripts/maintenance/fix_container_security.py",
      "name": "fix_container_security.py",
      "size": 4394,
      "lines": 157,
      "hash": "2a1151219b1ceae89175db730ba1f3bf",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "fix_dockerfile_security",
        "create_docker_compose_security_override",
        "main"
      ],
      "description": "SutazAI Container Security Fixer\nFixes container security issues by adding non-root users to Dockerfiles",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/update-restart-policies.py",
      "relative_path": "scripts/maintenance/update-restart-policies.py",
      "name": "update-restart-policies.py",
      "size": 2899,
      "lines": 101,
      "hash": "e4040808d0d77e80303360a5341191cb",
      "category": [
        "deployment",
        "maintenance",
        "analysis"
      ],
      "imports": [
        "json",
        "subprocess"
      ],
      "functions": [
        "update_container_restart_policy",
        "get_container_phase",
        "main"
      ],
      "description": "Update restart policies for containers based on their phase",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/rule13_garbage_collector.py",
      "relative_path": "scripts/maintenance/rule13_garbage_collector.py",
      "name": "rule13_garbage_collector.py",
      "size": 14387,
      "lines": 399,
      "hash": "baed78bfb2e459d3e5ca30348896a961",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "fnmatch",
        "os",
        "argparse",
        "json",
        "datetime",
        "sys",
        "re",
        "typing",
        "logging",
        "pathlib",
        "asyncio",
        "shutil"
      ],
      "functions": [
        "_is_build_artifact",
        "class:GarbageCollector",
        "__init__"
      ],
      "description": "Purpose: Rule 13 enforcement - No garbage, no rot\nUsage: python rule13_garbage_collector.py --task-file=<path> [--dry-run]\nRequirements: asyncio, pathlib, gitignore parser",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/optimize_ollama.py",
      "relative_path": "scripts/maintenance/optimize_ollama.py",
      "name": "optimize_ollama.py",
      "size": 8734,
      "lines": 251,
      "hash": "7bc8fc75d2bcf4544b176cb497bcc84a",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "yaml",
        "argparse",
        "sys",
        "json",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "backup_config",
        "optimize_ollama_config",
        "save_compose_config",
        "run",
        "__init__",
        "restart_ollama",
        "verify_optimization",
        "load_compose_config",
        "class:OllamaOptimizer",
        "rollback"
      ],
      "description": "Ollama Optimization Script\nImplements Phase 1 optimizations for the SutazAI system",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-memory-limits.py",
      "relative_path": "scripts/maintenance/fix-memory-limits.py",
      "name": "fix-memory-limits.py",
      "size": 12142,
      "lines": 326,
      "hash": "2bdc183ff159d85a81ceeafa7a0d85e9",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "create_memory_enforcement_script",
        "get_agent_phase",
        "update_compose_file",
        "get_current_containers",
        "main",
        "check_memory_limits"
      ],
      "description": "Fix memory limits for all containers\nImplements Rules 20-21 from IMPROVED_CODEBASE_RULES_v2.0.md\nAdds memory limits to the 34 containers currently missing them",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/consolidate_requirements.py",
      "relative_path": "scripts/maintenance/consolidate_requirements.py",
      "name": "consolidate_requirements.py",
      "size": 6114,
      "lines": 161,
      "hash": "c94befdab943c51d286e8135ff5e92ba",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "os",
        "re",
        "collections",
        "pathlib"
      ],
      "functions": [
        "consolidate",
        "class:RequirementsConsolidator",
        "categorize_file",
        "__init__",
        "find_all_requirements",
        "cleanup_duplicates",
        "parse_requirement",
        "write_consolidated"
      ],
      "description": "INTELLIGENT Requirements Consolidation\nConsolidates 45+ requirements files into 3 main files",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/run_hygiene_suite.py",
      "relative_path": "scripts/maintenance/run_hygiene_suite.py",
      "name": "run_hygiene_suite.py",
      "size": 3018,
      "lines": 102,
      "hash": "6eb5397e86c1182f02541b4468fdb954",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "sys",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "run_check",
        "main"
      ],
      "description": "Run Hygiene Suite (Wrapper)\n\nReuses existing, safe, file-only checks to produce a consolidated report:\n- scripts/check_naming.py\n- scripts/check_secrets.py\n- scripts/validate-compliance.py\n- scripts/v",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-agent-startup.py",
      "relative_path": "scripts/maintenance/fix-agent-startup.py",
      "name": "fix-agent-startup.py",
      "size": 3983,
      "lines": 136,
      "hash": "7449d4b4669e0911f476c656a55b5f5d",
      "category": [
        "deployment",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib"
      ],
      "functions": [
        "fix_agent_main_py",
        "main"
      ],
      "description": "Fix agent startup issues by creating proper main.py wrappers",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/hygiene-enforcement-coordinator.py",
      "relative_path": "scripts/maintenance/hygiene-enforcement-coordinator.py",
      "name": "hygiene-enforcement-coordinator.py",
      "size": 23374,
      "lines": 579,
      "hash": "f01d1c17debdf65da46b6e61fd83893f",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "asyncio",
        "psutil",
        "time",
        "enum",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "dataclasses",
        "os",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:CircuitBreakerState",
        "class:HygieneEnforcementCoordinator",
        "enforce_rule_13",
        "check_limits",
        "get_usage",
        "log_action",
        "class:ResourceUsage",
        "get_circuit_breaker",
        "archive_file",
        "find_violations",
        "class:CircuitBreaker",
        "load_configuration",
        "generate_report",
        "call",
        "create_archive_directory",
        "enforce_rule_12",
        "class:ResourceMonitor",
        "main",
        "verify_file_safety",
        "__init__",
        "should_run_agent"
      ],
      "description": "Purpose: Coordinates systematic codebase hygiene enforcement across all 16 rules\nUsage: python hygiene-enforcement-coordinator.py [--phase=1|2|3] [--dry-run]\nRequirements: Python 3.8+, git, specialize",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/discovery.py",
      "relative_path": "scripts/maintenance/discovery.py",
      "name": "discovery.py",
      "size": 5680,
      "lines": 188,
      "hash": "7756ca4545b146dbf00a4b015450fb30",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "sys",
        "re",
        "typing",
        "__future__",
        "ast",
        "dataclasses",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "detect_cycles",
        "collect_modules",
        "is_code_dir",
        "find_duplicate_classes",
        "build_internal_graph",
        "class:ModuleInfo",
        "module_name",
        "main",
        "parse_python_file",
        "dfs"
      ],
      "description": "Phase 1 Discovery: Static analysis without external deps.\n- Build import graph for Python modules under key roots\n- Detect circular imports\n- Find duplicate class names across modules\n- Flag files con",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-agent-app-files.py",
      "relative_path": "scripts/maintenance/fix-agent-app-files.py",
      "name": "fix-agent-app-files.py",
      "size": 2449,
      "lines": 86,
      "hash": "8354961ccb4b55d2ad896abbcd767cb5",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "fix_agent_app_file",
        "fix_indentation_errors",
        "main"
      ],
      "description": "Fix common issues in agent app.py files",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/hygiene-monitor.py",
      "relative_path": "scripts/maintenance/hygiene-monitor.py",
      "name": "hygiene-monitor.py",
      "size": 9915,
      "lines": 279,
      "hash": "1a8e3f1ee4e5dba9d4db90b750dd89cf",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "watchdog.events",
        "time",
        "sys",
        "json",
        "datetime",
        "re",
        "watchdog.observers",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_file_violations",
        "on_created",
        "check_python_file",
        "handle_violation",
        "to_dict",
        "on_moved",
        "run_initial_scan",
        "__init__",
        "save_violations_report",
        "class:HygieneMonitor",
        "on_modified",
        "auto_fix_violation",
        "main",
        "should_ignore",
        "class:HygieneViolation"
      ],
      "description": "Real-time file monitoring for codebase hygiene violations\nWatches for file changes and enforces hygiene standards immediately",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-hygiene-memory-leak.py",
      "relative_path": "scripts/maintenance/fix-hygiene-memory-leak.py",
      "name": "fix-hygiene-memory-leak.py",
      "size": 6468,
      "lines": 179,
      "hash": "bea46d6ede8eba2213b029c49b891da5",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "psutil",
        "sys",
        "datetime",
        "signal",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "restart_hygiene_backend",
        "class:HygieneMemoryLeakFixer",
        "find_hygiene_processes",
        "signal_handler",
        "__init__",
        "kill_runaway_process",
        "check_docker_memory"
      ],
      "description": "Purpose: Emergency fix for hygiene monitoring memory leak\nUsage: python fix-hygiene-memory-leak.py\nRequirements: psutil, aiohttp",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/advanced-rollback-system.py",
      "relative_path": "scripts/maintenance/advanced-rollback-system.py",
      "name": "advanced-rollback-system.py",
      "size": 60979,
      "lines": 1524,
      "hash": "2c4aa830bd892ae8c941c64feb7db6b7",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "time",
        "datetime",
        "tarfile",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "_init_database",
        "get_snapshot",
        "_hash_file",
        "_create_archive",
        "class:SnapshotComponent",
        "class:AdvancedRollbackSystem",
        "class:SnapshotDatabase",
        "class:SystemStateCapture",
        "list_snapshots",
        "store_rollback_operation",
        "__init__",
        "class:RecoveryStrategy",
        "class:RollbackOperation",
        "class:SystemSnapshot",
        "class:RollbackExecutor",
        "class:RollbackStatus",
        "class:SnapshotType",
        "store_snapshot"
      ],
      "description": "Advanced Rollback System for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    Sophisticated rollback and recovery system that provides automated rollback\n    capabilities with state recovery, snapshot managem",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/garbage-collection-system.py",
      "relative_path": "scripts/maintenance/garbage-collection-system.py",
      "name": "garbage-collection-system.py",
      "size": 30975,
      "lines": 806,
      "hash": "fc48db4477d19218c0e495c461a9e1a7",
      "category": [
        "deployment",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "json",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "signal",
        "pathlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "gzip",
        "schedule",
        "time",
        "datetime",
        "tarfile"
      ],
      "functions": [
        "get_status",
        "track_file",
        "_init_db",
        "_setup_logging",
        "_delete_file",
        "get_dir_size",
        "record_disk_usage",
        "_clean_empty_directories",
        "_calculate_disk_usage",
        "_process_logs",
        "_clean_old_archives",
        "generate_html_dashboard",
        "class:FileStatus",
        "record_run",
        "_should_process_file",
        "_generate_report",
        "run_collection",
        "class:GarbageCollector",
        "start_daemon",
        "class:GarbageCollectionDashboard",
        "_calculate_checksum",
        "_process_reports",
        "main",
        "stop_daemon",
        "class:FileMetadata",
        "_archive_file",
        "signal_handler",
        "__init__",
        "_process_temporary_files",
        "class:GarbageCollectionDB",
        "_get_file_metadata",
        "_load_config",
        "_compress_file"
      ],
      "description": "Comprehensive Garbage Collection System for Sutazai App\nPurpose: Automatically manage all report files, logs, and temporary files\nUsage: python garbage-collection-system.py [--service] [--dry-run]\nRequ",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/optimize-ollama-performance.py",
      "relative_path": "scripts/maintenance/optimize-ollama-performance.py",
      "name": "optimize-ollama-performance.py",
      "size": 21741,
      "lines": 501,
      "hash": "cc261696d91a18f976744d6279db483e",
      "category": [
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "ollama_performance_optimizer",
        "httpx",
        "time",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "ollama_context_optimizer",
        "typing",
        "ollama_model_manager",
        "logging",
        "pathlib",
        "ollama_batch_processor",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:SutazAIPerformanceOrchestrator",
        "__init__"
      ],
      "description": "Purpose: Master Ollama Performance Optimization Orchestrator for SutazAI\nUsage: Comprehensive optimization of AI model performance across 69 agents\nRequirements: All optimization modules, asyncio, log",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/ultra_safe_cleanup.py",
      "relative_path": "scripts/maintenance/ultra_safe_cleanup.py",
      "name": "ultra_safe_cleanup.py",
      "size": 13661,
      "lines": 378,
      "hash": "93b7d6e88d41efb2525ae424a06a0625",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "json",
        "datetime",
        "pathlib",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "fix_model_configuration",
        "class:UltraSafeCleanup",
        "consolidate_requirements",
        "verify_no_breakage",
        "generate_report",
        "run",
        "log",
        "__init__",
        "is_safe_to_remove",
        "update_changelog",
        "create_backup",
        "test_system_health",
        "remove_safe_duplicates",
        "rollback"
      ],
      "description": "ULTRA-SAFE CLEANUP SCRIPT\nTests EVERYTHING before making ANY changes\nEnsures ZERO functionality breakage",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/fix-critical-agents.py",
      "relative_path": "scripts/maintenance/fix-critical-agents.py",
      "name": "fix-critical-agents.py",
      "size": 7236,
      "lines": 250,
      "hash": "b5518644a000cb640f62105eb9c21262",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib",
        "shutil"
      ],
      "functions": [
        "fix_agent",
        "main"
      ],
      "description": "Purpose: Fix missing files for critical agents\nUsage: python fix-critical-agents.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/maintenance/remove_hardcoded_secrets.py",
      "relative_path": "scripts/maintenance/remove_hardcoded_secrets.py",
      "name": "remove_hardcoded_secrets.py",
      "size": 3666,
      "lines": 106,
      "hash": "3361b94fe9d727f3289a24ff0d64d939",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "remove_hardcoded_secrets",
        "main"
      ],
      "description": "Purpose: Remove hardcoded default passwords from docker-compose files\nUsage: python scripts/remove_hardcoded_secrets.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/dockerfile-consolidation/execute_consolidation.py",
      "relative_path": "scripts/dockerfile-consolidation/execute_consolidation.py",
      "name": "execute_consolidation.py",
      "size": 16932,
      "lines": 393,
      "hash": "450cdd600ef3db1d87e36f0f7de4b1bc",
      "category": [
        "deployment",
        "utils",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "argparse",
        "json",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "_determine_category",
        "__init__",
        "analyze_dockerfile",
        "scan_dockerfiles",
        "execute_consolidation",
        "main",
        "generate_migration_report",
        "create_migration_map",
        "class:DockerfileConsolidator",
        "create_template_mapping"
      ],
      "description": "ULTRA DOCKERFILE CONSOLIDATION EXECUTOR\nAutomates the migration of 185 Dockerfiles to 15 master templates\nAuthor: Ultra System Architect\nDate: August 10, 2025",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/check_services_health.py",
      "relative_path": "scripts/deployment/check_services_health.py",
      "name": "check_services_health.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/optimize-load-balancing.py",
      "relative_path": "scripts/deployment/optimize-load-balancing.py",
      "name": "optimize-load-balancing.py",
      "size": 15192,
      "lines": 378,
      "hash": "d8392508ec441de043efb76c023ef2e7",
      "category": [
        "deployment",
        "utils",
        "security"
      ],
      "imports": [
        "requests.auth",
        "requests",
        "argparse",
        "json",
        "typing",
        "logging"
      ],
      "functions": [
        "get_service_type",
        "configure_kong_upstream",
        "calculate_service_weight",
        "__init__",
        "optimize_all_services",
        "class:LoadBalancerOptimizer",
        "map_strategy_to_kong",
        "update_consul_service_weights",
        "main",
        "add_circuit_breaker"
      ],
      "description": "Purpose: Optimize load balancing configuration for the SutazAI service mesh.\nUsage: python optimize-load-balancing.py [--consul-host=localhost] [--kong-admin=http://localhost:10007]\nRequirements: requ",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/configure-fault-tolerance.py",
      "relative_path": "scripts/deployment/configure-fault-tolerance.py",
      "name": "configure-fault-tolerance.py",
      "size": 18659,
      "lines": 493,
      "hash": "080941a23022e1b8e1ec9b5820a4a753",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "requests",
        "argparse",
        "json",
        "typing",
        "logging"
      ],
      "functions": [
        "configure_request_termination",
        "configure_all_services",
        "configure_rate_limiting",
        "configure_correlation_id",
        "get_all_services",
        "class:FaultToleranceConfigurator",
        "configure_timeout_policy",
        "__init__",
        "configure_response_transformer",
        "configure_proxy_cache",
        "get_criticality_config",
        "configure_retry_policy",
        "main"
      ],
      "description": "Purpose: Configure fault tolerance and circuit breakers for the SutazAI service mesh.\nUsage: python configure-fault-tolerance.py [--kong-admin=http://localhost:10007]\nRequirements: requests library, r",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/service-discovery-client.py",
      "relative_path": "scripts/deployment/service-discovery-client.py",
      "name": "service-discovery-client.py",
      "size": 10597,
      "lines": 274,
      "hash": "961317897973acaca64caa6e7b6a8eb6",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "os",
        "json",
        "sys",
        "typing",
        "logging",
        "dataclasses",
        "consul",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "class:ServiceDiscoveryClient",
        "__init__",
        "class:ServiceConfig"
      ],
      "description": "Service Discovery Client for SutazAI Service Mesh\nIntegrates with Consul for service registration and discovery",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health_check_gateway.py",
      "relative_path": "scripts/deployment/health_check_gateway.py",
      "name": "health_check_gateway.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/tail_results.py",
      "relative_path": "scripts/deployment/tail_results.py",
      "name": "tail_results.py",
      "size": 668,
      "lines": 30,
      "hash": "b0d067d5cc82f604f2aff693ed83e99d",
      "category": [
        "deployment"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "backend.app.mesh.redis_bus"
      ],
      "functions": [
        "main"
      ],
      "description": "Tail results from the lightweight mesh (Redis Streams).\n\nUsage:\n  python3 scripts/mesh/tail_results.py --topic nlp --count 10\nEnv:\n  REDIS_URL=redis://redis:6379/0",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/migrate-agents-to-ollama.py",
      "relative_path": "scripts/deployment/migrate-agents-to-ollama.py",
      "name": "migrate-agents-to-ollama.py",
      "size": 14543,
      "lines": 371,
      "hash": "b024f29c54e7613b080292dee8ca825b",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "os",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "agents.core.ollama_integration",
        "re",
        "typing",
        "pathlib",
        "asyncio",
        "agents.core.migration_helper",
        "shutil"
      ],
      "functions": [
        "update_requirements",
        "class:AgentMigrator",
        "run_migration",
        "log",
        "__init__",
        "update_agent_imports",
        "create_rollback_script",
        "update_dockerfile",
        "create_backup",
        "main",
        "get_agents_for_phase",
        "migrate_agent"
      ],
      "description": "Purpose: Migrate all 131 agents to use BaseAgentV2 with Ollama integration\nUsage: python migrate-agents-to-ollama.py [--dry-run] [--phase PHASE]\nRequirements: pyyaml, httpx, asyncio",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/migrate_agent_ports.py",
      "relative_path": "scripts/deployment/migrate_agent_ports.py",
      "name": "migrate_agent_ports.py",
      "size": 14437,
      "lines": 359,
      "hash": "ed9f64e51871acb23fbe88d754b49701",
      "category": [
        "deployment",
        "testing",
        "utils",
        "automation",
        "analysis"
      ],
      "imports": [
        "yaml",
        "argparse",
        "sys",
        "datetime",
        "typing",
        "glob",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "get_next_available_port",
        "__init__",
        "class:PortMigrator",
        "migrate_compose_file",
        "create_backup",
        "scan_and_migrate",
        "is_agent_service",
        "main",
        "generate_migration_report",
        "rollback"
      ],
      "description": "Port Migration Script for SUTAZAIAPP Agents\nAutomatically migrates non-compliant agent services to the standard 11000-11148 port range.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/configure-rabbitmq.py",
      "relative_path": "scripts/deployment/configure-rabbitmq.py",
      "name": "configure-rabbitmq.py",
      "size": 14733,
      "lines": 375,
      "hash": "8c4492d372ab5ce84135755fe705eefa",
      "category": [
        "deployment",
        "utils",
        "security"
      ],
      "imports": [
        "requests.auth",
        "requests",
        "argparse",
        "json",
        "typing",
        "logging",
        "os"
      ],
      "functions": [
        "get_current_state",
        "check_rabbitmq_health",
        "class:RabbitMQConfigurator",
        "create_vhost",
        "set_permissions",
        "__init__",
        "create_policy",
        "configure_from_file",
        "create_exchange",
        "main",
        "create_binding",
        "create_queue"
      ],
      "description": "Purpose: Configure RabbitMQ with exchanges, queues, and bindings for SutazAI service mesh.\nUsage: python configure-rabbitmq.py [--rabbitmq-host=localhost] [--port=10042]\nRequirements: requests library",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/agent_stream_consumer.py",
      "relative_path": "scripts/deployment/agent_stream_consumer.py",
      "name": "agent_stream_consumer.py",
      "size": 3068,
      "lines": 108,
      "hash": "0284d2bbe88c2f162711b2fc59f7cd6e",
      "category": [
        "monitoring",
        "deployment",
        "utils"
      ],
      "imports": [
        "agents.agent_with_health",
        "time",
        "os",
        "argparse",
        "json",
        "sys",
        "typing",
        "backend.app.mesh.redis_bus",
        "signal",
        "asyncio"
      ],
      "functions": [
        "shutdown",
        "main"
      ],
      "description": "Agent Stream Consumer (optional)\n\nRuns a minimal Redis Streams consumer loop and, for each task, invokes the\nGenericAgentWithHealth's `_execute_task` implementation to process the task.\n\nUsage:\n  pyth",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health_check_ollama.py",
      "relative_path": "scripts/deployment/health_check_ollama.py",
      "name": "health_check_ollama.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/deployment-monitor.py",
      "relative_path": "scripts/deployment/deployment-monitor.py",
      "name": "deployment-monitor.py",
      "size": 17799,
      "lines": 489,
      "hash": "72dfa58df0b81555e68944aa65f741c1",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "docker",
        "asyncio",
        "time",
        "psutil",
        "requests",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "prometheus_client",
        "os",
        "redis",
        "subprocess"
      ],
      "functions": [
        "parse_args",
        "trigger_rollback",
        "log_metrics",
        "collect_all_metrics",
        "collect_agent_metrics",
        "send_alert",
        "class:MonitoringConfig",
        "run",
        "class:DeploymentMonitor",
        "setup_prometheus_metrics",
        "load_monitoring_config",
        "check_rollback_conditions",
        "collect_docker_metrics",
        "main",
        "collect_system_metrics",
        "calculate_error_rate",
        "collect_ollama_metrics",
        "__init__",
        "class:MetricValue"
      ],
      "description": "Ollama Integration Deployment Monitor\nReal-time monitoring and automated rollback trigger system",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/enqueue_task.py",
      "relative_path": "scripts/deployment/enqueue_task.py",
      "name": "enqueue_task.py",
      "size": 792,
      "lines": 37,
      "hash": "c5a2ed703c8e65c12609a2cfef37c104",
      "category": [
        "deployment",
        "testing"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "backend.app.mesh.redis_bus",
        "os"
      ],
      "functions": [
        "main"
      ],
      "description": "Enqueue a task into the lightweight mesh (Redis Streams).\n\nUsage:\n  python3 scripts/mesh/enqueue_task.py --topic nlp --task '{\"prompt\":\"hello\"}'\nEnv:\n  REDIS_URL=redis://redis:6379/0",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/register-services.py",
      "relative_path": "scripts/deployment/register-services.py",
      "name": "register-services.py",
      "size": 7915,
      "lines": 206,
      "hash": "010a241cc46f7520b00d0feefe238ff4",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "json",
        "typing",
        "logging"
      ],
      "functions": [
        "deregister_service",
        "register_service",
        "get_registered_services",
        "enable_service_health_checks",
        "__init__",
        "check_consul_health",
        "register_all_services",
        "class:ConsulServiceRegistrar",
        "main"
      ],
      "description": "Purpose: Register all SutazAI services with Consul for service discovery.\nUsage: python register-services.py [--consul-host=localhost] [--consul-port=10006]\nRequirements: requests library, running Con",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/prepare-20-agents.py",
      "relative_path": "scripts/deployment/prepare-20-agents.py",
      "name": "prepare-20-agents.py",
      "size": 6962,
      "lines": 246,
      "hash": "297045356949d34d2145cc3e1d5b8fbf",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib",
        "shutil"
      ],
      "functions": [
        "create_agent_files",
        "main"
      ],
      "description": "Prepare 20 critical agents for deployment",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-orchestrator.py",
      "relative_path": "scripts/deployment/ultimate-deployment-orchestrator.py",
      "name": "ultimate-deployment-orchestrator.py",
      "size": 45942,
      "lines": 1201,
      "hash": "5eace739ab27c365c7de4a2386a48daf",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "websockets",
        "sqlite3",
        "traceback",
        "logging",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "aiohttp",
        "time",
        "datetime",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:RollbackManager",
        "_load_agent_configurations",
        "class:AgentConfig",
        "class:UltimateDeploymentOrchestrator",
        "_create_agent_batches",
        "class:CanaryDeployment",
        "class:DeploymentPhase",
        "create_rollback_point",
        "class:HealthChecker",
        "class:DeploymentState",
        "_restore_environment",
        "class:DisasterRecoveryManager",
        "_generate_dashboard_html",
        "class:DeploymentDashboard",
        "_check_resource_exhaustion",
        "_capture_docker_state",
        "class:ServiceStatus",
        "__init__",
        "_select_canary_agents",
        "_signal_handler"
      ],
      "description": "Ultimate Automated Deployment Orchestrator for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    The FINAL, PERFECT deployment solution that ensures 1000% reliability\n    for all 131 AI agents in the SutazAI e",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/master-orchestrator.py",
      "relative_path": "scripts/deployment/master-orchestrator.py",
      "name": "master-orchestrator.py",
      "size": 18716,
      "lines": 504,
      "hash": "bd65b389ea9280aab7ccaae1c7e69373",
      "category": [
        "deployment",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "os",
        "enum",
        "argparse",
        "json",
        "sys",
        "datetime",
        "celery",
        "typing",
        "celery.result",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:EnforcementStatus",
        "_execute_enforcement_module",
        "_initialize_rule_tasks",
        "_get_executable_rules",
        "class:RuleEnforcementTask",
        "__init__",
        "enforce_rule_async",
        "visit",
        "class:HygieneOrchestrationMaster",
        "_calculate_summary",
        "_get_execution_order",
        "_load_config",
        "class:RulePriority",
        "_save_report"
      ],
      "description": "Purpose: Master orchestrator for comprehensive codebase hygiene enforcement\nUsage: python master-orchestrator.py [--mode=async|sync] [--rules=1,2,3] [--dry-run]\nRequirements: Redis, Celery, asyncio, s",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health_check_dataservices.py",
      "relative_path": "scripts/deployment/health_check_dataservices.py",
      "name": "health_check_dataservices.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/resource-enforcer.py",
      "relative_path": "scripts/deployment/resource-enforcer.py",
      "name": "resource-enforcer.py",
      "size": 14614,
      "lines": 346,
      "hash": "11c8b86564f5bd4ca23f44f9013adb06",
      "category": [
        "monitoring",
        "deployment",
        "automation"
      ],
      "imports": [
        "docker",
        "time",
        "yaml",
        "argparse",
        "json",
        "datetime",
        "typing",
        "logging",
        "subprocess"
      ],
      "functions": [
        "load_configuration",
        "get_resource_limits_for_tier",
        "class:ResourceEnforcer",
        "check_container_compliance",
        "enforce_resource_limits",
        "calculate_system_utilization",
        "generate_compliance_report",
        "__init__",
        "get_container_tier",
        "main",
        "run_enforcement_cycle"
      ],
      "description": "Resource Enforcement Script for Sutazai 69-Agent System\nImplements automated resource limit enforcement and monitoring",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/direct_agent_activation.py",
      "relative_path": "scripts/deployment/direct_agent_activation.py",
      "name": "direct_agent_activation.py",
      "size": 12889,
      "lines": 353,
      "hash": "93e6ff20f239ce28d2416c9d8db23dd1",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "json",
        "datetime",
        "sys",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "classify_agent",
        "class:DirectAgentActivator",
        "__init__"
      ],
      "description": "Direct Agent Activation Script\nDirectly activates all agents by starting them with proper Ollama integration",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/infrastructure_health_check.py",
      "relative_path": "scripts/deployment/infrastructure_health_check.py",
      "name": "infrastructure_health_check.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/service-mesh-orchestrator.py",
      "relative_path": "scripts/deployment/service-mesh-orchestrator.py",
      "name": "service-mesh-orchestrator.py",
      "size": 21311,
      "lines": 446,
      "hash": "ebb61b6c50dd900ccd75f4e106011de6",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "time",
        "os",
        "yaml",
        "json",
        "sys",
        "typing",
        "signal",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:ServiceMeshOrchestrator",
        "handle_signal",
        "__init__"
      ],
      "description": "Service Mesh Orchestrator for SutazAI\nCoordinates Consul, Kong, and RabbitMQ integration",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/validate-service-mesh.py",
      "relative_path": "scripts/deployment/validate-service-mesh.py",
      "name": "validate-service-mesh.py",
      "size": 28262,
      "lines": 600,
      "hash": "5f5726f11561a6aeca22d1086a12df22",
      "category": [
        "deployment",
        "testing"
      ],
      "imports": [
        "time",
        "os",
        "argparse",
        "json",
        "sys",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:ServiceMeshValidator",
        "class:ValidationResult",
        "__init__",
        "print_results"
      ],
      "description": "Service Mesh Validation Script\nValidates the complete service mesh integration",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/launch_local_agents.py",
      "relative_path": "scripts/deployment/launch_local_agents.py",
      "name": "launch_local_agents.py",
      "size": 4246,
      "lines": 142,
      "hash": "a4734df9890493d307960569fdc890c0",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "agents.agent_with_health",
        "os",
        "argparse",
        "sys",
        "multiprocessing",
        "typing",
        "signal",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "parse_args",
        "build_specs",
        "_run_agent",
        "main",
        "class:AgentSpec",
        "terminate_all"
      ],
      "description": "Local Multi-Agent Launcher\n\nPurpose: Launch N local SutazAI agent instances concurrently for development/testing.\nAuthor: Codex CLI (AI)\nDate: 2025-08-07\n\nUsage:\n  python3 scripts/launch_local_agents.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/configure-kong.py",
      "relative_path": "scripts/deployment/configure-kong.py",
      "name": "configure-kong.py",
      "size": 15665,
      "lines": 376,
      "hash": "fcd5a4b9043d4e1eb868310aea311775",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "yaml",
        "argparse",
        "json",
        "typing",
        "logging"
      ],
      "functions": [
        "configure_kong_from_file",
        "create_or_update_service",
        "create_consumers",
        "add_plugin",
        "__init__",
        "create_or_update_route",
        "main",
        "configure_global_plugins",
        "check_kong_health",
        "get_existing_services",
        "class:KongConfigurator"
      ],
      "description": "Purpose: Configure Kong API Gateway with routes for all SutazAI services.\nUsage: python configure-kong.py [--kong-admin-url=http://localhost:10007]\nRequirements: requests, PyYAML libraries, running Ko",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/fix-agent-deployment-issues.py",
      "relative_path": "scripts/deployment/fix-agent-deployment-issues.py",
      "name": "fix-agent-deployment-issues.py",
      "size": 5238,
      "lines": 166,
      "hash": "beac09b47999b492225c5a6d2676cbe8",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "pathlib",
        "shutil"
      ],
      "functions": [
        "create_main_py_wrapper",
        "update_dockerfile_with_base_packages",
        "main"
      ],
      "description": "Fix deployment issues for agents that are failing to start",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/test-service-communication.py",
      "relative_path": "scripts/deployment/test-service-communication.py",
      "name": "test-service-communication.py",
      "size": 12133,
      "lines": 294,
      "hash": "98affb4eb7dbaa81933f9557f60bf77d",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "json",
        "typing",
        "concurrent.futures",
        "logging"
      ],
      "functions": [
        "test_kong_health",
        "class:ServiceMeshTester",
        "test_consul_service_discovery",
        "run_all_tests",
        "__init__",
        "test_service_to_service",
        "main",
        "test_service_through_kong"
      ],
      "description": "Purpose: Test service-to-service communication through the service mesh.\nUsage: python test-service-communication.py [--kong-proxy=http://localhost:10005]\nRequirements: requests library, running servi",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/activate_all_agents.py",
      "relative_path": "scripts/deployment/activate_all_agents.py",
      "name": "activate_all_agents.py",
      "size": 10963,
      "lines": 258,
      "hash": "4d6ba3a18aea5893fcf71cec40d6e623",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "datetime",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "monitor_deployment_progress",
        "trigger_mass_activation",
        "class:MassAgentActivator",
        "trigger_collective_activation",
        "__init__",
        "get_final_status",
        "update_monitoring_dashboard",
        "check_backend_health"
      ],
      "description": "Mass Agent Activation Script\nActivates all 131 AI agents in the SutazAI system",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health-check-server.py",
      "relative_path": "scripts/deployment/health-check-server.py",
      "name": "health-check-server.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/startup_optimizer.py",
      "relative_path": "scripts/deployment/startup_optimizer.py",
      "name": "startup_optimizer.py",
      "size": 25313,
      "lines": 630,
      "hash": "bf3272356797071f4208bea66dbba19a",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "os",
        "yaml",
        "json",
        "sys",
        "collections",
        "typing",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:StartupGroup",
        "topological_sort",
        "_estimate_startup_time",
        "stop_monitoring",
        "optimize_startup_groups",
        "__init__",
        "class:SystemResourceMonitor",
        "class:ServiceConfig",
        "_parse_memory",
        "class:StartupOptimizer",
        "start_monitoring",
        "load_service_configurations",
        "create_dependency_graph",
        "generate_startup_report"
      ],
      "description": "SutazAI Startup Sequence Optimizer\nOptimizes the startup sequence for 69 agents to reduce startup time by 50%",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/ultimate-deployment-master.py",
      "relative_path": "scripts/deployment/ultimate-deployment-master.py",
      "name": "ultimate-deployment-master.py",
      "size": 47475,
      "lines": 1187,
      "hash": "79b5e56f49dcd0c1d48f475a9b7a78a8",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "automation"
      ],
      "imports": [
        "json",
        "threading",
        "websockets",
        "sqlite3",
        "traceback",
        "logging",
        "advanced_rollback_system",
        "enum",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "psutil",
        "argparse",
        "sys",
        "importlib.util",
        "dataclasses",
        "os",
        "aiohttp",
        "time",
        "datetime",
        "platform",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:DeploymentStatus",
        "__init__",
        "class:DeploymentCommand",
        "class:SystemState",
        "_signal_handler",
        "class:UltimateDeploymentMaster"
      ],
      "description": "Ultimate Deployment Master for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    The FINAL, ULTIMATE deployment automation system that orchestrates all\n    components of the SutazAI ecosystem with 1000% reliab",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health_check_monitoring.py",
      "relative_path": "scripts/deployment/health_check_monitoring.py",
      "name": "health_check_monitoring.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/manage-environments.py",
      "relative_path": "scripts/deployment/manage-environments.py",
      "name": "manage-environments.py",
      "size": 24505,
      "lines": 650,
      "hash": "6d539898ef7ba357499649300e174567",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "json",
        "socket",
        "sys",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "dataclasses",
        "os",
        "subprocess"
      ],
      "functions": [
        "get_backend_status",
        "check_environment_health",
        "load_deployment_state",
        "rollback_environment",
        "switch_traffic_to_environment",
        "switch_environment",
        "class:HealthChecker",
        "verify_traffic_switch",
        "get_deployment_status",
        "execute_command",
        "class:EnvironmentStatus",
        "save_deployment_state",
        "class:EnvironmentManager",
        "get_current_active_environment",
        "class:HAProxyManager",
        "export_environment_state",
        "__post_init__",
        "check_port_connectivity",
        "main",
        "class:ServiceHealth",
        "check_http_endpoint",
        "__init__"
      ],
      "description": "Environment Management Script for Perfect Jarvis Blue/Green Deployment\n\nThis script manages traffic switching, health monitoring, automated rollback triggers,\ndeployment status reporting, and database",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/health_check_vectordb.py",
      "relative_path": "scripts/deployment/health_check_vectordb.py",
      "name": "health_check_vectordb.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/deployment/ai-runtime-init.py",
      "relative_path": "scripts/deployment/ai-runtime-init.py",
      "name": "ai-runtime-init.py",
      "size": 10471,
      "lines": 319,
      "hash": "a694b5600a7bca701620d8ee266408f6",
      "category": [
        "deployment",
        "utils",
        "security"
      ],
      "imports": [
        "transformers",
        "fastapi.middleware.cors",
        "torch",
        "json",
        "langchain.vectorstores",
        "langchain.llms",
        "pydantic",
        "logging",
        "qdrant_client",
        "gc",
        "typing",
        "langchain.embeddings",
        "pathlib",
        "uvicorn",
        "psutil",
        "sys",
        "chromadb",
        "langchain.memory",
        "os",
        "fastapi",
        "datetime",
        "asyncio",
        "redis"
      ],
      "functions": [
        "get_or_load_model",
        "class:ModelRequest",
        "class:EmbeddingRequest",
        "class:VectorStoreRequest",
        "get_or_create_embeddings",
        "get_or_create_vector_store",
        "init_redis"
      ],
      "description": "Shared AI Runtime Initialization Script\nManages model loading, caching, and resource pooling for all AI services",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/lib/script_optimization_template.py",
      "relative_path": "scripts/lib/script_optimization_template.py",
      "name": "script_optimization_template.py",
      "size": 11828,
      "lines": 353,
      "hash": "9b544e73aff14f0a41d685fa00b7c0f3",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "argparse",
        "json",
        "sys",
        "datetime",
        "typing",
        "signal",
        "traceback",
        "logging",
        "pathlib",
        "os"
      ],
      "functions": [
        "validate_environment",
        "_load_default_config",
        "create_argument_parser",
        "validate_dependencies",
        "validate_python_version",
        "_setup_signal_handlers",
        "_load_config_file",
        "class:ScriptValidator",
        "set",
        "execute_with_retry",
        "validate_path",
        "main",
        "safe_execute",
        "class:ScriptLogger",
        "class:ScriptExecutor",
        "class:ScriptConfiguration",
        "signal_handler",
        "__init__",
        "example_function",
        "get_logger",
        "get",
        "_cleanup"
      ],
      "description": "Enterprise Script Optimization Template for SutazAI System\n=====================================================\n\nPurpose: Standard template for enterprise-grade Python scripts\nAuthor: Ultra Code Opti",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/lib/security_utils.py",
      "relative_path": "scripts/lib/security_utils.py",
      "name": "security_utils.py",
      "size": 13802,
      "lines": 377,
      "hash": "1d5358bea7ab47bda3725d3180aaf94c",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "logging_utils",
        "datetime",
        "re",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "validate_script_security",
        "fix_eval_usage",
        "generate_security_report",
        "setup_security_logging",
        "validate_all_scripts",
        "fix_infinite_loops"
      ],
      "description": "Security Utilities for SutazAI Scripts\n\nProvides security validation and hardening utilities for shell scripts.\nIdentifies and helps fix common security issues like infinite loops,\neval usage, and par",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/lib/__init__.py",
      "relative_path": "scripts/lib/__init__.py",
      "name": "__init__.py",
      "size": 504,
      "lines": 22,
      "hash": "02d2107e8ac5537595fcf731a9c3fed2",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "logging_utils",
        "sys",
        "logging",
        "pathlib",
        "os"
      ],
      "functions": [],
      "description": "SutazAI Scripts Library\n\nShared utilities for SutazAI automation scripts.\nCreated: 2025-08-10\nPurpose: Centralized script infrastructure for logging, monitoring, and health checks.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/lib/logging_utils.py",
      "relative_path": "scripts/lib/logging_utils.py",
      "name": "logging_utils.py",
      "size": 6303,
      "lines": 212,
      "hash": "007c795529e9744d0aded17d668434bf",
      "category": [
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "logging.handlers",
        "sys",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "os"
      ],
      "functions": [
        "create_log_context",
        "__exit__",
        "__init__",
        "get_timestamp",
        "log_performance",
        "class:ScriptTimer",
        "log_health_status",
        "__enter__",
        "setup_logging"
      ],
      "description": "Logging Utilities for SutazAI Scripts\n\nProvides standardized logging configuration for all SutazAI automation scripts.\nHandles console and file logging with proper formatting and rotation.\n\nUsage:\n   ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/automation/analyze_docker_builds.py",
      "relative_path": "scripts/automation/analyze_docker_builds.py",
      "name": "analyze_docker_builds.py",
      "size": 1997,
      "lines": 67,
      "hash": "fcb7c38a8c368a51ba713cfa60590927",
      "category": [
        "automation",
        "analysis"
      ],
      "imports": [
        "yaml",
        "sys",
        "os"
      ],
      "functions": [
        "main"
      ],
      "description": "SutazAI Docker Build Analysis\nAnalyzes which Docker images need to be built",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/master/test-master.py",
      "relative_path": "scripts/master/test-master.py",
      "name": "test-master.py",
      "size": 12269,
      "lines": 329,
      "hash": "71607fe8ae6aa662854d3b7633797340",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "run_security_tests",
        "run_integration_tests",
        "run_command",
        "generate_report",
        "log",
        "__init__",
        "run_performance_tests",
        "run_unit_tests",
        "main",
        "run_smoke_tests",
        "class:TestMaster",
        "run_all"
      ],
      "description": "MASTER TEST CONTROLLER\nConsolidated from 50+ test scripts\nGenerated by ULTRA SCRIPT CONSOLIDATION\nPurpose: Single entry point for all testing",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/master/health-master.py",
      "relative_path": "scripts/master/health-master.py",
      "name": "health-master.py",
      "size": 28817,
      "lines": 715,
      "hash": "45d6f00618ace9a9bf81e91b9dc37b03",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "generate_health_summary",
        "generate_report",
        "signal_handler",
        "__init__",
        "class:HealthMaster",
        "check_service_health",
        "main",
        "continuous_monitoring",
        "check_all_services"
      ],
      "description": "CANONICAL HEALTH CHECK SYSTEM\nConsolidated from 49+ health check scripts following CLAUDE.md Rules\n\nPurpose: Single source of truth for all system health monitoring\nAuthor: ULTRA SCRIPT CONSOLIDATION ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/master/monitor-master.py",
      "relative_path": "scripts/master/monitor-master.py",
      "name": "monitor-master.py",
      "size": 1294,
      "lines": 42,
      "hash": "3d7346dc2191196661a36de8770c764a",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "json",
        "requests",
        "datetime"
      ],
      "functions": [
        "class:MonitoringMaster",
        "generate_report",
        "__init__",
        "check_all_services"
      ],
      "description": "Unified Monitoring Master Controller\nAuto-generated by Ultra Script Consolidator\nPurpose: Single entry point for all monitoring",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/onboarding/generate_kickoff_deck.py",
      "relative_path": "scripts/onboarding/generate_kickoff_deck.py",
      "name": "generate_kickoff_deck.py",
      "size": 2791,
      "lines": 83,
      "hash": "448c0686a3a29abad8f5c786f39483dc",
      "category": [
        "utils"
      ],
      "imports": [
        "pptx",
        "sys",
        "__future__",
        "pptx.util",
        "pathlib"
      ],
      "functions": [
        "main"
      ],
      "description": "Generate onboarding deck `docs/onboarding/kickoff_deck_v1.pptx` from verified docs.\n\nRequirements:\n  pip install python-pptx\n\nUsage:\n  python scripts/onboarding/generate_kickoff_deck.py\n\nNotes:\n  - Re",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
      "relative_path": "scripts/dockerfile-dedup/ultra-dockerfile-migration.py",
      "name": "ultra-dockerfile-migration.py",
      "size": 11605,
      "lines": 301,
      "hash": "bbd7147daa822a0a148126ec78cc245a",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "datetime",
        "json",
        "re",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "find_all_dockerfiles",
        "migrate_nodejs_dockerfile",
        "migrate_dockerfile",
        "run_migration",
        "archive_original",
        "generate_report",
        "migrate_python_dockerfile",
        "class:DockerfileMigrator",
        "detect_dockerfile_type",
        "__init__"
      ],
      "description": "ULTRA-MASSIVE DOCKERFILE CONSOLIDATION SCRIPT\nAuthor: Ultra System Architect\nDate: August 10, 2025\nPurpose: Migrate 587 Dockerfiles to use consolidated base images",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/security/validate_cors_ultra.py",
      "relative_path": "scripts/security/validate_cors_ultra.py",
      "name": "validate_cors_ultra.py",
      "size": 10291,
      "lines": 281,
      "hash": "bf86784926e63e622c720201b51043a4",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "sys",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [],
      "description": "ULTRA CORS Security Validation Script\nValidates that all services have secure CORS configurations without wildcards",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/security/validate_cors_simple.py",
      "relative_path": "scripts/security/validate_cors_simple.py",
      "name": "validate_cors_simple.py",
      "size": 8209,
      "lines": 222,
      "hash": "c4a0ca4b6bc10a4282572c4fafc17038",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "sys",
        "datetime",
        "re",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "test_cors_with_curl",
        "scan_python_files_for_wildcards",
        "main"
      ],
      "description": "ULTRA CORS Security Validation Script (Simple Version)\nValidates that all services have secure CORS configurations without wildcards",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/security/fix_cors_wildcards.py",
      "relative_path": "scripts/security/fix_cors_wildcards.py",
      "name": "fix_cors_wildcards.py",
      "size": 12177,
      "lines": 360,
      "hash": "65e9640e8e592c8f65b475804055957e",
      "category": [
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "re",
        "typing",
        "logging",
        "pathlib",
        "os"
      ],
      "functions": [
        "get_service_type",
        "fix_cors_file",
        "create_security_report",
        "validate_fix",
        "find_cors_files",
        "main"
      ],
      "description": "CORS Wildcard Security Fix\nSystematically fixes all CORS wildcard vulnerabilities in the codebase",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/security/validate_cors_security.py",
      "relative_path": "scripts/security/validate_cors_security.py",
      "name": "validate_cors_security.py",
      "size": 12413,
      "lines": 362,
      "hash": "8892c433225e54e548eab71316ca4bdb",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "json",
        "typing",
        "logging"
      ],
      "functions": [
        "validate_no_wildcards",
        "test_service_health",
        "generate_validation_report",
        "test_cross_service_communication",
        "generate_recommendations",
        "main",
        "test_cors_headers"
      ],
      "description": "CORS Security Validation\nTests that services still communicate properly after CORS hardening",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/security/ultra_security_validation.py",
      "relative_path": "scripts/security/ultra_security_validation.py",
      "name": "ultra_security_validation.py",
      "size": 12280,
      "lines": 294,
      "hash": "54d1584a2f54b86dd56d90492d837128",
      "category": [
        "testing",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "yaml",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_tls_verification",
        "check_resource_limits",
        "check_secrets_management",
        "generate_report",
        "__init__",
        "check_container_users",
        "check_docker_socket_mounts",
        "class:UltraSecurityValidator"
      ],
      "description": "ULTRA SECURITY VALIDATION SCRIPT\nComprehensive security audit and validation after final hardening",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate-compliance.py",
      "relative_path": "scripts/testing/validate-compliance.py",
      "name": "validate-compliance.py",
      "size": 8306,
      "lines": 233,
      "hash": "b372e129bc90c79c707bc35ad2910901",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "check_rule3_hygiene",
        "generate_report",
        "run",
        "check_rule4_reuse",
        "__init__",
        "check_rule5_local_llms",
        "class:ComplianceValidator",
        "check_rule1_no_fantasy",
        "check_rule2_dont_break"
      ],
      "description": "Compliance Validation Script\nVerifies the codebase follows all 5 critical rules",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/smoke_test_jarvis.py",
      "relative_path": "scripts/testing/smoke_test_jarvis.py",
      "name": "smoke_test_jarvis.py",
      "size": 2122,
      "lines": 75,
      "hash": "1a4aa247bdf272a94e966ca447933a95",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "sys",
        "services.jarvis.main",
        "pathlib",
        "contextlib",
        "os",
        "fastapi.testclient"
      ],
      "functions": [
        "assert_ok",
        "client_ctx",
        "main"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/run_integration.py",
      "relative_path": "scripts/testing/run_integration.py",
      "name": "run_integration.py",
      "size": 4323,
      "lines": 140,
      "hash": "d0e3f25a5cd211d54705a5d89163346d",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "try_compose_up",
        "record_suite",
        "try_health_checks",
        "run_cmd",
        "now",
        "try_linters",
        "try_bandit",
        "main",
        "write_event",
        "try_pytest"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_hardware_agent_detection.py",
      "relative_path": "scripts/testing/test_hardware_agent_detection.py",
      "name": "test_hardware_agent_detection.py",
      "size": 2295,
      "lines": 65,
      "hash": "0a688e66b9413d5433648e16f953496d",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "time",
        "static_monitor"
      ],
      "functions": [
        "test_hardware_agent_detection"
      ],
      "description": "Test script to verify hardware-resource-optimizer agent detection in the monitor",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_enhanced_monitor.py",
      "relative_path": "scripts/testing/test_enhanced_monitor.py",
      "name": "test_enhanced_monitor.py",
      "size": 6565,
      "lines": 224,
      "hash": "b81d9f0897ee4af9f0d1b74d76bd4254",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "json",
        "traceback",
        "pathlib",
        "tempfile",
        "static_monitor"
      ],
      "functions": [
        "test_color_and_display",
        "test_config_loading",
        "test_trend_calculation",
        "test_adaptive_refresh",
        "__init__",
        "test_system_stats",
        "class:MockNetwork",
        "test_network_calculations",
        "main",
        "test_agent_registry_loading",
        "test_alert_generation"
      ],
      "description": "Test Enhanced Monitor Components\n===============================\n\nTests the enhanced monitor components without requiring a TTY.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_gpu_detection.py",
      "relative_path": "scripts/testing/test_gpu_detection.py",
      "name": "test_gpu_detection.py",
      "size": 6745,
      "lines": 172,
      "hash": "30e1a91ed6053e805683a1d23bad0f31",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "os",
        "subprocess",
        "pynvml"
      ],
      "functions": [
        "test_wsl_environment",
        "test_nvidia_smi_paths",
        "test_alternative_methods"
      ],
      "description": "Test GPU detection methods for WSL2",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/demo_enhanced_monitor.py",
      "relative_path": "scripts/testing/demo_enhanced_monitor.py",
      "name": "demo_enhanced_monitor.py",
      "size": 5258,
      "lines": 128,
      "hash": "86ab4ada34a514f17b6ae11fc339426f",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "time",
        "static_monitor",
        "pathlib"
      ],
      "functions": [
        "demo_monitor_output",
        "main"
      ],
      "description": "Enhanced Monitor Demo\n====================\n\nDemonstrates the enhanced monitor output in a single snapshot.\nShows all the new features without requiring an interactive terminal.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate_ports.py",
      "relative_path": "scripts/testing/validate_ports.py",
      "name": "validate_ports.py",
      "size": 26438,
      "lines": 649,
      "hash": "ce69ada2f77c8fbf31e76d3192c19929",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "yaml",
        "argparse",
        "sys",
        "json",
        "typing",
        "__future__",
        "glob",
        "pathlib",
        "collections"
      ],
      "functions": [
        "extract_ports_from_compose",
        "validate_all",
        "invert_by_container",
        "parse_port_mapping",
        "class:PortValidator",
        "add",
        "load_port_registry",
        "fix_docker_compose",
        "check_port_availability",
        "categorize_service",
        "expected_service_ports_from_registry",
        "main",
        "suggest_port",
        "load_yaml",
        "export_results",
        "normalize_container_name",
        "__init__",
        "validate_port_range",
        "merge_mappings",
        "reg"
      ],
      "description": "validate_ports.py\n\nPurpose: Ensure docker-compose published ports match the authoritative mapping\nfrom IMPORTANT and config/port-registry.yaml.\n\nExit codes:\n  0 -> OK\n  1 -> Drift detected (mismatched",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_static_monitor.py",
      "relative_path": "scripts/testing/test_static_monitor.py",
      "name": "test_static_monitor.py",
      "size": 31131,
      "lines": 660,
      "hash": "dafb2474521084ce50c748624a93a038",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "http.server",
        "sys",
        "json",
        "socket",
        "collections",
        "threading",
        "typing",
        "socketserver",
        "io",
        "pathlib",
        "static_monitor",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:TestStaticMonitor",
        "test_port_detection_and_health_checks",
        "mock_open_registry",
        "class:MockNetwork",
        "test_gpu_detection",
        "stop",
        "test_metrics_and_trends",
        "tearDown",
        "log_message",
        "test_keyboard_controls",
        "setUp",
        "test_error_handling",
        "test_agent_type_detection",
        "run_comprehensive_tests",
        "test_display_name_truncation",
        "run_integration_test",
        "class:MockHandler",
        "do_GET",
        "class:MockAgent",
        "start",
        "__init__",
        "mock_open_func",
        "test_adaptive_refresh_functionality"
      ],
      "description": "Comprehensive Test Suite for static_monitor.py\n=============================================\n\nThis test suite validates all functionality of the static_monitor.py including:\n- Agent type detection and",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_static_monitor_simple.py",
      "relative_path": "scripts/testing/test_static_monitor_simple.py",
      "name": "test_static_monitor_simple.py",
      "size": 21647,
      "lines": 507,
      "hash": "acd453af1275d7d95002bc0bedf5e42f",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "http.server",
        "sys",
        "json",
        "socket",
        "collections",
        "threading",
        "pathlib",
        "static_monitor",
        "os",
        "subprocess",
        "socketserver"
      ],
      "functions": [
        "class:TestStaticMonitor",
        "log_test",
        "test_trend_calculation",
        "__init__",
        "run_full_test_suite",
        "test_monitor_creation",
        "test_system_stats",
        "test_agent_health_checking",
        "test_error_handling",
        "generate_final_report",
        "class:MockNetworkData",
        "test_agent_type_detection",
        "main",
        "test_agent_registry_integration",
        "test_adaptive_functionality"
      ],
      "description": "Simplified Comprehensive Test Suite for static_monitor.py\n========================================================\n\nDirect testing approach without complex mocking for better reliability.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate_agents.py",
      "relative_path": "scripts/testing/validate_agents.py",
      "name": "validate_agents.py",
      "size": 4228,
      "lines": 128,
      "hash": "237ad5c9108b79793ddb3e6d4cad7473",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "yaml",
        "sys",
        "re",
        "pathlib",
        "os"
      ],
      "functions": [
        "validate_agent_file",
        "extract_yaml_frontmatter",
        "main"
      ],
      "description": "Validate agent YAML frontmatter format\nPart of CLAUDE.md hygiene enforcement",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/ultra-consolidation-validator.py",
      "relative_path": "scripts/testing/ultra-consolidation-validator.py",
      "name": "ultra-consolidation-validator.py",
      "size": 18742,
      "lines": 461,
      "hash": "cac06bd5aa8c7980a6d4575f53c53e37",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "validate_service_health",
        "validate_performance",
        "class:UltraConsolidationValidator",
        "validate_functionality",
        "validate_symlinks",
        "_check_database_connection",
        "generate_report",
        "__init__",
        "validate_no_breaking_changes",
        "validate_critical_scripts",
        "validate_script_count",
        "main",
        "run_all_validations",
        "validate_docker_containers"
      ],
      "description": "ULTRA CONSOLIDATION VALIDATOR\nPurpose: Comprehensive validation after script consolidation\nAuthor: Ultra System Architect\nDate: 2025-08-10",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/integration-test.py",
      "relative_path": "scripts/testing/integration-test.py",
      "name": "integration-test.py",
      "size": 27900,
      "lines": 678,
      "hash": "f18c718d9fd1c96a343a81f1a2b6da6c",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "threading",
        "sqlite3",
        "concurrent.futures",
        "logging",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "_test_production_readiness_validation",
        "run_validation",
        "class:ComplianceMonitoringIntegrationTest",
        "run_integration_tests",
        "_test_error_handling_and_recovery",
        "_test_concurrent_operations",
        "_test_performance_benchmarks",
        "__init__",
        "generate_report",
        "_calculate_overall_status",
        "_test_enhanced_monitor_functionality",
        "_test_scan_and_fix_workflow",
        "_test_system_resilience",
        "main",
        "_update_summary",
        "_test_large_scale_scenarios"
      ],
      "description": "Integration Test for Enhanced Compliance Monitoring System\n========================================================\nPurpose: Comprehensive end-to-end testing of the complete compliance monitoring syst",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/verify-hygiene-monitoring-system.py",
      "relative_path": "scripts/testing/verify-hygiene-monitoring-system.py",
      "name": "verify-hygiene-monitoring-system.py",
      "size": 31099,
      "lines": 721,
      "hash": "dd4d351da579232411f6698542c1cd0d",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "httpx",
        "time",
        "aiofiles",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "websockets",
        "traceback",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "class:TestResult",
        "class:HygieneMonitoringVerifier",
        "log_result",
        "__post_init__",
        "__init__",
        "generate_summary_report"
      ],
      "description": "Comprehensive Hygiene Monitoring System Verification Script\n==========================================================\n\nThis script tests all endpoints of the dockerized hygiene monitoring system to e",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/verify_claude_rules.py",
      "relative_path": "scripts/testing/verify_claude_rules.py",
      "name": "verify_claude_rules.py",
      "size": 1801,
      "lines": 57,
      "hash": "fcefa3be378d855f4fd9781005205217",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "os",
        "subprocess",
        "pathlib"
      ],
      "functions": [
        "check_docker_services",
        "check_agent_rules_compliance"
      ],
      "description": "Verify CLAUDE.md Rules Enforcement\n\nThis script checks that all agents are properly configured to enforce CLAUDE.md rules.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_runner.py",
      "relative_path": "scripts/testing/test_runner.py",
      "name": "test_runner.py",
      "size": 23911,
      "lines": 634,
      "hash": "521a79ebb58b88d41346625d3d711f84",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "pytest",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "re",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_pytest_available",
        "run_import_tests",
        "run_configuration_validation",
        "run_command",
        "generate_report",
        "__init__",
        "class:TestRunner",
        "run_file_structure_validation",
        "run_test_suite",
        "run_security_scan",
        "run_syntax_validation",
        "run_health_checks",
        "save_results",
        "main",
        "run_script_organization_validation",
        "run_pytest_tests",
        "check_docker_available",
        "setup_logging"
      ],
      "description": "SutazAI Test Runner - Comprehensive testing framework\nPurpose: Execute different types of tests based on environment capabilities\nUsage: python scripts/test_runner.py --type <test_type> [options]\nAuth",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_hardware_optimizer_detection.py",
      "relative_path": "scripts/testing/test_hardware_optimizer_detection.py",
      "name": "test_hardware_optimizer_detection.py",
      "size": 5041,
      "lines": 135,
      "hash": "123f21ce03fe2c7a0851b47863f10f13",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "json",
        "pathlib",
        "static_monitor"
      ],
      "functions": [
        "test_direct_connection",
        "test_hardware_optimizer_detection"
      ],
      "description": "Test script to validate hardware-resource-optimizer agent detection",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/deduplication-validator.py",
      "relative_path": "scripts/testing/deduplication-validator.py",
      "name": "deduplication-validator.py",
      "size": 25407,
      "lines": 625,
      "hash": "a63be9660563b1b0733948c0756eab29",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:ValidationResult",
        "test_dockerfile_generation",
        "test_monitoring_script_functionality",
        "test_build_performance",
        "log",
        "__init__",
        "class:DeduplicationValidator",
        "test_security_compliance",
        "run_test",
        "save_report",
        "test_master_scripts_exist",
        "generate_recommendations",
        "generate_next_steps",
        "test_deployment_script_functionality",
        "test_base_images_exist"
      ],
      "description": "SutazAI Deduplication Validation System\nTests all consolidations to ensure functionality preservation\nAuthor: DevOps Manager - Deduplication Operation  \nDate: August 10, 2025",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/test_agent_detection.py",
      "relative_path": "scripts/testing/test_agent_detection.py",
      "name": "test_agent_detection.py",
      "size": 7007,
      "lines": 215,
      "hash": "dab67954eb968f22242345757a6d544a",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "analysis"
      ],
      "imports": [
        "time",
        "sys",
        "socket",
        "pathlib",
        "static_monitor",
        "subprocess"
      ],
      "functions": [
        "test_port_scanning",
        "test_agent_health_checking",
        "test_network_activity",
        "test_docker_container_detection",
        "main",
        "test_gpu_detection_detailed",
        "run_live_monitoring_test"
      ],
      "description": "Agent Detection Test - Tests live agent detection functionality\n=============================================================\n\nThis test validates the monitor's ability to detect and health-check real",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate-container-infrastructure.py",
      "relative_path": "scripts/testing/validate-container-infrastructure.py",
      "name": "validate-container-infrastructure.py",
      "size": 23802,
      "lines": 569,
      "hash": "f7ad31908e9647bbacee34d587a80a9a",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "shutil",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "collections",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "_identify_critical_services",
        "find_all_dockerfiles",
        "class:ContainerInfrastructureValidator",
        "cleanup_test_images",
        "create_cleanup_plan",
        "_extract_dependencies",
        "generate_report",
        "create_rollback_plan",
        "__init__",
        "_extract_service_name",
        "run_comprehensive_validation",
        "_generate_markdown_report",
        "find_all_requirements",
        "main",
        "_is_dockerfile_referenced",
        "validate_dockerfile_build",
        "validate_container_startup",
        "analyze_dependencies"
      ],
      "description": "Purpose: Comprehensive container infrastructure validation for SutazAI\nUsage: python validate-container-infrastructure.py [--critical-only] [--report-format json|markdown]\nRequirements: Docker, Python",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate-complete-system.py",
      "relative_path": "scripts/testing/validate-complete-system.py",
      "name": "validate-complete-system.py",
      "size": 54361,
      "lines": 1354,
      "hash": "9a703489b576601ac044f7917767afab",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "typing",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:ValidationResult",
        "_generate_validation_report",
        "_generate_recommendations",
        "class:SystemValidationReport",
        "__init__",
        "_get_system_health_summary",
        "class:CompleteSystemValidator"
      ],
      "description": "Purpose: Complete end-to-end system validation for hygiene enforcement\nUsage: python validate-complete-system.py [--test-mode MODE] [--output-format FORMAT]\nRequirements: All system components must be",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate_security_remediation.py",
      "relative_path": "scripts/testing/validate_security_remediation.py",
      "name": "validate_security_remediation.py",
      "size": 11217,
      "lines": 280,
      "hash": "e52d5f5fe2dc4c65dd6444cd96708b77",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "json",
        "re",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_authentication_security",
        "__init__",
        "check_container_security",
        "generate_security_report",
        "print_report",
        "main",
        "class:SecurityValidator",
        "check_environment_security",
        "scan_hardcoded_secrets"
      ],
      "description": "SutazAI Security Validation Script\nValidates that security remediation has been properly implemented",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/testing/validate_security_improvements.py",
      "relative_path": "scripts/testing/validate_security_improvements.py",
      "name": "validate_security_improvements.py",
      "size": 11700,
      "lines": 259,
      "hash": "3ed32bbf88c01c7ac05c8e11f8ea6e5c",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "datetime",
        "re",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "print_header",
        "run_validation",
        "__init__",
        "validate_secrets_removed",
        "calculate_overall_score",
        "validate_dependencies_pinned",
        "validate_security_pipeline",
        "class:SecurityValidator",
        "validate_container_security",
        "print_check"
      ],
      "description": "Security Improvements Validation Script\nPurpose: Validate all security remediation measures are working correctly\nUsage: python scripts/validate_security_improvements.py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/monitor-ai-services.py",
      "relative_path": "scripts/monitoring/monitor-ai-services.py",
      "name": "monitor-ai-services.py",
      "size": 9616,
      "lines": 260,
      "hash": "72710925e844b62e316317646b8cf220",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "yaml",
        "argparse",
        "json",
        "sys",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "asyncio",
        "tabulate",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "load_config",
        "class:ServiceMonitor",
        "__init__",
        "format_results"
      ],
      "description": "Purpose: Monitor health and status of all integrated AI services\nUsage: python monitor-ai-services.py [--service SERVICE_NAME] [--category CATEGORY]\nRequirements: aiohttp, pyyaml, tabulate",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/container-health-monitor.py",
      "relative_path": "scripts/monitoring/container-health-monitor.py",
      "name": "container-health-monitor.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/comprehensive_monitor_validation.py",
      "relative_path": "scripts/monitoring/comprehensive_monitor_validation.py",
      "name": "comprehensive_monitor_validation.py",
      "size": 20530,
      "lines": 528,
      "hash": "fa5ae93014cf42429ae735f4d7519184",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "unittest.mock",
        "time",
        "http.server",
        "sys",
        "socket",
        "json",
        "re",
        "threading",
        "typing",
        "pathlib",
        "tempfile",
        "static_monitor",
        "socketserver"
      ],
      "functions": [
        "_validate_metric_value",
        "_validate_network_metrics",
        "validate_configuration_flexibility",
        "_validate_agent_structure",
        "stop",
        "validate_no_hardcoded_values",
        "validate_agent_type_detection",
        "class:ComprehensiveMonitorValidator",
        "class:MockHealthServer",
        "validate_agent_registry_integration",
        "log_message",
        "log_result",
        "validate_health_status_detection",
        "run_comprehensive_validation",
        "main",
        "class:MockHandler",
        "do_GET",
        "validate_performance_metrics",
        "start",
        "__init__",
        "validate_error_handling",
        "_create_handler"
      ],
      "description": "Comprehensive AI Agent Monitoring Validation\n============================================\n\nValidates the enhanced static monitor implementation for:\n1. Proper integration with all 105+ agents in the s",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/static_monitor.py",
      "relative_path": "scripts/monitoring/static_monitor.py",
      "name": "static_monitor.py",
      "size": 109977,
      "lines": 2400,
      "hash": "f17f3a1b913b413578efeec1e219bbd5",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "requests.adapters",
        "json",
        "socket",
        "xml.etree.ElementTree",
        "threading",
        "logging",
        "urllib3.util.retry",
        "re",
        "typing",
        "concurrent.futures",
        "select",
        "pathlib",
        "pynvml",
        "psutil",
        "sys",
        "os",
        "collections",
        "termios",
        "time",
        "requests",
        "datetime",
        "tty",
        "subprocess"
      ],
      "functions": [
        "_detect_wsl2_gpu",
        "_detect_nvidia_proc_info",
        "_get_wsl2_directx_stats",
        "_get_nvidia_gpustat_stats",
        "_setup_logging",
        "_test_nvidia_smi_path",
        "_detect_amd_gpu",
        "class:EnhancedMonitor",
        "_get_nvidia_smi_paths",
        "_get_display_name",
        "get_color",
        "_parse_health_response",
        "_get_port_ranges_by_type",
        "_test_port_connection",
        "clear_line",
        "_handle_keyboard_input",
        "_detect_nvidia_gpu",
        "get_gpu_stats",
        "_get_nvidia_stats_csv",
        "_get_generic_stats",
        "_parse_container_status",
        "_test_nvidia_smi_xml",
        "run",
        "_get_nvidia_wsl2_proc_stats",
        "_get_keyboard_input",
        "_update_refresh_rate",
        "_calculate_network_stats",
        "_get_agent_endpoint",
        "_get_trend",
        "move_to",
        "_discover_container_agents",
        "_test_nvidia_smi_csv",
        "_detect_intel_gpu",
        "cleanup",
        "_get_container_info",
        "get_ai_agents_status",
        "get_system_stats",
        "_verify_agent_endpoint",
        "_parse_nvidia_xml",
        "_is_agent_deployed",
        "_detect_nvidia_wsl2_fallbacks",
        "create_bar",
        "main",
        "_get_nvidia_stats_xml",
        "_get_amd_stats",
        "_get_intel_stats",
        "_extract_endpoint_from_config",
        "_load_agent_registry",
        "_detect_wsl_environment",
        "__init__",
        "_detect_gpu_capabilities",
        "_get_nvidia_pynvml_stats",
        "get_docker_containers",
        "get_ollama_models",
        "_detect_nvidia_gpustat",
        "_parse_nvidia_xml_stats",
        "_check_agent_health",
        "_get_nvidia_stats",
        "_generate_alert_message",
        "_load_config",
        "_detect_generic_gpu",
        "_get_agent_type",
        "_setup_keyboard_input"
      ],
      "description": "Enhanced Static System Monitor - Production Ready\n==============================================================\n\nComprehensive system and AI agent monitoring with adaptive features:\n- Adaptive refres",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/continuous-compliance-monitor.py",
      "relative_path": "scripts/monitoring/continuous-compliance-monitor.py",
      "name": "continuous-compliance-monitor.py",
      "size": 17434,
      "lines": 430,
      "hash": "cf51264944f570e31dff933def737e90",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "collections",
        "typing",
        "logging",
        "pathlib",
        "dataclasses",
        "os",
        "subprocess"
      ],
      "functions": [
        "check_rule_7_script_organization",
        "class:ComplianceMonitor",
        "class:RuleViolation",
        "check_rule_13_garbage_files",
        "generate_report",
        "__init__",
        "run_compliance_check",
        "check_rule_1_fantasy_elements",
        "run_daemon_mode",
        "main",
        "check_rule_12_deployment_script",
        "_load_rules_config",
        "auto_fix_violations"
      ],
      "description": "Continuous Compliance Monitoring System for SutazAI\nPurpose: Real-time monitoring and enforcement of 16 codebase hygiene rules\nUsage: python continuous-compliance-monitor.py [--service] [--report-only]",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/simple_validation.py",
      "relative_path": "scripts/monitoring/simple_validation.py",
      "name": "simple_validation.py",
      "size": 4767,
      "lines": 127,
      "hash": "5927af101ea11c3d62a8776a3b2871b2",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "pathlib",
        "static_monitor"
      ],
      "functions": [
        "main"
      ],
      "description": "Simple validation test for hardware-resource-optimizer monitoring fix",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/system-resource-analyzer.py",
      "relative_path": "scripts/monitoring/system-resource-analyzer.py",
      "name": "system-resource-analyzer.py",
      "size": 17747,
      "lines": 383,
      "hash": "cdef06f25e54bed9fc0ab35afb0dfe17",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "analysis"
      ],
      "imports": [
        "docker",
        "psutil",
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "collections",
        "subprocess"
      ],
      "functions": [
        "detect_resource_issues",
        "_analyze_process_groups",
        "analyze_system_info",
        "print_summary",
        "analyze_resource_usage",
        "class:SystemResourceAnalyzer",
        "__init__",
        "run_analysis",
        "analyze_processes",
        "generate_recommendations",
        "main",
        "analyze_containers"
      ],
      "description": "Purpose: Comprehensive system resource analysis and optimization validation\nUsage: python system-resource-analyzer.py [--detailed] [--optimize]\nRequirements: psutil, docker (python package)",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/enhanced-compliance-monitor.py",
      "relative_path": "scripts/monitoring/enhanced-compliance-monitor.py",
      "name": "enhanced-compliance-monitor.py",
      "size": 84935,
      "lines": 1958,
      "hash": "3996f5e5329d413c57c3b02e079634f6",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "re",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "collections",
        "logging.handlers",
        "time",
        "datetime",
        "subprocess"
      ],
      "functions": [
        "_analyze_script_purpose",
        "class:SystemHealthMetrics",
        "class:RuleViolation",
        "_load_exclusions",
        "_generate_recommendations",
        "_fix_rule_violations",
        "run_daemon_mode",
        "_should_exclude_path",
        "_validate_system_integration",
        "_create_backup",
        "_save_transaction",
        "_init_state_database",
        "run_compliance_check",
        "auto_fix_violations",
        "check_rule_7_script_organization",
        "validate_system_integrity",
        "_collect_system_metrics",
        "_is_safe_to_delete",
        "generate_report",
        "_get_recent_reports",
        "__post_init__",
        "class:ChangeTransaction",
        "class:EnhancedComplianceMonitor",
        "main",
        "_check_file_for_fantasy_elements",
        "check_rule_12_deployment_script",
        "_is_legitimate_file",
        "_load_rules_config",
        "_generate_insights",
        "_fix_script_organization",
        "_fix_garbage_files",
        "_fix_fantasy_elements",
        "__init__",
        "_rollback_transaction",
        "cleanup_old_data",
        "check_rule_1_fantasy_elements",
        "_signal_handler",
        "_fix_deployment_scripts",
        "_build_dependency_graph",
        "_load_config",
        "_create_transaction",
        "check_rule_13_garbage_files"
      ],
      "description": "Enhanced Production-Ready Compliance Monitoring System for SutazAI\n=================================================================\nPurpose: Enterprise-grade compliance monitoring with 100% reliabili",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/validation_report.py",
      "relative_path": "scripts/monitoring/validation_report.py",
      "name": "validation_report.py",
      "size": 10825,
      "lines": 263,
      "hash": "0d2324571fb8cd41d3a52f42f6ff5f14",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "json",
        "pathlib",
        "static_monitor",
        "subprocess"
      ],
      "functions": [
        "generate_validation_report"
      ],
      "description": "Comprehensive validation report for hardware-resource-optimizer monitoring",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/profile-hygiene-memory.py",
      "relative_path": "scripts/monitoring/profile-hygiene-memory.py",
      "name": "profile-hygiene-memory.py",
      "size": 11372,
      "lines": 299,
      "hash": "79286e2d3bf22dcf5e8ee8f7c714a226",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "analysis"
      ],
      "imports": [
        "matplotlib.pyplot",
        "time",
        "psutil",
        "json",
        "datetime",
        "matplotlib.dates",
        "pathlib",
        "tracemalloc",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "generate_visualization",
        "find_hygiene_processes",
        "class:HygieneMemoryProfiler",
        "generate_report",
        "__init__",
        "profile_docker_containers",
        "analyze_results",
        "profile_process_memory"
      ],
      "description": "Purpose: Profile memory usage of hygiene monitoring system\nUsage: python profile-hygiene-memory.py [--duration 300]\nRequirements: tracemalloc, psutil, matplotlib",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/identify_working_method.py",
      "relative_path": "scripts/monitoring/identify_working_method.py",
      "name": "identify_working_method.py",
      "size": 9460,
      "lines": 238,
      "hash": "52353680d644b35233345c21cac842a2",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "json",
        "static_monitor",
        "os",
        "subprocess",
        "pynvml"
      ],
      "functions": [
        "test_our_monitor_gpu_detection",
        "test_method_2_wsl2_nvidia_smi",
        "test_method_4_pynvml",
        "test_method_1_windows_nvidia_smi",
        "test_method_3_gpustat"
      ],
      "description": "Identify which GPU monitoring method is working correctly",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/check-python-headers.py",
      "relative_path": "scripts/monitoring/check-python-headers.py",
      "name": "check-python-headers.py",
      "size": 3061,
      "lines": 94,
      "hash": "4c6f283c1315637a4fec3efd70c41d89",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib"
      ],
      "functions": [
        "check_python_header",
        "main"
      ],
      "description": "Check Python Script Headers\nPurpose: Verifies all Python scripts have proper headers per Rule 8\nUsage: python check-python-headers.py [file1.py file2.py ...]\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/permanent-health-monitor.py",
      "relative_path": "scripts/monitoring/permanent-health-monitor.py",
      "name": "permanent-health-monitor.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/agent-activation-monitor.py",
      "relative_path": "scripts/monitoring/agent-activation-monitor.py",
      "name": "agent-activation-monitor.py",
      "size": 21921,
      "lines": 527,
      "hash": "4ea30d864fa9d3d9b62d39b489ce6dce",
      "category": [
        "monitoring",
        "deployment",
        "utils"
      ],
      "imports": [
        "docker",
        "asyncio",
        "time",
        "psutil",
        "requests",
        "argparse",
        "sys",
        "json",
        "datetime",
        "threading",
        "typing",
        "pathlib",
        "dataclasses",
        "os"
      ],
      "functions": [
        "save_metrics",
        "calculate_phase_progress",
        "class:AgentActivationMonitor",
        "__init__",
        "class:AgentStatus",
        "get_system_metrics",
        "class:SystemMetrics",
        "print_status_report",
        "update_dashboard_data",
        "log_event",
        "save_alerts",
        "get_agent_statuses",
        "check_alerts"
      ],
      "description": "Purpose: Monitor system health and agent activation progress during orchestration\nUsage: python agent-activation-monitor.py [--dashboard] [--alerts]\nRequirements: Docker, psutil, requests",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/distributed-health-monitor.py",
      "relative_path": "scripts/monitoring/distributed-health-monitor.py",
      "name": "distributed-health-monitor.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/compliance-monitor-core.py",
      "relative_path": "scripts/monitoring/compliance-monitor-core.py",
      "name": "compliance-monitor-core.py",
      "size": 32474,
      "lines": 800,
      "hash": "0a02abeadd83f06cda4fc051e9c800f3",
      "category": [
        "monitoring",
        "maintenance",
        "utils",
        "automation",
        "analysis"
      ],
      "imports": [
        "watchdog.events",
        "time",
        "shutil",
        "enum",
        "argparse",
        "sys",
        "json",
        "datetime",
        "re",
        "threading",
        "typing",
        "watchdog.observers",
        "logging",
        "pathlib",
        "dataclasses",
        "os",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "class:ComplianceRuleEngine",
        "to_dict",
        "_generate_recommendations",
        "class:ComplianceFileSystemWatcher",
        "_check_duplication_structure",
        "_fix_by_archiving",
        "_initialize_rules",
        "_send_alert",
        "_fix_docker_files",
        "class:ComplianceAutoFixer",
        "stop_monitoring",
        "on_modified",
        "auto_fix_violation",
        "can_auto_fix",
        "_check_file",
        "start_monitoring",
        "_fix_duplicate_directories",
        "should_ignore",
        "_check_structure_validation_rule",
        "on_moved",
        "get_dashboard_data",
        "_handle_violation",
        "_check_documentation_structure",
        "_check_content_analysis_rule",
        "main",
        "class:ComplianceMonitorCore",
        "class:RuleType",
        "on_created",
        "check_file_against_rules",
        "generate_compliance_report",
        "_check_single_rule",
        "__init__",
        "_check_file_pattern_rule",
        "class:ComplianceViolation",
        "_fix_content_issues",
        "class:ViolationSeverity",
        "run_full_scan"
      ],
      "description": "Core Compliance Monitoring System for SutazAI Project\nMonitors all 16 codebase hygiene rules in real-time with automated enforcement\n\nUsage: python compliance-monitor-core.py [--mode=monitor|scan|repo",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/system-health-validator.py",
      "relative_path": "scripts/monitoring/system-health-validator.py",
      "name": "system-health-validator.py",
      "size": 23031,
      "lines": 563,
      "hash": "646baa8d939a7082393e2b694a9ed572",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "redis"
      ],
      "functions": [
        "class:MonitoringHealthAggregator",
        "generate_health_report",
        "aggregate_health_metrics",
        "collect_application_metrics",
        "__init__",
        "collect_docker_metrics",
        "run_monitoring_cycle",
        "collect_database_metrics",
        "save_monitoring_data",
        "main",
        "check_alert_conditions",
        "collect_system_metrics"
      ],
      "description": "MONITORING HEALTH AGGREGATOR\nComprehensive health monitoring with metrics collection\n\nConsolidated from:\n- system-health-validator.py\n- validate-production-health.py\n- database_health_check.py\n- fix-a",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/performance-profiler-suite.py",
      "relative_path": "scripts/monitoring/performance-profiler-suite.py",
      "name": "performance-profiler-suite.py",
      "size": 51965,
      "lines": 1274,
      "hash": "4c5169dcad4fa9cc581fcb0a41565cb1",
      "category": [
        "monitoring",
        "utils",
        "automation",
        "analysis"
      ],
      "imports": [
        "json",
        "threading",
        "statistics",
        "logging",
        "cProfile",
        "pstats",
        "multiprocessing",
        "gc",
        "typing",
        "signal",
        "io",
        "pathlib",
        "tracemalloc",
        "contextlib",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "docker",
        "time",
        "resource",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "detect_agent_bottlenecks",
        "class:PerformanceRecommendation",
        "_memory_recommendations",
        "class:IOProfile",
        "class:BottleneckDetector",
        "_contention_recommendations",
        "_io_recommendations",
        "stop",
        "_network_recommendations",
        "_detect_cpu_bottlenecks",
        "_prioritize_recommendations",
        "analyze_memory_profile",
        "_profile_container",
        "profile_agent_containers",
        "priority_score",
        "get_metrics_summary",
        "class:CPUProfile",
        "class:MemoryProfile",
        "class:RecommendationEngine",
        "class:SystemBottleneck",
        "class:AgentProfiler",
        "_collect_system_metrics",
        "_detect_memory_bottlenecks",
        "class:SystemResourceMonitor",
        "_categorize_bottleneck",
        "_monitor_loop",
        "_detect_io_bottlenecks",
        "memory_profile",
        "generate_recommendations",
        "class:ProcessProfiler",
        "analyze_cpu_profile",
        "export_analysis",
        "_detect_network_bottlenecks",
        "start",
        "_cpu_recommendations",
        "_deduplicate_recommendations",
        "__init__",
        "analyze_system_bottlenecks",
        "class:PerformanceProfilerSuite",
        "cpu_profile",
        "_create_summary_report",
        "_detect_resource_contention"
      ],
      "description": "Performance Profiler Suite for SutazAI\n======================================\n\nPurpose: Comprehensive performance profiling and bottleneck identification for 131-agent system\nUsage: python scripts/per",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/validate-production-health.py",
      "relative_path": "scripts/monitoring/validate-production-health.py",
      "name": "validate-production-health.py",
      "size": 23031,
      "lines": 563,
      "hash": "646baa8d939a7082393e2b694a9ed572",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "redis"
      ],
      "functions": [
        "class:MonitoringHealthAggregator",
        "generate_health_report",
        "aggregate_health_metrics",
        "collect_application_metrics",
        "__init__",
        "collect_docker_metrics",
        "run_monitoring_cycle",
        "collect_database_metrics",
        "save_monitoring_data",
        "main",
        "check_alert_conditions",
        "collect_system_metrics"
      ],
      "description": "MONITORING HEALTH AGGREGATOR\nComprehensive health monitoring with metrics collection\n\nConsolidated from:\n- system-health-validator.py\n- validate-production-health.py\n- database_health_check.py\n- fix-a",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/hardware-optimization-master.py",
      "relative_path": "scripts/monitoring/hardware-optimization-master.py",
      "name": "hardware-optimization-master.py",
      "size": 35776,
      "lines": 931,
      "hash": "2f542a8689fc1cd9c97a8ce31bb858be",
      "category": [
        "monitoring",
        "utils",
        "analysis"
      ],
      "imports": [
        "json",
        "pickle",
        "threading",
        "logging",
        "multiprocessing",
        "gc",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "mmap",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "time",
        "resource",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "get_status",
        "_analyze_samples",
        "class:HardwareOptimizer",
        "create_pool",
        "_generate_recommendations",
        "_optimize_memory_usage",
        "get_stats",
        "optimize_performance",
        "class:PerformanceProfiler",
        "_optimize_allocations",
        "allocate_agent_memory",
        "get_pool",
        "_evict_lru",
        "optimize_memory_usage",
        "register_agent",
        "assign_cores",
        "put",
        "class:CPUAffinityManager",
        "stop",
        "class:SharedMemoryPool",
        "write_data",
        "profile_system",
        "_identify_bottlenecks",
        "class:AgentResource",
        "class:OptimizationConfig",
        "class:SystemResources",
        "_prefetch_related",
        "main",
        "read_data",
        "_apply_system_optimizations",
        "class:ResourceScheduler",
        "_collect_metrics",
        "optimize_all_assignments",
        "class:IntelligentCache",
        "set_process_affinity",
        "start",
        "_scheduler_loop",
        "_learn_pattern",
        "__init__",
        "class:MemoryManager",
        "_signal_handler",
        "_optimize_cpu_usage",
        "_calculate_improvement",
        "get",
        "_optimize_shared_pools"
      ],
      "description": "Hardware Resource Optimization Master Controller\n==============================================\n\nPurpose: Comprehensive hardware optimization for SutazAI system achieving 1000% performance improvement",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/database_health_check.py",
      "relative_path": "scripts/monitoring/database_health_check.py",
      "name": "database_health_check.py",
      "size": 23031,
      "lines": 563,
      "hash": "646baa8d939a7082393e2b694a9ed572",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "redis"
      ],
      "functions": [
        "class:MonitoringHealthAggregator",
        "generate_health_report",
        "aggregate_health_metrics",
        "collect_application_metrics",
        "__init__",
        "collect_docker_metrics",
        "run_monitoring_cycle",
        "collect_database_metrics",
        "save_monitoring_data",
        "main",
        "check_alert_conditions",
        "collect_system_metrics"
      ],
      "description": "MONITORING HEALTH AGGREGATOR\nComprehensive health monitoring with metrics collection\n\nConsolidated from:\n- system-health-validator.py\n- validate-production-health.py\n- database_health_check.py\n- fix-a",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/monthly-cleanup.py",
      "relative_path": "scripts/monitoring/monthly-cleanup.py",
      "name": "monthly-cleanup.py",
      "size": 10411,
      "lines": 286,
      "hash": "eb5e5841643ab1a69e51b0006af1e641",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "argparse",
        "sys",
        "json",
        "datetime",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:MonthlyCleanup",
        "run",
        "__init__",
        "deep_agent_scan",
        "generate_monthly_report",
        "cleanup_old_logs",
        "main",
        "cleanup_old_archives",
        "consolidate_requirements",
        "optimize_docker_images"
      ],
      "description": "Monthly Deep Cleanup for SutazAI\nPurpose: Performs comprehensive monthly cleanup and optimization\nUsage: python monthly-cleanup.py [--force]\nRequirements: Python 3.8+, full agent access",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/ultra-dockerfile-migrator.py",
      "relative_path": "scripts/monitoring/ultra-dockerfile-migrator.py",
      "name": "ultra-dockerfile-migrator.py",
      "size": 20684,
      "lines": 506,
      "hash": "61587d6f2e150366ef3082281b7c6bc5",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "argparse",
        "json",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "migrate_dockerfile",
        "validate_migration",
        "run_migration",
        "detect_technology",
        "generate_report",
        "validate_service",
        "__init__",
        "should_migrate",
        "scan_dockerfiles",
        "extract_dockerfile_components",
        "main",
        "generate_migrated_dockerfile",
        "class:UltraDockerfileMigrator"
      ],
      "description": "ULTRA Dockerfile Migration Tool\nMigrates Dockerfiles to use master base images with zero downtime\nAuthor: ULTRA SYSTEM ARCHITECT\nDate: August 10, 2025",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/fix-agent-health-checks.py",
      "relative_path": "scripts/monitoring/fix-agent-health-checks.py",
      "name": "fix-agent-health-checks.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/performance-monitor.py",
      "relative_path": "scripts/monitoring/performance-monitor.py",
      "name": "performance-monitor.py",
      "size": 2509,
      "lines": 71,
      "hash": "580cfb0b5c31b737e4a2458ca4cfd389",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "docker",
        "psutil",
        "time",
        "json",
        "datetime"
      ],
      "functions": [
        "calculate_cpu_percent",
        "monitor_performance"
      ],
      "description": "SutazAI Performance Monitoring Script\nReal-time system performance tracking and alerting",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/performance-optimization.py",
      "relative_path": "scripts/monitoring/performance-optimization.py",
      "name": "performance-optimization.py",
      "size": 14707,
      "lines": 357,
      "hash": "9a14a417d87a459d4003bf31c8636287",
      "category": [
        "monitoring",
        "maintenance",
        "utils"
      ],
      "imports": [
        "docker",
        "psutil",
        "time",
        "argparse",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "redis",
        "collections",
        "aiohttp"
      ],
      "functions": [
        "activate_agent",
        "monitor_and_report",
        "fix_unhealthy_containers",
        "__init__",
        "class:AgentStatus",
        "class:AgentResourceManager",
        "class:PerformanceOptimizer",
        "class:SystemMetrics",
        "get_system_metrics",
        "get_agent_status",
        "scale_down_agents",
        "scale_up_agents",
        "main",
        "move_agent_to_standby",
        "implement_agent_queue_system",
        "optimize_container_resources"
      ],
      "description": "SutazAI System Performance Optimization Script\nImplements dynamic resource management and container health fixes",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/debug_hardware_optimizer.py",
      "relative_path": "scripts/monitoring/debug_hardware_optimizer.py",
      "name": "debug_hardware_optimizer.py",
      "size": 4678,
      "lines": 129,
      "hash": "2a2374b32389c4da45719faf3d90fc13",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "socket",
        "json",
        "pathlib",
        "static_monitor"
      ],
      "functions": [
        "debug_endpoint_detection",
        "debug_multiple_calls",
        "debug_health_paths",
        "test_agent_type_detection"
      ],
      "description": "Debug hardware-resource-optimizer detection issues",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/redis_performance_monitor.py",
      "relative_path": "scripts/monitoring/redis_performance_monitor.py",
      "name": "redis_performance_monitor.py",
      "size": 22867,
      "lines": 575,
      "hash": "dc17f0375f63fb8670560c1084c5fb5e",
      "category": [
        "monitoring",
        "utils",
        "analysis"
      ],
      "imports": [
        "time",
        "psutil",
        "json",
        "datetime",
        "typing",
        "aioredis",
        "logging",
        "asyncio",
        "redis",
        "collections"
      ],
      "functions": [
        "_generate_recommendations",
        "_calculate_hit_rate",
        "__init__",
        "class:RedisPerformanceMonitor"
      ],
      "description": "ULTRA-PERFORMANCE Redis Cache Monitor and Optimizer\nMonitors Redis performance, analyzes cache hit rates, and provides optimization recommendations",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/infrastructure-monitor.py",
      "relative_path": "scripts/monitoring/infrastructure-monitor.py",
      "name": "infrastructure-monitor.py",
      "size": 13021,
      "lines": 320,
      "hash": "cd3bc5b55386e43f3875c80d028145f8",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "psutil",
        "sys",
        "json",
        "datetime",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "os",
        "subprocess"
      ],
      "functions": [
        "save_metrics",
        "class:InfrastructureMonitor",
        "check_critical_services",
        "handle_resource_alerts",
        "take_corrective_action",
        "signal_handler",
        "__init__",
        "monitor",
        "get_system_metrics",
        "restart_failed_services",
        "main",
        "get_container_metrics",
        "cleanup_old_metrics"
      ],
      "description": "Infrastructure Monitoring and Resource Control Script\nMonitors system resources and manages container health",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/garbage-collection-monitor.py",
      "relative_path": "scripts/monitoring/garbage-collection-monitor.py",
      "name": "garbage-collection-monitor.py",
      "size": 8574,
      "lines": 218,
      "hash": "1d06fb1a387d99165f90adeadc164348",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "sqlite3",
        "logging",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "class:GarbageCollectionMonitor",
        "check_and_fix_issues",
        "update_compliance_report",
        "__init__",
        "main",
        "get_gc_health",
        "generate_summary"
      ],
      "description": "Garbage Collection Monitoring Integration\nPurpose: Integrates with existing hygiene and compliance systems\nUsage: python garbage-collection-monitor.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/neo4j-performance-monitor.py",
      "relative_path": "scripts/monitoring/neo4j-performance-monitor.py",
      "name": "neo4j-performance-monitor.py",
      "size": 4892,
      "lines": 127,
      "hash": "52cee2932098f3576e9685f902edbe75",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "time",
        "json",
        "datetime",
        "os",
        "subprocess"
      ],
      "functions": [
        "get_neo4j_process_info",
        "get_heap_dump_analysis",
        "main",
        "get_container_stats",
        "get_database_metrics"
      ],
      "description": "Neo4j Performance Monitoring Script\nTracks memory usage, CPU consumption, and connection metrics before/after optimization",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/final_validation.py",
      "relative_path": "scripts/monitoring/final_validation.py",
      "name": "final_validation.py",
      "size": 8199,
      "lines": 191,
      "hash": "357291ed1c6bfbeba7eaef9da2ea081d",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "sys",
        "pathlib",
        "static_monitor"
      ],
      "functions": [
        "main"
      ],
      "description": "Final validation for hardware-resource-optimizer monitoring with appropriate timeouts",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/resource-pool-coordinator.py",
      "relative_path": "scripts/monitoring/resource-pool-coordinator.py",
      "name": "resource-pool-coordinator.py",
      "size": 39615,
      "lines": 1015,
      "hash": "30a0e5a6572efc01e20e52dba3570ef5",
      "category": [
        "monitoring",
        "utils",
        "automation"
      ],
      "imports": [
        "uuid",
        "json",
        "threading",
        "statistics",
        "logging",
        "enum",
        "multiprocessing",
        "gc",
        "typing",
        "signal",
        "concurrent.futures",
        "math",
        "pathlib",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "aiohttp",
        "time",
        "asyncio"
      ],
      "functions": [
        "class:PoolState",
        "get_average_wait_time",
        "class:PoolMetrics",
        "signal_handler",
        "__init__",
        "class:AllocationStrategy",
        "class:AgentResourceProfile",
        "class:ResourcePool",
        "class:ResourceAllocation",
        "class:ResourceType",
        "class:ResourceSpec",
        "class:ResourcePoolCoordinator",
        "class:ResourceQueue",
        "class:LoadBalancer"
      ],
      "description": "Resource Pool Coordinator for SutazAI\n====================================\n\nPurpose: Advanced resource pooling and sharing for 131 agents with dynamic allocation\nUsage: python scripts/resource-pool-co",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/multi-system-integration-framework.py",
      "relative_path": "scripts/monitoring/multi-system-integration-framework.py",
      "name": "multi-system-integration-framework.py",
      "size": 115305,
      "lines": 2675,
      "hash": "0893d3ac9d35c8498fe1467454712ff7",
      "category": [
        "monitoring",
        "deployment",
        "utils",
        "analysis"
      ],
      "imports": [
        "websocket",
        "kubernetes",
        "yaml",
        "json",
        "neo4j",
        "threading",
        "statistics",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "prometheus_client.parser",
        "psutil",
        "argparse",
        "sys",
        "psycopg2",
        "dataclasses",
        "prometheus_client",
        "os",
        "collections",
        "docker",
        "time",
        "requests",
        "datetime",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_classify_docker_service",
        "class:RollbackManager",
        "generate_integration_report",
        "_generate_recommendations",
        "detect_anomalies",
        "_store_discovered_system",
        "_classify_k8s_service",
        "class:AnomalyDetector",
        "_init_kubernetes_client",
        "_group_data_for_fusion",
        "class:SystemType",
        "class:SystemEndpoint",
        "class:HealthStatus",
        "class:MultiModalData",
        "_store_system_health",
        "class:MultiSystemIntegrationFramework",
        "class:SystemHealth",
        "_log_integration_event",
        "main",
        "_init_database",
        "class:IntegrationState",
        "_check_metric_anomaly",
        "class:IntegrationRule",
        "__init__",
        "_compare_data_schemas",
        "_are_systems_complementary",
        "_init_redis_client",
        "_init_docker_client",
        "_load_config"
      ],
      "description": "Multi-System Integration Framework for SutazAI\n==============================================\nPurpose: Advanced integration framework for orchestrating multi-modal data fusion across systems\nUsage: py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/monitoring-master.py",
      "relative_path": "scripts/monitoring/monitoring-master.py",
      "name": "monitoring-master.py",
      "size": 18140,
      "lines": 471,
      "hash": "2d293b97e52c172429a567c232ce1c3d",
      "category": [
        "monitoring",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "argparse",
        "json",
        "datetime",
        "socket",
        "typing",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "generate_report",
        "__init__",
        "save_report",
        "get_system_metrics",
        "class:SystemMetrics",
        "main",
        "class:ServiceHealth",
        "load_config",
        "class:MasterMonitor",
        "setup_logging"
      ],
      "description": "SutazAI Master Monitoring System\nConsolidates 38+ monitoring script variations into one unified system\nAuthor: DevOps Manager - Deduplication Operation\nDate: August 10, 2025",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/comprehensive-agent-health-monitor.py",
      "relative_path": "scripts/monitoring/comprehensive-agent-health-monitor.py",
      "name": "comprehensive-agent-health-monitor.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/monitoring/production-readiness-validator.py",
      "relative_path": "scripts/monitoring/production-readiness-validator.py",
      "name": "production-readiness-validator.py",
      "size": 50044,
      "lines": 1240,
      "hash": "8bf0c02f0c7ad90716086b87b00808c4",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "psutil",
        "enhanced_compliance_monitor",
        "argparse",
        "sys",
        "json",
        "datetime",
        "queue",
        "threading",
        "typing",
        "sqlite3",
        "concurrent.futures",
        "logging",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "_calculate_overall_status",
        "concurrent_task",
        "_validate_database_integrity",
        "class:ProductionReadinessValidator",
        "_validate_disaster_recovery",
        "_validate_configuration",
        "run_validation",
        "generate_report",
        "_validate_monitoring_alerting",
        "_validate_integration",
        "_validate_scalability",
        "main",
        "_validate_error_handling",
        "_validate_system_requirements",
        "worker",
        "_validate_security_safety",
        "_can_import",
        "__init__",
        "_update_summary",
        "_validate_performance_benchmarks",
        "_validate_load_performance"
      ],
      "description": "Production Readiness Validator for Enhanced Compliance Monitor\n============================================================\nPurpose: Comprehensive validation that the compliance monitoring system is p",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/health/container-health-monitor.py",
      "relative_path": "scripts/health/container-health-monitor.py",
      "name": "container-health-monitor.py",
      "size": 16618,
      "lines": 411,
      "hash": "73d3bf24f9aec0f76002ca7a03a16b00",
      "category": [
        "monitoring",
        "maintenance",
        "automation",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "argparse",
        "json",
        "sys",
        "datetime",
        "threading",
        "typing",
        "signal",
        "logging"
      ],
      "functions": [
        "save_health_report",
        "class:ContainerHealthMonitor",
        "monitor_containers",
        "stop_monitoring",
        "auto_heal_container",
        "signal_handler",
        "__init__",
        "start_monitoring",
        "check_container_health",
        "main",
        "get_container_stats"
      ],
      "description": "CONTAINER HEALTH MONITOR\nReal-time Docker container health monitoring and auto-healing\n\nConsolidated from:\n- container-health-monitor.py\n- permanent-health-monitor.py\n- distributed-health-monitor.py\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/health/monitoring-health-aggregator.py",
      "relative_path": "scripts/health/monitoring-health-aggregator.py",
      "name": "monitoring-health-aggregator.py",
      "size": 23031,
      "lines": 563,
      "hash": "646baa8d939a7082393e2b694a9ed572",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "argparse",
        "sys",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "redis"
      ],
      "functions": [
        "class:MonitoringHealthAggregator",
        "generate_health_report",
        "aggregate_health_metrics",
        "collect_application_metrics",
        "__init__",
        "collect_docker_metrics",
        "run_monitoring_cycle",
        "collect_database_metrics",
        "save_monitoring_data",
        "main",
        "check_alert_conditions",
        "collect_system_metrics"
      ],
      "description": "MONITORING HEALTH AGGREGATOR\nComprehensive health monitoring with metrics collection\n\nConsolidated from:\n- system-health-validator.py\n- validate-production-health.py\n- database_health_check.py\n- fix-a",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/health/master-health-controller.py",
      "relative_path": "scripts/health/master-health-controller.py",
      "name": "master-health-controller.py",
      "size": 28817,
      "lines": 715,
      "hash": "45d6f00618ace9a9bf81e91b9dc37b03",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "generate_health_summary",
        "generate_report",
        "signal_handler",
        "__init__",
        "class:HealthMaster",
        "check_service_health",
        "main",
        "continuous_monitoring",
        "check_all_services"
      ],
      "description": "CANONICAL HEALTH CHECK SYSTEM\nConsolidated from 49+ health check scripts following CLAUDE.md Rules\n\nPurpose: Single source of truth for all system health monitoring\nAuthor: ULTRA SCRIPT CONSOLIDATION ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/health/pre-commit-health-validator.py",
      "relative_path": "scripts/health/pre-commit-health-validator.py",
      "name": "pre-commit-health-validator.py",
      "size": 5604,
      "lines": 166,
      "hash": "a5e199280160353e0a3f6cffc1340edb",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "argparse",
        "master_health_controller",
        "sys",
        "io",
        "pathlib",
        "contextlib"
      ],
      "functions": [
        "quick_service_check",
        "class:PreCommitHealthValidator",
        "validate_critical_services",
        "__init__",
        "validate_system",
        "main",
        "check_docker_containers"
      ],
      "description": "PRE-COMMIT HEALTH VALIDATOR\nQuick system health validation before allowing commits\n\nConsolidated from:\n- validate_system_health.py (pre-commit)\n- quick-system-check.py (pre-commit)\n\nPurpose: Ensure sy",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/health/deployment-health-checker.py",
      "relative_path": "scripts/health/deployment-health-checker.py",
      "name": "deployment-health-checker.py",
      "size": 10106,
      "lines": 290,
      "hash": "c2e583d2a77b24efe5ec8d9e4eadd98e",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "sys",
        "json",
        "master_health_controller",
        "psycopg2",
        "pathlib",
        "redis"
      ],
      "functions": [
        "assess_deployment_readiness",
        "class:DeploymentHealthChecker",
        "check_database_connectivity",
        "run_deployment_validation",
        "__init__",
        "check_service_mesh",
        "check_monitoring_stack",
        "main",
        "check_resource_availability",
        "check_ai_model_availability"
      ],
      "description": "DEPLOYMENT HEALTH CHECKER\nSpecialized health checking for deployment scenarios\n\nConsolidated from:\n- check_services_health.py\n- infrastructure_health_check.py\n- health_check_gateway.py\n- health_check_",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/export_openapi.py",
      "relative_path": "scripts/utils/export_openapi.py",
      "name": "export_openapi.py",
      "size": 1988,
      "lines": 62,
      "hash": "e0661ec6baebec12b0afec0f3be3c87c",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "json",
        "sys",
        "backend.app.main",
        "pathlib",
        "os"
      ],
      "functions": [
        "main"
      ],
      "description": "Export FastAPI OpenAPI schema from backend without starting a server.\n\nWrites: docs/backend_openapi.json\n\nNotes:\n- Disables optional enterprise features via env to minimize import side-effects.\n- Requ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/generate_docs_inventory.py",
      "relative_path": "scripts/utils/generate_docs_inventory.py",
      "name": "generate_docs_inventory.py",
      "size": 2143,
      "lines": 74,
      "hash": "e58780e66aad0463525c07c81b958458",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "os",
        "datetime",
        "hashlib"
      ],
      "functions": [
        "file_sha1",
        "main"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/coverage_reporter.py",
      "relative_path": "scripts/utils/coverage_reporter.py",
      "name": "coverage_reporter.py",
      "size": 20125,
      "lines": 496,
      "hash": "d091ea33a1fc786021624266cd743263",
      "category": [
        "testing",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "analyze_file_coverage",
        "class:CoverageReporter",
        "save_reports",
        "__init__",
        "analyze_test_coverage",
        "analyze_module_coverage",
        "generate_html_dashboard",
        "main",
        "generate_coverage_report"
      ],
      "description": "SutazAI Coverage Reporter - Test coverage analysis and reporting\nPurpose: Generate comprehensive test coverage reports and dashboards  \nUsage: python scripts/coverage_reporter.py [options]\nAuthor: QA ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/memory_cleanup_service.py",
      "relative_path": "scripts/utils/memory_cleanup_service.py",
      "name": "memory_cleanup_service.py",
      "size": 13050,
      "lines": 319,
      "hash": "03155db2938dad229c0ff41bbfee9c93",
      "category": [
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "psutil",
        "time",
        "requests",
        "sys",
        "json",
        "gc",
        "threading",
        "typing",
        "signal",
        "logging",
        "os",
        "subprocess"
      ],
      "functions": [
        "optimize_for_small_models",
        "get_memory_info",
        "get_process_memory_usage",
        "signal_handler",
        "class:MemoryCleanupService",
        "__init__",
        "run_cleanup_cycle",
        "unload_non_small_models",
        "force_garbage_collection",
        "kill_memory_heavy_processes",
        "start_service",
        "emergency_memory_cleanup",
        "main",
        "stop_service",
        "get_ollama_status"
      ],
      "description": "Memory Cleanup Service\nAutomatic memory management and garbage collection for SutazAI system using small models",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/coord_bus.py",
      "relative_path": "scripts/utils/coord_bus.py",
      "name": "coord_bus.py",
      "size": 4857,
      "lines": 149,
      "hash": "91f4b7c10f0906edc056987855428c02",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "uuid",
        "argparse",
        "json",
        "sys",
        "datetime",
        "os",
        "csv"
      ],
      "functions": [
        "cmd_post_status",
        "now_iso",
        "load_agents",
        "ensure_paths",
        "cmd_list_agents",
        "cmd_post_directive",
        "main",
        "cmd_post_heartbeat",
        "build_parser",
        "append_jsonl"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/large_file_handler_demo.py",
      "relative_path": "scripts/utils/large_file_handler_demo.py",
      "name": "large_file_handler_demo.py",
      "size": 3138,
      "lines": 102,
      "hash": "6e17dc0e27af8f3acb60b38557dc4597",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "os",
        "backend.utils.large_file_handler"
      ],
      "functions": [
        "demo_advanced_usage",
        "demo_error_handling",
        "demo_basic_usage"
      ],
      "description": "Large File Handler Demo\n\nPurpose: Demonstrates usage of `backend.utils.large_file_handler` for files exceeding 256KB.\nAuthor: Repo Maintenance\nDate: 2025-08-09\nUsage:\n  python3 scripts/utils/large_fil",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/health_monitor.py",
      "relative_path": "scripts/utils/health_monitor.py",
      "name": "health_monitor.py",
      "size": 28817,
      "lines": 715,
      "hash": "45d6f00618ace9a9bf81e91b9dc37b03",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "argparse",
        "sys",
        "json",
        "datetime",
        "socket",
        "threading",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "generate_health_summary",
        "generate_report",
        "signal_handler",
        "__init__",
        "class:HealthMaster",
        "check_service_health",
        "main",
        "continuous_monitoring",
        "check_all_services"
      ],
      "description": "CANONICAL HEALTH CHECK SYSTEM\nConsolidated from 49+ health check scripts following CLAUDE.md Rules\n\nPurpose: Single source of truth for all system health monitoring\nAuthor: ULTRA SCRIPT CONSOLIDATION ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/register_with_consul.py",
      "relative_path": "scripts/utils/register_with_consul.py",
      "name": "register_with_consul.py",
      "size": 7189,
      "lines": 193,
      "hash": "bb69d11969104d320ad480158fac254e",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "time",
        "argparse",
        "sys",
        "typing",
        "__future__",
        "consul",
        "os",
        "random"
      ],
      "functions": [
        "ts",
        "parse_args",
        "retry_with_exponential_backoff",
        "register_service",
        "connect_to_consul",
        "get_consul_client",
        "validate_args",
        "main"
      ],
      "description": "Idempotent Consul service registration utility with retry logic and exponential backoff.\n\nUsage:\n  python scripts/register_with_consul.py       --service_name jarvis-task-controller       --service_ad",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/coordination_tracker.py",
      "relative_path": "scripts/utils/coordination_tracker.py",
      "name": "coordination_tracker.py",
      "size": 11819,
      "lines": 345,
      "hash": "13a64fc7f99d26d97de663731f348857",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "datetime",
        "sys",
        "typing",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "validate_file_structure",
        "check_dependency_consolidation",
        "check_agent_compliance",
        "print_summary",
        "save_report",
        "check_code_quality",
        "check_script_organization",
        "generate_progress_report",
        "main"
      ],
      "description": "SutazAI Codebase Coordination Tracker\n====================================\n\nTracks progress on the codebase cleanup and standardization efforts.\nUsed by specialized agents to report status and coordin",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/multi-environment-config-manager.py",
      "relative_path": "scripts/utils/multi-environment-config-manager.py",
      "name": "multi-environment-config-manager.py",
      "size": 53738,
      "lines": 1368,
      "hash": "6187a7b3816a3623386fbc7a466ea91b",
      "category": [
        "deployment",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "cryptography.fernet",
        "hashlib",
        "string",
        "enum",
        "re",
        "typing",
        "concurrent.futures",
        "pathlib",
        "base64",
        "cryptography.hazmat.primitives",
        "shutil",
        "argparse",
        "sys",
        "dataclasses",
        "secrets",
        "tempfile",
        "os",
        "cryptography.hazmat.primitives.kdf.pbkdf2",
        "time",
        "datetime",
        "jinja2",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "store_template",
        "_validate_secure_password",
        "_get_or_create_master_key",
        "_generate_password_filter",
        "class:SecretManager",
        "_validate_required",
        "class:ConfigType",
        "_generate_secret_filter",
        "_validate_url",
        "_create_cipher",
        "class:ConfigValue",
        "class:ConfigValidator",
        "class:MultiEnvironmentConfigManager",
        "get_template",
        "class:SecretType",
        "create_environment",
        "_generate_default_secrets",
        "validate_config_value",
        "generate_password",
        "class:ConfigTemplate",
        "generate_api_key",
        "render_template",
        "_load_default_templates",
        "store_environment_config",
        "_get_docker_compose_template",
        "_generate_default_config_values",
        "validate_environment_config",
        "rotate_secrets",
        "_validate_type",
        "decrypt_secret",
        "_calculate_checksum",
        "_get_app_config_template",
        "class:EnvironmentConfig",
        "class:ConfigDatabase",
        "encrypt_secret",
        "compare_environments",
        "_init_database",
        "_validate_environment_specific",
        "_increment_version",
        "class:ConfigDeployer",
        "_validate_email",
        "class:Environment",
        "_encrypt_filter",
        "list_environments",
        "get_environment_config",
        "_validate_port",
        "update_environment_config",
        "__init__",
        "class:SecretValue",
        "class:TemplateEngine",
        "_validate_pattern",
        "_validate_range"
      ],
      "description": "Multi-Environment Configuration Manager for SutazAI\nVersion: 1.0.0\n\nDESCRIPTION:\n    Sophisticated configuration management system that handles multiple\n    environments (dev, staging, production) wit",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/distributed-task-queue.py",
      "relative_path": "scripts/utils/distributed-task-queue.py",
      "name": "distributed-task-queue.py",
      "size": 18073,
      "lines": 519,
      "hash": "37ba489fd0bc54c0d95220a6c9f956e5",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "json",
        "celery.result",
        "logging",
        "enum",
        "typing",
        "consul",
        "celery.signals",
        "flower.command",
        "argparse",
        "sys",
        "celery.bin",
        "dataclasses",
        "prometheus_client",
        "kombu",
        "os",
        "docker",
        "time",
        "requests",
        "datetime",
        "celery",
        "redis"
      ],
      "functions": [
        "class:CeleryConfig",
        "task_postrun_handler",
        "generate_embedding",
        "batch_process",
        "class:TaskPriority",
        "collect_queue_metrics",
        "evaluate_scaling",
        "task_prerun_handler",
        "start_prometheus_metrics_server",
        "__call__",
        "class:TaskConfig",
        "complete_analysis",
        "scale_service",
        "task_failure_handler",
        "class:DistributedTask",
        "check_all_services",
        "process_prompt"
      ],
      "description": "Purpose: Distributed task queue implementation for SutazAI agents\nUsage: python distributed-task-queue.py [--worker] [--beat] [--flower]\nRequirements: celery, redis, rabbitmq, prometheus-client",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/dynamic-load-balancer.py",
      "relative_path": "scripts/utils/dynamic-load-balancer.py",
      "name": "dynamic-load-balancer.py",
      "size": 43094,
      "lines": 1029,
      "hash": "e5797349400c3705a843049c8374d875",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "json",
        "threading",
        "statistics",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "sklearn.metrics",
        "math",
        "pathlib",
        "sklearn.ensemble",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "random",
        "time",
        "numpy",
        "sklearn.preprocessing",
        "asyncio"
      ],
      "functions": [
        "class:LoadBalanceDecision",
        "update_training_data",
        "class:ConsistentHashRing",
        "extract_features",
        "_on_failure",
        "avg_response_time",
        "register_service",
        "class:RequestType",
        "class:BackendService",
        "_on_success",
        "class:HealthStatus",
        "reset",
        "class:CircuitBreaker",
        "_is_service_available",
        "class:LoadBalancingAlgorithm",
        "add_node",
        "_fallback_prediction",
        "remove_node",
        "call",
        "class:LoadPredictor",
        "get_node",
        "resource_score",
        "class:DynamicLoadBalancer",
        "train_models",
        "get_comprehensive_stats",
        "unregister_service",
        "adjust_adaptive_weights",
        "class:RequestMetrics",
        "__init__",
        "predict_load",
        "export_stats",
        "_hash"
      ],
      "description": "Dynamic Load Balancer for SutazAI\n=================================\n\nPurpose: Advanced dynamic load balancing with ML-based predictions and real-time optimization\nUsage: python scripts/dynamic-load-ba",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/generate_secure_secrets.py",
      "relative_path": "scripts/utils/generate_secure_secrets.py",
      "name": "generate_secure_secrets.py",
      "size": 3363,
      "lines": 101,
      "hash": "7a0e7f7a661d897ab13a4cd361303a9b",
      "category": [
        "deployment",
        "utils",
        "security"
      ],
      "imports": [
        "string",
        "pathlib",
        "secrets",
        "os",
        "hashlib"
      ],
      "functions": [
        "generate_api_key",
        "generate_password",
        "generate_jwt_secret",
        "generate_hex_key",
        "main"
      ],
      "description": "SutazAI Security Secrets Generator\nGenerates cryptographically secure passwords and secrets for production deployment",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/create-performance-baseline.py",
      "relative_path": "scripts/utils/create-performance-baseline.py",
      "name": "create-performance-baseline.py",
      "size": 22612,
      "lines": 530,
      "hash": "443e9cca3998315e90ed7a71fec13127",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "docker",
        "psutil",
        "time",
        "requests",
        "argparse",
        "json",
        "datetime",
        "statistics",
        "typing",
        "sqlite3",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "calculate_thresholds",
        "collect_container_metrics",
        "class:PerformanceBaseline",
        "__init__",
        "analyze_samples",
        "calculate_baselines",
        "test_ollama_performance",
        "main",
        "setup_database",
        "save_baselines",
        "collect_system_metrics",
        "test_agent_performance"
      ],
      "description": "SutazAI Performance Baseline Creation Script\nCreates comprehensive performance baselines and monitoring thresholds",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/analyze-agent-readiness.py",
      "relative_path": "scripts/utils/analyze-agent-readiness.py",
      "name": "analyze-agent-readiness.py",
      "size": 4495,
      "lines": 141,
      "hash": "0f1d09d2deb57eee9b477572a9e7bc39",
      "category": [
        "deployment",
        "testing",
        "utils",
        "automation",
        "analysis"
      ],
      "imports": [
        "json",
        "os",
        "sys",
        "pathlib"
      ],
      "functions": [
        "generate_report",
        "analyze_agents",
        "check_agent_directory"
      ],
      "description": "Purpose: Analyze agent directories to check readiness for deployment\nUsage: python analyze-agent-readiness.py\nRequirements: Python 3.8+",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/extract_port_mappings.py",
      "relative_path": "scripts/utils/extract_port_mappings.py",
      "name": "extract_port_mappings.py",
      "size": 5360,
      "lines": 127,
      "hash": "b4f6bfa8f112c206725bd7c00d960f99",
      "category": [
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "glob",
        "pathlib"
      ],
      "functions": [
        "extract_ports_from_compose",
        "main"
      ],
      "description": "Extract port mappings from docker-compose files.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/remove_litellm_from_registry.py",
      "relative_path": "scripts/utils/remove_litellm_from_registry.py",
      "name": "remove_litellm_from_registry.py",
      "size": 696,
      "lines": 22,
      "hash": "74bcf7286a79a863fa89816c8c5ad7c0",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json"
      ],
      "functions": [],
      "description": "Remove litellm-proxy-manager from agent registry",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/create-container-requirements-map.py",
      "relative_path": "scripts/utils/create-container-requirements-map.py",
      "name": "create-container-requirements-map.py",
      "size": 15424,
      "lines": 335,
      "hash": "babd06c4a6f93316b6a2067b42533845",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "yaml",
        "json",
        "re",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "generate_validation_commands",
        "analyze_container_requirements",
        "generate_cleanup_script",
        "main"
      ],
      "description": "Purpose: Create a detailed map of containers and their essential requirements\nUsage: python create-container-requirements-map.py\nRequirements: Python 3.8+, PyYAML",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/summarize_openapi.py",
      "relative_path": "scripts/utils/summarize_openapi.py",
      "name": "summarize_openapi.py",
      "size": 1622,
      "lines": 55,
      "hash": "b7da195dc81bcddab1a5fb37c5be1450",
      "category": [
        "utils"
      ],
      "imports": [
        "json",
        "pathlib"
      ],
      "functions": [
        "main"
      ],
      "description": "Summarize backend OpenAPI (docs/backend_openapi.json) into Markdown.\nWrites: docs/backend_endpoints.md\nGroups by tag and lists method/path pairs.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/analyze-docker-requirements.py",
      "relative_path": "scripts/utils/analyze-docker-requirements.py",
      "name": "analyze-docker-requirements.py",
      "size": 10678,
      "lines": 254,
      "hash": "3fdc709b0e01f70cd33df39eb7349ee7",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "yaml",
        "json",
        "re",
        "typing",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "find_orphaned_requirements",
        "find_all_files",
        "generate_cleanup_recommendations",
        "generate_report",
        "analyze_docker_compose",
        "__init__",
        "analyze_dockerfile",
        "class:DockerRequirementsAnalyzer",
        "main",
        "generate_validation_commands",
        "analyze_dependencies"
      ],
      "description": "Purpose: Analyze Docker containers and map them to their requirements.txt files\nUsage: python analyze-docker-requirements.py\nRequirements: Python 3.8+, PyYAML",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/optimization-validator.py",
      "relative_path": "scripts/utils/optimization-validator.py",
      "name": "optimization-validator.py",
      "size": 21521,
      "lines": 489,
      "hash": "b6f5e5fe779d9a49227f72d2ff9cbef9",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "psutil",
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "threading",
        "subprocess"
      ],
      "functions": [
        "calculate_improvements",
        "collect_baseline_metrics",
        "test_memory_optimization",
        "test_cpu_optimization",
        "__init__",
        "test_process_optimization",
        "stress_test_system",
        "class:OptimizationValidator",
        "print_validation_report",
        "main",
        "test_container_optimization",
        "run_validation_suite"
      ],
      "description": "Purpose: Test and validate system optimizations\nUsage: python optimization-validator.py [--test-type] [--iterations]\nRequirements: psutil, docker",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/database_connection_pool_setup.py",
      "relative_path": "scripts/utils/database_connection_pool_setup.py",
      "name": "database_connection_pool_setup.py",
      "size": 16047,
      "lines": 457,
      "hash": "e078a98fe7696fc0f451c88f544c589d",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "typing",
        "logging",
        "psycopg2",
        "contextlib"
      ],
      "functions": [
        "create_performance_indexes",
        "optimize_postgresql_settings",
        "create_maintenance_functions",
        "create_connection_monitoring",
        "main",
        "get_db_connection",
        "analyze_database_performance",
        "setup_database_extensions"
      ],
      "description": "Database Connection Pool Setup and Configuration\nOptimizes PostgreSQL for the SutazAI application workload",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/synthetic-load-test.py",
      "relative_path": "scripts/utils/synthetic-load-test.py",
      "name": "synthetic-load-test.py",
      "size": 9656,
      "lines": 268,
      "hash": "89ed0634c533fc23923cb5bccf1d9ced",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "argparse",
        "json",
        "datetime",
        "typing",
        "asyncio",
        "aiohttp",
        "random"
      ],
      "functions": [
        "class:LoadTester",
        "print_stats",
        "__init__",
        "main"
      ],
      "description": "Synthetic Load Testing for Agent Services\nGenerates various types of loads to test metrics and alerting",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/pin_all_dependencies.py",
      "relative_path": "scripts/utils/pin_all_dependencies.py",
      "name": "pin_all_dependencies.py",
      "size": 8506,
      "lines": 246,
      "hash": "348760cbfc091310c63db7d60527b63a",
      "category": [
        "maintenance",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "datetime",
        "re",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "process_requirements_file",
        "find_requirements_files",
        "run_pinning",
        "__init__",
        "class:DependencyPinner",
        "create_backup",
        "pin_package_version",
        "create_security_requirements_summary"
      ],
      "description": "Pin All Dependencies Script\nPurpose: Pin all unpinned dependencies across the entire SutazAI project\nUsage: python scripts/pin_all_dependencies.py",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/check_naming.py",
      "relative_path": "scripts/utils/check_naming.py",
      "name": "check_naming.py",
      "size": 3876,
      "lines": 116,
      "hash": "7750af6e124fc828ddf867aaa8710f47",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "check_filename",
        "check_python_naming",
        "main"
      ],
      "description": "Check and enforce naming conventions\nPart of CLAUDE.md hygiene enforcement",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/database_operations.py",
      "relative_path": "scripts/utils/database_operations.py",
      "name": "database_operations.py",
      "size": 13710,
      "lines": 411,
      "hash": "a65facce959aa238ae12acc0b65612b4",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "sys",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "create_monitoring_view",
        "restore_backup",
        "vacuum_analyze",
        "cleanup_old_backups",
        "create_backup",
        "ensure_backup_dir",
        "check_database_size",
        "check_active_connections",
        "main",
        "update_table_statistics"
      ],
      "description": "SutazAI Database Operations Script\nProvides backup, restore, and maintenance operations for PostgreSQL",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/intelligent-cache-system.py",
      "relative_path": "scripts/utils/intelligent-cache-system.py",
      "name": "intelligent-cache-system.py",
      "size": 36429,
      "lines": 952,
      "hash": "09385a4c49a01d2ca11512b4bd4e49b3",
      "category": [
        "utils"
      ],
      "imports": [
        "json",
        "pickle",
        "threading",
        "statistics",
        "logging",
        "hashlib",
        "enum",
        "multiprocessing",
        "typing",
        "zlib",
        "math",
        "pathlib",
        "sklearn.ensemble",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "random",
        "gzip",
        "time",
        "numpy",
        "sklearn.preprocessing"
      ],
      "functions": [
        "_calculate_pattern_similarity",
        "train_model",
        "predict_next_access",
        "get_stats",
        "_update_access_pattern",
        "extract_features",
        "_evict",
        "put",
        "class:CacheEntry",
        "stop",
        "_trigger_prefetch",
        "class:AccessPredictor",
        "class:CacheLevel",
        "class:ReplacementPolicy",
        "_train_predictor",
        "invalidate_agent_cache",
        "_adaptive_optimization",
        "class:CacheLevel_Implementation",
        "_monitor_loop",
        "main",
        "class:CacheStats",
        "_find_related_keys",
        "remove",
        "get_comprehensive_stats",
        "class:CacheOperation",
        "class:IntelligentCacheSystem",
        "_promote_entry",
        "start",
        "_prefetch_loop",
        "__init__",
        "_calculate_pattern_metrics",
        "class:AccessPattern",
        "export_stats",
        "get"
      ],
      "description": "Intelligent Cache System for SutazAI\n===================================\n\nPurpose: Advanced caching system with ML-based prefetching, adaptive algorithms, and cross-agent sharing\nUsage: python scripts",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/startup_validator.py",
      "relative_path": "scripts/utils/startup_validator.py",
      "name": "startup_validator.py",
      "size": 17097,
      "lines": 432,
      "hash": "a206669938f50ee6defb59e677d37028",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "json",
        "statistics",
        "typing",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "calculate_optimization_metrics",
        "get_running_containers",
        "get_docker_version",
        "stop_all_services",
        "start_single_service",
        "__init__",
        "generate_validation_report",
        "record_baseline_startup",
        "print_validation_summary",
        "test_optimized_startup",
        "class:StartupValidator",
        "wait_for_service_health",
        "validate_system_stability",
        "test_api_endpoints"
      ],
      "description": "SutazAI Startup Validation and Performance Testing\nValidates startup time reduction and system stability",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/memory-pool-manager.py",
      "relative_path": "scripts/utils/memory-pool-manager.py",
      "name": "memory-pool-manager.py",
      "size": 32094,
      "lines": 838,
      "hash": "52e96fc4ea3c38eaf170520d4d5a0408",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "uuid",
        "json",
        "pickle",
        "threading",
        "logging",
        "hashlib",
        "enum",
        "multiprocessing",
        "typing",
        "zlib",
        "pathlib",
        "mmap",
        "weakref",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "collections",
        "gzip",
        "time",
        "struct"
      ],
      "functions": [
        "get_compression_ratio",
        "class:MemoryPoolManager",
        "create_pool",
        "class:PoolType",
        "_garbage_collect",
        "get_stats",
        "class:CompressionType",
        "_initialize_pool",
        "add_block",
        "_monitoring_loop",
        "remove_block",
        "class:MemoryBlock",
        "deallocate",
        "stop_monitoring",
        "_coalesce_free_blocks",
        "start_monitoring",
        "write_data",
        "export_stats",
        "allocate_memory",
        "class:MemoryPool",
        "decompress",
        "class:PoolStats",
        "cleanup",
        "share_memory",
        "allocate",
        "main",
        "read",
        "read_data",
        "get_comprehensive_stats",
        "_create_default_pools",
        "compress",
        "deallocate_memory",
        "_log_summary_stats",
        "cleanup_agent_memory",
        "__init__",
        "write",
        "class:MemoryDeduplicator",
        "class:MemoryCompressor"
      ],
      "description": "Advanced Memory Pool Manager for SutazAI\n=======================================\n\nPurpose: Manage shared memory pools for 131 agents with intelligent allocation and optimization\nUsage: python scripts/",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/ollama_memory_optimizer.py",
      "relative_path": "scripts/utils/ollama_memory_optimizer.py",
      "name": "ollama_memory_optimizer.py",
      "size": 10619,
      "lines": 272,
      "hash": "ecf843ef4ad8719239c7774b59939443",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "psutil",
        "time",
        "requests",
        "yaml",
        "sys",
        "json",
        "gc",
        "threading",
        "typing",
        "logging",
        "os"
      ],
      "functions": [
        "get_default_config",
        "get_system_memory_info",
        "should_unload_model",
        "optimize_memory_usage",
        "parse_time_string",
        "unload_model",
        "stop",
        "run_optimization_cycle",
        "monitor_ollama_requests",
        "start_monitoring",
        "get_loaded_models",
        "unload_all_models",
        "get_model_memory_usage",
        "main",
        "load_config",
        "__init__",
        "get_available_models",
        "force_garbage_collection",
        "class:OllamaMemoryOptimizer"
      ],
      "description": "Ollama Memory Optimizer\nPrevents system freezing by managing Ollama models and memory usage",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/scan_localhost.py",
      "relative_path": "scripts/utils/scan_localhost.py",
      "name": "scan_localhost.py",
      "size": 2952,
      "lines": 103,
      "hash": "71c4a9b690f452d8f4b339f474e2e63e",
      "category": [
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "__future__",
        "pathlib"
      ],
      "functions": [
        "scan_file",
        "suggest_replacement",
        "should_scan",
        "main"
      ],
      "description": "scan_localhost.py\n\nPurpose: Find hardcoded localhost/127.0.0.1 references and suggest service-name replacements.\n\nExit codes:\n  0 -> No issues\n  1 -> Found issues\n  2 -> Script error",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/external-service-discovery.py",
      "relative_path": "scripts/utils/external-service-discovery.py",
      "name": "external-service-discovery.py",
      "size": 13128,
      "lines": 332,
      "hash": "851b11e3030820f67754f3faae1f4677",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "docker",
        "psutil",
        "requests",
        "yaml",
        "argparse",
        "json",
        "socket",
        "sys",
        "datetime",
        "typing",
        "subprocess"
      ],
      "functions": [
        "scan_network_services",
        "run",
        "_parse_container_ports",
        "scan_docker_containers",
        "scan_host_services",
        "__init__",
        "_is_port_open",
        "_safe_env_vars",
        "_identify_service_type",
        "_get_process_info",
        "_parse_nmap_output",
        "main",
        "class:ExternalServiceDiscovery",
        "generate_integration_config",
        "_probe_service"
      ],
      "description": "Purpose: Discovers and catalogs external services for SutazAI integration\nUsage: python external-service-discovery.py [--scan-network] [--output json|yaml]\nRequirements: docker, psutil, requests",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/emergency-compliance-fix.py",
      "relative_path": "scripts/utils/emergency-compliance-fix.py",
      "name": "emergency-compliance-fix.py",
      "size": 9012,
      "lines": 239,
      "hash": "38e9b7230c797014e5f2f0771b5c2968",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os",
        "shutil"
      ],
      "functions": [
        "class:ComplianceFixer",
        "fix_rule1_fantasy_elements",
        "fix_rule3_documentation_rot",
        "generate_report",
        "run",
        "__init__",
        "fix_rule5_external_apis",
        "fix_rule3_docker_compose_chaos",
        "backup_file",
        "consolidate_scripts"
      ],
      "description": "Emergency Compliance Fix Script\nRemoves critical rule violations to achieve immediate compliance",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/otp_override.py",
      "relative_path": "scripts/utils/otp_override.py",
      "name": "otp_override.py",
      "size": 5909,
      "lines": 189,
      "hash": "09f142626901413b6de907612e7f8483",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "argparse",
        "sys",
        "json",
        "logging",
        "pathlib",
        "os",
        "random",
        "hashlib"
      ],
      "functions": [
        "store_otp",
        "generate_otp",
        "setup_cache_dir",
        "generate_user_hash",
        "verify_otp",
        "main"
      ],
      "description": "otp_override.py - Script for overriding OTP verification in development/testing environments",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/quick-container-analysis.py",
      "relative_path": "scripts/utils/quick-container-analysis.py",
      "name": "quick-container-analysis.py",
      "size": 5948,
      "lines": 159,
      "hash": "8a72c648d745420684d9ae623c8fb089",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "yaml",
        "json",
        "datetime",
        "logging",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "identify_critical_services",
        "analyze_compose_files",
        "extract_service_name",
        "main",
        "discover_containers"
      ],
      "description": "Purpose: Quick container analysis without builds - assess scope and dependencies\nUsage: python quick-container-analysis.py\nRequirements: Python 3.8+, yaml\n\nFast analysis to understand container landsc",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/check_secrets.py",
      "relative_path": "scripts/utils/check_secrets.py",
      "name": "check_secrets.py",
      "size": 3363,
      "lines": 104,
      "hash": "8d380cb088d089d03d445cfcc0e40aae",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "sys",
        "os",
        "re",
        "pathlib"
      ],
      "functions": [
        "check_file",
        "main"
      ],
      "description": "Check for hardcoded secrets in the codebase\nPart of CLAUDE.md hygiene enforcement",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/optimize_transformers.py",
      "relative_path": "scripts/utils/optimize_transformers.py",
      "name": "optimize_transformers.py",
      "size": 36084,
      "lines": 992,
      "hash": "7d67825111d3d30e7033d01d4d867c48",
      "category": [
        "utils"
      ],
      "imports": [
        "transformers",
        "time",
        "numpy",
        "psutil",
        "argparse",
        "sys",
        "json",
        "torch",
        "gc",
        "optimum.onnxruntime",
        "typing",
        "platform",
        "cpuinfo",
        "logging",
        "os"
      ],
      "functions": [
        "optimize_with_onnx",
        "get_system_info",
        "benchmark_original",
        "get_memory_info",
        "get_cpu_info",
        "optimize_with_bettertransformer",
        "optimize_all",
        "__init__",
        "optimize_with_quantization",
        "_generate_recommendations",
        "load_model",
        "main",
        "class:TransformerOptimizer",
        "class:SystemInfo"
      ],
      "description": "!/usr/bin/env python",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/ai-performance-validator.py",
      "relative_path": "scripts/utils/ai-performance-validator.py",
      "name": "ai-performance-validator.py",
      "size": 21024,
      "lines": 538,
      "hash": "1697b53eac81f9dad0f342a1f32dfac6",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "httpx",
        "time",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "agents.core.ollama_integration",
        "statistics",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "collections"
      ],
      "functions": [
        "class:TestResult",
        "class:PerformanceMetrics",
        "_generate_recommendations",
        "generate_report",
        "_evaluate_response_quality",
        "__init__",
        "class:AIPerformanceValidator",
        "_update_metrics"
      ],
      "description": "Purpose: Validate AI system performance across all 131 agents\nUsage: python scripts/ai-performance-validator.py [--full-test]\nRequirements: asyncio, httpx, json, statistics",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/final-system-validation.py",
      "relative_path": "scripts/utils/final-system-validation.py",
      "name": "final-system-validation.py",
      "size": 64355,
      "lines": 1510,
      "hash": "d901dc2c30e779788d8a96d63978171e",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "psutil",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "statistics",
        "typing",
        "pkg_resources",
        "concurrent.futures",
        "logging",
        "pathlib",
        "dataclasses",
        "asyncio",
        "subprocess",
        "aiohttp",
        "hashlib"
      ],
      "functions": [
        "class:AIQualityAssessmentEngine",
        "_determine_certification_status",
        "class:SystemComplianceReport",
        "_calculate_compliance_percentage",
        "_compare_to_benchmarks",
        "_load_quality_patterns",
        "_calculate_metric_score",
        "class:FinalSystemValidator",
        "_score_to_quality_level",
        "_generate_ai_insights",
        "_calculate_status_counts",
        "assess_reliability_quality",
        "class:ValidationMetrics",
        "assess_security_quality",
        "_identify_improvement_priorities",
        "assess_performance_quality",
        "_load_benchmark_standards",
        "_create_error_result",
        "_score_to_status",
        "_score_to_grade",
        "__init__",
        "_generate_final_recommendations",
        "generate_overall_assessment"
      ],
      "description": "Purpose: Final comprehensive system validation with AI-powered quality assurance\nUsage: python final-system-validation.py [--mode MODE] [--output-format FORMAT]\nRequirements: Complete system must be o",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/ensure_changelogs.py",
      "relative_path": "scripts/utils/ensure_changelogs.py",
      "name": "ensure_changelogs.py",
      "size": 3282,
      "lines": 101,
      "hash": "58de74afc8086c54b580725678b66b35",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "argparse",
        "os",
        "pathlib"
      ],
      "functions": [
        "load_template",
        "ensure_changelogs",
        "main"
      ],
      "description": "Purpose: Ensure every directory in the repository contains a CHANGELOG.md.\n\n- Reads template from docs/templates/CHANGELOG_TEMPLATE.md\n- Skips common vendor/build/cache directories (configurable via C",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/audit_docs.py",
      "relative_path": "scripts/utils/audit_docs.py",
      "name": "audit_docs.py",
      "size": 2331,
      "lines": 76,
      "hash": "d9a3af7e36769dc82807001f33403563",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "sys",
        "typing",
        "__future__",
        "pathlib",
        "collections"
      ],
      "functions": [
        "main"
      ],
      "description": "audit_docs.py\n\nRule 6, 15, 17 enforcement (docs-as-code, centralization, IMPORTANT precedence):\n- Ensure Markdown docs are centralized under /docs or /IMPORTANT\n- Flag Markdown files outside allowed l",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/compact_monitor.py",
      "relative_path": "scripts/utils/compact_monitor.py",
      "name": "compact_monitor.py",
      "size": 9639,
      "lines": 241,
      "hash": "f59071bedd5cad167217dd5ebfe04e02",
      "category": [
        "monitoring",
        "deployment",
        "maintenance",
        "utils"
      ],
      "imports": [
        "psutil",
        "time",
        "sys",
        "datetime",
        "os",
        "subprocess"
      ],
      "functions": [
        "run",
        "__init__",
        "get_docker_containers",
        "get_system_stats",
        "get_ollama_models",
        "class:CompactMonitor",
        "get_color",
        "move_to",
        "main",
        "create_bar",
        "clear_line"
      ],
      "description": "Compact System Monitor - Fixed Layout, No Scrolling\n===================================================\n\nA monitor that works perfectly in 25-row terminals with static display.",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/enforce_claude_md_simple.py",
      "relative_path": "scripts/utils/enforce_claude_md_simple.py",
      "name": "enforce_claude_md_simple.py",
      "size": 13412,
      "lines": 397,
      "hash": "9aa2186b074ef2f2939272dd16e78e99",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "os",
        "typing",
        "pathlib",
        "shutil"
      ],
      "functions": [
        "add_claude_rules_to_agent_dirs",
        "update_agent_dockerfiles",
        "create_agent_wrapper_script",
        "create_verification_script",
        "create_backup",
        "main",
        "create_docker_compose_override"
      ],
      "description": "Simple CLAUDE.md Rules Enforcement for All AI Agents\n\nThis script adds CLAUDE.md rules checking to all agents without\nmodifying their YAML frontmatter (which is causing parsing issues).",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/standardize-requirements.py",
      "relative_path": "scripts/utils/standardize-requirements.py",
      "name": "standardize-requirements.py",
      "size": 3185,
      "lines": 105,
      "hash": "344c1906108c4cabab851ed98c55dc8f",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "pathlib",
        "os",
        "glob"
      ],
      "functions": [
        "main",
        "update_requirements_file"
      ],
      "description": "Standardize all requirements.txt files to use consistent versions",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/enforce_claude_md_rules.py",
      "relative_path": "scripts/utils/enforce_claude_md_rules.py",
      "name": "enforce_claude_md_rules.py",
      "size": 15112,
      "lines": 438,
      "hash": "6fca8029ec306b880c547c3de17970c7",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "argparse",
        "json",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "update_agent_yaml",
        "read_claude_md_rules",
        "run_comprehensive_check",
        "update_agent_python_files",
        "update_docker_compose_files",
        "main",
        "create_rules_checker_module"
      ],
      "description": "Enforce CLAUDE.md Rules for All AI Agents\n\nThis script updates all AI agents to automatically check and follow\nthe rules defined in /opt/sutazaiapp/CLAUDE.md",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/distributed-autoscaler.py",
      "relative_path": "scripts/utils/distributed-autoscaler.py",
      "name": "distributed-autoscaler.py",
      "size": 17876,
      "lines": 459,
      "hash": "ad52d17f9c3a62d57080c02fa91d8150",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "docker",
        "prometheus_api_client",
        "time",
        "enum",
        "yaml",
        "argparse",
        "sys",
        "datetime",
        "socket",
        "threading",
        "typing",
        "signal",
        "logging",
        "dataclasses",
        "consul",
        "prometheus_client",
        "os"
      ],
      "functions": [
        "start",
        "stop",
        "register_with_consul",
        "signal_handler",
        "class:ServiceConfig",
        "__init__",
        "check_cooldown",
        "run_scaling_loop",
        "scale_service_if_needed",
        "get_metric_value",
        "class:ScalingAction",
        "scale_service",
        "evaluate_scaling_rules",
        "get_service_replicas",
        "_load_config",
        "class:DistributedAutoScaler",
        "create_default_config",
        "class:ScalingRule"
      ],
      "description": "Purpose: Distributed auto-scaler for SutazAI services\nUsage: python distributed-autoscaler.py [--config /path/to/config.yaml]\nRequirements: docker, prometheus-api-client, consul, pyyaml",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/add_claude_md_directive.py",
      "relative_path": "scripts/utils/add_claude_md_directive.py",
      "name": "add_claude_md_directive.py",
      "size": 3633,
      "lines": 105,
      "hash": "7a1337ff102db586fe75d4fbee660b64",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "pathlib",
        "json",
        "os",
        "glob"
      ],
      "functions": [
        "add_claude_directive",
        "main"
      ],
      "description": "Purpose: Add CLAUDE.md review directive to all agent configurations\nUsage: python add_claude_md_directive.py\nRequirements: json module (built-in)",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/check_requirements.py",
      "relative_path": "scripts/utils/check_requirements.py",
      "name": "check_requirements.py",
      "size": 4924,
      "lines": 143,
      "hash": "29deade2af48042eb08ac6168d84fe05",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "check_requirements_files",
        "parse_requirements",
        "suggest_consolidation",
        "main"
      ],
      "description": "Check and validate requirements files\nPart of CLAUDE.md hygiene enforcement",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/requirements_analyzer.py",
      "relative_path": "scripts/utils/requirements_analyzer.py",
      "name": "requirements_analyzer.py",
      "size": 16031,
      "lines": 380,
      "hash": "e111e91cb08a761081fd081893bc31af",
      "category": [
        "maintenance",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "requests",
        "json",
        "datetime",
        "re",
        "typing",
        "pathlib",
        "os",
        "collections"
      ],
      "functions": [
        "class:RequirementsAnalyzer",
        "parse_requirements_txt",
        "find_requirements_files",
        "generate_report",
        "find_version_conflicts",
        "analyze_files",
        "__init__",
        "check_security_issues",
        "find_duplicate_files",
        "main",
        "check_outdated_packages",
        "parse_pyproject_toml"
      ],
      "description": "Requirements Analysis Tool for SutazAI Codebase\n\nAnalyzes all requirements files for version conflicts, security issues,\nand maintainability problems.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/check_banned_keywords.py",
      "relative_path": "scripts/utils/check_banned_keywords.py",
      "name": "check_banned_keywords.py",
      "size": 3059,
      "lines": 92,
      "hash": "3d5eb0f443e35880ba7923784a97a02b",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "sys",
        "re",
        "typing",
        "__future__",
        "pathlib"
      ],
      "functions": [
        "iter_files",
        "main"
      ],
      "description": "check_banned_keywords.py\n\nRule 1 enforcement: fail if banned conceptual terms appear in code or docs.\n\nExit codes:\n  0 -> OK\n  1 -> Found banned keywords\n  2 -> Error",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/generate_architecture_diagram.py",
      "relative_path": "scripts/utils/generate_architecture_diagram.py",
      "name": "generate_architecture_diagram.py",
      "size": 7446,
      "lines": 177,
      "hash": "93d58a9fa141ca9e4253ebe22bd8b97d",
      "category": [
        "monitoring",
        "utils",
        "automation"
      ],
      "imports": [
        "matplotlib.pyplot",
        "numpy",
        "matplotlib.patches"
      ],
      "functions": [
        "save_diagram",
        "create_architecture_diagram"
      ],
      "description": "Generate Architecture Diagram for SutazAI System\nCreates a visual representation of the system architecture",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/file_utils.py",
      "relative_path": "scripts/utils/file_utils.py",
      "name": "file_utils.py",
      "size": 571,
      "lines": 23,
      "hash": "22999ee8fdd8d59b6cf7a13a37a8ecdc",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "hashlib",
        "pathlib",
        "typing"
      ],
      "functions": [
        "calculate_checksum"
      ],
      "description": "Shared utilities for scripts to reduce duplication.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/logging_utils.py",
      "relative_path": "scripts/utils/logging_utils.py",
      "name": "logging_utils.py",
      "size": 788,
      "lines": 29,
      "hash": "14737708b7ae7adb995342017875a0ed",
      "category": [
        "utils"
      ],
      "imports": [
        "logging",
        "typing"
      ],
      "functions": [
        "setup_logging"
      ],
      "description": "Shared logging utilities to reduce duplication across scripts.",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/dependency_analyzer.py",
      "relative_path": "scripts/utils/dependency_analyzer.py",
      "name": "dependency_analyzer.py",
      "size": 18315,
      "lines": 424,
      "hash": "cc84a7acaab5b61b1db0cce572720176",
      "category": [
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "json",
        "collections",
        "re",
        "typing",
        "packaging",
        "logging",
        "pathlib",
        "subprocess"
      ],
      "functions": [
        "parse_requirements_file",
        "class:DependencyAnalyzer",
        "analyze_python_dependencies",
        "generate_report",
        "find_version_conflicts",
        "__init__",
        "analyze_environment_variables",
        "run_analysis",
        "analyze_docker_images",
        "generate_recommendations",
        "main",
        "check_security_vulnerabilities",
        "analyze_javascript_dependencies"
      ],
      "description": "Dependency Analysis Tool for SutazAI System\nAnalyzes Python dependencies, Docker images, and environment variables",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/docs_fix_all_issues.py",
      "relative_path": "scripts/utils/docs_fix_all_issues.py",
      "name": "docs_fix_all_issues.py",
      "size": 16363,
      "lines": 416,
      "hash": "ed0f13390b15fac39bb608274dad1276",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "docker",
        "asyncio",
        "time",
        "psutil",
        "requests",
        "sys",
        "json",
        "psycopg2",
        "typing",
        "pkg_resources",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:SutazAISystemFixer",
        "fix_docker_containers",
        "fix_python_dependencies",
        "fix_ollama_models",
        "fix_database_issues",
        "print_status",
        "fix_backend_issues",
        "__init__",
        "validate_api_endpoints",
        "generate_fix_script",
        "run_comprehensive_fix",
        "class:Colors",
        "fix_file_permissions",
        "check_system_requirements"
      ],
      "description": "SutazAI Comprehensive Bug Fix and Validation Script\nIdentifies and fixes all known issues in the system",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/static_discovery.py",
      "relative_path": "scripts/utils/static_discovery.py",
      "name": "static_discovery.py",
      "size": 7585,
      "lines": 231,
      "hash": "34001575f038d3ca48f566396ea7f110",
      "category": [
        "maintenance",
        "utils"
      ],
      "imports": [
        "json",
        "datetime",
        "re",
        "typing",
        "ast",
        "os",
        "hashlib"
      ],
      "functions": [
        "dfs_cycle",
        "ast_without_pos",
        "scan_python_file",
        "visit",
        "file_sha1",
        "hash_def",
        "main",
        "norm_module_from_path"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/scripts/utils/create-base-image-strategy.py",
      "relative_path": "scripts/utils/create-base-image-strategy.py",
      "name": "create-base-image-strategy.py",
      "size": 20657,
      "lines": 605,
      "hash": "f68dd2ab57c35d7a71a5d6cbd089cb04",
      "category": [
        "monitoring",
        "utils",
        "analysis"
      ],
      "imports": [
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "generate_rollback_plan",
        "class:BaseImageStrategy",
        "generate_optimized_dockerfiles",
        "_create_base_image_files",
        "estimate_savings",
        "__init__",
        "create_build_system",
        "create_requirements_hierarchy",
        "create_base_dockerfiles",
        "create_implementation_plan",
        "analyze_common_dependencies",
        "main",
        "execute_strategy"
      ],
      "description": "Purpose: Create shared base image strategy for SutazAI container optimization\nUsage: python create-base-image-strategy.py [--execute]\nRequirements: Python 3.8+, Docker\n\nCreates shared base images to r",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/scripts/models/ollama/update_agent_configs_to_gpt-oss.py",
      "relative_path": "scripts/models/ollama/update_agent_configs_to_gpt-oss.py",
      "name": "update_agent_configs_to_gpt-oss.py",
      "size": 2126,
      "lines": 58,
      "hash": "9fb98baeed9c2662a88fb33157b38681",
      "category": [
        "maintenance"
      ],
      "imports": [
        "json",
        "os",
        "glob"
      ],
      "functions": [
        "update_agent_configs"
      ],
      "description": "Update all agent Ollama configurations to use tinyllama model.",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/scripts/circuit-breaker.py",
      "relative_path": "self-healing/scripts/circuit-breaker.py",
      "name": "circuit-breaker.py",
      "size": 15232,
      "lines": 409,
      "hash": "b5b038d66dbf98f5325dcccf2d655a96",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "time",
        "enum",
        "yaml",
        "datetime",
        "json",
        "typing",
        "functools",
        "logging",
        "asyncio",
        "redis"
      ],
      "functions": [
        "get_status",
        "_open_circuit",
        "_parse_duration",
        "get_circuit_breaker",
        "_on_failure",
        "_save_state",
        "_get_metrics_key",
        "_close_circuit",
        "_on_success",
        "_init_circuit_breakers",
        "class:CircuitBreakerManager",
        "class:CircuitBreaker",
        "get_all_status",
        "_get_state_key",
        "call",
        "_update_metrics",
        "class:CircuitState",
        "_init_redis",
        "circuit_breaker",
        "decorator",
        "_load_state",
        "__init__",
        "_load_config",
        "reset_circuit",
        "wrapper"
      ],
      "description": "Circuit Breaker Implementation for SutazAI\nProvides automatic service protection and recovery",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/self-healing/scripts/predictive-monitoring.py",
      "relative_path": "self-healing/scripts/predictive-monitoring.py",
      "name": "predictive-monitoring.py",
      "size": 23001,
      "lines": 586,
      "hash": "7d0ecc867e481d268976f538a0574271",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "numpy",
        "psutil",
        "requests",
        "sklearn.preprocessing",
        "yaml",
        "json",
        "datetime",
        "pickle",
        "typing",
        "pandas",
        "logging",
        "sklearn.ensemble",
        "os",
        "redis",
        "prometheus_client"
      ],
      "functions": [
        "train_model",
        "predict_service_failure",
        "_get_historical_values",
        "store_metrics",
        "class:AnomalyDetector",
        "collect_container_metrics",
        "class:MetricsCollector",
        "_init_docker",
        "_process_alerts",
        "predict_resource_exhaustion",
        "run_monitoring_cycle",
        "class:PredictiveMonitor",
        "_init_redis",
        "detect_anomaly",
        "main",
        "train_models",
        "collect_system_metrics",
        "class:FailurePredictor",
        "__init__",
        "_get_container_history",
        "_load_config",
        "collect_service_metrics"
      ],
      "description": "Predictive Monitoring System for SutazAI\nDetects anomalies and predicts failures before they occur",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/self-healing/scripts/automated-recovery.py",
      "relative_path": "self-healing/scripts/automated-recovery.py",
      "name": "automated-recovery.py",
      "size": 19811,
      "lines": 551,
      "hash": "d37cbdeffdf698e5f3e1b6e10622bdb4",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "docker",
        "asyncio",
        "time",
        "psutil",
        "requests",
        "yaml",
        "sys",
        "json",
        "datetime",
        "gc",
        "psycopg2",
        "typing",
        "psycopg2.pool",
        "concurrent.futures",
        "logging",
        "os",
        "redis",
        "subprocess"
      ],
      "functions": [
        "get_recovery_status",
        "_check_database",
        "_init_recovery_actions",
        "_check_redis",
        "_check_disk_space",
        "class:AutomatedRecoveryManager",
        "__init__",
        "class:RecoveryAction",
        "class:HealthCheck",
        "is_healthy",
        "_init_clients",
        "_check_memory",
        "get_health_status",
        "_check_http_endpoint",
        "_load_config",
        "_check_docker_containers",
        "_init_health_checks"
      ],
      "description": "Automated Recovery System for SutazAI\nImplements self-diagnostic health checks and automatic remediation",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/self-healing/scripts/graceful-degradation.py",
      "relative_path": "self-healing/scripts/graceful-degradation.py",
      "name": "graceful-degradation.py",
      "size": 16050,
      "lines": 443,
      "hash": "d8a875d46c557de4948ab6b4fdf6f779",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "asyncio",
        "yaml",
        "json",
        "datetime",
        "typing",
        "functools",
        "logging",
        "os",
        "redis"
      ],
      "functions": [
        "_parse_duration",
        "is_feature_enabled",
        "_init_feature_flags",
        "class:FeatureFlag",
        "get_cache_strategy",
        "get_fallback_config",
        "is_enabled",
        "cache_on_failure",
        "get_all_features",
        "_init_cache_strategies",
        "class:CacheStrategy",
        "toggle_feature",
        "set",
        "class:GracefulDegradationManager",
        "_init_redis",
        "clear",
        "compute",
        "feature_flag",
        "get_fallback_strategy",
        "decorator",
        "__init__",
        "cache_with_fallback",
        "_load_config",
        "get",
        "wrapper"
      ],
      "description": "Graceful Degradation System for SutazAI\nManages feature flags and fallback mechanisms",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/self-healing/circuit-breaker/service_monitor.py",
      "relative_path": "self-healing/circuit-breaker/service_monitor.py",
      "name": "service_monitor.py",
      "size": 18501,
      "lines": 512,
      "hash": "094d74f3efea8fae9b34d083238e48fe",
      "category": [
        "monitoring",
        "security"
      ],
      "imports": [
        "docker",
        "time",
        "json",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "redis",
        "aiohttp",
        "circuit_breaker"
      ],
      "functions": [
        "class:SutazAIServiceMonitor",
        "stop_monitoring",
        "class:ServiceHealthAPI",
        "reset_all_circuit_breakers",
        "class:ServiceEndpoint",
        "get_circuit_breaker_stats",
        "__post_init__",
        "__init__",
        "_create_redis_client",
        "_initialize_service_configs"
      ],
      "description": "Service Monitor with Circuit Breaker Integration for SutazAI\n\nThis module monitors all SutazAI services and applies circuit breaker patterns\nto prevent cascading failures across the AI agent ecosystem",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/circuit-breaker/circuit_breaker.py",
      "relative_path": "self-healing/circuit-breaker/circuit_breaker.py",
      "name": "circuit_breaker.py",
      "size": 19516,
      "lines": 550,
      "hash": "a92ebcc62fbb4ec34539a8b3ee9b2d33",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "enum",
        "json",
        "threading",
        "typing",
        "logging",
        "dataclasses",
        "contextlib",
        "prometheus_client",
        "asyncio",
        "redis",
        "collections",
        "aiohttp"
      ],
      "functions": [
        "class:CircuitConfig",
        "reset_all",
        "sync_wrapper",
        "get_stats",
        "_load_state_from_redis",
        "get_circuit_breaker",
        "class:CircuitBreakerRegistry",
        "_calculate_failure_rate",
        "_record_failure",
        "class:HttpCircuitBreaker",
        "get_http_circuit_breaker",
        "class:CircuitBreaker",
        "_record_success",
        "_transition_to",
        "get_all_stats",
        "class:CircuitState",
        "circuit_breaker",
        "class:CircuitBreakerOpenError",
        "decorator",
        "_should_allow_request",
        "state",
        "class:CircuitBreakerMetrics",
        "__init__",
        "_save_state_to_redis"
      ],
      "description": "Circuit Breaker Pattern Implementation for SutazAI Self-Healing Architecture\n\nThis module implements the circuit breaker pattern to prevent cascading failures\nby monitoring service calls and automatic",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/graceful-degradation/fallback_handlers.py",
      "relative_path": "self-healing/graceful-degradation/fallback_handlers.py",
      "name": "fallback_handlers.py",
      "size": 23148,
      "lines": 634,
      "hash": "80de74a23bd333de2d9ee89ac7b407c9",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "aiofiles",
        "json",
        "pickle",
        "typing",
        "feature_flags",
        "sqlite3",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "hashlib"
      ],
      "functions": [
        "_get_cached_chat_completion",
        "_cache_chat_completion",
        "__init__",
        "class:SutazAIFallbackHandlers",
        "_generate_rule_based_response",
        "_register_fallback_strategies",
        "_init_local_cache",
        "get_cache_stats"
      ],
      "description": "Fallback Handlers for SutazAI Services\n\nThis module implements specific fallback handlers for different SutazAI services\nto ensure graceful degradation when primary services are unavailable.\n\nAuthor: ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/self-healing/graceful-degradation/feature_flags.py",
      "relative_path": "self-healing/graceful-degradation/feature_flags.py",
      "name": "feature_flags.py",
      "size": 22544,
      "lines": 589,
      "hash": "aed0b309ddc93be3afb62856c1193767",
      "category": [
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "enum",
        "json",
        "threading",
        "typing",
        "logging",
        "dataclasses",
        "contextlib",
        "asyncio",
        "redis",
        "collections",
        "random",
        "hashlib"
      ],
      "functions": [
        "class:FeatureState",
        "class:GracefulDegradation",
        "sync_wrapper",
        "_is_service_healthy",
        "update_flag",
        "class:DegradationLevel",
        "_cache_result",
        "_load_flags_from_redis",
        "class:FeatureFlag",
        "get_feature_status",
        "create_flag",
        "_notify_emergency_contacts",
        "is_enabled",
        "_save_flag_to_redis",
        "register_fallback",
        "class:FeatureFlagManager",
        "_get_cached_result",
        "class:FallbackStrategy",
        "_create_redis_client",
        "_initialize_default_flags",
        "feature_flag",
        "decorator",
        "get_degradation_level",
        "emergency_disable",
        "__init__",
        "_check_dependencies",
        "_check_strategy_requirements"
      ],
      "description": "Feature Flags and Graceful Degradation for SutazAI Self-Healing Architecture\n\nThis module implements feature flags and graceful degradation capabilities\nto maintain system functionality even when serv",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/workflows/scripts/workflow_manager.py",
      "relative_path": "workflows/scripts/workflow_manager.py",
      "name": "workflow_manager.py",
      "size": 21848,
      "lines": 557,
      "hash": "1cd4d9b2260d841fb07982fa78fec46f",
      "category": [
        "monitoring",
        "automation"
      ],
      "imports": [
        "asyncio",
        "time",
        "enum",
        "uuid",
        "yaml",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "os",
        "redis",
        "aiohttp"
      ],
      "functions": [
        "get_template_by_id",
        "class:WorkflowExecution",
        "class:TaskPriority",
        "__post_init__",
        "__init__",
        "get_workflow_status",
        "class:WorkflowTask",
        "class:WorkflowStatus",
        "load_configurations",
        "class:DifyWorkflowManager"
      ],
      "description": "Dify Workflow Manager for SutazAI automation System\nManages workflow execution, monitoring, and optimization",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/workflows/scripts/deploy_dify_workflows.py",
      "relative_path": "workflows/scripts/deploy_dify_workflows.py",
      "name": "deploy_dify_workflows.py",
      "size": 29341,
      "lines": 751,
      "hash": "cba29454be2cdea82a0f571d85e3fb47",
      "category": [
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "time",
        "requests",
        "yaml",
        "sys",
        "json",
        "socket",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "configure_agent_integration",
        "check_monitoring_setup",
        "check_prerequisites",
        "update_docker_compose",
        "validate_deployment",
        "store_template_in_db",
        "load_configurations",
        "class:DifyWorkflowDeployer",
        "check_database_schema",
        "setup_monitoring_dashboards",
        "check_agent_integration",
        "deploy_workflow_templates",
        "check_workflow_templates",
        "main",
        "__init__",
        "print_deployment_summary",
        "create_deployment_dockerfiles",
        "setup_dify_database",
        "deploy",
        "deploy_automation_scripts"
      ],
      "description": "Dify Workflow Deployment Script for SutazAI automation System\nDeploys and configures Dify workflows with full agent integration",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/deployment/monitoring/agent-monitor/monitor.py",
      "relative_path": "deployment/monitoring/agent-monitor/monitor.py",
      "name": "monitor.py",
      "size": 38829,
      "lines": 848,
      "hash": "c8dd2bb9beab12f6cd3c63af19056afe",
      "category": [
        "monitoring",
        "deployment",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "fastapi.middleware.cors",
        "json",
        "threading",
        "logging",
        "typing",
        "signal",
        "fastapi.responses",
        "uvicorn",
        "psutil",
        "sys",
        "prometheus_client",
        "os",
        "fastapi",
        "docker",
        "schedule",
        "time",
        "requests",
        "datetime",
        "asyncio",
        "redis"
      ],
      "functions": [
        "scheduled_report_generation",
        "run_scheduler",
        "setup_routes",
        "_generate_recommendations",
        "signal_handler",
        "__init__",
        "_get_container_uptime",
        "setup_middleware",
        "class:SutazAIAgentMonitor",
        "_calculate_health_score",
        "get_dashboard_html"
      ],
      "description": "SutazAI Comprehensive Agent Monitoring Service\nReal-time monitoring and analysis of 46+ AI agents",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/deployment/autoscaling/swarm/swarm-autoscaler.py",
      "relative_path": "deployment/autoscaling/swarm/swarm-autoscaler.py",
      "name": "swarm-autoscaler.py",
      "size": 17964,
      "lines": 435,
      "hash": "d5214acc97e0ee61b10e53a22027c375",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "automation"
      ],
      "imports": [
        "docker",
        "time",
        "os",
        "datetime",
        "typing",
        "logging",
        "prometheus_client.parser",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "determine_scale_action",
        "can_scale_service",
        "get_service_replicas",
        "__init__",
        "get_service_health",
        "class:SwarmAutoscaler"
      ],
      "description": "Docker Swarm Auto-scaler for SutazAI\nAutomatically scales services based on CPU, memory, and custom metrics",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/data-analysis-engineer/app.py",
      "relative_path": "docker/data-analysis-engineer/app.py",
      "name": "app.py",
      "size": 6923,
      "lines": 219,
      "hash": "046639107cc2ac22829f0a80e23ff8e3",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "pydantic",
        "loguru",
        "fastapi.responses",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:TaskResponse",
        "class:TaskRequest"
      ],
      "description": "Configuration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/observability-monitoring-engineer/app.py",
      "relative_path": "docker/observability-monitoring-engineer/app.py",
      "name": "app.py",
      "size": 1339,
      "lines": 52,
      "hash": "7cf8bd72f49fa75d00abba1975e5b762",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "logging",
        "os",
        "flask"
      ],
      "functions": [
        "status",
        "root",
        "health"
      ],
      "description": "observability-monitoring-engineer Service\nBasic Flask service implementation with health endpoints",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/agentzero/agentzero_service.py",
      "relative_path": "docker/agentzero/agentzero_service.py",
      "name": "agentzero_service.py",
      "size": 978,
      "lines": 38,
      "hash": "dc58e9c6ab78e88085470331913e586f",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "uvicorn",
        "pydantic",
        "os"
      ],
      "functions": [
        "class:AgentResponse",
        "class:AgentRequest"
      ],
      "description": "AgentZero Service - Local AI Agent",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/agentzero/app.py",
      "relative_path": "docker/agentzero/app.py",
      "name": "app.py",
      "size": 1217,
      "lines": 51,
      "hash": "b94e139c88905f9a0677944265553ee2",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "logging",
        "os",
        "flask"
      ],
      "functions": [
        "status",
        "root",
        "health"
      ],
      "description": "AgentZero Service\nBasic Flask service implementation with health endpoints",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/hygiene-backend/app.py",
      "relative_path": "docker/hygiene-backend/app.py",
      "name": "app.py",
      "size": 1249,
      "lines": 52,
      "hash": "d9a9e1ff48f7b7665935967d3afa28e2",
      "category": [
        "monitoring",
        "testing",
        "maintenance"
      ],
      "imports": [
        "logging",
        "os",
        "flask"
      ],
      "functions": [
        "status",
        "root",
        "health"
      ],
      "description": "hygiene-backend Service\nBasic Flask service implementation with health endpoints",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/python-agent-base/health_check.py",
      "relative_path": "docker/python-agent-base/health_check.py",
      "name": "health_check.py",
      "size": 220,
      "lines": 11,
      "hash": "cbd9d910cb72adeffcdf7de37d0d5109",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "fastapi",
        "typing"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/agent-message-bus/app.py",
      "relative_path": "docker/agent-message-bus/app.py",
      "name": "app.py",
      "size": 1259,
      "lines": 52,
      "hash": "03c95a0077fc61d10a030fb5b340410f",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "logging",
        "os",
        "flask"
      ],
      "functions": [
        "status",
        "root",
        "health"
      ],
      "description": "agent-message-bus Service\nBasic Flask service implementation with health endpoints",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/fsdp/fsdp_service.py",
      "relative_path": "docker/fsdp/fsdp_service.py",
      "name": "fsdp_service.py",
      "size": 8190,
      "lines": 238,
      "hash": "e9d9d40b855810e7f9d6811bdab33055",
      "category": [
        "automation"
      ],
      "imports": [
        "transformers",
        "fastapi",
        "torch.distributed.fsdp",
        "os",
        "torch.distributed",
        "torch",
        "typing",
        "pydantic",
        "logging",
        "uvicorn"
      ],
      "functions": [
        "class:TrainingRequest",
        "class:TrainingConfig",
        "class:ModelInfo"
      ],
      "description": "FSDP (Fully Sharded Data Parallel) Service\nProvides distributed training capabilities using PyTorch FSDP",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/fsdp/app.py",
      "relative_path": "docker/fsdp/app.py",
      "name": "app.py",
      "size": 167,
      "lines": 7,
      "hash": "417e64a69e08c2130b7c144839c0aa84",
      "category": [
        "misc"
      ],
      "imports": [
        "fsdp_service",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/awesome-code-ai/awesome_code_service.py",
      "relative_path": "docker/awesome-code-ai/awesome_code_service.py",
      "name": "awesome_code_service.py",
      "size": 5926,
      "lines": 199,
      "hash": "5aa6938e0769aadc2826c974a47f8996",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "code_ai_manager",
        "fastapi",
        "time",
        "os",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:ToolExecutionRequest",
        "class:CodeGenerationRequest",
        "class:CodeAnalysisRequest"
      ],
      "description": "Awesome Code AI Integration Service for SutazAI\nProvides access to the curated collection of AI code tools and models",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/awesome-code-ai/app.py",
      "relative_path": "docker/awesome-code-ai/app.py",
      "name": "app.py",
      "size": 175,
      "lines": 7,
      "hash": "ff3377ce9e1dd52758fbe18c0464cf92",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "uvicorn",
        "awesome_code_service"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/awesome-code-ai/code_ai_manager.py",
      "relative_path": "docker/awesome-code-ai/code_ai_manager.py",
      "name": "code_ai_manager.py",
      "size": 12573,
      "lines": 312,
      "hash": "bc2fa15d3a78d8e0ed039d6a4339a8b8",
      "category": [
        "utils"
      ],
      "imports": [
        "time",
        "os",
        "json",
        "typing",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "get_available_tools",
        "__init__",
        "get_available_models",
        "class:CodeAIManager",
        "get_stats",
        "get_tool_info"
      ],
      "description": "Code AI Manager for Awesome Code AI Integration\nManages AI code tools and models from the awesome-code-ai collection",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/self-healing/app.py",
      "relative_path": "docker/self-healing/app.py",
      "name": "app.py",
      "size": 1234,
      "lines": 52,
      "hash": "393bdb807bb44b15b0eef5b2a8b8cd90",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "logging",
        "os",
        "flask"
      ],
      "functions": [
        "status",
        "root",
        "health"
      ],
      "description": "self-healing Service\nBasic Flask service implementation with health endpoints",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/health-check/health_check.py",
      "relative_path": "docker/health-check/health_check.py",
      "name": "health_check.py",
      "size": 6977,
      "lines": 171,
      "hash": "3a55ed8863e503172ad1334a424689a2",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "datetime",
        "typing",
        "logging",
        "os"
      ],
      "functions": [
        "run",
        "__init__",
        "class:HealthChecker",
        "check_service_health",
        "restart_unhealthy_services",
        "check_all_services"
      ],
      "description": "SutazAI Health Check Service\nMonitors all services and provides health status",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/context-framework/app.py",
      "relative_path": "docker/context-framework/app.py",
      "name": "app.py",
      "size": 337,
      "lines": 16,
      "hash": "b3cd5cba12fa5f7749b1a410591ad2a5",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "uvicorn"
      ],
      "functions": [
        "root",
        "health"
      ],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/browser-use/browser_use_server.py",
      "relative_path": "docker/browser-use/browser_use_server.py",
      "name": "browser_use_server.py",
      "size": 9041,
      "lines": 262,
      "hash": "7b1ba93a22345a9d4891654e29937169",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "selenium.webdriver.support.ui",
        "os",
        "selenium.webdriver.common.by",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "selenium.webdriver.chrome.service",
        "selenium.webdriver.chrome.options",
        "selenium.webdriver.support",
        "asyncio",
        "bs4",
        "selenium"
      ],
      "functions": [
        "get_driver",
        "close_driver",
        "_execute_sync_task",
        "class:BrowserTaskRequest",
        "__init__",
        "class:BrowserUseServer",
        "setup_browser_options"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/resource-arbitration-agent/app.py",
      "relative_path": "docker/resource-arbitration-agent/app.py",
      "name": "app.py",
      "size": 18207,
      "lines": 460,
      "hash": "ee2d1d1375383e3ecd0b0f39a5e68819",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "logging",
        "contextlib",
        "asyncio"
      ],
      "functions": [
        "class:ResourceRequest",
        "class:ResourceArbitrationAgent",
        "class:SystemResources",
        "__init__",
        "class:ResourceAllocation"
      ],
      "description": "Resource Arbitration Agent - Manages resource allocation across agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/finrobot/finrobot_service.py",
      "relative_path": "docker/finrobot/finrobot_service.py",
      "name": "finrobot_service.py",
      "size": 17689,
      "lines": 443,
      "hash": "9611257ec638b07faed235fb84a8ab8e",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "alpha_vantage.fundamentaldata",
        "fastapi.middleware.cors",
        "yfinance",
        "pydantic",
        "logging",
        "alpha_vantage.timeseries",
        "typing",
        "sklearn.ensemble",
        "uvicorn",
        "ta",
        "sklearn.model_selection",
        "fastapi",
        "ta.utils",
        "numpy",
        "requests",
        "sklearn.preprocessing",
        "datetime",
        "pandas",
        "xgboost",
        "asyncio"
      ],
      "functions": [
        "class:PortfolioRequest",
        "__init__",
        "class:FinancialAnalyzer",
        "class:AnalysisRequest",
        "_generate_technical_signals",
        "class:StockRequest"
      ],
      "description": "FinRobot Financial Analysis Service for SutazAI\nAdvanced financial data analysis and AI-powered insights",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/finrobot/app.py",
      "relative_path": "docker/finrobot/app.py",
      "name": "app.py",
      "size": 171,
      "lines": 7,
      "hash": "be34fa7bef23551e782d6df75e069b25",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "uvicorn",
        "finrobot_service"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/privategpt/privategpt_service.py",
      "relative_path": "docker/privategpt/privategpt_service.py",
      "name": "privategpt_service.py",
      "size": 8677,
      "lines": 262,
      "hash": "f6c5e8ec6bede1a2fe8035766eff87ab",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "time",
        "os",
        "sentence_transformers",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "qdrant_client",
        "asyncio"
      ],
      "functions": [
        "get_chat_history",
        "class:DocumentRequest",
        "__init__",
        "class:ChatRequest",
        "class:PrivateGPTManager",
        "get_documents"
      ],
      "description": "PrivateGPT Service for SutazAI\nProvides private document processing and chat capabilities",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/privategpt/app.py",
      "relative_path": "docker/privategpt/app.py",
      "name": "app.py",
      "size": 173,
      "lines": 7,
      "hash": "c6aceb0c41d169aac4d1f60fb4114bbc",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "privategpt_service",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/pentestgpt/main.py",
      "relative_path": "docker/pentestgpt/main.py",
      "name": "main.py",
      "size": 1969,
      "lines": 63,
      "hash": "76289259fa4c34aac44d299e9798d669",
      "category": [
        "testing"
      ],
      "imports": [
        "os",
        "json",
        "typing",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "run",
        "class:PentestgptAgent",
        "__init__"
      ],
      "description": "pentestgpt Agent Implementation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/crewai/crewai_service.py",
      "relative_path": "docker/crewai/crewai_service.py",
      "name": "crewai_service.py",
      "size": 7388,
      "lines": 212,
      "hash": "ae6e274c37801d2f3be81847c06c5ae4",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "time",
        "requests",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "os",
        "crewai"
      ],
      "functions": [
        "class:CrewResponse",
        "create_tasks",
        "execute_crew",
        "__init__",
        "class:CrewManager",
        "class:CrewRequest",
        "create_agents",
        "class:TaskConfig",
        "class:AgentConfig"
      ],
      "description": "CrewAI Service for SutazAI\nProvides multi-agent collaboration capabilities",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/crewai/app.py",
      "relative_path": "docker/crewai/app.py",
      "name": "app.py",
      "size": 169,
      "lines": 7,
      "hash": "171da84db41a0b1dffa847a948444759",
      "category": [
        "misc"
      ],
      "imports": [
        "crewai_service",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/hygiene-scanner/hygiene_scanner.py",
      "relative_path": "docker/hygiene-scanner/hygiene_scanner.py",
      "name": "hygiene_scanner.py",
      "size": 17625,
      "lines": 424,
      "hash": "7c30b5d82e131f3fd21e69151df37242",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "analysis"
      ],
      "imports": [
        "tabulate",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "re",
        "git",
        "typing",
        "rich.console",
        "rich.table",
        "logging",
        "pathlib",
        "os",
        "rich.progress"
      ],
      "functions": [
        "class:HygieneScanner",
        "_check_structure_compliance",
        "_generate_summary",
        "_print_summary",
        "_check_forbidden_patterns",
        "_load_rules",
        "__init__",
        "save_report",
        "_generate_html_report",
        "_check_naming_conventions",
        "scan",
        "main",
        "_check_duplicates",
        "_get_default_rules"
      ],
      "description": "Standalone Hygiene Scanner\nA lightweight, on-demand scanner for codebase hygiene validation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/test-build/app.py",
      "relative_path": "docker/test-build/app.py",
      "name": "app.py",
      "size": 32,
      "lines": 1,
      "hash": "13ad40bebdf489f3df0b9f322894cbf4",
      "category": [
        "testing"
      ],
      "imports": [],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/llamaindex/app.py",
      "relative_path": "docker/llamaindex/app.py",
      "name": "app.py",
      "size": 173,
      "lines": 7,
      "hash": "99262ebf95a986133f62c2e61194c158",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "uvicorn",
        "llamaindex_service"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/llamaindex/llamaindex_service.py",
      "relative_path": "docker/llamaindex/llamaindex_service.py",
      "name": "llamaindex_service.py",
      "size": 6861,
      "lines": 222,
      "hash": "6ebda4c2fd837b60f35d3b544f7c0685",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "requests",
        "datetime",
        "typing",
        "pydantic",
        "logging",
        "asyncio"
      ],
      "functions": [
        "class:LlamaIndexService",
        "class:DocumentRequest",
        "__init__",
        "class:QueryRequest"
      ],
      "description": "LlamaIndex Service for SutazAI\nProvides document indexing and retrieval",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/context-engineering/context_engine.py",
      "relative_path": "docker/context-engineering/context_engine.py",
      "name": "context_engine.py",
      "size": 5844,
      "lines": 149,
      "hash": "bff3febeb7fa7668839343dfabdf0269",
      "category": [
        "misc"
      ],
      "imports": [
        "transformers",
        "fastapi",
        "numpy",
        "torch",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "os"
      ],
      "functions": [
        "get_context_templates",
        "class:ContextRequest",
        "create_context_vectors",
        "class:ContextEngine",
        "__init__",
        "get_stats",
        "calculate_relevance_score",
        "class:ContextResponse",
        "extract_key_sentences",
        "health",
        "update_context_template"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/context-engineering/health_check.py",
      "relative_path": "docker/context-engineering/health_check.py",
      "name": "health_check.py",
      "size": 338,
      "lines": 17,
      "hash": "0d3d5a82511f76d42c566ec024ca08f5",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "sys",
        "requests"
      ],
      "functions": [
        "check_health"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/hygiene-validator/rule_validator.py",
      "relative_path": "docker/hygiene-validator/rule_validator.py",
      "name": "rule_validator.py",
      "size": 8336,
      "lines": 236,
      "hash": "2920f90188ad8a73f3ed3a453106bc0c",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "argparse",
        "sys",
        "json",
        "datetime",
        "re",
        "rich.console",
        "typing",
        "rich.table",
        "pathlib",
        "os"
      ],
      "functions": [
        "_validate_rule",
        "_check_no_fantasy_elements",
        "_print_summary",
        "class:RuleValidator",
        "validate_all",
        "_parse_claude_rules",
        "_check_centralized_structure",
        "__init__",
        "save_report",
        "_extract_checks",
        "_check_compliance",
        "main"
      ],
      "description": "Rule Validator - Validates CLAUDE.md rules compliance",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/langchain-agents/langchain_agent_server.py",
      "relative_path": "docker/langchain-agents/langchain_agent_server.py",
      "name": "langchain_agent_server.py",
      "size": 9496,
      "lines": 277,
      "hash": "65fd98d3ccda880e47a94f1e75ce345b",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "fastapi",
        "langchain.agents",
        "os",
        "langchain_community.tools",
        "re",
        "langchain.chains",
        "typing",
        "langchain.llms",
        "pydantic",
        "uvicorn",
        "ast",
        "langchain.tools",
        "logging",
        "operator",
        "asyncio",
        "langchain.prompts"
      ],
      "functions": [
        "create_general_agent",
        "class:LangChainAgentServer",
        "class:TaskRequest",
        "create_task_planner_agent",
        "setup_agents",
        "safe_calculate",
        "create_code_helper_agent",
        "__init__",
        "create_researcher_agent",
        "evaluate_node"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/adapters/adapter.py",
      "relative_path": "docker/adapters/adapter.py",
      "name": "adapter.py",
      "size": 9816,
      "lines": 261,
      "hash": "6192742f8f238648ec68b2560d65f97c",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "os",
        "yaml",
        "json",
        "datetime",
        "typing",
        "structlog",
        "tenacity",
        "logging",
        "prometheus_client",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "__init__",
        "_load_config",
        "class:ServiceAdapter",
        "_setup_routes"
      ],
      "description": "Universal Service Adapter for SutazAI External Integration\nProvides proxy, monitoring, and protocol translation capabilities",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/knowledge-manager/knowledge_manager.py",
      "relative_path": "docker/knowledge-manager/knowledge_manager.py",
      "name": "knowledge_manager.py",
      "size": 26319,
      "lines": 757,
      "hash": "7783a47defec7dc4bfed59eb4a718ce0",
      "category": [
        "monitoring",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "transformers",
        "fastapi.middleware.cors",
        "json",
        "neo4j",
        "networkx",
        "pydantic",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "uvicorn",
        "dataclasses",
        "os",
        "collections",
        "aiohttp",
        "fastapi",
        "numpy",
        "datetime",
        "elasticsearch",
        "spacy",
        "sklearn.metrics.pairwise",
        "asyncio"
      ],
      "functions": [
        "class:RelationshipRequest",
        "_map_entity_type",
        "class:TextProcessRequest",
        "to_dict",
        "class:EntityRequest",
        "class:SemanticMemory",
        "class:KnowledgeManager",
        "__init__",
        "class:EntityType",
        "_calculate_importance",
        "_calculate_similarity",
        "class:RelationType",
        "_merge_memories",
        "class:QueryRequest",
        "class:Relationship",
        "class:KnowledgeGraph",
        "class:Entity"
      ],
      "description": "Knowledge Manager for SutazAI automation/advanced automation System\nManages knowledge graphs, semantic relationships, and information retrieval",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/document-knowledge-manager/app.py",
      "relative_path": "docker/document-knowledge-manager/app.py",
      "name": "app.py",
      "size": 7067,
      "lines": 220,
      "hash": "48b5c5459b04ec96a15e26ae0fd8371f",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "pydantic",
        "loguru",
        "fastapi.responses",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:TaskResponse",
        "class:TaskRequest"
      ],
      "description": "Configuration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/task-assignment-coordinator/app.py",
      "relative_path": "docker/task-assignment-coordinator/app.py",
      "name": "app.py",
      "size": 26015,
      "lines": 612,
      "hash": "2b33f32d498b252b8482e3dce7d7ccba",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "logging",
        "contextlib",
        "asyncio",
        "hashlib"
      ],
      "functions": [
        "weighted_round_robin_selection",
        "least_loaded_selection",
        "class:TaskAssignment",
        "__init__",
        "performance_based_selection",
        "class:AgentCapability",
        "estimate_assignment_time",
        "class:TaskAssignmentCoordinator",
        "class:Task"
      ],
      "description": "Task Assignment Coordinator - Distributes tasks to agents based on capabilities and load",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/deep-local-brain-builder/app.py",
      "relative_path": "docker/deep-local-brain-builder/app.py",
      "name": "app.py",
      "size": 7024,
      "lines": 219,
      "hash": "9bdb46b53910f8f8ae814f1ddc0192b9",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "pydantic",
        "loguru",
        "fastapi.responses",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:TaskResponse",
        "class:TaskRequest"
      ],
      "description": "Configuration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/agentzero-coordinator/app.py",
      "relative_path": "docker/agentzero-coordinator/app.py",
      "name": "app.py",
      "size": 19734,
      "lines": 504,
      "hash": "967e5306870984cd920063d569e2be5c",
      "category": [
        "monitoring",
        "deployment",
        "utils"
      ],
      "imports": [
        "docker",
        "fastapi",
        "httpx",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "logging",
        "ollama",
        "contextlib",
        "asyncio"
      ],
      "functions": [
        "calculate_health_score",
        "__init__",
        "class:AgentCommand",
        "class:AgentZeroCoordinator",
        "class:SystemStatus",
        "class:EmergencyAction"
      ],
      "description": "AgentZero Coordinator - Master orchestration agent for SUTAZAIAPP",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/service-hub/service_hub.py",
      "relative_path": "docker/service-hub/service_hub.py",
      "name": "service_hub.py",
      "size": 16100,
      "lines": 431,
      "hash": "1cec927a4a1e6f21f9a447c491f93f81",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "os",
        "json",
        "datetime",
        "typing",
        "pydantic",
        "logging",
        "asyncio",
        "redis"
      ],
      "functions": [
        "find_consensus",
        "__init__",
        "class:ServiceRegistry",
        "summarize_results",
        "class:OrchestrationRequest",
        "class:ServiceRequest"
      ],
      "description": "Configure logging",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/service-hub/app.py",
      "relative_path": "docker/service-hub/app.py",
      "name": "app.py",
      "size": 166,
      "lines": 7,
      "hash": "623bf8d6b3fb7c18cfec128a6e259d9b",
      "category": [
        "misc"
      ],
      "imports": [
        "service_hub",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/documind/documind_service.py",
      "relative_path": "docker/documind/documind_service.py",
      "name": "documind_service.py",
      "size": 11420,
      "lines": 324,
      "hash": "9cb97cf0e1e718464df34bb1dd1c23d5",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "PyPDF2",
        "pytesseract",
        "aiofiles",
        "pdf2image",
        "uvicorn",
        "typing",
        "bs4",
        "pydantic",
        "pandas",
        "docx",
        "logging",
        "pathlib",
        "markdown",
        "tempfile",
        "os",
        "PIL"
      ],
      "functions": [
        "class:DocumentResponse",
        "class:DocumentProcessor",
        "__init__"
      ],
      "description": "DocuMind Document Processing Service for SutazAI\nHandles PDF, DOCX, TXT, and other document formats",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/faiss/faiss_service.py",
      "relative_path": "docker/faiss/faiss_service.py",
      "name": "faiss_service.py",
      "size": 2704,
      "lines": 98,
      "hash": "48137b5b530b86d05005371f535171ec",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "numpy",
        "os",
        "typing",
        "pydantic",
        "faiss",
        "uvicorn"
      ],
      "functions": [
        "class:AddVectorsResponse",
        "class:SearchResponse",
        "class:CreateIndexRequest",
        "class:CreateIndexResponse",
        "class:SearchRequest",
        "class:HealthResponse",
        "class:AddVectorsRequest"
      ],
      "description": "Global index storage",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/faiss/health_check.py",
      "relative_path": "docker/faiss/health_check.py",
      "name": "health_check.py",
      "size": 996,
      "lines": 31,
      "hash": "d6f99e146a090c6ce5f6b08b18875ebf",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "urllib.request",
        "sys",
        "urllib.error",
        "json"
      ],
      "functions": [
        "check_health"
      ],
      "description": "Health check script for FAISS service",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/autogpt-real/agent.py",
      "relative_path": "docker/autogpt-real/agent.py",
      "name": "agent.py",
      "size": 14083,
      "lines": 405,
      "hash": "42b27910f48f15549a32f7b3626c366f",
      "category": [
        "automation"
      ],
      "imports": [
        "fastapi",
        "requests",
        "os",
        "json",
        "datetime",
        "re",
        "typing",
        "pydantic",
        "logging",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "class:AgentResponse",
        "class:AutoGPTAgent",
        "class:TaskRequest",
        "__init__"
      ],
      "description": "Real AutoGPT-like Agent for SutazAI\nProvides task automation, web browsing, file operations, and code execution",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/ollama-monitor/monitor.py",
      "relative_path": "docker/ollama-monitor/monitor.py",
      "name": "monitor.py",
      "size": 16800,
      "lines": 409,
      "hash": "c8795603ed02fe35c25b32ff598f65e2",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "docker",
        "fastapi",
        "time",
        "psutil",
        "os",
        "requests",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "fastapi.staticfiles",
        "pydantic",
        "logging",
        "fastapi.responses",
        "prometheus_client",
        "asyncio"
      ],
      "functions": [
        "_parse_targets",
        "_generate_dashboard_html",
        "setup_routes",
        "class:ClusterMonitor",
        "__init__",
        "class:OllamaInstance",
        "_update_cluster_stats"
      ],
      "description": "Ollama Cluster Monitor\nHigh-performance monitoring for Ollama clusters handling 174+ concurrent consumers\n\nThis monitor tracks:\n- Instance health and availability\n- Request queues and response times\n-",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/shellgpt/app.py",
      "relative_path": "docker/shellgpt/app.py",
      "name": "app.py",
      "size": 319,
      "lines": 16,
      "hash": "715adffbfe60e2ec4d603a3a769e4f2a",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "uvicorn"
      ],
      "functions": [
        "root",
        "health"
      ],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/semgrep/main.py",
      "relative_path": "docker/semgrep/main.py",
      "name": "main.py",
      "size": 1948,
      "lines": 63,
      "hash": "1bb2b26d931a0d4aada332243d72b08a",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "json",
        "typing",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "run",
        "class:SemgrepAgent",
        "__init__"
      ],
      "description": "semgrep Agent Implementation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/multi-agent-coordinator/app.py",
      "relative_path": "docker/multi-agent-coordinator/app.py",
      "name": "app.py",
      "size": 14499,
      "lines": 386,
      "hash": "a77dc8278335f88a1fcad1ae178a3075",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "logging",
        "contextlib",
        "asyncio"
      ],
      "functions": [
        "class:MultiAgentCoordinator",
        "__init__",
        "class:AgentStatus",
        "class:AgentTask",
        "class:WorkflowRequest"
      ],
      "description": "Multi-Agent Coordinator - Orchestrates workflows between multiple agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/jax/web_interface.py",
      "relative_path": "docker/jax/web_interface.py",
      "name": "web_interface.py",
      "size": 4254,
      "lines": 129,
      "hash": "9154326be82d365d02272fca1ae395f4",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "optax",
        "typing",
        "pydantic",
        "logging",
        "jax",
        "jax.numpy",
        "flax",
        "uvicorn"
      ],
      "functions": [
        "class:TrainingRequest",
        "loss_fn",
        "class:MatrixRequest"
      ],
      "description": "JAX Web Interface Service\nProvides a FastAPI web interface for JAX machine learning operations",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/health-monitor/main.py",
      "relative_path": "docker/health-monitor/main.py",
      "name": "main.py",
      "size": 1996,
      "lines": 63,
      "hash": "e1fa8c39b6da36124168addcb9037195",
      "category": [
        "monitoring"
      ],
      "imports": [
        "os",
        "json",
        "typing",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "__init__",
        "run",
        "class:HealthMonitorAgent"
      ],
      "description": "health-monitor Agent Implementation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/health-monitor/app.py",
      "relative_path": "docker/health-monitor/app.py",
      "name": "app.py",
      "size": 2127,
      "lines": 74,
      "hash": "8f4c0cb78c003090fd865bb6d9b189a2",
      "category": [
        "monitoring"
      ],
      "imports": [
        "docker",
        "fastapi",
        "time",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "os"
      ],
      "functions": [
        "get_container_health",
        "class:HealthResponse",
        "class:ContainerInfo",
        "class:MetricsResponse"
      ],
      "description": "Health Monitor Service for SutazAI - Migrated to FastAPI",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/autogen/autogen_service.py",
      "relative_path": "docker/autogen/autogen_service.py",
      "name": "autogen_service.py",
      "size": 1914,
      "lines": 67,
      "hash": "758a8d5e176512743f2929096aeebcab",
      "category": [
        "testing"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "json",
        "typing",
        "pydantic",
        "autogen",
        "asyncio"
      ],
      "functions": [
        "class:TaskRequest",
        "class:OllamaClient",
        "class:TaskResponse",
        "__init__",
        "get_llm_config"
      ],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/autogen/autogen_agent_server.py",
      "relative_path": "docker/autogen/autogen_agent_server.py",
      "name": "autogen_agent_server.py",
      "size": 7886,
      "lines": 226,
      "hash": "0e14ac7901ed75ec773140fc6d7903ed",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "os",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "autogen.agentchat.groupchat",
        "autogen",
        "asyncio",
        "autogen.agentchat.group_chat_manager"
      ],
      "functions": [
        "class:AutoGenAgentServer",
        "setup_agents",
        "class:TaskRequest",
        "__init__"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/autogen/app.py",
      "relative_path": "docker/autogen/app.py",
      "name": "app.py",
      "size": 170,
      "lines": 7,
      "hash": "9ad0a1ee494a1bd8977728fa463df855",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "uvicorn",
        "autogen_service"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/fms-fsdp/fsdp_service.py",
      "relative_path": "docker/fms-fsdp/fsdp_service.py",
      "name": "fsdp_service.py",
      "size": 7003,
      "lines": 193,
      "hash": "62d016fb83cd6ac09041590a19e389d9",
      "category": [
        "misc"
      ],
      "imports": [
        "transformers",
        "fastapi",
        "torch.distributed.fsdp",
        "time",
        "psutil",
        "torch.distributed",
        "torch",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "torch.distributed.fsdp.wrap",
        "logging",
        "os"
      ],
      "functions": [
        "class:FSDPRequest",
        "list_loaded_models",
        "__init__",
        "class:FSDPResponse",
        "class:FSDPManager",
        "get_stats",
        "load_model",
        "get_memory_usage",
        "get_memory_stats",
        "unload_model",
        "health",
        "process_text",
        "wrap_model_with_fsdp"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/localagi/localagi_service.py",
      "relative_path": "docker/localagi/localagi_service.py",
      "name": "localagi_service.py",
      "size": 3480,
      "lines": 109,
      "hash": "69f8d5ec36004e3d7ee7bc1575afa2b9",
      "category": [
        "automation"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "time",
        "uuid",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "os"
      ],
      "functions": [
        "class:TaskRequest",
        "class:TaskResponse",
        "__init__",
        "get_stats",
        "class:LocalAGIManager",
        "get_task",
        "list_tasks",
        "health"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/edge-computing-optimizer/app.py",
      "relative_path": "docker/edge-computing-optimizer/app.py",
      "name": "app.py",
      "size": 6704,
      "lines": 213,
      "hash": "09773660a908395b21ecf0c623f848a5",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "time",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "pydantic",
        "loguru",
        "fastapi.responses",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:TaskResponse",
        "class:TaskRequest"
      ],
      "description": "Configuration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/enhanced-model-manager/gpt_oss_integration.py",
      "relative_path": "docker/enhanced-model-manager/gpt_oss_integration.py",
      "name": "gpt_oss_integration.py",
      "size": 11382,
      "lines": 315,
      "hash": "10324dfe92234f8582f31b50ca09758d",
      "category": [
        "misc"
      ],
      "imports": [
        "asyncio",
        "re",
        "logging",
        "typing"
      ],
      "functions": [
        "_create_explanation_prompt",
        "_mock_explain_code",
        "_apply_pattern_optimizations",
        "_mock_complete_code",
        "__init__",
        "_merge_completion",
        "_mock_generate_code",
        "_deduplicate_imports",
        "class:GPTOSSIntegration",
        "_create_completion_prompt",
        "_clean_generated_code",
        "_enhance_code_prompt",
        "_create_optimization_prompt"
      ],
      "description": "GPT-OSS Integration for SutazAI\nSpecialized integration for GPT-OSS models with optimized prompting",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/enhanced-model-manager/enhanced_model_service.py",
      "relative_path": "docker/enhanced-model-manager/enhanced_model_service.py",
      "name": "enhanced_model_service.py",
      "size": 9284,
      "lines": 286,
      "hash": "c282fc941244639faf36ffda5a1f694d",
      "category": [
        "utils"
      ],
      "imports": [
        "fastapi",
        "time",
        "os",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "model_manager",
        "gpt_oss_integration",
        "logging",
        "pathlib",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:ModelLoadRequest",
        "class:BatchGenerationRequest",
        "class:GenerationRequest"
      ],
      "description": "Enhanced Model Management Service for SutazAI\nSpecialized management for GPT-OSS and other advanced models",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/enhanced-model-manager/model_manager.py",
      "relative_path": "docker/enhanced-model-manager/model_manager.py",
      "name": "model_manager.py",
      "size": 5640,
      "lines": 164,
      "hash": "68ecdb16325d16a4a2be5ce0c0be766a",
      "category": [
        "monitoring"
      ],
      "imports": [
        "transformers",
        "fastapi",
        "asyncio",
        "psutil",
        "requests",
        "torch",
        "json",
        "typing",
        "pydantic",
        "logging",
        "os"
      ],
      "functions": [
        "list_models",
        "class:ModelRequest",
        "delete_model",
        "get_model_status",
        "class:ModelInfo",
        "get_stats",
        "pull_model",
        "generate_text",
        "health"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/gpt-engineer/gpt_engineer_service.py",
      "relative_path": "docker/gpt-engineer/gpt_engineer_service.py",
      "name": "gpt_engineer_service.py",
      "size": 8158,
      "lines": 237,
      "hash": "be1cb41a3ce5388ef9e14ffb575e9f36",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "tempfile",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:GPTEngineerRequest",
        "__init__",
        "class:GPTEngineerResponse",
        "create_project_prompt",
        "class:GPTEngineerManager",
        "execute_gpt_engineer"
      ],
      "description": "GPT-Engineer Service for SutazAI\nProvides AI-powered software engineering capabilities",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/gpt-engineer/app.py",
      "relative_path": "docker/gpt-engineer/app.py",
      "name": "app.py",
      "size": 175,
      "lines": 7,
      "hash": "017160baaf9d3fc7bc76baa8bd63f1af",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "gpt_engineer_service",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/aider/aider_service.py",
      "relative_path": "docker/aider/aider_service.py",
      "name": "aider_service.py",
      "size": 6566,
      "lines": 201,
      "hash": "38d48429554f1c42300d18e747364981",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "tempfile",
        "os",
        "subprocess"
      ],
      "functions": [
        "execute_aider",
        "class:AiderManager",
        "__init__",
        "class:AiderResponse",
        "class:AiderRequest"
      ],
      "description": "Aider Service for SutazAI\nProvides AI-powered code assistance and editing",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/aider/app.py",
      "relative_path": "docker/aider/app.py",
      "name": "app.py",
      "size": 168,
      "lines": 7,
      "hash": "f6450db9dda85166fa262773440579fb",
      "category": [
        "misc"
      ],
      "imports": [
        "aider_service",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/autogpt/autogpt_service.py",
      "relative_path": "docker/autogpt/autogpt_service.py",
      "name": "autogpt_service.py",
      "size": 5447,
      "lines": 177,
      "hash": "00172878968584ca69c58a2c5e6850b4",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "yaml",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:AutoGPTManager",
        "__init__",
        "create_ai_settings",
        "class:AutoGPTRequest",
        "execute_task",
        "class:AutoGPTResponse"
      ],
      "description": "AutoGPT Service for SutazAI\nProvides autonomous AI agent capabilities",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/autogpt/app.py",
      "relative_path": "docker/autogpt/app.py",
      "name": "app.py",
      "size": 170,
      "lines": 7,
      "hash": "20a3b87342ee75d542624ad4d1b4a450",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "uvicorn",
        "autogpt_service"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/ai-metrics-exporter/ai_metrics_exporter.py",
      "relative_path": "docker/ai-metrics-exporter/ai_metrics_exporter.py",
      "name": "ai_metrics_exporter.py",
      "size": 523,
      "lines": 21,
      "hash": "10b5dad63b253dec678182a98827c2b8",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "uvicorn",
        "pydantic"
      ],
      "functions": [
        "metrics",
        "health",
        "class:Health"
      ],
      "description": "Minimal placeholder metrics; replace with real Prometheus output if needed",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/ai-agent-orchestrator/app.py",
      "relative_path": "docker/ai-agent-orchestrator/app.py",
      "name": "app.py",
      "size": 21116,
      "lines": 525,
      "hash": "43e8413119d2b19e343d32965cf4be9e",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "fastapi",
        "httpx",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "logging",
        "ollama",
        "contextlib",
        "asyncio"
      ],
      "functions": [
        "class:AgentInteraction",
        "class:ConflictResolution",
        "class:AgentInfo",
        "__init__",
        "class:AIAgentOrchestrator"
      ],
      "description": "AI Agent Orchestrator - Manages agent interactions and coordination",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/templates/generate-dockerfile.py",
      "relative_path": "docker/templates/generate-dockerfile.py",
      "name": "generate-dockerfile.py",
      "size": 5999,
      "lines": 175,
      "hash": "54dca4e515a940377dffa6909bd77d2d",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "argparse",
        "json",
        "typing",
        "pathlib",
        "os"
      ],
      "functions": [
        "load_template",
        "generate_all_services",
        "generate_dockerfile",
        "create_service_dockerfile",
        "main"
      ],
      "description": "SutazAI Dockerfile Template Generator\nGenerates service-specific Dockerfiles from master templates\nAuthor: DevOps Manager - Deduplication Operation\nDate: August 10, 2025",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/code-improver/app.py",
      "relative_path": "docker/code-improver/app.py",
      "name": "app.py",
      "size": 168,
      "lines": 7,
      "hash": "9a1a109e17ab713b266c47db81d21666",
      "category": [
        "misc"
      ],
      "imports": [
        "code_improver",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/code-improver/code_improver.py",
      "relative_path": "docker/code-improver/code_improver.py",
      "name": "code_improver.py",
      "size": 10510,
      "lines": 283,
      "hash": "2ba338fe762111ae0cc21d65aae3d6eb",
      "category": [
        "security",
        "analysis"
      ],
      "imports": [
        "fastapi",
        "asyncio",
        "httpx",
        "datetime",
        "json",
        "git",
        "typing",
        "pydantic",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:ImprovementResult",
        "__init__",
        "class:CodeAnalyzer",
        "class:ImprovementRequest"
      ],
      "description": "",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/letta/letta_service.py",
      "relative_path": "docker/letta/letta_service.py",
      "name": "letta_service.py",
      "size": 9469,
      "lines": 260,
      "hash": "cb35486d50f9b542fb999b6019ed92c7",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "time",
        "requests",
        "json",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "os"
      ],
      "functions": [
        "class:LettaResponse",
        "class:WorkingLettaManager",
        "__init__",
        "class:LettaRequest",
        "get_or_create_agent",
        "call_ollama",
        "process_message",
        "test_ollama_connection"
      ],
      "description": "Letta (MemGPT) Service for SutazAI - WORKING VERSION\nProvides real persistent memory AI agent capabilities with actual LLM integration",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/letta/app.py",
      "relative_path": "docker/letta/app.py",
      "name": "app.py",
      "size": 168,
      "lines": 7,
      "hash": "3143b326d3e4d976a5387e7f91bd4504",
      "category": [
        "misc"
      ],
      "imports": [
        "letta_service",
        "os",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/agentgpt/agentgpt_service.py",
      "relative_path": "docker/agentgpt/agentgpt_service.py",
      "name": "agentgpt_service.py",
      "size": 11699,
      "lines": 347,
      "hash": "bdce76c04c3a9729064b7a66e4bea3a7",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "requests",
        "datetime",
        "json",
        "typing",
        "pydantic",
        "logging",
        "asyncio"
      ],
      "functions": [
        "class:TaskRequest",
        "__init__",
        "class:AgentGPTService",
        "get_agent_status",
        "list_agents",
        "class:AgentRequest"
      ],
      "description": "AgentGPT Service for SutazAI\nAutonomous AI agent that can create and execute tasks",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/docker/agentgpt/app.py",
      "relative_path": "docker/agentgpt/app.py",
      "name": "app.py",
      "size": 171,
      "lines": 7,
      "hash": "28dfc79493db7be729a7842fca55f953",
      "category": [
        "misc"
      ],
      "imports": [
        "os",
        "agentgpt_service",
        "uvicorn"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/docker/adapters/postgres/postgres_adapter.py",
      "relative_path": "docker/adapters/postgres/postgres_adapter.py",
      "name": "postgres_adapter.py",
      "size": 12887,
      "lines": 341,
      "hash": "3489d8538efefbb4240053dfedecd0cb",
      "category": [
        "monitoring"
      ],
      "imports": [
        "time",
        "json",
        "datetime",
        "sys",
        "psycopg2",
        "adapter",
        "structlog",
        "prometheus_client",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "_setup_routes",
        "class:PostgreSQLServiceAdapter",
        "class:PostgreSQLAdapter",
        "__init__"
      ],
      "description": "PostgreSQL Adapter for SutazAI\nProvides connection pooling, query monitoring, and performance optimization",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/auth/service-account-manager/main.py",
      "relative_path": "auth/service-account-manager/main.py",
      "name": "main.py",
      "size": 26745,
      "lines": 696,
      "hash": "3f0794385c58543bf3965ed78feaa0bc",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "httpx",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "redis.asyncio",
        "pydantic",
        "structlog",
        "hvac",
        "logging",
        "contextlib",
        "secrets",
        "asyncpg",
        "asyncio",
        "keycloak"
      ],
      "functions": [
        "class:ServiceAccountRequest",
        "class:BulkServiceAccountRequest",
        "class:ServiceAccountResponse"
      ],
      "description": "SutazAI Service Account Manager\nManages service accounts for 69 AI agents with Keycloak integration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/auth/jwt-service/main.py",
      "relative_path": "auth/jwt-service/main.py",
      "name": "main.py",
      "size": 19221,
      "lines": 548,
      "hash": "06eff2d0493671b4de5bab4dd81ab249",
      "category": [
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "jwt",
        "fastapi.middleware.cors",
        "json",
        "pydantic",
        "hvac",
        "logging",
        "keycloak",
        "fastapi.security",
        "typing",
        "redis.asyncio",
        "cryptography.hazmat.primitives.asymmetric",
        "contextlib",
        "uvicorn",
        "cryptography.hazmat.primitives",
        "httpx",
        "asyncpg",
        "os",
        "fastapi",
        "datetime",
        "structlog",
        "asyncio"
      ],
      "functions": [
        "class:TokenRequest",
        "class:ServiceAccount",
        "generate_jwt_token",
        "class:TokenResponse",
        "class:TokenValidationRequest",
        "class:TokenValidationResponse"
      ],
      "description": "SutazAI JWT Authentication Service\nProvides JWT token generation, validation, and management for AI agents",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/auth/rbac-engine/main.py",
      "relative_path": "auth/rbac-engine/main.py",
      "name": "main.py",
      "size": 23640,
      "lines": 728,
      "hash": "4348df481b0c6561f6658c97deafd02d",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "fastapi.middleware.cors",
        "json",
        "pydantic",
        "hvac",
        "keycloak",
        "casbin",
        "fastapi.security",
        "typing",
        "redis.asyncio",
        "contextlib",
        "uvicorn",
        "httpx",
        "asyncpg",
        "os",
        "fastapi",
        "datetime",
        "jose",
        "structlog",
        "asyncio"
      ],
      "functions": [
        "class:PolicyRequest",
        "class:RoleAssignmentRequest",
        "class:AccessRequest",
        "class:AccessResponse"
      ],
      "description": "SutazAI RBAC Policy Engine\nRole-Based Access Control for AI agents and services",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_failure_scenarios.py",
      "relative_path": "tests/hygiene/test_failure_scenarios.py",
      "name": "test_failure_scenarios.py",
      "size": 23264,
      "lines": 719,
      "hash": "4559d2a7128010f603bc7054734cb878",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "psutil",
        "sys",
        "signal",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "test_cpu_timeout_handling",
        "test_memory_limit_handling",
        "test_network_connectivity_failure",
        "test_missing_python_dependencies",
        "test_file_descriptor_limit",
        "class:TestSystemFailureScenarios",
        "class:TestRecoveryMechanisms",
        "test_corrupted_configuration_handling",
        "test_graceful_degradation",
        "tearDown",
        "test_state_restoration",
        "test_automatic_backup_recovery",
        "class:TestResourceLimitHandling",
        "test_disk_space_exhaustion_simulation",
        "test_concurrent_access_conflicts",
        "setUp",
        "test_process_timeout_handling",
        "test_permission_denied_scenarios",
        "test_git_repository_corruption",
        "class:TestRealWorldFailureScenarios"
      ],
      "description": "Purpose: Comprehensive failure scenario testing for hygiene enforcement system\nUsage: python -m pytest tests/hygiene/test_failure_scenarios.py\nRequirements: pytest, unittest.mock, tempfile",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_git_hooks.py",
      "relative_path": "tests/hygiene/test_git_hooks.py",
      "name": "test_git_hooks.py",
      "size": 11569,
      "lines": 317,
      "hash": "95c941345176296c202ddccdeec77c9f",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "test_real_hook_dependency_availability",
        "class:TestHookConfiguration",
        "class:TestGitHookIntegration",
        "test_pre_commit_hook_exists",
        "test_pre_push_hook_exists",
        "test_pre_commit_hook_allows_clean_commits",
        "test_pre_commit_hook_content",
        "tearDown",
        "setUp",
        "class:TestRealGitHooks",
        "test_hook_installation_script_exists",
        "class:TestHookErrorHandling",
        "test_hook_handles_permission_errors",
        "test_hook_handles_missing_files",
        "test_hook_setup_automation_exists",
        "class:TestGitHooks",
        "test_git_hooks_directory_exists",
        "test_pre_commit_hook_blocks_violations",
        "test_real_pre_commit_hook_syntax",
        "test_git_hook_installation"
      ],
      "description": "Purpose: Unit tests for Git hooks functionality\nUsage: python -m pytest tests/hygiene/test_git_hooks.py\nRequirements: pytest, git",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test-all-rule-combinations.py",
      "relative_path": "tests/hygiene/test-all-rule-combinations.py",
      "name": "test-all-rule-combinations.py",
      "size": 41243,
      "lines": 1022,
      "hash": "4bb1ea3de1a2e2d74021ba6206de4f0b",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "typing",
        "signal",
        "concurrent.futures",
        "pathlib",
        "contextlib",
        "shutil",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "tempfile",
        "os",
        "time",
        "resource",
        "datetime",
        "asyncio",
        "subprocess"
      ],
      "functions": [
        "class:TestResult",
        "_test_doc_cleanliness",
        "_enforce_analyze_everything",
        "generate_rule_combinations",
        "_generate_recommendations",
        "_enforce_deployment_script",
        "_test_garbage_detection",
        "_test_backward_compatibility",
        "_calculate_performance_impact",
        "class:SystemMetrics",
        "_enforce_python_script_sanity",
        "_default_test_scenario",
        "_test_doc_structure",
        "_enforce_reuse_before_creating",
        "generate_test_report",
        "_test_reference_analysis",
        "execute_rule_test",
        "_test_agent_selection",
        "_test_dockerfile_validation",
        "save_test_result",
        "_parse_rules",
        "class:CombinationTestSuite",
        "_analyze_conflicts",
        "_enforce_docker_structure",
        "_enforce_no_breaking_functionality",
        "_enforce_no_garbage",
        "_test_code_quality",
        "_enforce_clean_documentation",
        "run_comprehensive_test_suite",
        "cleanup",
        "_enforce_local_llms_ollama",
        "_test_single_source",
        "validate_rule_dependencies",
        "_test_regression",
        "_enforce_backend_frontend_version_control",
        "_test_duplicate_detection",
        "_enforce_professional_project",
        "_test_python_style",
        "main",
        "_test_script_organization",
        "_execute_test_scenario",
        "_init_database",
        "_test_ollama_integration",
        "collect_system_metrics",
        "_test_file_analysis",
        "class:RuleConfig",
        "_test_concrete_naming",
        "__init__",
        "_test_deployment_script",
        "_enforce_correct_ai_agent",
        "_enforce_centralized_documentation",
        "_enforce_eliminate_script_chaos",
        "_analyze_performance_results",
        "_enforce_functionality_first_cleanup",
        "_enforce_no_fantasy_elements",
        "_load_config",
        "_test_real_libraries",
        "_test_no_process_terms",
        "class:RuleSystemTester",
        "_simulate_rule_enforcement"
      ],
      "description": "Comprehensive Rule Combination Testing System\n=============================================\n\nThis module implements exhaustive testing of all possible rule combinations\nto ensure system reliability, p",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_performance.py",
      "relative_path": "tests/hygiene/test_performance.py",
      "name": "test_performance.py",
      "size": 22868,
      "lines": 579,
      "hash": "3037f2d562f04916ab03448c4808d851",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "psutil",
        "time",
        "resource",
        "sys",
        "json",
        "gc",
        "threading",
        "concurrent.futures",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:TestPerformanceReporting",
        "test_file_count_scalability",
        "data_generator",
        "concurrent_processing",
        "create_and_process_data",
        "scan_violations",
        "process_files",
        "run_orchestrator_dry_run",
        "test_test_suite_performance",
        "test_memory_leak_detection",
        "class:TestMemoryUsagePatterns",
        "test_orchestrator_performance",
        "process_large_dataset_batch",
        "measure_resource_usage",
        "test_file_processing_performance",
        "test_performance_metrics_collection",
        "process_file",
        "tearDown",
        "process_python_files",
        "class:TestScalabilityLimits",
        "setUp",
        "create_large_test_dataset",
        "test_concurrent_processing_performance",
        "measure_execution_time",
        "generate_performance_report",
        "test_large_dataset_memory_efficiency",
        "monitor_resources",
        "class:TestRealWorldPerformance",
        "recursive_file_scan",
        "collect_system_metrics",
        "class:TestPerformanceBenchmarks",
        "test_performance_report_generation",
        "test_large_directory_scanning_performance",
        "run_test_suite",
        "test_directory_depth_scalability",
        "process_large_dataset_streaming"
      ],
      "description": "Purpose: Performance and resource usage validation tests for hygiene system\nUsage: python -m pytest tests/hygiene/test_performance.py\nRequirements: pytest, psutil, time",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test-hygiene-system.py",
      "relative_path": "tests/hygiene/test-hygiene-system.py",
      "name": "test-hygiene-system.py",
      "size": 21393,
      "lines": 530,
      "hash": "029f610254d899244604811fd94610cb",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "pathlib",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:TestAutomatedMaintenance",
        "class:TestHygieneMonitor",
        "test_coordinator_exists",
        "test_execution_time",
        "test_coordinator_dry_run_phase1",
        "class:TestPerformanceAndResources",
        "generate_test_report",
        "test_pre_push_hook_exists",
        "test_log_directory_creation",
        "test_monitor_syntax",
        "_create_test_fixtures",
        "test_pre_commit_hook_exists_and_executable",
        "test_pre_commit_hook_content",
        "test_log_file_permissions",
        "class:HygieneSystemTestRunner",
        "class:TestHygieneOrchestrator",
        "test_orchestrator_exists",
        "test_coordinator_archive_creation",
        "test_memory_usage",
        "setUp",
        "class:TestHygieneCoordinator",
        "test_permission_errors",
        "test_monitor_script_exists",
        "run_component_tests",
        "main",
        "test_orchestrator_phase_execution",
        "class:TestFailureScenarios",
        "test_maintenance_daily_mode",
        "test_maintenance_script_exists",
        "class:TestReportingAndMonitoring",
        "__init__",
        "cleanup_test_environment",
        "test_missing_dependencies",
        "class:TestGitHooks",
        "test_orchestrator_invalid_rule",
        "test_disk_space_exhaustion",
        "test_orchestrator_dry_run",
        "setup_test_environment"
      ],
      "description": "Purpose: Master test runner for comprehensive hygiene enforcement system validation\nUsage: python test-hygiene-system.py [--component=<component>] [--verbose] [--report]\nRequirements: Python 3.8+, uni",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_orchestrator.py",
      "relative_path": "tests/hygiene/test_orchestrator.py",
      "name": "test_orchestrator.py",
      "size": 10131,
      "lines": 263,
      "hash": "55cf85581b93aeb978f84e2208f65081",
      "category": [
        "deployment",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "json",
        "sys",
        "pathlib",
        "scripts.agents.hygiene_agent_orchestrator",
        "tempfile",
        "os",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:TestOrchestratorErrorHandling",
        "test_orchestrator_help",
        "test_missing_project_directory",
        "class:TestOrchestratorIntegration",
        "test_orchestrator_script_syntax",
        "setUp",
        "test_get_agents_for_rule",
        "test_orchestrator_script_exists",
        "test_execute_agent_task_failure",
        "test_invalid_rule_number",
        "test_execute_agent_task_unknown_agent",
        "test_orchestrator_dry_run_rule_13",
        "tearDown",
        "test_log_action",
        "class:TestAgentOrchestrator",
        "test_create_agent_task",
        "test_execute_agent_task_success",
        "test_agent_registry_structure"
      ],
      "description": "Purpose: Unit tests for hygiene agent orchestrator\nUsage: python -m pytest tests/hygiene/test_orchestrator.py\nRequirements: pytest, unittest.mock",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_fixtures.py",
      "relative_path": "tests/hygiene/test_fixtures.py",
      "name": "test_fixtures.py",
      "size": 16622,
      "lines": 497,
      "hash": "90e698e2118245d99f88757b389b4728",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "json",
        "pathlib",
        "tempfile",
        "os",
        "shutil"
      ],
      "functions": [
        "test_create_rule_11_fixtures",
        "create_rule_13_violations",
        "test_create_rule_8_fixtures",
        "test_fixture_cleanup_simulation",
        "setUp",
        "create_rule_8_violations",
        "create_rule_11_violations",
        "test_detect_rule_12_violations",
        "test_detect_rule_8_violations",
        "test_fixture_metadata_creation",
        "class:TestFixtureCreation",
        "class:TestMockViolationDetection",
        "test_detect_rule_13_violations",
        "tearDown",
        "test_create_rule_13_fixtures",
        "class:TestFixtureManagement",
        "test_create_rule_12_fixtures",
        "create_rule_12_violations"
      ],
      "description": "Purpose: Test fixtures and mock violation creation for hygiene system testing\nUsage: python -m pytest tests/hygiene/test_fixtures.py\nRequirements: pytest, tempfile",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/__init__.py",
      "relative_path": "tests/hygiene/__init__.py",
      "name": "__init__.py",
      "size": 177,
      "lines": 7,
      "hash": "930b3585d85cf9dbac8c5c45a880f069",
      "category": [
        "testing",
        "maintenance",
        "security"
      ],
      "imports": [],
      "functions": [],
      "description": "Hygiene enforcement system unit tests\nTests for all components of the hygiene enforcement infrastructure",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_coordinator.py",
      "relative_path": "tests/hygiene/test_coordinator.py",
      "name": "test_coordinator.py",
      "size": 14070,
      "lines": 347,
      "hash": "dd02f59e6cbdbac3df516e3c363d0e56",
      "category": [
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "scripts.hygiene_enforcement_coordinator",
        "sys",
        "pathlib",
        "tempfile",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "create_test_violations",
        "class:TestCoordinatorReporting",
        "class:TestCoordinatorErrorHandling",
        "test_coordinator_help",
        "test_create_archive_directory",
        "class:TestCoordinatorRuleEnforcement",
        "test_find_violations_rule_13",
        "test_coordinator_script_exists",
        "test_coordinator_script_syntax",
        "test_generate_report",
        "tearDown",
        "test_log_action",
        "test_coordinator_dry_run_phase_1",
        "test_verify_file_safety",
        "test_missing_project_directory",
        "setUp",
        "test_permission_denied_scenarios",
        "test_enforce_rule_13_dry_run",
        "class:TestHygieneEnforcementCoordinator",
        "test_rule_violations_config",
        "class:TestCoordinatorIntegration",
        "test_verify_file_safety_with_references"
      ],
      "description": "Purpose: Unit tests for hygiene enforcement coordinator\nUsage: python -m pytest tests/hygiene/test_coordinator.py\nRequirements: pytest, unittest.mock",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/hygiene/test_monitoring.py",
      "relative_path": "tests/hygiene/test_monitoring.py",
      "name": "test_monitoring.py",
      "size": 13159,
      "lines": 353,
      "hash": "6b6fd47a321d4eb696967817700153b6",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "unittest",
        "unittest.mock",
        "time",
        "sys",
        "pathlib",
        "tempfile",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "class:TestAutomatedMaintenance",
        "test_log_directory_structure",
        "test_maintenance_script_syntax",
        "test_monitor_script_syntax",
        "test_monitoring_scripts_exist",
        "class:TestMonitoringPerformance",
        "class:TestMaintenanceModes",
        "class:TestHygieneMonitoring",
        "class:TestMonitoringConfiguration",
        "tearDown",
        "test_daily_maintenance_mode",
        "class:TestRealTimeMonitoring",
        "class:TestMonitoringIntegration",
        "setUp",
        "test_monitor_script_exists",
        "test_monitor_script_help",
        "test_monitoring_system_components_integration",
        "test_file_change_detection",
        "test_memory_usage_simulation",
        "test_log_aggregation_capability",
        "test_violation_detection_simulation",
        "test_large_directory_scanning_performance",
        "test_maintenance_script_help",
        "test_maintenance_script_exists"
      ],
      "description": "Purpose: Unit tests for hygiene monitoring system\nUsage: python -m pytest tests/hygiene/test_monitoring.py\nRequirements: pytest, unittest.mock",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/docker/__init__.py",
      "relative_path": "tests/docker/__init__.py",
      "name": "__init__.py",
      "size": 32,
      "lines": 1,
      "hash": "ee78fce7a393430c737916f0e069b2e2",
      "category": [
        "testing"
      ],
      "imports": [],
      "functions": [],
      "description": "Docker container tests package",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/docker/test_containers.py",
      "relative_path": "tests/docker/test_containers.py",
      "name": "test_containers.py",
      "size": 28966,
      "lines": 911,
      "hash": "c582a782d45a27fc5275085acee916c5",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "psutil",
        "pytest",
        "json",
        "socket",
        "datetime",
        "threading",
        "typing",
        "psycopg2",
        "tempfile",
        "os",
        "redis",
        "subprocess"
      ],
      "functions": [
        "test_container_logs",
        "test_base_images_available",
        "test_container_stats",
        "test_container_readonly_filesystem",
        "container_configs",
        "class:TestContainerVolumes",
        "test_custom_image_build",
        "class:TestContainerLifecycle",
        "test_nginx_container",
        "test_container_resource_limits",
        "test_container_user_security",
        "test_container_capabilities_drop",
        "test_container_port_mapping",
        "class:TestContainerSecurity",
        "class:TestContainerMonitoring",
        "test_docker_network_availability",
        "class:TestContainerImages",
        "test_volume_mount",
        "test_compose_file_validation",
        "test_container_health_check",
        "test_container_creation",
        "class:TestDockerCompose",
        "test_docker_system_resources",
        "docker_client",
        "test_bind_mount",
        "class:TestContainerNetworking",
        "class:TestServiceContainers",
        "test_redis_container",
        "collect_events",
        "test_docker_version_compatibility",
        "test_container_network_creation",
        "test_volume_creation",
        "test_container_start_stop",
        "class:TestDockerEnvironment",
        "test_image_security_scan",
        "test_docker_compose_available",
        "test_docker_daemon_running",
        "test_postgres_container",
        "test_multi_container_setup",
        "test_inter_container_communication",
        "test_container_events"
      ],
      "description": "Docker container tests for SutazAI system\nTests container functionality, health checks, and service interactions",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/unit/test_security.py",
      "relative_path": "tests/unit/test_security.py",
      "name": "test_security.py",
      "size": 6666,
      "lines": 194,
      "hash": "30ec4173a1d5ec28c402996b3510aec4",
      "category": [
        "testing",
        "security"
      ],
      "imports": [
        "jwt",
        "unittest.mock",
        "datetime",
        "pytest"
      ],
      "functions": [
        "verify_token",
        "validate_input",
        "test_verify_token_wrong_type",
        "hash_password",
        "test_password_verification",
        "test_password_hashing",
        "test_verify_token_invalid",
        "decrypt_data",
        "test_create_access_token",
        "class:MockInputValidator",
        "verify_password",
        "input_validator",
        "test_input_validation_parametrized",
        "class:MockEncryptionManager",
        "auth_manager",
        "test_input_validation_success",
        "test_encryption_basic",
        "test_decryption_invalid_data",
        "encrypt_data",
        "create_access_token",
        "encryption_manager",
        "test_input_validation_too_long",
        "__init__",
        "test_input_validation_malicious",
        "class:MockAuthenticationManager",
        "test_encryption_empty_data"
      ],
      "description": "Unit tests for security module",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/unit/test_brain.py",
      "relative_path": "tests/unit/test_brain.py",
      "name": "test_brain.py",
      "size": 4680,
      "lines": 128,
      "hash": "a7f39081bbfe3a5deb077f04358b7f74",
      "category": [
        "testing",
        "automation",
        "analysis"
      ],
      "imports": [
        "unittest.mock",
        "asyncio",
        "datetime",
        "pytest"
      ],
      "functions": [
        "get_status",
        "test_coordinator_status",
        "__init__",
        "mock_coordinator",
        "class:MockAGICoordinator"
      ],
      "description": "Unit tests for automation Coordinator functionality",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/load/test-ollama-high-concurrency.py",
      "relative_path": "tests/load/test-ollama-high-concurrency.py",
      "name": "test-ollama-high-concurrency.py",
      "size": 24215,
      "lines": 617,
      "hash": "6b31a33e37743a0762318a21c9a00075",
      "category": [
        "testing"
      ],
      "imports": [
        "time",
        "argparse",
        "json",
        "sys",
        "random",
        "statistics",
        "typing",
        "signal",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "class:TestResult",
        "generate_test_request",
        "signal_handler",
        "__init__",
        "calculate_metrics",
        "class:TestRequest",
        "class:LoadTestMetrics",
        "get_next_url",
        "print_metrics_report",
        "class:OllamaLoadTester"
      ],
      "description": "Ollama High-Concurrency Load Testing Script\nTests the optimized Ollama setup with 174+ concurrent connections",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/load/load_test_runner.py",
      "relative_path": "tests/load/load_test_runner.py",
      "name": "load_test_runner.py",
      "size": 24213,
      "lines": 587,
      "hash": "fe065cac024a659b3494ed59ee2db8cc",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "argparse",
        "json",
        "datetime",
        "threading",
        "typing",
        "logging",
        "os",
        "subprocess",
        "csv"
      ],
      "functions": [
        "_generate_summary_report",
        "_parse_locust_stats",
        "_generate_recommendations",
        "_parse_locust_exceptions",
        "_start_system_monitoring",
        "run_load_test",
        "monitor_system",
        "run_scenario_suite",
        "class:LoadTestRunner",
        "_calculate_performance_metrics",
        "_analyze_system_metrics",
        "_stop_system_monitoring",
        "check_system_prerequisites",
        "main",
        "_parse_time_to_seconds",
        "_parse_locust_failures",
        "__init__",
        "_generate_comprehensive_report",
        "_process_test_results"
      ],
      "description": "Load test runner for SutazAI system\nAutomates load testing with different scenarios and reporting",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/load/__init__.py",
      "relative_path": "tests/load/__init__.py",
      "name": "__init__.py",
      "size": 30,
      "lines": 1,
      "hash": "f1f491c9a6c15e37111eb6c7a2900e8f",
      "category": [
        "testing"
      ],
      "imports": [],
      "functions": [],
      "description": "Load testing scripts package",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/load/locustfile.py",
      "relative_path": "tests/load/locustfile.py",
      "name": "locustfile.py",
      "size": 18081,
      "lines": 513,
      "hash": "5b3b3e2840e684d24c788e43a0a64fa1",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "automation"
      ],
      "imports": [
        "locust",
        "time",
        "locust.exception",
        "json",
        "datetime",
        "logging",
        "random"
      ],
      "functions": [
        "class:MediumLoadUser",
        "class:ConcurrentSessionUser",
        "ai_models_check",
        "test_orchestration_endpoint",
        "medium_health_check",
        "heavy_metrics",
        "class:SutazAIUser",
        "heavy_agents",
        "test_health_check",
        "heavy_models",
        "class:LightLoadUser",
        "on_quitting",
        "class:SpikeTestUser",
        "light_metrics",
        "ai_chat_long",
        "class:DatabaseHeavyUser",
        "database_agents",
        "medium_metrics",
        "create_load_test_scenarios",
        "heavy_health_check",
        "class:HeavyLoadUser",
        "spike_health_check",
        "heavy_chat",
        "medium_chat",
        "medium_agents",
        "on_request",
        "on_stop",
        "light_chat",
        "database_metrics",
        "light_health_check",
        "get_agents_list",
        "on_user_error",
        "spike_chat_burst",
        "database_health",
        "multi_session_chat",
        "get_system_health",
        "get_available_models",
        "get_system_metrics",
        "on_start",
        "class:AIHeavyUser",
        "send_chat_message"
      ],
      "description": "Locust load testing script for SutazAI system\nTests system performance under various load conditions",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/security/test_xss_protection.py",
      "relative_path": "tests/security/test_xss_protection.py",
      "name": "test_xss_protection.py",
      "size": 13900,
      "lines": 382,
      "hash": "07ef2c0390bf4079485bc1ec549292b6",
      "category": [
        "testing",
        "security"
      ],
      "imports": [
        "unittest.mock",
        "time",
        "pytest",
        "app.api.v1.endpoints.chat",
        "json",
        "app.api.v1.endpoints.streaming",
        "app.core.security",
        "asyncio",
        "fastapi.testclient"
      ],
      "functions": [
        "test_csp_header_generation",
        "test_xss_protection_blocks_malicious_requests",
        "class:TestPerformance",
        "test_security_headers_completeness",
        "test_safe_requests_pass_through",
        "class:TestIntegration",
        "class:TestXSSProtection",
        "setup_method"
      ],
      "description": "XSS Protection Test Suite\nTests comprehensive XSS protection implementation for SutazAI chat endpoints",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/security/test-authentication.py",
      "relative_path": "tests/security/test-authentication.py",
      "name": "test-authentication.py",
      "size": 24314,
      "lines": 565,
      "hash": "08322ea3417ccb95a2e661c9e3c1daaf",
      "category": [
        "deployment",
        "testing",
        "security"
      ],
      "imports": [
        "httpx",
        "time",
        "os",
        "json",
        "datetime",
        "typing",
        "structlog",
        "logging",
        "asyncio"
      ],
      "functions": [
        "generate_test_report",
        "log_test_result",
        "class:AuthenticationTester",
        "__init__"
      ],
      "description": "Test SutazAI Authentication System\nComprehensive end-to-end testing of authentication components",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/security/test_security_comprehensive.py",
      "relative_path": "tests/security/test_security_comprehensive.py",
      "name": "test_security_comprehensive.py",
      "size": 43818,
      "lines": 1085,
      "hash": "3e797fe9fae2c85036a8d76c98742913",
      "category": [
        "monitoring",
        "deployment",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "jwt",
        "ssl",
        "time",
        "requests",
        "unittest.mock",
        "pytest",
        "json",
        "datetime",
        "socket",
        "typing",
        "base64",
        "urllib.parse",
        "os",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "test_xss_protection",
        "test_file_upload_security",
        "test_information_disclosure",
        "test_vulnerability_disclosure",
        "test_debug_mode_disabled",
        "test_brute_force_protection",
        "test_intrusion_detection",
        "test_path_traversal_protection",
        "test_cors_configuration",
        "class:TestAuthenticationSecurity",
        "test_privilege_escalation_protection",
        "class:TestSecurityHeaders",
        "test_unnecessary_services_disabled",
        "test_sql_injection_protection",
        "class:TestFrontendSecurity",
        "test_jwt_token_validation",
        "test_session_management",
        "test_error_handling_security",
        "test_security_logging",
        "class:TestInputValidationSecurity",
        "test_security_headers_presence",
        "class:TestAuthorizationSecurity",
        "class:TestApiSecurity",
        "test_https_configuration",
        "class:TestSecurityCompliance",
        "test_command_injection_protection",
        "test_user_data_isolation",
        "test_default_credentials",
        "test_cookie_security",
        "test_role_based_access_control",
        "test_api_versioning_security",
        "test_rate_limiting",
        "class:TestSecurityMisconfiguration",
        "test_data_encryption_in_transit",
        "test_frontend_security_headers",
        "test_frontend_resource_access",
        "test_security_audit_trail",
        "test_password_security_requirements",
        "test_token_expiration_handling",
        "class:TestSecurityMonitoring"
      ],
      "description": "Comprehensive security tests for SutazAI system\nTests authentication, authorization, input validation, and security hardening",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/security/test_security_hardening.py",
      "relative_path": "tests/security/test_security_hardening.py",
      "name": "test_security_hardening.py",
      "size": 14097,
      "lines": 349,
      "hash": "0d734108ba752b40f36654598556bf30",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "security"
      ],
      "imports": [
        "unittest.mock",
        "time",
        "requests",
        "asyncio",
        "pytest",
        "backend.security.secure_config",
        "sys",
        "json",
        "typing",
        "pathlib",
        "backend.security.rate_limiter",
        "os",
        "subprocess"
      ],
      "functions": [
        "class:TestSecurityRegression",
        "test_no_hardcoded_secrets",
        "test_rate_limiting_configuration",
        "test_api_security_headers",
        "test_rate_limiting_enforcement",
        "test_grafana_password_not_hardcoded",
        "test_ssl_certificate_existence",
        "test_docker_security_configuration",
        "test_cors_policy_enforcement",
        "test_auth_secret_not_hardcoded",
        "class:TestSecurityHardening",
        "test_secure_directory_permissions",
        "test_environment_specific_cors",
        "test_environment_file_security",
        "test_secure_configuration_loading",
        "test_cors_wildcard_removed",
        "setup_method"
      ],
      "description": "Security Hardening Test Suite\nComprehensive tests to validate security fixes and enterprise-grade hardening",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/security/__init__.py",
      "relative_path": "tests/security/__init__.py",
      "name": "__init__.py",
      "size": 24,
      "lines": 1,
      "hash": "9a2eacb2d0241cf29f9d2566119186df",
      "category": [
        "testing",
        "security"
      ],
      "imports": [],
      "functions": [],
      "description": "Security tests package",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/performance/load_test.py",
      "relative_path": "tests/performance/load_test.py",
      "name": "load_test.py",
      "size": 17793,
      "lines": 482,
      "hash": "74cbcc222397c0c9c80209a2a7474d23",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "matplotlib.pyplot",
        "httpx",
        "time",
        "json",
        "datetime",
        "statistics",
        "typing",
        "pandas",
        "concurrent.futures",
        "uvloop",
        "asyncio",
        "random"
      ],
      "functions": [
        "class:LoadTester",
        "analyze_results",
        "print_report",
        "__init__"
      ],
      "description": "Comprehensive Load Testing Suite for SutazAI Performance Optimization\nTests system capacity for 1000+ concurrent users with <200ms response time",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/integration/test-dashboard-fix.py",
      "relative_path": "tests/integration/test-dashboard-fix.py",
      "name": "test-dashboard-fix.py",
      "size": 17986,
      "lines": 457,
      "hash": "7ad6daf37b3b89c7c2b54c534baeb83b",
      "category": [
        "testing",
        "maintenance",
        "utils",
        "automation"
      ],
      "imports": [
        "time",
        "os",
        "argparse",
        "json",
        "sys",
        "typing",
        "signal",
        "logging",
        "pathlib",
        "asyncio",
        "subprocess",
        "aiohttp"
      ],
      "functions": [
        "simulate_rapid_clicks",
        "cleanup",
        "generate_report",
        "signal_handler",
        "__init__",
        "create_browser_test_html",
        "class:DashboardTestAgent"
      ],
      "description": "Comprehensive Testing Agent for Hygiene Dashboard Stack Overflow Fix\nPurpose: End-to-end validation of the dashboard fix with automated testing\nUsage: python test-dashboard-fix.py [--headless] [--iter",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/integration/test-neo4j-integration.py",
      "relative_path": "tests/integration/test-neo4j-integration.py",
      "name": "test-neo4j-integration.py",
      "size": 4455,
      "lines": 136,
      "hash": "bc819997518d8cf9c26d6ce8d500ccc9",
      "category": [
        "testing",
        "security"
      ],
      "imports": [
        "requests",
        "sys",
        "datetime",
        "base64",
        "os"
      ],
      "functions": [
        "test_backend_health",
        "test_neo4j_browser",
        "test_neo4j_http_api",
        "main"
      ],
      "description": "Neo4j Integration Test Script for SutazAI\nTests all aspects of Neo4j connectivity and functionality",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/integration/test_api_integration.py",
      "relative_path": "tests/integration/test_api_integration.py",
      "name": "test_api_integration.py",
      "size": 7131,
      "lines": 243,
      "hash": "1a1e05e7f00049fdd888b21672ee5d7a",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "security"
      ],
      "imports": [
        "asyncio",
        "httpx",
        "typing",
        "pytest"
      ],
      "functions": [],
      "description": "Integration tests for API endpoints",
      "shebang": false,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/integration/test-monitoring-integration.py",
      "relative_path": "tests/integration/test-monitoring-integration.py",
      "name": "test-monitoring-integration.py",
      "size": 15889,
      "lines": 408,
      "hash": "612d37989b17211212d25e67cd34bd8e",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "json",
        "sys",
        "websockets",
        "pathlib",
        "asyncio",
        "subprocess",
        "shutil"
      ],
      "functions": [
        "test_result",
        "test_trigger_scan_api",
        "print_test_summary",
        "test_dashboard_accessibility",
        "test_agents_api",
        "__init__",
        "log",
        "class:MonitoringIntegrationTester",
        "create_test_violations",
        "test_backend_health",
        "test_database_creation",
        "cleanup_test_files",
        "check_monitoring_system_running",
        "test_log_files_creation",
        "test_system_metrics_api",
        "test_violations_api"
      ],
      "description": "Test Monitoring Integration\nPurpose: Comprehensive testing of the real-time monitoring system\nAuthor: AI Observability and Monitoring Engineer\nVersion: 1.0.0 - Integration Testing",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/integration/test-ollama-integration.py",
      "relative_path": "tests/integration/test-ollama-integration.py",
      "name": "test-ollama-integration.py",
      "size": 13219,
      "lines": 343,
      "hash": "d117940686ad539e1fbaac10e062a0ca",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "agents.core.base_agent",
        "httpx",
        "time",
        "os",
        "argparse",
        "sys",
        "json",
        "datetime",
        "agents.core.ollama_integration",
        "typing",
        "pathlib",
        "asyncio",
        "collections"
      ],
      "functions": [
        "__init__",
        "save_results",
        "class:OllamaIntegrationTester"
      ],
      "description": "Purpose: Test complete Ollama integration with all 131 agents\nUsage: python test-ollama-integration.py [--full] [--agents AGENT1,AGENT2]\nRequirements: httpx, asyncio, pyyaml",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/tests/health/test_service_health.py",
      "relative_path": "tests/health/test_service_health.py",
      "name": "test_service_health.py",
      "size": 28904,
      "lines": 726,
      "hash": "f3bdd32edfbe292c5fadff764a9a5b0c",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "psutil",
        "pytest",
        "json",
        "socket",
        "datetime",
        "psycopg2",
        "typing",
        "concurrent.futures",
        "logging",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_check_backend_health",
        "test_chromadb_service_availability",
        "test_service_restart_recovery",
        "test_service_health_response_time",
        "test_qdrant_service_availability",
        "test_frontend_service_availability",
        "test_backend_detailed_health_info",
        "test_dns_resolution",
        "test_service_uptime_tracking",
        "test_backend_health_endpoint_structure",
        "test_open_file_descriptors",
        "test_network_connectivity",
        "test_system_resources_available",
        "_check_frontend_health",
        "test_system_load_average",
        "test_service_version_reporting",
        "test_service_resource_usage_reporting",
        "test_graceful_degradation",
        "test_backend_database_connection",
        "_check_redis_health",
        "class:TestServiceRecovery",
        "test_health_check_alerting_thresholds",
        "class:TestServiceHealthEndpoints",
        "class:TestServiceDependencies",
        "test_backend_service_availability",
        "test_ollama_service_availability",
        "test_circuit_breaker_behavior",
        "class:TestSystemHealth",
        "class:TestServiceMetrics",
        "class:TestHealthCheckIntegration",
        "test_redis_service_availability",
        "test_postgres_service_availability",
        "_check_postgres_health",
        "test_health_check_dashboard_integration",
        "test_automated_health_monitoring",
        "class:TestServiceAvailability",
        "test_service_chain_health",
        "test_backend_redis_connection"
      ],
      "description": "Service health check tests for SutazAI system\nTests system health, service availability, and monitoring",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/health/__init__.py",
      "relative_path": "tests/health/__init__.py",
      "name": "__init__.py",
      "size": 36,
      "lines": 1,
      "hash": "22f8a7b75b39beb63907a15202cf5f50",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [],
      "functions": [],
      "description": "Service health check tests package",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
      "relative_path": "tests/fixtures/hygiene/deploy_scripts/deploy_prod.py",
      "name": "deploy_prod.py",
      "size": 24,
      "lines": 3,
      "hash": "ee5ad6f6af94b6a200ad6d784686ae88",
      "category": [
        "deployment",
        "testing",
        "maintenance"
      ],
      "imports": [
        "os"
      ],
      "functions": [],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/IMPORTANT/00_inventory/generate_inventory.py",
      "relative_path": "IMPORTANT/00_inventory/generate_inventory.py",
      "name": "generate_inventory.py",
      "size": 10199,
      "lines": 282,
      "hash": "1fd763c27c89df839da3d86af2ceeb6a",
      "category": [
        "utils",
        "analysis"
      ],
      "imports": [
        "zipfile",
        "shutil",
        "gzip",
        "bz2",
        "json",
        "sys",
        "datetime",
        "typing",
        "tarfile",
        "pathlib",
        "lzma",
        "os",
        "subprocess",
        "csv",
        "hashlib"
      ],
      "functions": [
        "sha256_file",
        "load_text_for_review",
        "git_provenance",
        "is_archive",
        "generate_inventory",
        "file_type",
        "list_files",
        "extract_archive",
        "archive_kind"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/performance_benchmark.py",
      "relative_path": "models/optimization/performance_benchmark.py",
      "name": "performance_benchmark.py",
      "size": 19978,
      "lines": 557,
      "hash": "6f89bcee0b9c1229cfa9ea1f42ad63c1",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "matplotlib.pyplot",
        "time",
        "numpy",
        "os",
        "psutil",
        "multiprocessing",
        "json",
        "datetime",
        "statistics",
        "typing",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "pathlib",
        "matplotlib",
        "asyncio"
      ],
      "functions": [
        "plot_results",
        "generate_report",
        "__init__",
        "_calculate_latency_metrics",
        "save_results",
        "class:BenchmarkConfig",
        "class:PerformanceBenchmark",
        "_find_optimal_batch_size",
        "class:BenchmarkResult"
      ],
      "description": "Purpose: Comprehensive performance benchmarking for optimized models\nUsage: Benchmarks inference speed, memory usage, and quality metrics\nRequirements: asyncio, numpy, psutil, matplotlib",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/automated_model_selection.py",
      "relative_path": "models/optimization/automated_model_selection.py",
      "name": "automated_model_selection.py",
      "size": 47484,
      "lines": 1211,
      "hash": "c59544dae1cbac45e2519bd5b19b727a",
      "category": [
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "yaml",
        "torch",
        "json",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "psutil",
        "dataclasses",
        "os",
        "collections",
        "aiohttp",
        "time",
        "numpy",
        "asyncio"
      ],
      "functions": [
        "get_status",
        "class:AutoDeployer",
        "_select_adaptive",
        "class:SelectionStrategy",
        "_calculate_cost_efficiency",
        "_select_reinforcement_learning",
        "class:ModelSelectionOrchestrator",
        "class:DeploymentMode",
        "_apply_context_adjustments",
        "_select_by_performance",
        "_adapt_selection_weights",
        "_select_by_cost",
        "_calculate_resource_efficiency",
        "class:ModelProfile",
        "_select_by_q_values",
        "_select_hybrid",
        "add_model_profile",
        "_load_configuration",
        "get_selection_statistics",
        "update_performance",
        "class:ResourceConstraint",
        "class:ModelSelectionEngine",
        "select_model",
        "class:ResourceConstraints",
        "_calculate_performance_score",
        "update_model_performance",
        "_evaluate_canary_metrics",
        "_calculate_reliability_score",
        "_create_default_configuration",
        "_suitable_for_task",
        "_get_context_key",
        "__init__",
        "_get_q_value",
        "_calculate_reward",
        "_meets_constraints",
        "record_selection_outcome",
        "_select_by_resources",
        "class:SelectionContext"
      ],
      "description": "Automated Model Selection System for SutazAI\nImplements intelligent model selection with resource-aware deployment",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/model_compression.py",
      "relative_path": "models/optimization/model_compression.py",
      "name": "model_compression.py",
      "size": 22401,
      "lines": 546,
      "hash": "e2d6e73bc0a75fc256c46e90cc6c65d4",
      "category": [
        "utils",
        "automation"
      ],
      "imports": [
        "numpy",
        "torch",
        "json",
        "typing",
        "torch.nn",
        "logging",
        "dataclasses",
        "pathlib",
        "os",
        "torch.nn.functional",
        "abc"
      ],
      "functions": [
        "_analyze_structure_changes",
        "_deep_copy_model",
        "create_compression_pipeline",
        "_analyze_performance_impact",
        "benchmark_compression_strategies",
        "load_compressed_model",
        "_analyze_parameter_reduction",
        "class:MagnitudePruning",
        "_prune_linear_layer",
        "compress_model",
        "should_prune",
        "_analyze_size_reduction",
        "class:GradualPruning",
        "class:CompressionAnalyzer",
        "_estimate_model_size",
        "analyze_compression_impact",
        "class:CompressionStrategy",
        "_prune_layer",
        "__post_init__",
        "generate_compression_report",
        "class:StructuredPruning",
        "save_compressed_model",
        "_prune_conv_layer",
        "get_current_sparsity",
        "compress",
        "optimize_compression_config",
        "estimate_compression_ratio",
        "class:ModelCompressor",
        "__init__",
        "_count_parameters",
        "class:CompressionConfig"
      ],
      "description": "Advanced Model Compression Framework for SutazAI\nImplements pruning, structured sparsity, and advanced compression techniques",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/optimization_orchestrator.py",
      "relative_path": "models/optimization/optimization_orchestrator.py",
      "name": "optimization_orchestrator.py",
      "size": 22593,
      "lines": 596,
      "hash": "a33ad4a738ceae4b0feeb24b5ebb49ca",
      "category": [
        "monitoring",
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "performance_benchmark",
        "neural_architecture_optimizer",
        "os",
        "json",
        "datetime",
        "batch_processing_optimizer",
        "quantization_pipeline",
        "model_cache_manager",
        "typing",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "class:OptimizationPlan",
        "__init__",
        "_analyze_model_usage",
        "class:OptimizationOrchestrator",
        "generate_optimization_report",
        "_initialize_agent_mapping"
      ],
      "description": "Purpose: Master orchestrator for neural architecture optimization across all agents\nUsage: Coordinates optimization, deployment, and monitoring of all AI models\nRequirements: All optimization modules,",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/quantization.py",
      "relative_path": "models/optimization/quantization.py",
      "name": "quantization.py",
      "size": 39287,
      "lines": 945,
      "hash": "a77d36ed9d09cb763300e54b5412ab78",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "asyncio",
        "time",
        "numpy",
        "struct",
        "enum",
        "torch",
        "json",
        "typing",
        "torch.nn",
        "logging",
        "dataclasses",
        "pathlib",
        "os",
        "torch.nn.functional",
        "aiohttp",
        "abc"
      ],
      "functions": [
        "auto_tune_quantization",
        "class:QuantizationCalibrator",
        "collect_statistics",
        "_quantize_layer",
        "_get_model_outputs",
        "class:QuantizationType",
        "_unpack_4bit_weights",
        "create_quantization_pipeline",
        "class:DynamicQuantizedLinear",
        "_compute_minmax_params",
        "_compute_percentile_params",
        "class:QuantizedLinear4bit",
        "class:QuantizationOptimizer",
        "_quantize_conv2d",
        "_replace_module",
        "_compute_quantization_params",
        "class:DynamicQuantization",
        "estimate_speedup",
        "hook",
        "__post_init__",
        "optimize_for_platform",
        "class:QuantizationStrategy",
        "_pack_4bit_weights",
        "_should_quantize_layer",
        "class:DynamicQuantizedConv2d",
        "_calculate_accuracy_drop",
        "quantize_weights",
        "class:PostTrainingQuantization",
        "_process_statistics",
        "forward",
        "class:QuantizedLinear8bit",
        "_dequantize_tensor",
        "__init__",
        "class:QuantizationConfig",
        "create_dynamic_quantization_pipeline",
        "class:QuantizedConv2d8bit",
        "_create_model_copy",
        "quantize",
        "_create_dynamic_layer",
        "_quantize_tensor",
        "create_hook",
        "_quantize_linear"
      ],
      "description": "Advanced Quantization Strategies for SutazAI\nImplements various quantization techniques for efficient CPU deployment",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/ab_testing.py",
      "relative_path": "models/optimization/ab_testing.py",
      "name": "ab_testing.py",
      "size": 34516,
      "lines": 941,
      "hash": "d15f86a9b2e14e8e384b3aa63feaa484",
      "category": [
        "testing",
        "utils"
      ],
      "imports": [
        "scipy",
        "uuid",
        "torch",
        "json",
        "statistics",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "pathlib",
        "abc",
        "dataclasses",
        "os",
        "collections",
        "random",
        "aiohttp",
        "time",
        "numpy",
        "asyncio"
      ],
      "functions": [
        "class:ABTestManager",
        "class:ExperimentResult",
        "_generate_recommendations",
        "record_result",
        "class:StatisticalTest",
        "create_parameter_optimization_experiment",
        "_contextual_assignment",
        "generate_experiment_report",
        "class:TrafficSplitter",
        "_round_robin_assignment",
        "class:ExperimentType",
        "stop_experiment",
        "get_experiment_status",
        "_bootstrap_comparison",
        "class:StatisticalAnalyzer",
        "assign_variant",
        "_random_assignment",
        "analyze_experiment",
        "_perform_statistical_tests",
        "_calculate_effect_size",
        "_weighted_assignment",
        "_load_experiment_results",
        "start_experiment",
        "create_experiment",
        "_init_database",
        "class:SplitStrategy",
        "_calculate_summary_stats",
        "list_experiments",
        "__init__",
        "_hash_based_assignment",
        "create_model_comparison_experiment",
        "class:ExperimentConfig"
      ],
      "description": "A/B Testing Framework for SutazAI Model Comparison\nImplements statistical testing and experimental design for model evaluation",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/batch_processing_optimizer.py",
      "relative_path": "models/optimization/batch_processing_optimizer.py",
      "name": "batch_processing_optimizer.py",
      "size": 17668,
      "lines": 483,
      "hash": "9cc53f25b7d8eb0cbdb47e1948dee85e",
      "category": [
        "automation"
      ],
      "imports": [
        "time",
        "numpy",
        "os",
        "multiprocessing",
        "datetime",
        "json",
        "typing",
        "concurrent.futures",
        "logging",
        "dataclasses",
        "asyncio",
        "heapq",
        "collections"
      ],
      "functions": [
        "class:BatchProcessingOptimizer",
        "class:BatchMetrics",
        "get_metrics",
        "_update_average",
        "_merge_similar_requests",
        "class:BatchConfig",
        "_calculate_optimal_batch_size",
        "__init__",
        "_update_rate",
        "class:InferenceRequest",
        "__lt__",
        "_get_cache_key",
        "optimize_for_workload"
      ],
      "description": "Purpose: Batch processing optimization for efficient multi-agent inference\nUsage: Optimizes request batching and parallel processing on CPU\nRequirements: asyncio, numpy, multiprocessing",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/neural_architecture_optimizer.py",
      "relative_path": "models/optimization/neural_architecture_optimizer.py",
      "name": "neural_architecture_optimizer.py",
      "size": 18483,
      "lines": 486,
      "hash": "bf00ab0a6f98ba1d72cd1371a0a75555",
      "category": [
        "utils"
      ],
      "imports": [
        "time",
        "numpy",
        "os",
        "psutil",
        "multiprocessing",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "hashlib"
      ],
      "functions": [
        "class:ModelArchitecture",
        "class:NeuralArchitectureOptimizer",
        "class:OptimizationMetrics",
        "__init__",
        "_update_metrics",
        "get_optimization_report",
        "speedup_factor",
        "compression_ratio",
        "_get_agent_categories",
        "_select_optimization_strategy"
      ],
      "description": "Purpose: Neural Architecture Search and Optimization for CPU-only inference\nUsage: Optimizes model architectures for SutazAI's 69 agents on 12-core CPU\nRequirements: torch, numpy, scikit-learn, onnx, ",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/performance_benchmarking.py",
      "relative_path": "models/optimization/performance_benchmarking.py",
      "name": "performance_benchmarking.py",
      "size": 53566,
      "lines": 1364,
      "hash": "f11a4b5f6251b209af88cb389ee5aba9",
      "category": [
        "utils"
      ],
      "imports": [
        "torch",
        "json",
        "statistics",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "multiprocessing",
        "gc",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "psutil",
        "dataclasses",
        "os",
        "seaborn",
        "collections",
        "aiohttp",
        "matplotlib.pyplot",
        "time",
        "numpy",
        "resource",
        "pandas",
        "asyncio"
      ],
      "functions": [
        "_compare_models",
        "_analyze_results",
        "_generate_recommendations",
        "class:SystemMonitor",
        "class:BenchmarkConfig",
        "class:BenchmarkSuite",
        "get_resource_summary",
        "class:ModelBenchmarker",
        "class:BenchmarkResult",
        "stop_monitoring",
        "get_resource_data",
        "_plot_model_comparison",
        "_generate_default_prompts",
        "start_monitoring",
        "create_stress_test_benchmark",
        "class:BenchmarkType",
        "_analyze_overall_performance",
        "create_throughput_benchmark",
        "_analyze_model_performance",
        "generate_report",
        "_monitor_loop",
        "class:LoadGenerator",
        "class:LoadPattern",
        "_init_database",
        "get_request_rate",
        "_plot_throughput_over_time",
        "should_send_request",
        "__init__",
        "_assess_response_quality",
        "_plot_latency_distribution",
        "_plot_system_resources",
        "create_latency_benchmark"
      ],
      "description": "Comprehensive Performance Benchmarking Suite for SutazAI\nImplements advanced benchmarking, profiling, and performance analysis",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/ensemble_optimization.py",
      "relative_path": "models/optimization/ensemble_optimization.py",
      "name": "ensemble_optimization.py",
      "size": 38763,
      "lines": 977,
      "hash": "e6439c6f9f0114d5d032aeae6a03836c",
      "category": [
        "utils"
      ],
      "imports": [
        "torch",
        "json",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "dataclasses",
        "os",
        "collections",
        "random",
        "torch.nn.functional",
        "aiohttp",
        "time",
        "numpy",
        "torch.nn",
        "asyncio"
      ],
      "functions": [
        "_get_cached_response",
        "_generate_cache_key",
        "get_average_response_time",
        "adaptive_weight_update",
        "get_success_rate",
        "class:ModelEnsemble",
        "_normalize_scores",
        "_update_performance_tracking",
        "class:EnsembleAggregator",
        "class:EnsembleConfig",
        "optimize_weights",
        "_route_by_confidence",
        "_route_by_expertise",
        "update_domain_performance",
        "route_query",
        "get_average_confidence",
        "get_ensemble_statistics",
        "class:EnsembleWeightOptimizer",
        "class:EnsembleRouter",
        "_route_by_load",
        "_cache_response",
        "class:EnsembleStrategy",
        "_calculate_confidence",
        "_classify_domain",
        "get_domain_expertise",
        "__init__",
        "class:ModelProxy"
      ],
      "description": "Model Ensemble Optimization System for SutazAI\nImplements advanced ensemble techniques for improved performance and reliability",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/continuous_learning.py",
      "relative_path": "models/optimization/continuous_learning.py",
      "name": "continuous_learning.py",
      "size": 36944,
      "lines": 957,
      "hash": "96d6654e2dcb2334b461e6cf07f462d2",
      "category": [
        "utils"
      ],
      "imports": [
        "torch",
        "json",
        "pickle",
        "threading",
        "sqlite3",
        "logging",
        "hashlib",
        "enum",
        "typing",
        "concurrent.futures",
        "pathlib",
        "abc",
        "dataclasses",
        "os",
        "collections",
        "torch.nn.functional",
        "aiohttp",
        "time",
        "numpy",
        "torch.nn",
        "asyncio"
      ],
      "functions": [
        "_analyze_domain_performance",
        "get_adaptation_parameters",
        "_should_trigger_learning",
        "_calculate_importance",
        "detect_performance_drift",
        "generate_learning_report",
        "_calculate_stability",
        "reset_learning_state",
        "_background_learning_loop",
        "_calculate_trend",
        "_save_learning_state",
        "add_experience",
        "class:ContinuousLearningConfig",
        "_start_background_learning",
        "clear_old_experiences",
        "get_performance_trend",
        "_extract_learning_insights",
        "get_learning_statistics",
        "class:ContinuousLearner",
        "class:LearningAnalyzer",
        "_init_database",
        "_load_learning_state",
        "class:LearningStrategy",
        "_calculate_improvement_rate",
        "size",
        "_classify_domain",
        "sample_batch",
        "class:LearningMode",
        "__init__",
        "analyze_learning_progress",
        "record_performance",
        "class:PerformanceTracker",
        "class:ExperienceBuffer",
        "get_recent_experiences",
        "get_current_performance"
      ],
      "description": "Continuous Learning Pipeline for SutazAI\nImplements incremental learning and model adaptation for AI agents",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/knowledge_distillation.py",
      "relative_path": "models/optimization/knowledge_distillation.py",
      "name": "knowledge_distillation.py",
      "size": 31869,
      "lines": 806,
      "hash": "2b1e003b625dd0785b570eba99559e82",
      "category": [
        "deployment",
        "utils",
        "automation"
      ],
      "imports": [
        "asyncio",
        "time",
        "torch.utils.data",
        "numpy",
        "torch",
        "json",
        "typing",
        "torch.nn",
        "concurrent.futures",
        "logging",
        "torch.optim",
        "dataclasses",
        "pathlib",
        "os",
        "torch.nn.functional",
        "aiohttp",
        "abc"
      ],
      "functions": [
        "class:DistillationDataset",
        "_generate_recommendations",
        "class:KnowledgeDistiller",
        "__len__",
        "analyze_distillation_effectiveness",
        "class:TeacherModel",
        "_analyze_performance_metrics",
        "__getitem__",
        "class:DistillationConfig",
        "_analyze_efficiency_gains",
        "_calculate_distillation_loss",
        "_calculate_consistency_score",
        "add_synthetic_data",
        "_calculate_similarity",
        "class:DistillationAnalyzer",
        "_calculate_progressive_improvement",
        "_analyze_learning_curves",
        "class:StudentModel",
        "_get_stage_config",
        "_should_stop_early",
        "__init__",
        "_calculate_improvement",
        "_calculate_convergence_rate"
      ],
      "description": "Knowledge Distillation Pipeline for SutazAI\nImplements teacher-student model optimization for efficient deployment",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/quantization_pipeline.py",
      "relative_path": "models/optimization/quantization_pipeline.py",
      "name": "quantization_pipeline.py",
      "size": 15219,
      "lines": 446,
      "hash": "2f31b515cc8c28aa40e4d6f78603e557",
      "category": [
        "utils"
      ],
      "imports": [
        "time",
        "numpy",
        "os",
        "json",
        "typing",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "hashlib"
      ],
      "functions": [
        "class:QuantizationResult",
        "get_quantization_strategy",
        "class:CPUOptimizedQuantizer",
        "__init__",
        "class:QuantizationConfig",
        "class:ModelCompressionPipeline"
      ],
      "description": "Purpose: Quantization and compression pipeline for CPU-optimized inference\nUsage: Converts models to quantized formats for efficient CPU execution\nRequirements: onnx, onnxruntime, torch, numpy",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/models/optimization/model_cache_manager.py",
      "relative_path": "models/optimization/model_cache_manager.py",
      "name": "model_cache_manager.py",
      "size": 22156,
      "lines": 628,
      "hash": "5d7bc4bf0a050234657841adeee83b7f",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "weakref",
        "psutil",
        "numpy",
        "os",
        "sys",
        "json",
        "datetime",
        "pickle",
        "collections",
        "typing",
        "gc",
        "aioredis",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "mmap",
        "hashlib"
      ],
      "functions": [
        "_get_eviction_candidates",
        "class:CacheMetrics",
        "_predict_model_usage",
        "_get_model_id",
        "time_since_access",
        "class:ModelCacheManager",
        "memory_efficiency_score",
        "__init__",
        "_get_model_name",
        "_get_top_models",
        "class:CachedModel",
        "get_cache_stats"
      ],
      "description": "Purpose: Intelligent model caching and sharing system for multi-agent deployment\nUsage: Manages model loading, caching, and sharing across 69 agents\nRequirements: asyncio, psutil, mmap, redis",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/agent-communication/secure_agent_comm.py",
      "relative_path": "security/agent-communication/secure_agent_comm.py",
      "name": "secure_agent_comm.py",
      "size": 37142,
      "lines": 951,
      "hash": "17269eed17a896d92792a88259c2d154",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "jwt",
        "psycopg2.extras",
        "json",
        "socket",
        "threading",
        "logging",
        "cryptography.fernet",
        "cryptography.x509.oid",
        "hashlib",
        "enum",
        "typing",
        "cryptography.hazmat.primitives.asymmetric",
        "concurrent.futures",
        "base64",
        "cryptography.hazmat.primitives",
        "psycopg2",
        "hmac",
        "dataclasses",
        "cryptography.hazmat.primitives.ciphers",
        "os",
        "cryptography.hazmat.primitives.kdf.pbkdf2",
        "aiohttp",
        "cryptography",
        "ssl",
        "time",
        "aiofiles",
        "datetime",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:SecurityLevel",
        "verify_certificate",
        "_verify_message_signature",
        "class:SecureMessage",
        "class:AgentIdentity",
        "_load_agents",
        "_check_permission",
        "stop_message_processing",
        "_setup_message_handlers",
        "_initialize_components",
        "_generate_message_id",
        "get_agent_status",
        "class:AgentRole",
        "class:CertificateAuthority",
        "class:SecureAgentCommunication",
        "_sign_message",
        "_generate_ca",
        "class:MessageType",
        "__init__",
        "_initialize_ca",
        "_setup_encryption",
        "generate_agent_certificate",
        "_load_ca"
      ],
      "description": "Secure Agent Communication System\nImplements mTLS and end-to-end encryption for 131 SutazAI agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/defense-in-depth/network_security.py",
      "relative_path": "security/defense-in-depth/network_security.py",
      "name": "network_security.py",
      "size": 24796,
      "lines": 640,
      "hash": "9737cf32185f9556ee0ac98ca373db32",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "json",
        "socket",
        "threading",
        "logging",
        "hashlib",
        "enum",
        "ipaddress",
        "typing",
        "psutil",
        "dataclasses",
        "scapy.all",
        "iptables",
        "os",
        "collections",
        "scapy.layers.inet",
        "ssl",
        "time",
        "datetime",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_block_ip",
        "_detect_ddos_patterns",
        "_connection_monitor_loop",
        "_update_threat_intelligence",
        "_handle_dns_tunneling_detection",
        "class:ActionType",
        "_handle_rate_limit_violation",
        "_handle_threat_detection",
        "_handle_suspicious_connection",
        "stop_monitoring",
        "_analyze_connection",
        "_unblock_ip",
        "_threat_intel_update_loop",
        "_load_default_rules",
        "class:NetworkRule",
        "_handle_ddos_detection",
        "_detect_suspicious_behavior",
        "_initialize_components",
        "class:NetworkSecurityEngine",
        "class:ThreatIndicator",
        "_setup_firewall_rules",
        "_analyze_packet",
        "_log_security_event",
        "_apply_firewall_rule",
        "_load_threat_indicators",
        "_detect_dns_tunneling",
        "packet_handler",
        "_handle_port_scan_detection",
        "_handle_connection_threat",
        "_analyze_traffic_patterns",
        "_calculate_entropy",
        "_detect_port_scan",
        "__init__",
        "class:ThreatLevel",
        "_packet_capture_loop"
      ],
      "description": "Defense-in-Depth Network Security Layer\nImplements comprehensive network security controls for SutazAI",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/threat-detection/advanced_detection.py",
      "relative_path": "security/threat-detection/advanced_detection.py",
      "name": "advanced_detection.py",
      "size": 36673,
      "lines": 965,
      "hash": "59ae9c9badcf7261a0ecc86f9f457b8d",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "psycopg2.extras",
        "json",
        "pickle",
        "threading",
        "logging",
        "email.mime.text",
        "hashlib",
        "smtplib",
        "enum",
        "typing",
        "sklearn.metrics",
        "email.mime.multipart",
        "sklearn.ensemble",
        "psycopg2",
        "sklearn.model_selection",
        "dataclasses",
        "os",
        "collections",
        "time",
        "numpy",
        "requests",
        "sklearn.preprocessing",
        "datetime",
        "pandas",
        "joblib",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_determine_response_actions",
        "_detect_ddos",
        "class:MLThreatDetector",
        "_hunt_for_threats",
        "_handle_monitor",
        "_train_ml_models",
        "_handle_terminate_process",
        "stop_detection",
        "_rule_based_detection",
        "_send_escalation_notification",
        "extract_features",
        "_update_threat_feeds",
        "_handle_quarantine",
        "class:ThreatType",
        "_confidence_to_threat_level",
        "_detect_data_exfiltration",
        "_store_threat_event",
        "_threat_intelligence_matching",
        "_send_email_notification",
        "_collect_system_info",
        "_handle_isolate_host",
        "_threat_intel_update_loop",
        "get_threat_statistics",
        "class:ThreatDetectionEngine",
        "_handle_alert",
        "_setup_response_handlers",
        "class:ThreatEvent",
        "_initialize_components",
        "_behavioral_analysis",
        "train_anomaly_detector",
        "_handle_collect_forensics",
        "_process_event",
        "get_active_threats",
        "detect_anomaly",
        "_ml_based_detection",
        "_collect_network_connections",
        "_threat_hunting_loop",
        "_handle_escalate",
        "_load_threat_intelligence",
        "_generate_event_id",
        "__init__",
        "class:ThreatLevel",
        "_handle_threat",
        "class:ThreatIntelligence",
        "_detect_brute_force",
        "_event_processing_loop",
        "_handle_block_ip",
        "_send_notification",
        "_analyze_event",
        "_collect_process_list",
        "class:ResponseAction"
      ],
      "description": "Advanced Threat Detection and Response System\nImplements machine learning-based threat detection with automated response",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/rasp/runtime_protection.py",
      "relative_path": "security/rasp/runtime_protection.py",
      "name": "runtime_protection.py",
      "size": 28913,
      "lines": 759,
      "hash": "7f438b992e3cc312154f8ab0c16c445e",
      "category": [
        "monitoring",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "json",
        "threading",
        "sqlite3",
        "traceback",
        "logging",
        "hashlib",
        "enum",
        "re",
        "typing",
        "contextlib",
        "shutil",
        "psutil",
        "sys",
        "psycopg2",
        "functools",
        "urllib.request",
        "dataclasses",
        "tempfile",
        "os",
        "inspect",
        "time",
        "datetime",
        "ast",
        "builtins",
        "types",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_hook_system_operations",
        "_hook_function",
        "get_statistics",
        "remove_rule",
        "class:ActionType",
        "_get_user_agent",
        "add_rule",
        "_hook_network_operations",
        "_check_path_traversal",
        "protected_wrapper",
        "_get_request_path",
        "enable_protection",
        "class:Severity",
        "_protected_db_execute",
        "rasp_protected",
        "_protected_system_command",
        "_protected_exec",
        "class:SecurityException",
        "rasp_disabled",
        "_protected_subprocess_run",
        "class:RASPEngine",
        "_initialize_components",
        "_hook_builtin_function",
        "_handle_security_event",
        "_load_security_rules",
        "_protected_file_open",
        "_get_stack_trace",
        "class:AttackType",
        "_protected_urlopen",
        "class:SecurityEvent",
        "_check_code_injection",
        "_check_ssrf",
        "decorator",
        "_protected_eval",
        "_send_critical_alert",
        "_initialize_function_hooks",
        "_check_sql_injection",
        "_generate_event_id",
        "__init__",
        "class:SecurityRule",
        "get_events",
        "_hook_database_functions",
        "_load_attack_patterns",
        "_get_client_ip",
        "_check_command_injection",
        "_hook_file_operations",
        "disable_protection",
        "wrapper"
      ],
      "description": "Runtime Application Self-Protection (RASP) System\nImplements real-time application security monitoring and protection",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/compliance/compliance_automation.py",
      "relative_path": "security/compliance/compliance_automation.py",
      "name": "compliance_automation.py",
      "size": 53664,
      "lines": 1267,
      "hash": "10c4d181179e221fadf5d70c6a991bd2",
      "category": [
        "testing",
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "time",
        "psycopg2.extras",
        "os",
        "enum",
        "yaml",
        "requests",
        "json",
        "datetime",
        "psycopg2",
        "typing",
        "threading",
        "logging",
        "dataclasses",
        "pathlib",
        "asyncio",
        "redis",
        "subprocess",
        "hashlib"
      ],
      "functions": [
        "class:ComplianceEngine",
        "_generate_compliance_report",
        "class:ControlSeverity",
        "_load_default_controls",
        "get_compliance_status",
        "class:AssessmentResult",
        "class:ComplianceFramework",
        "class:ComplianceStatus",
        "_setup_evidence_collection",
        "class:ComplianceControl",
        "_generate_evidence_id",
        "_initialize_components",
        "_load_compliance_controls",
        "class:ComplianceReport",
        "class:ComplianceEvidence",
        "_store_default_controls",
        "__init__",
        "_generate_report_id",
        "stop_continuous_monitoring"
      ],
      "description": "Security Compliance Automation System\nImplements automated compliance checking for SOC2, ISO27001, PCI-DSS, and other frameworks",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/zero-trust/architecture.py",
      "relative_path": "security/zero-trust/architecture.py",
      "name": "architecture.py",
      "size": 18272,
      "lines": 482,
      "hash": "ab3bc8f1531b9a298968a698e659a8a4",
      "category": [
        "utils",
        "security"
      ],
      "imports": [
        "psycopg2.extras",
        "enum",
        "datetime",
        "typing",
        "cryptography.fernet",
        "dataclasses",
        "cryptography.hazmat.primitives.kdf.pbkdf2",
        "cryptography.hazmat.primitives"
      ],
      "functions": [
        "authorize_request",
        "_update_session_activity",
        "_generate_session_id",
        "_check_device_familiarity",
        "_check_ip_reputation",
        "_validate_session",
        "_reassess_risk",
        "_check_geographic_anomalies",
        "_verify_mfa",
        "_generate_device_fingerprint",
        "_initialize_components",
        "_calculate_risk_score",
        "_log_security_event",
        "_determine_trust_level",
        "_verify_credentials",
        "_has_permission",
        "authenticate_user",
        "__init__",
        "_setup_encryption",
        "_check_time_patterns",
        "_store_session"
      ],
      "description": "!/usr/bin/env python3",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/incident-response/incident_response.py",
      "relative_path": "security/incident-response/incident_response.py",
      "name": "incident_response.py",
      "size": 58119,
      "lines": 1385,
      "hash": "1f10f2afce11146c2b6e69a1ef3b67da",
      "category": [
        "utils",
        "automation",
        "security"
      ],
      "imports": [
        "email",
        "psycopg2.extras",
        "json",
        "threading",
        "bcrypt",
        "logging",
        "email.mime.text",
        "hashlib",
        "string",
        "smtplib",
        "enum",
        "typing",
        "concurrent.futures",
        "email.mime.multipart",
        "shutil",
        "psutil",
        "psycopg2",
        "dataclasses",
        "secrets",
        "tempfile",
        "os",
        "docker",
        "time",
        "requests",
        "email.mime.base",
        "datetime",
        "tarfile",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_calculate_file_hash",
        "_generate_incident_id",
        "class:IncidentType",
        "class:IncidentSeverity",
        "class:SecurityIncident",
        "_setup_forensic_storage",
        "stop_incident_monitoring",
        "class:IncidentStatus",
        "class:ForensicArtifact",
        "_map_threat_to_severity",
        "class:IncidentResponseEngine",
        "_load_active_incidents",
        "_map_threat_to_incident_type",
        "_initialize_components",
        "get_incident_statistics",
        "_load_response_playbooks",
        "_generate_artifact_id",
        "__init__",
        "class:ResponseAction"
      ],
      "description": "Automated Incident Response and Forensics Framework\nImplements comprehensive incident detection, response, and forensic analysis",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/security/vulnerability-management/vuln_scanner.py",
      "relative_path": "security/vulnerability-management/vuln_scanner.py",
      "name": "vuln_scanner.py",
      "size": 44737,
      "lines": 1098,
      "hash": "74ba564c7492a6cb73562e8441f682d8",
      "category": [
        "utils",
        "automation",
        "security",
        "analysis"
      ],
      "imports": [
        "psycopg2.extras",
        "yaml",
        "json",
        "xml.etree.ElementTree",
        "threading",
        "logging",
        "hashlib",
        "enum",
        "re",
        "typing",
        "concurrent.futures",
        "shutil",
        "psycopg2",
        "dataclasses",
        "tempfile",
        "os",
        "docker",
        "time",
        "requests",
        "datetime",
        "tarfile",
        "asyncio",
        "redis",
        "subprocess"
      ],
      "functions": [
        "_parse_semgrep_severity",
        "_generate_summary",
        "class:ScanResult",
        "class:Vulnerability",
        "_parse_cvss_score",
        "get_all_scan_results",
        "class:ScanType",
        "_generate_html_report",
        "get_scan_result",
        "class:VulnerabilityScanner",
        "_setup_scanner_tools",
        "class:RemediationStatus",
        "_check_insecure_configs",
        "_initialize_components",
        "_parse_severity",
        "class:VulnerabilitySeverity",
        "_parse_nmap_script_vuln",
        "_is_exploitable",
        "_severity_to_cvss",
        "_check_yaml_security",
        "_check_hardcoded_secrets",
        "_generate_scan_id",
        "__init__",
        "_install_trivy",
        "_generate_container_remediation",
        "_check_service_vulnerabilities"
      ],
      "description": "Automated Vulnerability Scanning and Patching System\nImplements comprehensive vulnerability assessment and automated remediation",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/chaos/scripts/chaos-monkey.py",
      "relative_path": "chaos/scripts/chaos-monkey.py",
      "name": "chaos-monkey.py",
      "size": 24687,
      "lines": 640,
      "hash": "9b19a75028cfb3f1431420f52a6953bf",
      "category": [
        "automation"
      ],
      "imports": [
        "yaml",
        "json",
        "threading",
        "logging",
        "chaos_engine",
        "enum",
        "typing",
        "signal",
        "psutil",
        "argparse",
        "sys",
        "dataclasses",
        "os",
        "random",
        "docker",
        "schedule",
        "time",
        "datetime",
        "asyncio"
      ],
      "functions": [
        "_get_system_cpu_usage",
        "get_status",
        "class:ChaosMonkeyState",
        "class:ChaosMonkey",
        "class:ChaosExperimentSchedule",
        "stop_scheduler",
        "_run_scheduler",
        "load_schedules",
        "_schedule_experiment",
        "_save_state",
        "start_scheduler",
        "stop",
        "_get_system_memory_usage",
        "emergency_stop",
        "get_safe_target_services",
        "is_service_protected",
        "class:ExperimentScheduler",
        "class:ChaosMonkeyMode",
        "load_config",
        "start",
        "_load_state",
        "_is_maintenance_window",
        "class:ExperimentFrequency",
        "__init__",
        "_signal_handler",
        "_setup_logger",
        "class:SafetyController"
      ],
      "description": "SutazAI Chaos Monkey Implementation\nAutomated, scheduled chaos experiments with safe mode and rollback capabilities",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/chaos/scripts/monitoring-integration.py",
      "relative_path": "chaos/scripts/monitoring-integration.py",
      "name": "monitoring-integration.py",
      "size": 28183,
      "lines": 699,
      "hash": "94ed54a82aea14e8b786082a9cc64d8e",
      "category": [
        "monitoring"
      ],
      "imports": [
        "time",
        "requests",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "typing",
        "logging",
        "os"
      ],
      "functions": [
        "class:PrometheusIntegration",
        "push_custom_metrics",
        "query_system_health",
        "create_chaos_metrics_config",
        "__init__",
        "class:GrafanaIntegration",
        "class:MonitoringIntegration",
        "create_chaos_alert_rules",
        "create_chaos_dashboard",
        "setup_complete_monitoring",
        "_setup_logger",
        "validate_monitoring_integration"
      ],
      "description": "SutazAI Chaos Engineering - Monitoring Integration\nIntegrates chaos engineering with Prometheus, Grafana, and existing monitoring",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/chaos/scripts/resilience-tester.py",
      "relative_path": "chaos/scripts/resilience-tester.py",
      "name": "resilience-tester.py",
      "size": 28701,
      "lines": 708,
      "hash": "4daf141558f56a590ff0920367960f91",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "os",
        "enum",
        "numpy",
        "argparse",
        "sys",
        "json",
        "datetime",
        "networkx",
        "typing",
        "statistics",
        "logging",
        "dataclasses",
        "asyncio"
      ],
      "functions": [
        "class:RecoveryTimeTester",
        "_generate_test_summary",
        "_determine_service_status",
        "get_dependencies",
        "class:ResilienceTestResult",
        "_calculate_cpu_usage",
        "class:ResilienceTestSuite",
        "_get_service_dependencies",
        "get_dependents",
        "class:CascadeFailureTester",
        "class:HealthChecker",
        "_calculate_memory_usage",
        "_setup_logger",
        "class:ResilienceTestType",
        "class:ServiceMetrics",
        "get_isolation_score",
        "class:ServiceStatus",
        "get_cascade_impact",
        "__init__",
        "_build_dependency_graph",
        "class:DependencyGraph",
        "add_service"
      ],
      "description": "SutazAI Resilience Testing Suite\nComprehensive testing for system resilience, recovery time measurement, and cascade failure detection",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/chaos/scripts/docker-integration.py",
      "relative_path": "chaos/scripts/docker-integration.py",
      "name": "docker-integration.py",
      "size": 16326,
      "lines": 426,
      "hash": "51635299feaa83f72d39beb23ecac204",
      "category": [
        "utils"
      ],
      "imports": [
        "docker",
        "yaml",
        "argparse",
        "sys",
        "json",
        "typing",
        "logging",
        "pathlib",
        "os",
        "subprocess"
      ],
      "functions": [
        "validate_chaos_integration",
        "deploy_chaos_services",
        "create_chaos_compose_extension",
        "class:DockerIntegration",
        "add_chaos_labels_to_services",
        "__init__",
        "_setup_logger",
        "get_service_dependencies",
        "create_chaos_dockerfile"
      ],
      "description": "SutazAI Chaos Engineering - Docker Integration\nIntegrates chaos engineering with existing Docker Compose infrastructure",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/chaos/scripts/chaos-engine.py",
      "relative_path": "chaos/scripts/chaos-engine.py",
      "name": "chaos-engine.py",
      "size": 31385,
      "lines": 810,
      "hash": "7b75b9a16a7e0b401bea8ee24b2920cf",
      "category": [
        "testing",
        "automation"
      ],
      "imports": [
        "docker",
        "asyncio",
        "time",
        "requests",
        "enum",
        "yaml",
        "argparse",
        "sys",
        "json",
        "datetime",
        "threading",
        "typing",
        "logging",
        "dataclasses",
        "os",
        "subprocess",
        "random"
      ],
      "functions": [
        "class:ChaosEngine",
        "class:ExperimentStatus",
        "emergency_stop_experiment",
        "_select_targets",
        "class:ChaosLogger",
        "class:ContainerChaos",
        "class:ResourceChaos",
        "error",
        "__init__",
        "class:NetworkChaos",
        "_parse_duration",
        "warning",
        "class:ChaosType",
        "class:HealthMonitor",
        "class:ChaosTarget",
        "info",
        "_load_config",
        "class:ExperimentResult"
      ],
      "description": "SutazAI Chaos Engineering Framework - Main Engine\nImplements automated failure injection and resilience testing",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/monitoring/security/intrusion_detection.py",
      "relative_path": "monitoring/security/intrusion_detection.py",
      "name": "intrusion_detection.py",
      "size": 2228,
      "lines": 69,
      "hash": "391a5c0af463cba5cd089fe0753c0006",
      "category": [
        "monitoring",
        "utils",
        "security",
        "analysis"
      ],
      "imports": [
        "time",
        "datetime",
        "re",
        "logging",
        "pathlib",
        "collections"
      ],
      "functions": [
        "handle_suspicious_activity",
        "analyze_log_line",
        "__init__",
        "class:IntrusionDetector",
        "block_ip"
      ],
      "description": "Basic Intrusion Detection System for SutazAI\nMonitors logs for suspicious activities",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/monitoring/advanced/distributed_tracing.py",
      "relative_path": "monitoring/advanced/distributed_tracing.py",
      "name": "distributed_tracing.py",
      "size": 14610,
      "lines": 365,
      "hash": "26a1177e511d9b24ab5222336be506b8",
      "category": [
        "monitoring",
        "utils",
        "automation"
      ],
      "imports": [
        "uuid",
        "json",
        "opentelemetry",
        "threading",
        "opentelemetry.instrumentation.fastapi",
        "logging",
        "opentelemetry.sdk.resources",
        "fastapi.middleware.base",
        "typing",
        "opentelemetry.instrumentation.requests",
        "contextlib",
        "opentelemetry.sdk.trace.export",
        "dataclasses",
        "prometheus_client",
        "fastapi",
        "opentelemetry.sdk.trace",
        "time",
        "requests",
        "opentelemetry.exporter.jaeger.thrift",
        "datetime",
        "opentelemetry.trace",
        "opentelemetry.instrumentation.asyncio",
        "asyncio"
      ],
      "functions": [
        "setup_tracing",
        "class:AgentInteraction",
        "_send_prometheus_metrics",
        "_categorize_error",
        "analyze_interaction_patterns",
        "setup_agent_tracing",
        "__init__",
        "get_trace_tree",
        "class:AgentInteractionAnalyzer",
        "_analyze_error_patterns",
        "class:TracingMiddleware",
        "correlate_traces",
        "_get_frequent_interactions",
        "_identify_bottleneck_agents",
        "trace_agent_interaction",
        "_record_interaction_metrics",
        "class:DistributedTracingManager",
        "_analyze_interaction_chains"
      ],
      "description": "Advanced Distributed Tracing System for SutazAI Agent Interactions\nImplements OpenTelemetry-based tracing with correlation across microservices",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
      "relative_path": "monitoring/ai-metrics-exporter/ai_metrics_exporter.py",
      "name": "ai_metrics_exporter.py",
      "size": 18226,
      "lines": 476,
      "hash": "08edd098a8bbb802f0f5685d5dc39fe9",
      "category": [
        "monitoring",
        "testing",
        "utils"
      ],
      "imports": [
        "sqlalchemy",
        "time",
        "requests",
        "os",
        "psutil",
        "numpy",
        "json",
        "datetime",
        "typing",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.orm",
        "logging",
        "dataclasses",
        "prometheus_client",
        "asyncio",
        "redis",
        "aiohttp"
      ],
      "functions": [
        "class:MetricConfig",
        "create_app",
        "_init_metrics",
        "__init__",
        "class:AIMetricsExporter"
      ],
      "description": "SutazAI Custom Metrics Exporter\nCollects AI/ML performance and business metrics for Prometheus",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/workflows/self_improving_workflow_engine.py",
      "relative_path": "localagi/workflows/self_improving_workflow_engine.py",
      "name": "self_improving_workflow_engine.py",
      "size": 42368,
      "lines": 942,
      "hash": "401d1d74ce1fdd6bda638843d478f8f8",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "pickle",
        "typing",
        "math",
        "logging",
        "dataclasses",
        "asyncio",
        "collections",
        "random"
      ],
      "functions": [
        "class:WorkflowStep",
        "class:SelfImprovingWorkflow",
        "_calculate_context_similarity",
        "add_workflow_feedback",
        "class:WorkflowExecution",
        "class:SelfImprovingWorkflowEngine",
        "add_performance_feedback",
        "class:LearningMode",
        "__init__",
        "get_workflow_status",
        "_calculate_performance_metrics",
        "add_step",
        "class:WorkflowState",
        "class:OptimizationObjective",
        "create_workflow",
        "get_engine_status",
        "class:PerformanceFeedback",
        "_recalculate_execution_order"
      ],
      "description": "SutazAI Self-Improving Workflow Engine\n\nThis engine creates workflows that learn from execution results,\nadapt their behavior based on performance feedback, and continuously\noptimize themselves for be",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/engine/decision_engine.py",
      "relative_path": "localagi/engine/decision_engine.py",
      "name": "decision_engine.py",
      "size": 39086,
      "lines": 899,
      "hash": "70fe50c85166de9b3fe1358c73a0671a",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "typing",
        "math",
        "logging",
        "dataclasses",
        "asyncio",
        "collections",
        "random"
      ],
      "functions": [
        "_encode_decision_state",
        "_mutate_option",
        "_evaluate_option_fitness",
        "_simulate_option_outcome",
        "class:DecisionType",
        "_calculate_prediction_accuracy",
        "_calculate_expected_value",
        "class:AutonomousDecisionEngine",
        "class:DecisionContext",
        "_calculate_uncertainty_bonus",
        "class:DecisionResult",
        "class:DecisionAlgorithm",
        "_simulate_uncertainty",
        "_crossover_options",
        "_assess_context_complexity",
        "_calculate_criterion_value",
        "get_decision_engine_status",
        "_tournament_selection",
        "class:DecisionOption",
        "__init__",
        "_create_option_variation",
        "_assess_time_pressure",
        "class:DecisionCriteria"
      ],
      "description": "SutazAI Autonomous Decision-Making Engine\n\nThis engine implements sophisticated decision-making algorithms for\nautonomous task assignment, resource allocation, and strategic planning.\nIt operates with",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/engine/task_decomposer.py",
      "relative_path": "localagi/engine/task_decomposer.py",
      "name": "task_decomposer.py",
      "size": 47076,
      "lines": 1039,
      "hash": "5b744f5b823ea16fd43be1f44c657439",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "re",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "collections"
      ],
      "functions": [
        "class:RecursiveTaskDecomposer",
        "get_depth",
        "calculate_priority",
        "_detect_implicit_dependency",
        "_calculate_decomposition_confidence",
        "class:TaskPriority",
        "class:TaskType",
        "_calculate_tree_depth",
        "__init__",
        "class:DecompositionStrategy",
        "class:DecomposedTask",
        "class:DecompositionResult",
        "class:TaskDependency",
        "get_decomposer_status"
      ],
      "description": "SutazAI Recursive Task Decomposition and Delegation Engine\n\nThis engine breaks down complex tasks into smaller, manageable subtasks\nand autonomously delegates them to appropriate agents. It uses AI-po",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/protocols/autonomous_coordination_protocols.py",
      "relative_path": "localagi/protocols/autonomous_coordination_protocols.py",
      "name": "autonomous_coordination_protocols.py",
      "size": 42536,
      "lines": 1093,
      "hash": "2949733308b7e1aec2373a61883e5b77",
      "category": [
        "utils"
      ],
      "imports": [
        "time",
        "enum",
        "uuid",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "collections",
        "random",
        "hashlib"
      ],
      "functions": [
        "class:ProtocolState",
        "class:CoordinationEvent",
        "__init__",
        "register_event_handler",
        "get_protocol_status",
        "class:ProtocolMessage",
        "class:ProtocolType",
        "class:ConsensusAlgorithm",
        "class:MessageType",
        "_calculate_leadership_score",
        "class:AutonomousCoordinationProtocols"
      ],
      "description": "SutazAI Autonomous Coordination Protocols\n\nThis module defines communication and coordination protocols that enable\nAI agents to work together autonomously. It implements various protocol\npatterns inc",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/goals/autonomous_goal_achievement_system.py",
      "relative_path": "localagi/goals/autonomous_goal_achievement_system.py",
      "name": "autonomous_goal_achievement_system.py",
      "size": 48699,
      "lines": 1156,
      "hash": "427f141b33c61edb17af09055adbebf6",
      "category": [
        "monitoring",
        "maintenance"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "typing",
        "math",
        "logging",
        "dataclasses",
        "asyncio",
        "collections"
      ],
      "functions": [
        "class:PlanningStrategy",
        "class:AutonomousGoalAchievementSystem",
        "has_cycle",
        "_calculate_goal_similarity",
        "class:Plan",
        "class:GoalExecution",
        "__init__",
        "_analyze_execution_failures",
        "class:Goal",
        "_has_dependency_cycles",
        "class:AdaptationTrigger",
        "get_system_status",
        "class:GoalStatus",
        "_resource_constraints_changed",
        "class:GoalType"
      ],
      "description": "SutazAI Autonomous Goal Achievement System\n\nThis system enables AI agents to pursue and achieve complex goals independently,\nwith minimal human intervention. It implements goal decomposition, planning",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/frameworks/collaborative_problem_solver.py",
      "relative_path": "localagi/frameworks/collaborative_problem_solver.py",
      "name": "collaborative_problem_solver.py",
      "size": 36888,
      "lines": 865,
      "hash": "cc660d6cf2ab18d263552cbd00ffa5f5",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "networkx",
        "typing",
        "math",
        "logging",
        "dataclasses",
        "asyncio",
        "collections"
      ],
      "functions": [
        "get_solver_status",
        "class:CollaborationSession",
        "class:ProblemType",
        "class:AgentContribution",
        "class:CollaborativeProblemSolver",
        "__init__",
        "_calculate_consensus_score",
        "class:Problem",
        "class:AgentRole",
        "class:CollaborationPattern",
        "class:Solution"
      ],
      "description": "SutazAI Multi-Agent Collaborative Problem Solving Framework\n\nThis framework enables multiple AI agents to work together to solve\ncomplex problems through collaboration, knowledge sharing, consensus\nbu",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/localagi/swarms/swarm_coordinator.py",
      "relative_path": "localagi/swarms/swarm_coordinator.py",
      "name": "swarm_coordinator.py",
      "size": 27531,
      "lines": 678,
      "hash": "d7d0c933b5e0ed25ab3af44687b7f965",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "enum",
        "uuid",
        "json",
        "datetime",
        "typing",
        "logging",
        "dataclasses",
        "asyncio",
        "collections"
      ],
      "functions": [
        "class:CommunicationProtocol",
        "_analyze_capability_requirements",
        "class:SwarmRole",
        "_determine_agent_role",
        "__init__",
        "class:SwarmMember",
        "class:SwarmDecision",
        "class:AutonomousSwarmCoordinator",
        "class:SwarmMessage",
        "class:ConsensusAlgorithm",
        "get_swarm_status",
        "_calculate_agent_swarm_fit"
      ],
      "description": "SutazAI Autonomous Agent Swarm Coordinator\n\nThis module implements self-organizing agent swarms that can:\n- Form dynamically based on task requirements\n- Coordinate complex multi-agent workflows\n- Ada",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/ai-metrics/main.py",
      "relative_path": "services/ai-metrics/main.py",
      "name": "main.py",
      "size": 11368,
      "lines": 256,
      "hash": "cab72b5deb29030e00ca6a22590070fa",
      "category": [
        "monitoring"
      ],
      "imports": [
        "time",
        "requests",
        "os",
        "json",
        "datetime",
        "neo4j",
        "typing",
        "logging",
        "prometheus_client",
        "asyncio"
      ],
      "functions": [
        "main",
        "__init__",
        "class:AIMetricsCollector"
      ],
      "description": "SutazAI AI Metrics Exporter\nCollects and exports metrics from AI services for Prometheus monitoring",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/resource-manager/main.py",
      "relative_path": "services/resource-manager/main.py",
      "name": "main.py",
      "size": 9677,
      "lines": 262,
      "hash": "5d59f172f2b75d1f3f4549e9fd2d28ba",
      "category": [
        "monitoring",
        "testing",
        "utils",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "pika",
        "psutil",
        "os",
        "json",
        "datetime",
        "uvicorn",
        "psycopg2",
        "typing",
        "pydantic",
        "consul",
        "prometheus_client",
        "asyncio",
        "redis",
        "contextlib"
      ],
      "functions": [
        "class:ResourceManager",
        "__init__",
        "get_system_metrics",
        "class:ResourceAllocation",
        "class:SystemMetrics"
      ],
      "description": "SutazAI Resource Manager Service\nManages CPU, memory, and service allocation across the AI system",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/automation/skyvern_service.py",
      "relative_path": "services/automation/skyvern_service.py",
      "name": "skyvern_service.py",
      "size": 3415,
      "lines": 111,
      "hash": "cef40b930a1ccccf5815c033e944ceba",
      "category": [
        "monitoring",
        "automation"
      ],
      "imports": [
        "fastapi",
        "datetime",
        "uvicorn",
        "json"
      ],
      "functions": [],
      "description": "Skyvern AI Web Automation Service",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/automation/browser_use_service.py",
      "relative_path": "services/automation/browser_use_service.py",
      "name": "browser_use_service.py",
      "size": 2887,
      "lines": 99,
      "hash": "ebed3224e5e7612d8d77dcf9db06e63a",
      "category": [
        "monitoring",
        "automation"
      ],
      "imports": [
        "fastapi",
        "datetime",
        "uvicorn",
        "json"
      ],
      "functions": [],
      "description": "Browser-Use Web Automation Service",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/codegen/gpt_engineer_service.py",
      "relative_path": "services/codegen/gpt_engineer_service.py",
      "name": "gpt_engineer_service.py",
      "size": 2385,
      "lines": 86,
      "hash": "df03e19af159224c19e16fa2c3173c5d",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "os",
        "datetime",
        "json",
        "tempfile",
        "uvicorn"
      ],
      "functions": [],
      "description": "GPT-Engineer Code Generation Service",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/codegen/aider_service.py",
      "relative_path": "services/codegen/aider_service.py",
      "name": "aider_service.py",
      "size": 2139,
      "lines": 79,
      "hash": "d98259503365500ef41c929e61f07151",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "datetime",
        "uvicorn",
        "json"
      ],
      "functions": [],
      "description": "Aider AI Code Assistant Service",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/llamaindex/app.py",
      "relative_path": "services/llamaindex/app.py",
      "name": "app.py",
      "size": 2048,
      "lines": 68,
      "hash": "734260873a179a23d8be921ecff3a30c",
      "category": [
        "misc"
      ],
      "imports": [
        "fastapi",
        "llama_index.embeddings",
        "llama_index.llms",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "llama_index",
        "os"
      ],
      "functions": [
        "class:IndexRequest",
        "class:QueryRequest"
      ],
      "description": "LlamaIndex Service for SutazAI",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/base_adapter.py",
      "relative_path": "services/adapters/base_adapter.py",
      "name": "base_adapter.py",
      "size": 5379,
      "lines": 136,
      "hash": "0358d179d0564f4bc4e0cba683975edb",
      "category": [
        "monitoring",
        "testing"
      ],
      "imports": [
        "datetime",
        "json",
        "typing",
        "logging",
        "asyncio",
        "aiohttp",
        "abc"
      ],
      "functions": [
        "__init__",
        "get_metrics",
        "class:ServiceAdapter"
      ],
      "description": "Base adapter class for all external AI service integrations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/__init__.py",
      "relative_path": "services/adapters/__init__.py",
      "name": "__init__.py",
      "size": 112,
      "lines": 7,
      "hash": "8eaed72b269c8c3be594fe0b4bd142e5",
      "category": [
        "misc"
      ],
      "imports": [
        "base_adapter"
      ],
      "functions": [],
      "description": "SutazAI Service Adapters Package",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/main_simple.py",
      "relative_path": "services/jarvis/main_simple.py",
      "name": "main_simple.py",
      "size": 9830,
      "lines": 322,
      "hash": "c0426d796575204cb223d54eea0c9333",
      "category": [
        "monitoring",
        "testing",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "httpx",
        "os",
        "services.jarvis.schemas",
        "json",
        "sys",
        "datetime",
        "uvicorn",
        "typing",
        "starlette.responses",
        "fastapi.staticfiles",
        "pydantic",
        "logging",
        "prometheus_client",
        "asyncio"
      ],
      "functions": [],
      "description": "Simple Jarvis AI System - Web Interface First\nBasic implementation to get the system running",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/main.py",
      "relative_path": "services/jarvis/main.py",
      "name": "main.py",
      "size": 14639,
      "lines": 439,
      "hash": "1210b5b67e0bff5507e5f38dcb78f891",
      "category": [
        "testing",
        "security"
      ],
      "imports": [
        "fastapi.middleware.cors",
        "pydub",
        "json",
        "pydantic",
        "speech_recognition",
        "logging",
        "pyttsx3",
        "typing",
        "starlette.responses",
        "signal",
        "consul",
        "uvicorn",
        "services.jarvis.schemas",
        "sys",
        "prometheus_client",
        "multipart",
        "os",
        "fastapi",
        "datetime",
        "fastapi.staticfiles",
        "core.orchestrator",
        "asyncio"
      ],
      "functions": [
        "dec",
        "class:_Counter",
        "class:_Gauge",
        "signal_handler",
        "__init__",
        "labels",
        "observe",
        "inc",
        "generate_latest",
        "class:MinimalJarvis",
        "class:_Histogram"
      ],
      "description": "Jarvis AI System - Unified Interface for SutazAI\nCombines best features from multiple Jarvis implementations",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/main_basic.py",
      "relative_path": "services/jarvis/main_basic.py",
      "name": "main_basic.py",
      "size": 11972,
      "lines": 388,
      "hash": "1351cc433a3dfd32b2d526ea1ce0dff1",
      "category": [
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "httpx",
        "os",
        "services.jarvis.schemas",
        "json",
        "datetime",
        "uvicorn",
        "typing",
        "starlette.responses",
        "fastapi.staticfiles",
        "pydantic",
        "logging",
        "asyncio"
      ],
      "functions": [],
      "description": "Basic Jarvis AI System - Web Interface Only\nMinimal implementation to get the web interface working",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/schemas.py",
      "relative_path": "services/jarvis/schemas.py",
      "name": "schemas.py",
      "size": 497,
      "lines": 21,
      "hash": "366f6fb7245ee335eba31e1fbf53347a",
      "category": [
        "misc"
      ],
      "imports": [
        "pydantic",
        "typing"
      ],
      "functions": [
        "class:TaskResponse",
        "class:TaskRequest"
      ],
      "description": "",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/langchain/main.py",
      "relative_path": "services/langchain/main.py",
      "name": "main.py",
      "size": 8718,
      "lines": 258,
      "hash": "a17a835d895d3afca79983a13050546c",
      "category": [
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "requests",
        "json",
        "datetime",
        "langchain.chains",
        "uvicorn",
        "typing",
        "langchain.llms",
        "pydantic",
        "langchain.memory",
        "langchain.callbacks",
        "logging",
        "langchain.callbacks.streaming_stdout",
        "consul",
        "os",
        "redis",
        "langchain.prompts"
      ],
      "functions": [
        "class:ChainRequest",
        "class:ChainResponse"
      ],
      "description": "Purpose: LangChain service providing chain execution and agent capabilities\nUsage: python main.py\nRequirements: langchain, fastapi, uvicorn, redis",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/ml/pytorch_service.py",
      "relative_path": "services/ml/pytorch_service.py",
      "name": "pytorch_service.py",
      "size": 1521,
      "lines": 56,
      "hash": "a1fb1886793b5fea99e9e8e95ca19e13",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "torch",
        "datetime",
        "json",
        "uvicorn"
      ],
      "functions": [],
      "description": "PyTorch ML Framework Service - CPU Version",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/ml/tensorflow_service.py",
      "relative_path": "services/ml/tensorflow_service.py",
      "name": "tensorflow_service.py",
      "size": 1591,
      "lines": 56,
      "hash": "e5f350089f628141b5b749e1fce38921",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "datetime",
        "json",
        "tensorflow",
        "uvicorn"
      ],
      "functions": [],
      "description": "TensorFlow ML Framework Service - CPU Version",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/ml/jax_service.py",
      "relative_path": "services/ml/jax_service.py",
      "name": "jax_service.py",
      "size": 1480,
      "lines": 57,
      "hash": "19635fcada68970dcf777a6c85a2f1d9",
      "category": [
        "monitoring"
      ],
      "imports": [
        "fastapi",
        "datetime",
        "json",
        "jax",
        "jax.numpy",
        "uvicorn"
      ],
      "functions": [],
      "description": "JAX ML Framework Service - CPU Version",
      "shebang": true,
      "executable": true
    },
    {
      "path": "/opt/sutazaiapp/services/faiss-vector/main.py",
      "relative_path": "services/faiss-vector/main.py",
      "name": "main.py",
      "size": 12658,
      "lines": 352,
      "hash": "591e14496fecc4cb0696c9c9e241c9d0",
      "category": [
        "monitoring",
        "testing",
        "security"
      ],
      "imports": [
        "fastapi",
        "fastapi.middleware.cors",
        "asyncio",
        "numpy",
        "json",
        "datetime",
        "pickle",
        "uvicorn",
        "typing",
        "pydantic",
        "logging",
        "faiss",
        "prometheus_client",
        "os",
        "redis"
      ],
      "functions": [
        "class:FAISSVectorService",
        "estimate_memory_usage",
        "class:VectorData",
        "__init__",
        "create_new_index",
        "class:SearchResult",
        "class:SearchRequest"
      ],
      "description": "SutazAI FAISS Vector Index Service\nHigh-performance vector similarity search using FAISS",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/scaler/service_scaler.py",
      "relative_path": "services/scaler/service_scaler.py",
      "name": "service_scaler.py",
      "size": 13684,
      "lines": 345,
      "hash": "16434259088e59d81ba9db219b62219a",
      "category": [
        "misc"
      ],
      "imports": [
        "docker",
        "time",
        "requests",
        "os",
        "json",
        "datetime",
        "typing",
        "logging",
        "prometheus_client.parser",
        "consul",
        "asyncio",
        "redis"
      ],
      "functions": [
        "class:ServiceScaler",
        "calculate_cpu_percent",
        "__init__"
      ],
      "description": "Purpose: Dynamic service scaler for AI services based on resource usage and queue depth\nUsage: python service_scaler.py\nRequirements: docker, consul, prometheus_client, redis",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/api-adapter/unified_ai_client.py",
      "relative_path": "services/api-adapter/unified_ai_client.py",
      "name": "unified_ai_client.py",
      "size": 13727,
      "lines": 405,
      "hash": "f5516a396cff2c6c09a9193530fc5911",
      "category": [
        "monitoring",
        "utils"
      ],
      "imports": [
        "time",
        "requests",
        "enum",
        "requests.adapters",
        "json",
        "requests.packages.urllib3.util.retry",
        "typing",
        "logging",
        "dataclasses",
        "consul",
        "os",
        "redis"
      ],
      "functions": [
        "discover_services",
        "class:UnifiedAIClient",
        "execute_workflow",
        "vector_search",
        "chat_completion",
        "batch_process",
        "class:ServiceType",
        "create_autonomous_task",
        "__init__",
        "get_service_metrics",
        "class:ServiceInfo",
        "get_healthy_services",
        "check_service_health",
        "execute_chain",
        "create_workflow",
        "vector_store"
      ],
      "description": "Purpose: Unified API client for distributed AI services\nUsage: from unified_ai_client import UnifiedAIClient\nRequirements: requests, redis, consul",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/chainlit/chainlit_app.py",
      "relative_path": "services/chainlit/chainlit_app.py",
      "name": "chainlit_app.py",
      "size": 2822,
      "lines": 90,
      "hash": "9aeefa358dedcc52f30d784981c512b3",
      "category": [
        "deployment",
        "maintenance",
        "automation"
      ],
      "imports": [
        "chainlit",
        "httpx",
        "os",
        "typing"
      ],
      "functions": [],
      "description": "Chainlit App for SutazAI - Conversational AI Interface",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/vector_db/chromadb_adapter.py",
      "relative_path": "services/adapters/vector_db/chromadb_adapter.py",
      "name": "chromadb_adapter.py",
      "size": 5479,
      "lines": 160,
      "hash": "c453752c349bcf74d6cbe31154178889",
      "category": [
        "misc"
      ],
      "imports": [
        "chromadb.config",
        "numpy",
        "typing",
        "chromadb",
        "base_adapter",
        "logging"
      ],
      "functions": [
        "__init__",
        "class:ChromaDBAdapter"
      ],
      "description": "ChromaDB adapter for vector storage and retrieval",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/vector_db/__init__.py",
      "relative_path": "services/adapters/vector_db/__init__.py",
      "name": "__init__.py",
      "size": 225,
      "lines": 9,
      "hash": "965a6ce4bd8de112820c99525d267a7f",
      "category": [
        "misc"
      ],
      "imports": [
        "qdrant_adapter",
        "faiss_adapter",
        "chromadb_adapter"
      ],
      "functions": [],
      "description": "Vector Database Adapters",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/vector_db/faiss_adapter.py",
      "relative_path": "services/adapters/vector_db/faiss_adapter.py",
      "name": "faiss_adapter.py",
      "size": 7161,
      "lines": 188,
      "hash": "28a7fc39c1f33a19eb7bbbbc8980a786",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "pickle",
        "typing",
        "base_adapter",
        "logging",
        "faiss",
        "os"
      ],
      "functions": [
        "__init__",
        "class:FAISSAdapter"
      ],
      "description": "FAISS adapter for high-performance vector similarity search",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/vector_db/qdrant_adapter.py",
      "relative_path": "services/adapters/vector_db/qdrant_adapter.py",
      "name": "qdrant_adapter.py",
      "size": 8798,
      "lines": 256,
      "hash": "763717be9eb8a729cf01e9130bfe8a47",
      "category": [
        "misc"
      ],
      "imports": [
        "uuid",
        "typing",
        "base_adapter",
        "qdrant_client",
        "logging",
        "qdrant_client.models"
      ],
      "functions": [
        "__init__",
        "class:QdrantAdapter"
      ],
      "description": "Qdrant adapter for vector database operations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/agent_systems/autogpt_adapter.py",
      "relative_path": "services/adapters/agent_systems/autogpt_adapter.py",
      "name": "autogpt_adapter.py",
      "size": 12612,
      "lines": 374,
      "hash": "4d28440a554d8c9bc1282859965b402c",
      "category": [
        "testing"
      ],
      "imports": [
        "json",
        "typing",
        "base_adapter",
        "logging",
        "asyncio"
      ],
      "functions": [
        "class:AutoGPTAdapter",
        "__init__"
      ],
      "description": "AutoGPT adapter for autonomous task execution",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/agent_systems/__init__.py",
      "relative_path": "services/adapters/agent_systems/__init__.py",
      "name": "__init__.py",
      "size": 160,
      "lines": 8,
      "hash": "0ba030ef3d45ccc2be775197719cdb29",
      "category": [
        "misc"
      ],
      "imports": [
        "autogpt_adapter",
        "letta_adapter"
      ],
      "functions": [],
      "description": "Agent System Adapters",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/agent_systems/letta_adapter.py",
      "relative_path": "services/adapters/agent_systems/letta_adapter.py",
      "name": "letta_adapter.py",
      "size": 10781,
      "lines": 327,
      "hash": "aad2864884ac685dae20e0dd29b937da",
      "category": [
        "testing"
      ],
      "imports": [
        "json",
        "typing",
        "base_adapter",
        "logging",
        "aiohttp"
      ],
      "functions": [
        "class:LettaAdapter",
        "__init__"
      ],
      "description": "Letta (formerly MemGPT) adapter for autonomous agent operations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/specialized_tools/finrobot_adapter.py",
      "relative_path": "services/adapters/specialized_tools/finrobot_adapter.py",
      "name": "finrobot_adapter.py",
      "size": 13391,
      "lines": 384,
      "hash": "c9b6f85a5600ddb8a271203b678677c8",
      "category": [
        "utils"
      ],
      "imports": [
        "datetime",
        "typing",
        "pandas",
        "base_adapter",
        "logging"
      ],
      "functions": [
        "__init__",
        "class:FinRobotAdapter"
      ],
      "description": "FinRobot adapter for financial analysis and trading operations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/specialized_tools/__init__.py",
      "relative_path": "services/adapters/specialized_tools/__init__.py",
      "name": "__init__.py",
      "size": 111,
      "lines": 7,
      "hash": "f11948855778829f1f9d1a9429179437",
      "category": [
        "utils"
      ],
      "imports": [
        "finrobot_adapter"
      ],
      "functions": [],
      "description": "Specialized Tool Adapters",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/ai_frameworks/tensorflow_adapter.py",
      "relative_path": "services/adapters/ai_frameworks/tensorflow_adapter.py",
      "name": "tensorflow_adapter.py",
      "size": 12383,
      "lines": 335,
      "hash": "4159ca85860ecd767382db95636af785",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "typing",
        "base_adapter",
        "tensorflow",
        "logging",
        "concurrent.futures",
        "asyncio"
      ],
      "functions": [
        "_train",
        "class:TensorFlowAdapter",
        "_inference",
        "__init__",
        "_load",
        "_save",
        "_optimize",
        "__del__"
      ],
      "description": "TensorFlow adapter for deep learning operations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/ai_frameworks/__init__.py",
      "relative_path": "services/adapters/ai_frameworks/__init__.py",
      "name": "__init__.py",
      "size": 175,
      "lines": 8,
      "hash": "1cb4af2aa1510202a9a6e206a154e973",
      "category": [
        "misc"
      ],
      "imports": [
        "tensorflow_adapter",
        "pytorch_adapter"
      ],
      "functions": [],
      "description": "AI Framework Adapters",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/ai_frameworks/pytorch_adapter.py",
      "relative_path": "services/adapters/ai_frameworks/pytorch_adapter.py",
      "name": "pytorch_adapter.py",
      "size": 10498,
      "lines": 286,
      "hash": "9c36095efea8743ac74364b39f50d7d2",
      "category": [
        "misc"
      ],
      "imports": [
        "numpy",
        "torch",
        "typing",
        "torch.nn",
        "base_adapter",
        "concurrent.futures",
        "logging",
        "asyncio"
      ],
      "functions": [
        "_train_step",
        "_inference",
        "__init__",
        "_load",
        "_save",
        "class:PyTorchAdapter",
        "__del__"
      ],
      "description": "PyTorch adapter for deep learning model operations",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/workflow_tools/langflow_adapter.py",
      "relative_path": "services/adapters/workflow_tools/langflow_adapter.py",
      "name": "langflow_adapter.py",
      "size": 10935,
      "lines": 347,
      "hash": "849d1a7f4e9f82d0e09462d6f78834ed",
      "category": [
        "testing",
        "utils",
        "automation"
      ],
      "imports": [
        "uuid",
        "base_adapter",
        "logging",
        "typing"
      ],
      "functions": [
        "class:LangFlowAdapter",
        "__init__"
      ],
      "description": "LangFlow adapter for visual workflow creation and execution",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/workflow_tools/__init__.py",
      "relative_path": "services/adapters/workflow_tools/__init__.py",
      "name": "__init__.py",
      "size": 161,
      "lines": 8,
      "hash": "56a5a40de24c5ecc9e17da616d25784e",
      "category": [
        "utils"
      ],
      "imports": [
        "langflow_adapter",
        "dify_adapter"
      ],
      "functions": [],
      "description": "Workflow Tool Adapters",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/adapters/workflow_tools/dify_adapter.py",
      "relative_path": "services/adapters/workflow_tools/dify_adapter.py",
      "name": "dify_adapter.py",
      "size": 11906,
      "lines": 366,
      "hash": "af28791cda8128154488526094c9e721",
      "category": [
        "deployment",
        "testing",
        "utils"
      ],
      "imports": [
        "base_adapter",
        "logging",
        "typing"
      ],
      "functions": [
        "class:DifyAdapter",
        "__init__"
      ],
      "description": "Dify adapter for AI workflow orchestration",
      "shebang": false,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/task_planner.py",
      "relative_path": "services/jarvis/core/task_planner.py",
      "name": "task_planner.py",
      "size": 16947,
      "lines": 458,
      "hash": "1891d0d91563947bc246f4502b45ae84",
      "category": [
        "testing"
      ],
      "imports": [
        "httpx",
        "json",
        "datetime",
        "typing",
        "logging",
        "asyncio"
      ],
      "functions": [
        "has_cycle",
        "_load_planning_templates",
        "_estimate_duration",
        "_structure_plan",
        "__init__",
        "_classify_task",
        "_create_basic_steps",
        "_has_circular_dependencies",
        "_parse_steps_from_response",
        "class:TaskPlanner",
        "_create_fallback_plan"
      ],
      "description": "Task Planner - Creates execution plans for voice commands and tasks\nIntegrates with Ollama/tinyllama for intelligent planning",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/agent_coordinator.py",
      "relative_path": "services/jarvis/core/agent_coordinator.py",
      "name": "agent_coordinator.py",
      "size": 24967,
      "lines": 526,
      "hash": "bfc84a8d1fd97a49b5d78068bf192dfe",
      "category": [
        "misc"
      ],
      "imports": [
        "datetime",
        "json",
        "typing",
        "logging",
        "asyncio",
        "aiohttp"
      ],
      "functions": [
        "_load_default_agents",
        "class:AgentCoordinator",
        "__init__",
        "_extract_keywords_from_description",
        "_load_agent_specialties"
      ],
      "description": "Agent Coordinator - Manages interaction with 131 AI agents",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/voice_interface_minimal.py",
      "relative_path": "services/jarvis/core/voice_interface_minimal.py",
      "name": "voice_interface_minimal.py",
      "size": 12444,
      "lines": 331,
      "hash": "1cef5738460b477bc7bece91c6c6349f",
      "category": [
        "utils"
      ],
      "imports": [
        "os",
        "pyttsx3",
        "json",
        "datetime",
        "typing",
        "speech_recognition",
        "logging",
        "pathlib",
        "tempfile",
        "asyncio"
      ],
      "functions": [
        "is_available",
        "class:VoiceInterface",
        "_detect_wake_word",
        "__init__",
        "set_wake_word_callback",
        "set_command_callback"
      ],
      "description": "Minimal Voice Interface for JARVIS AI System\nBasic voice capabilities without heavy ML dependencies",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/orchestrator.py",
      "relative_path": "services/jarvis/core/orchestrator.py",
      "name": "orchestrator.py",
      "size": 12325,
      "lines": 323,
      "hash": "be8f45013899f070b2b9d6aff8a38ab9",
      "category": [
        "deployment",
        "utils"
      ],
      "imports": [
        "time",
        "yaml",
        "json",
        "datetime",
        "agent_coordinator",
        "typing",
        "plugin_manager",
        "voice_interface",
        "voice_interface_minimal",
        "logging",
        "pathlib",
        "memory_manager",
        "asyncio",
        "task_planner"
      ],
      "functions": [
        "_get_default_config",
        "_load_config",
        "class:JarvisOrchestrator",
        "__init__"
      ],
      "description": "Jarvis Orchestrator - Core coordination logic",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/plugin_manager.py",
      "relative_path": "services/jarvis/core/plugin_manager.py",
      "name": "plugin_manager.py",
      "size": 16995,
      "lines": 443,
      "hash": "1a88e22c846ee3c8e1ff79e58f5f8998",
      "category": [
        "utils"
      ],
      "imports": [
        "psutil",
        "json",
        "sys",
        "datetime",
        "platform",
        "typing",
        "importlib.util",
        "logging",
        "pathlib",
        "asyncio"
      ],
      "functions": [
        "is_enabled",
        "__init__",
        "class:BuiltinPlugin",
        "get_plugin_info",
        "list_plugins",
        "class:PluginManager"
      ],
      "description": "Plugin Manager - Manages JARVIS plugins for extensible functionality",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/voice_interface.py",
      "relative_path": "services/jarvis/core/voice_interface.py",
      "name": "voice_interface.py",
      "size": 18364,
      "lines": 476,
      "hash": "11c5e467108c68ed17a4e86102bdf5f5",
      "category": [
        "utils"
      ],
      "imports": [
        "transformers",
        "soundfile",
        "numpy",
        "os",
        "pyttsx3",
        "pyaudio",
        "scipy",
        "json",
        "datetime",
        "torch",
        "typing",
        "speech_recognition",
        "logging",
        "pathlib",
        "wave",
        "tempfile",
        "asyncio",
        "webrtcvad"
      ],
      "functions": [
        "is_available",
        "class:VoiceInterface",
        "_detect_wake_word",
        "__init__",
        "set_wake_word_callback",
        "set_command_callback"
      ],
      "description": "Advanced Voice Interface for JARVIS AI System\nProvides sophisticated speech recognition, synthesis, and voice command processing",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/core/memory_manager.py",
      "relative_path": "services/jarvis/core/memory_manager.py",
      "name": "memory_manager.py",
      "size": 20488,
      "lines": 516,
      "hash": "5511e7599432a05995c8069c9125dea6",
      "category": [
        "utils"
      ],
      "imports": [
        "numpy",
        "sentence_transformers",
        "json",
        "datetime",
        "typing",
        "sqlite3",
        "aioredis",
        "logging",
        "pathlib",
        "asyncio",
        "hashlib"
      ],
      "functions": [
        "_generate_id",
        "__init__",
        "class:MemoryManager"
      ],
      "description": "Memory Manager - Manages conversation history, context, and knowledge for JARVIS",
      "shebang": true,
      "executable": false
    },
    {
      "path": "/opt/sutazaiapp/services/jarvis/tests/test_routes_minimal.py",
      "relative_path": "services/jarvis/tests/test_routes_minimal.py",
      "name": "test_routes_minimal.py",
      "size": 1485,
      "lines": 60,
      "hash": "3cca471e1c389c59822672167220c4b9",
      "category": [
        "monitoring",
        "testing",
        "maintenance",
        "utils"
      ],
      "imports": [
        "pytest",
        "sys",
        "services.jarvis.main",
        "pathlib",
        "os",
        "fastapi.testclient"
      ],
      "functions": [
        "test_task_plan",
        "test_websocket",
        "test_voice_process",
        "client",
        "test_health"
      ],
      "description": "",
      "shebang": false,
      "executable": false
    }
  ]
}