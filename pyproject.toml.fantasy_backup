[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "sutazai-testing"
version = "1.0.0"
description = "SutazAI Multi-Agent Task Automation Platform"
authors = [
    {name = "SutazAI Team", email = "team@sutazai.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["automation", "ai", "testing", "deployment", "multi-agent"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core testing
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.1.0",
    "pytest-benchmark>=4.0.0",
    
    # HTTP testing
    "httpx>=0.24.0",
    "requests>=2.28.0",
    "requests-mock>=1.10.0",
    "responses>=0.23.0",
    
    # Database testing
    "pytest-postgresql>=5.0.0",
    "pytest-redis>=3.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.10.0",
    
    # Web testing
    "selenium>=4.10.0",
    "webdriver-manager>=3.8.0",
    "playwright>=1.35.0",
    "beautifulsoup4>=4.12.0",
    
    # API testing
    "fastapi[all]>=0.100.0",
    "uvicorn>=0.22.0",
    "starlette>=0.27.0",
    
    # Frontend testing
    "streamlit>=1.25.0",
    
    # Data & Analytics
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "plotly>=5.15.0",
    
    # Performance & Monitoring
    "locust>=2.15.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
    
    # Security testing
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # Mocking & Fixtures
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
    "freezegun>=1.2.0",
    "responses>=0.23.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.4.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]

docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]

performance = [
    "line_profiler>=4.0.0",
    "pympler>=0.9",
    "objgraph>=3.5.0",
]

security = [
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
]

[project.urls]
Homepage = "https://github.com/sutazai/sutazai-agi"
Documentation = "https://docs.sutazai.com"
Repository = "https://github.com/sutazai/sutazai-agi.git"
"Bug Tracker" = "https://github.com/sutazai/sutazai-agi/issues"

[project.scripts]
sutazai-test = "scripts.test_runner:main"
sutazai-load-test = "scripts.load_test:main"
sutazai-security-scan = "scripts.security_scan:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*", "frontend*", "tests*", "scripts*"]
exclude = ["*.tests", "*.tests.*", "tests.*"]

[tool.pytest.ini_options]
testpaths = ["backend/tests", "frontend/tests", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov=frontend", 
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--junitxml=test-results.xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "security: Security tests",
    "frontend: Frontend tests",
    "backend: Backend tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "api: API tests",
    "database: Database tests",
    "websocket: WebSocket tests",
    "auth: Authentication tests",
    "docker: Docker container tests",
    "load: Load testing",
    "smoke: Smoke tests",
    "regression: Regression tests",
    "critical: Critical path tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend", "frontend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.ruff]
# Add other global Ruff settings here if needed
# line-length = 88 

exclude = [
    "core/neuromorphic_pb2.py",
    "core/neuromorphic_pb2_grpc.py",
    "*/tests/*",
    "*/test_*",
]

[tool.ruff.lint.per-file-ignores]
# Ignore F403 (star-import) and F405 (undefined-name-from-star-import) 
# specifically for the pwiz.py script within the virtual environment.
"venv-sutazaiapp/bin/pwiz.py" = ["F403", "F405"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with this, refine later
check_untyped_defs = true     # Check bodies of functions without type hints
disallow_untyped_defs = false # Allow untyped functions for now (gradual typing)
no_implicit_optional = true  # Don't default Optional[T] for None defaults
warn_redundant_casts = true
warn_unused_ignores = true   # Report ignores that are no longer needed
show_error_codes = true      # Show error codes like [import]

# Per-module settings can be added later if needed
# e.g., [tool.mypy-some_legacy_module]
# disallow_untyped_defs = false

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"] 