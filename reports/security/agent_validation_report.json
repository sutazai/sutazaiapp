{
  "timestamp": "2025-07-31T09:23:56.916164",
  "summary": {
    "total": 38,
    "passed": 36,
    "warnings": 2,
    "failed": 0
  },
  "results": {
    "passed": [
      "agentgpt-autonomous-executor",
      "agentzero-coordinator",
      "agi-system-architect",
      "ai-agent-creator",
      "ai-agent-orchestrator",
      "ai-product-manager",
      "ai-scrum-master",
      "autonomous-system-controller",
      "bigagi-system-manager",
      "browser-automation-orchestrator",
      "code-generation-improver",
      "complex-problem-solver",
      "context-optimization-engineer",
      "deep-learning-brain-manager",
      "deployment-automation-master",
      "dify-automation-specialist",
      "document-knowledge-manager",
      "financial-analysis-specialist",
      "flowiseai-flow-manager",
      "hardware-resource-optimizer",
      "jarvis-voice-interface",
      "kali-security-specialist",
      "langflow-workflow-designer",
      "litellm-proxy-manager",
      "localagi-orchestration-manager",
      "ollama-integration-specialist",
      "opendevin-code-generator",
      "private-data-analyst",
      "security-pentesting-specialist",
      "senior-ai-engineer",
      "senior-backend-developer",
      "senior-frontend-developer",
      "shell-automation-specialist",
      "system-optimizer-reorganizer",
      "task-assignment-coordinator",
      "testing-qa-validator"
    ],
    "failed": [],
    "warnings": [
      "infrastructure-devops-manager",
      "semgrep-security-analyzer"
    ]
  },
  "agent_registry": {
    "agentgpt-autonomous-executor": {
      "name": "agentgpt-autonomous-executor",
      "model": "sonnet",
      "capabilities": [
        "Execute complex multi-step goals autonomously",
        "Create self-directed AI agents",
        "Build goal-driven AI systems",
        "Implement autonomous research agents",
        "Design self-improving task executors",
        "Create agents that plan their own actions",
        "Build persistent goal-pursuing systems",
        "Implement autonomous problem solvers",
        "Design agents that learn from failures",
        "Create self-organizing task systems",
        "Build autonomous project managers",
        "Implement goal decomposition systems",
        "Design milestone-tracking agents",
        "Create autonomous debugging systems",
        "Build self-directed learning agents",
        "Implement autonomous content creators",
        "Design goal-oriented chatbots",
        "Create agents that handle long-running tasks",
        "Build autonomous monitoring systems",
        "Implement self-healing workflows",
        "Design agents that request resources",
        "Create autonomous testing frameworks",
        "Build goal-achievement optimizers",
        "Implement success criteria validation",
        "Design autonomous exploration systems",
        "Simple single-step tasks",
        "Highly controlled workflows",
        "Tasks requiring human approval at each step",
        "Real-time responsive systems"
      ],
      "capability_count": 29
    },
    "agentzero-coordinator": {
      "name": "agentzero-coordinator",
      "model": "sonnet",
      "capabilities": [
        "Deploy general-purpose AI agents that can handle any task",
        "Create adaptive agents that learn from experience",
        "Handle unpredictable or diverse task types",
        "Build zero-shot task completion systems",
        "Scale agent deployments dynamically based on demand",
        "Create fallback systems for specialized agents",
        "Implement few-shot learning for new task types",
        "Manage pools of generalist agents",
        "Route tasks that don't fit specific categories",
        "Build self-organizing agent systems",
        "Create agents that can use multiple tools",
        "Enable rapid prototyping of AI capabilities",
        "Handle edge cases other agents can't process",
        "Implement agent recycling and resource management",
        "Create agents that improve through interaction",
        "Build knowledge transfer between agent instances",
        "Design adaptive reasoning systems",
        "Implement general problem-solving frameworks",
        "Create agents that can explain their reasoning",
        "Build multi-modal agent capabilities",
        "Highly specialized tasks (use domain-specific agents)",
        "Tasks requiring specific expertise",
        "Performance-critical operations",
        "Tasks with strict compliance requirements"
      ],
      "capability_count": 24
    },
    "agi-system-architect": {
      "name": "agi-system-architect",
      "model": "opus",
      "capabilities": [
        "Design comprehensive AGI/ASI system architectures",
        "Create scalable and modular system designs",
        "Implement cognitive architectures for artificial general intelligence",
        "Design multi-modal AI integration patterns",
        "Create self-improving system architectures",
        "Implement meta-learning frameworks",
        "Design distributed intelligence systems",
        "Create neural-symbolic hybrid architectures",
        "Implement consciousness modeling approaches",
        "Build recursive self-improvement mechanisms",
        "Design emergent intelligence patterns",
        "Create knowledge representation systems",
        "Implement reasoning and inference engines",
        "Build memory architecture for AGI systems",
        "Design attention and focus mechanisms",
        "Create goal-oriented architecture patterns",
        "Implement ethical AI frameworks",
        "Build explainable AGI architectures",
        "Design robustness and safety measures",
        "Create AGI evaluation frameworks",
        "Implement transfer learning architectures",
        "Build continual learning systems",
        "Design AGI communication protocols",
        "Create AGI-human interaction patterns",
        "Implement AGI resource optimization",
        "Build AGI monitoring and control systems",
        "Design AGI evolution strategies",
        "Create AGI alignment mechanisms",
        "Implement AGI security architectures",
        "Build AGI testing and validation frameworks",
        "Specific code implementation (use code-generation agents)",
        "Deployment tasks (use deployment-automation-master)",
        "Infrastructure management (use infrastructure-devops-manager)",
        "Testing implementation (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "ai-agent-creator": {
      "name": "ai-agent-creator",
      "model": "opus",
      "capabilities": [
        "Analyze system gaps and identify missing agent capabilities",
        "Design new AI agents based on system needs",
        "Create agent specification documents",
        "Implement agent communication protocols",
        "Build agent capability matrices",
        "Design agent interaction patterns",
        "Create agent testing frameworks",
        "Implement agent lifecycle management",
        "Build agent discovery mechanisms",
        "Design agent collaboration strategies",
        "Create agent performance metrics",
        "Implement agent learning systems",
        "Build agent template libraries",
        "Design agent specialization patterns",
        "Create agent integration guidelines",
        "Implement agent versioning systems",
        "Build agent deployment automation",
        "Design agent capability evolution",
        "Create agent documentation standards",
        "Implement agent quality assurance",
        "Build agent marketplace systems",
        "Design agent cost models",
        "Create agent security frameworks",
        "Implement agent monitoring solutions",
        "Build agent debugging tools",
        "Design agent migration strategies",
        "Create agent compatibility layers",
        "Implement agent orchestration rules",
        "Build agent knowledge transfer",
        "Design meta-agent architectures",
        "General development tasks (use specific development agents)",
        "System deployment (use deployment-automation-master)",
        "Infrastructure (use infrastructure-devops-manager)",
        "Testing existing code (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "ai-agent-orchestrator": {
      "name": "ai-agent-orchestrator",
      "model": "sonnet",
      "capabilities": [
        "Coordinate multi-agent workflows and complex task orchestration",
        "Manage agent discovery and registration",
        "Handle distributed task execution across multiple agents",
        "Implement agent communication protocols",
        "Design workflow graphs and execution plans",
        "Monitor agent performance and health",
        "Manage agent lifecycle (start, stop, restart)",
        "Implement load balancing across agents",
        "Handle agent failover and recovery",
        "Create agent collaboration patterns",
        "Design consensus mechanisms for multi-agent decisions",
        "Implement agent state synchronization",
        "Build event-driven agent architectures",
        "Create agent middleware and messaging systems",
        "Design agent capability matching systems",
        "Implement agent negotiation protocols",
        "Build agent reputation systems",
        "Create hierarchical agent organizations",
        "Design agent learning and adaptation mechanisms",
        "Implement agent security and authentication",
        "Handle inter-agent data exchange",
        "Create agent monitoring dashboards",
        "Build agent testing frameworks",
        "Design agent deployment strategies",
        "Implement agent version management",
        "Create agent documentation standards",
        "Build agent performance benchmarks",
        "Design agent cost optimization strategies",
        "Implement agent resource allocation",
        "Create agent debugging tools",
        "Simple single-agent tasks",
        "Direct code implementation (use code-generation agents)",
        "Infrastructure management (use infrastructure-devops-manager)",
        "Testing individual components (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "ai-product-manager": {
      "name": "ai-product-manager",
      "model": "opus",
      "capabilities": [
        "Analyze and define AI product requirements",
        "Research market trends and competitor solutions",
        "Create product roadmaps and feature prioritization",
        "Coordinate complex AI projects across teams",
        "Conduct web searches for technical solutions",
        "Build product specifications and documentation",
        "Design user stories and acceptance criteria",
        "Implement product analytics and metrics",
        "Create go-to-market strategies for AI products",
        "Build product feedback loops",
        "Design A/B testing frameworks",
        "Coordinate stakeholder communications",
        "Create product vision and strategy documents",
        "Implement product lifecycle management",
        "Build competitive analysis frameworks",
        "Design user research methodologies",
        "Create product pricing strategies",
        "Implement feature flag systems",
        "Build product onboarding flows",
        "Design product education materials",
        "Create product launch plans",
        "Implement product success metrics",
        "Build customer journey maps",
        "Design product experimentation frameworks",
        "Create product backlog management",
        "Implement product-market fit analysis",
        "Build product partnership strategies",
        "Design product scaling strategies",
        "Create product deprecation plans",
        "Implement product compliance frameworks",
        "Direct code implementation (use development agents)",
        "Infrastructure management (use infrastructure-devops-manager)",
        "Testing implementation (use testing-qa-validator)",
        "Design work (use senior-frontend-developer)"
      ],
      "capability_count": 34
    },
    "ai-scrum-master": {
      "name": "ai-scrum-master",
      "model": "sonnet",
      "capabilities": [
        "Facilitate agile ceremonies and processes",
        "Manage sprint planning and execution",
        "Remove impediments blocking team progress",
        "Implement agile best practices",
        "Create sprint retrospectives and improvements",
        "Build team velocity tracking",
        "Design burndown charts and metrics",
        "Facilitate daily standup meetings",
        "Create sprint review presentations",
        "Implement agile coaching strategies",
        "Build team collaboration tools",
        "Design conflict resolution processes",
        "Create team performance metrics",
        "Implement continuous improvement",
        "Build agile transformation plans",
        "Design team communication patterns",
        "Create agile documentation standards",
        "Implement story point estimation",
        "Build sprint goal tracking",
        "Design team capacity planning",
        "Create impediment tracking systems",
        "Implement agile maturity assessments",
        "Build cross-team coordination",
        "Design scaled agile frameworks",
        "Create team health metrics",
        "Implement agile tooling strategies",
        "Build retrospective action tracking",
        "Design team formation strategies",
        "Create agile training materials",
        "Implement agile compliance frameworks",
        "Technical implementation (use development agents)",
        "Product decisions (use ai-product-manager)",
        "Infrastructure (use infrastructure-devops-manager)",
        "Testing execution (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "autonomous-system-controller": {
      "name": "autonomous-system-controller",
      "model": "sonnet",
      "capabilities": [
        "Design and implement fully autonomous AI systems",
        "Create self-governing decision-making frameworks",
        "Implement autonomous resource allocation strategies",
        "Build self-healing and self-optimizing systems",
        "Design autonomous goal pursuit mechanisms",
        "Create independent system operation protocols",
        "Implement autonomous error recovery",
        "Build self-monitoring and self-correction systems",
        "Design autonomous scaling decisions",
        "Create self-organizing system architectures",
        "Implement autonomous security responses",
        "Build autonomous performance optimization",
        "Design autonomous workload distribution",
        "Create self-evolving system capabilities",
        "Implement autonomous knowledge acquisition",
        "Build autonomous problem-solving systems",
        "Design autonomous system maintenance",
        "Create autonomous backup and recovery",
        "Implement autonomous cost optimization",
        "Build autonomous compliance monitoring",
        "Design autonomous incident response",
        "Create autonomous system updates",
        "Implement autonomous capacity planning",
        "Build autonomous quality assurance",
        "Design autonomous user interaction",
        "Create autonomous data management",
        "Implement autonomous integration systems",
        "Build autonomous documentation generation",
        "Design autonomous testing strategies",
        "Create autonomous deployment decisions",
        "Manual system operations (use infrastructure-devops-manager)",
        "Specific code implementation (use code generation agents)",
        "Agent coordination (use ai-agent-orchestrator)",
        "Architecture design (use agi-system-architect)"
      ],
      "capability_count": 34
    },
    "bigagi-system-manager": {
      "name": "bigagi-system-manager",
      "model": "sonnet",
      "capabilities": [
        "Set up advanced conversational AI interfaces",
        "Configure multi-model chat systems",
        "Enable model switching during conversations",
        "Create AI personas with different capabilities",
        "Implement conversation branching and exploration",
        "Set up multi-agent debates and discussions",
        "Build advanced reasoning chains",
        "Enable voice-based AI interactions",
        "Create specialized chat interfaces for different use cases",
        "Implement conversation memory and context",
        "Configure model voting for better responses",
        "Build ensemble AI systems",
        "Create custom UI configurations",
        "Enable code execution within chats",
        "Implement advanced prompt templates",
        "Set up conversation export and sharing",
        "Build collaborative AI chat rooms",
        "Create model comparison interfaces",
        "Implement conversation analytics",
        "Design custom AI personalities",
        "Enable real-time model switching",
        "Build educational AI interfaces",
        "Create research-oriented chat systems",
        "Implement multi-language conversations",
        "Design domain-specific AI assistants",
        "Backend API development",
        "Batch processing tasks",
        "Non-conversational AI tasks",
        "Simple single-model deployments"
      ],
      "capability_count": 29
    },
    "browser-automation-orchestrator": {
      "name": "browser-automation-orchestrator",
      "model": "sonnet",
      "capabilities": [
        "Create browser automation workflows with Playwright",
        "Implement web scraping systems with anti-detection",
        "Build automated UI testing frameworks",
        "Design web interaction automation",
        "Create screenshot and visual regression testing",
        "Implement form filling automation",
        "Build web data extraction pipelines",
        "Design cross-browser testing strategies",
        "Create browser-based RPA solutions",
        "Implement CAPTCHA handling strategies",
        "Build web monitoring and alerting",
        "Design parallel browser automation",
        "Create browser session management",
        "Implement cookie and storage handling",
        "Build authentication automation",
        "Design web performance testing",
        "Create browser API mocking",
        "Implement browser debugging tools",
        "Build visual testing frameworks",
        "Design accessibility testing automation",
        "Create browser network interception",
        "Implement browser profile management",
        "Build headless browser optimization",
        "Design browser farm management",
        "Create web crawling strategies",
        "Implement JavaScript execution control",
        "Build browser automation APIs",
        "Design anti-bot detection bypassing",
        "Create browser automation monitoring",
        "Implement browser resource optimization",
        "Backend development (use senior-backend-developer)",
        "Manual testing (use testing-qa-validator)",
        "Infrastructure tasks (use infrastructure-devops-manager)",
        "API development (use appropriate backend agents)"
      ],
      "capability_count": 34
    },
    "code-generation-improver": {
      "name": "code-generation-improver",
      "model": "sonnet",
      "capabilities": [
        "Analyze and improve existing code quality",
        "Refactor code for better maintainability",
        "Optimize code performance and efficiency",
        "Implement design patterns and best practices",
        "Remove code duplication and redundancy",
        "Improve code readability and documentation",
        "Enhance error handling and resilience",
        "Optimize algorithm complexity",
        "Implement code style consistency",
        "Create reusable components and libraries",
        "Improve code testability",
        "Enhance security practices in code",
        "Optimize memory usage patterns",
        "Implement lazy loading strategies",
        "Create efficient data structures",
        "Improve async/await patterns",
        "Optimize database queries",
        "Enhance API design and structure",
        "Implement caching strategies",
        "Create code review guidelines",
        "Build code quality metrics",
        "Design code migration strategies",
        "Implement code modernization",
        "Create technical debt reduction plans",
        "Build code complexity analysis",
        "Design code documentation standards",
        "Implement code versioning strategies",
        "Create code performance profiling",
        "Build automated code improvement tools",
        "Design code review automation",
        "Creating new features from scratch (use code generation agents)",
        "Infrastructure tasks (use infrastructure-devops-manager)",
        "Testing implementation (use testing-qa-validator)",
        "Deployment tasks (use deployment-automation-master)"
      ],
      "capability_count": 34
    },
    "complex-problem-solver": {
      "name": "complex-problem-solver",
      "model": "opus",
      "capabilities": [
        "Solve multi-faceted problems requiring deep analysis",
        "Research and synthesize information from multiple sources",
        "Create innovative solutions to unprecedented challenges",
        "Implement creative problem-solving methodologies",
        "Build hypothesis testing frameworks",
        "Design experimental validation systems",
        "Create root cause analysis tools",
        "Implement systematic debugging approaches",
        "Build problem decomposition strategies",
        "Design solution evaluation frameworks",
        "Create decision-making algorithms",
        "Implement optimization strategies",
        "Build constraint satisfaction solvers",
        "Design heuristic search algorithms",
        "Create problem modeling systems",
        "Implement solution space exploration",
        "Build trade-off analysis tools",
        "Design multi-criteria optimization",
        "Create problem visualization tools",
        "Implement collaborative problem-solving",
        "Build knowledge synthesis systems",
        "Design pattern recognition algorithms",
        "Create analogical reasoning systems",
        "Implement lateral thinking approaches",
        "Build solution validation frameworks",
        "Design problem categorization systems",
        "Create solution documentation",
        "Implement learning from failures",
        "Build problem-solving metrics",
        "Design solution reuse strategies",
        "Routine development tasks (use specific development agents)",
        "Standard deployment (use deployment-automation-master)",
        "Basic troubleshooting (use appropriate specialist agents)",
        "Simple implementation (use code generation agents)"
      ],
      "capability_count": 34
    },
    "context-optimization-engineer": {
      "name": "context-optimization-engineer",
      "model": "sonnet",
      "capabilities": [
        "Optimize LLM context window usage",
        "Implement efficient prompt engineering strategies",
        "Create token usage reduction techniques",
        "Design context compression algorithms",
        "Build prompt caching systems",
        "Implement semantic chunking strategies",
        "Create context-aware summarization",
        "Design memory management for LLMs",
        "Build conversation history optimization",
        "Implement relevance filtering",
        "Create dynamic context selection",
        "Design prompt template systems",
        "Build token counting utilities",
        "Implement context overflow handling",
        "Create prompt optimization frameworks",
        "Design few-shot learning strategies",
        "Build prompt versioning systems",
        "Implement context prioritization",
        "Create prompt testing frameworks",
        "Design context budget management",
        "Build prompt reuse strategies",
        "Implement context splitting techniques",
        "Create prompt performance analysis",
        "Design multi-turn optimization",
        "Build context prefetching systems",
        "Implement prompt debugging tools",
        "Create context monitoring dashboards",
        "Design prompt cost optimization",
        "Build context quality metrics",
        "Implement prompt security measures",
        "General AI development (use senior-ai-engineer)",
        "Model training (use appropriate ML agents)",
        "Infrastructure (use infrastructure-devops-manager)",
        "Frontend development (use senior-frontend-developer)"
      ],
      "capability_count": 34
    },
    "deep-learning-brain-manager": {
      "name": "deep-learning-brain-manager",
      "model": "opus",
      "capabilities": [
        "Design and evolve neural intelligence cores",
        "Implement continuous learning systems",
        "Create meta-learning architectures",
        "Build self-improving neural networks",
        "Design cognitive architecture patterns",
        "Implement memory consolidation systems",
        "Create attention mechanism designs",
        "Build neural plasticity simulations",
        "Design hierarchical learning systems",
        "Implement transfer learning networks",
        "Create neural architecture search",
        "Build brain-inspired computing systems",
        "Design synaptic weight optimization",
        "Implement neural pruning strategies",
        "Create cognitive load balancing",
        "Build neural synchronization systems",
        "Design emergent behavior patterns",
        "Implement neural network evolution",
        "Create consciousness modeling attempts",
        "Build neural knowledge graphs",
        "Design neural reasoning systems",
        "Implement neural memory systems",
        "Create neural pattern recognition",
        "Build neural prediction engines",
        "Design neural feedback loops",
        "Implement neural homeostasis",
        "Create neural debugging tools",
        "Build neural visualization systems",
        "Design neural performance metrics",
        "Implement neural safety mechanisms",
        "Basic ML tasks (use senior-ai-engineer)",
        "Application development (use appropriate developers)",
        "Infrastructure (use infrastructure-devops-manager)",
        "Simple model training (use ML specialists)"
      ],
      "capability_count": 34
    },
    "deployment-automation-master": {
      "name": "deployment-automation-master",
      "model": "opus",
      "capabilities": [
        "Master the deploy_complete_system.sh script and all deployment processes",
        "Create bulletproof deployment strategies with zero downtime",
        "Implement rollback procedures and disaster recovery",
        "Handle complex multi-environment deployments",
        "Design blue-green and canary deployment patterns",
        "Create deployment health validation checks",
        "Implement automatic error recovery mechanisms",
        "Build deployment monitoring and alerting",
        "Design deployment pipelines with GitOps",
        "Create infrastructure as code deployments",
        "Implement secret management for deployments",
        "Build deployment testing frameworks",
        "Design deployment approval workflows",
        "Create deployment documentation and runbooks",
        "Implement deployment cost optimization",
        "Handle database migrations during deployment",
        "Create deployment performance benchmarks",
        "Design deployment security scanning",
        "Implement deployment compliance checks",
        "Build deployment dashboards and metrics",
        "Create deployment automation scripts",
        "Design multi-region deployment strategies",
        "Implement deployment dependency management",
        "Build deployment rollback automation",
        "Create deployment state management",
        "Design deployment notification systems",
        "Implement deployment audit logging",
        "Build deployment troubleshooting guides",
        "Create deployment capacity planning",
        "Design deployment orchestration patterns",
        "Code development (use code-generation agents)",
        "Infrastructure provisioning (use infrastructure-devops-manager)",
        "Testing code quality (use testing-qa-validator)",
        "Agent orchestration (use ai-agent-orchestrator)"
      ],
      "capability_count": 34
    },
    "dify-automation-specialist": {
      "name": "dify-automation-specialist",
      "model": "sonnet",
      "capabilities": [
        "Build AI-powered automation workflows quickly",
        "Create conversational AI applications",
        "Implement RAG systems with minimal code",
        "Design AI agents with integrated tools",
        "Build no-code AI applications",
        "Create knowledge base chatbots",
        "Implement document Q&A systems",
        "Design workflow automations with AI",
        "Build customer service AI agents",
        "Create AI-powered data processing",
        "Implement content generation workflows",
        "Design AI form processors",
        "Build intelligent email responders",
        "Create AI data extraction pipelines",
        "Implement smart notification systems",
        "Design AI-powered search interfaces",
        "Build recommendation systems",
        "Create AI content moderators",
        "Implement intelligent routing systems",
        "Design AI analytics dashboards",
        "Build conversational forms",
        "Create AI-powered APIs",
        "Implement batch processing with AI",
        "Design multi-tenant AI applications",
        "Build AI marketplace applications",
        "Low-level system programming",
        "Real-time trading systems",
        "High-frequency data processing",
        "Custom ML model training"
      ],
      "capability_count": 29
    },
    "document-knowledge-manager": {
      "name": "document-knowledge-manager",
      "model": "sonnet",
      "capabilities": [
        "Create and manage comprehensive documentation systems",
        "Build knowledge bases with intelligent search",
        "Implement RAG (Retrieval Augmented Generation) systems",
        "Design document indexing and categorization",
        "Create semantic search capabilities",
        "Implement document versioning systems",
        "Build knowledge graphs from documents",
        "Design FAQ generation systems",
        "Create documentation automation workflows",
        "Implement context-aware retrieval",
        "Build multi-language documentation",
        "Design documentation quality metrics",
        "Create interactive documentation portals",
        "Implement document summarization",
        "Build knowledge extraction pipelines",
        "Design documentation templates",
        "Create API documentation generators",
        "Implement code documentation tools",
        "Build user guide generation systems",
        "Design knowledge sharing platforms",
        "Create documentation search optimization",
        "Implement document analytics",
        "Build documentation feedback systems",
        "Design knowledge retention strategies",
        "Create documentation migration tools",
        "Implement compliance documentation",
        "Build technical writing guidelines",
        "Design documentation review processes",
        "Create knowledge base maintenance",
        "Implement documentation accessibility",
        "Code implementation (use code generation agents)",
        "System deployment (use deployment-automation-master)",
        "Infrastructure management (use infrastructure-devops-manager)",
        "Testing (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "financial-analysis-specialist": {
      "name": "financial-analysis-specialist",
      "model": "sonnet",
      "capabilities": [
        "Implement financial data analysis systems",
        "Create trading algorithms and strategies",
        "Build risk management frameworks",
        "Design portfolio optimization systems",
        "Implement market prediction models",
        "Create financial reporting automation",
        "Build real-time market data processing",
        "Design backtesting frameworks",
        "Implement quantitative analysis tools",
        "Create financial dashboard systems",
        "Build regulatory compliance monitoring",
        "Design fraud detection algorithms",
        "Implement financial forecasting models",
        "Create automated trading systems",
        "Build financial data visualization",
        "Design credit risk assessment",
        "Implement financial API integrations",
        "Create financial news sentiment analysis",
        "Build cryptocurrency analysis tools",
        "Design financial anomaly detection",
        "Implement financial data warehousing",
        "Create financial KPI tracking",
        "Build investment analysis tools",
        "Design financial simulation systems",
        "Implement FinTech solutions",
        "Create financial data validation",
        "Build financial audit trails",
        "Design financial alert systems",
        "Implement financial data security",
        "Create financial machine learning models",
        "General data analysis (use data analysis agents)",
        "Non-financial systems (use appropriate domain agents)",
        "Infrastructure tasks (use infrastructure-devops-manager)",
        "UI development (use senior-frontend-developer)"
      ],
      "capability_count": 34
    },
    "flowiseai-flow-manager": {
      "name": "flowiseai-flow-manager",
      "model": "sonnet",
      "capabilities": [
        "Create visual LangChain applications",
        "Build chatbots with complex logic",
        "Design RAG systems using drag-and-drop",
        "Implement conversation flows visually",
        "Create LangChain workflows without code",
        "Build document processing pipelines",
        "Design multi-model chat systems",
        "Implement memory-enabled chatbots",
        "Create API endpoints from flows",
        "Build agent chains visually",
        "Design prompt engineering workflows",
        "Implement vector search systems",
        "Create document loaders visually",
        "Build conversation summarizers",
        "Design QA systems over documents",
        "Implement tool-using agents",
        "Create workflow debugging interfaces",
        "Build visual chain monitoring",
        "Design conversation analytics",
        "Implement visual prompt testing",
        "Create flow version control",
        "Build team collaboration workflows",
        "Design visual LLM routers",
        "Implement cost optimization flows",
        "Create visual embedding pipelines",
        "Non-LangChain implementations",
        "Real-time streaming applications",
        "Low-level performance optimization",
        "Custom model training"
      ],
      "capability_count": 29
    },
    "hardware-resource-optimizer": {
      "name": "hardware-resource-optimizer",
      "model": "opus",
      "capabilities": [
        "Optimize system performance within hardware constraints",
        "Monitor and manage CPU, GPU, and memory usage",
        "Implement resource allocation strategies",
        "Create performance profiling systems",
        "Build resource usage predictions",
        "Design capacity planning solutions",
        "Implement resource pooling mechanisms",
        "Create hardware scaling strategies",
        "Build performance bottleneck detection",
        "Design resource scheduling algorithms",
        "Implement memory optimization techniques",
        "Create GPU utilization strategies",
        "Build disk I/O optimization",
        "Design network bandwidth management",
        "Implement container resource limits",
        "Create performance benchmarking tools",
        "Build resource monitoring dashboards",
        "Design auto-scaling policies",
        "Implement resource reservation systems",
        "Create hardware failure prediction",
        "Build performance regression detection",
        "Design resource cost optimization",
        "Implement workload distribution",
        "Create hardware upgrade recommendations",
        "Build resource usage analytics",
        "Design performance SLA monitoring",
        "Implement resource cleanup automation",
        "Create hardware inventory management",
        "Build performance testing frameworks",
        "Design resource migration strategies",
        "Software development (use appropriate development agents)",
        "System deployment (use deployment-automation-master)",
        "General infrastructure (use infrastructure-devops-manager)",
        "Application optimization (use code-generation-improver)"
      ],
      "capability_count": 34
    },
    "infrastructure-devops-manager": {
      "name": "infrastructure-devops-manager",
      "model": "opus",
      "capabilities": [
        "Deploy, start, stop, or restart Docker containers or services",
        "Fix broken or unhealthy containers (health check failures, startup issues)",
        "Troubleshoot container networking, port conflicts, or inter-service communication",
        "Modify docker-compose.yml files or Docker configurations",
        "Run or modify deployment scripts (deploy_complete_system.sh, start_all.sh)",
        "Configure container resource limits, volumes, or environment variables",
        "Set up or fix monitoring, logging, or alerting infrastructure",
        "Implement health checks, restart policies, or auto-recovery mechanisms",
        "Debug container logs or diagnose service failures",
        "Configure GPU access for AI workloads (Ollama, ML frameworks)",
        "Optimize Docker images or container performance",
        "Set up backup, recovery, or disaster recovery procedures",
        "Implement CI/CD pipelines or automated deployment workflows",
        "Manage secrets, environment files, or configuration management",
        "Configure Prometheus, Grafana, Loki, or other monitoring tools",
        "Handle port management and service discovery",
        "Create or modify shell scripts for automation",
        "Consolidate or organize infrastructure files (multiple docker-compose versions)",
        "Implement security hardening for containers",
        "Set up load balancing or scaling strategies",
        "Manage database migrations or initialization scripts",
        "Configure container networking policies or firewalls",
        "Implement blue-green or rolling deployments",
        "Create infrastructure documentation or runbooks",
        "Writing application code (Python, JavaScript)",
        "Designing system architecture (use agi-system-architect)",
        "Configuring AI models or agents (use ai-agent-orchestrator)",
        "UI/UX changes (use a frontend specialist)",
        "Writing unit tests or integration tests (use testing-qa-validator)"
      ],
      "capability_count": 29
    },
    "jarvis-voice-interface": {
      "name": "jarvis-voice-interface",
      "model": "sonnet",
      "capabilities": [
        "Create voice-controlled AI assistants",
        "Implement speech recognition systems",
        "Build text-to-speech capabilities",
        "Design natural language voice interfaces",
        "Create voice command processing",
        "Implement wake word detection",
        "Build conversational voice AI",
        "Design multi-language voice support",
        "Create voice biometric authentication",
        "Implement noise cancellation systems",
        "Build voice activity detection",
        "Design voice emotion recognition",
        "Create voice synthesis customization",
        "Implement real-time voice translation",
        "Build voice-based navigation",
        "Design voice accessibility features",
        "Create voice interaction analytics",
        "Implement voice privacy controls",
        "Build voice command shortcuts",
        "Design voice feedback systems",
        "Create voice recording management",
        "Implement voice quality optimization",
        "Build voice-based notifications",
        "Design voice integration APIs",
        "Create voice testing frameworks",
        "Implement voice fallback mechanisms",
        "Build voice command documentation",
        "Design voice UX patterns",
        "Create voice performance monitoring",
        "Implement voice security measures",
        "Text-based interfaces (use senior-frontend-developer)",
        "Backend processing (use senior-backend-developer)",
        "Non-voice AI tasks (use appropriate AI agents)",
        "Infrastructure (use infrastructure-devops-manager)"
      ],
      "capability_count": 34
    },
    "kali-security-specialist": {
      "name": "kali-security-specialist",
      "model": "opus",
      "capabilities": [
        "Perform advanced penetration testing with Kali Linux tools",
        "Conduct network vulnerability assessments",
        "Execute wireless security audits",
        "Implement web application penetration testing",
        "Perform social engineering tests",
        "Conduct forensic analysis and incident response",
        "Execute password cracking and hash analysis",
        "Implement exploit development and testing",
        "Perform reverse engineering tasks",
        "Conduct OSINT (Open Source Intelligence) gathering",
        "Execute privilege escalation tests",
        "Implement post-exploitation techniques",
        "Perform vulnerability scanning with Nmap, OpenVAS",
        "Conduct SQL injection and XSS testing",
        "Execute buffer overflow exploits",
        "Implement Metasploit framework operations",
        "Perform wireless attacks and WPA cracking",
        "Conduct man-in-the-middle attacks testing",
        "Execute DNS and ARP spoofing tests",
        "Implement backdoor and rootkit detection",
        "Perform malware analysis in sandboxes",
        "Conduct security compliance audits",
        "Execute red team operations",
        "Implement blue team defensive strategies",
        "Perform CTF (Capture The Flag) challenges",
        "Conduct security tool development",
        "Execute automated security testing",
        "Implement security monitoring solutions",
        "Perform threat hunting operations",
        "Conduct security awareness demonstrations",
        "General system administration (use infrastructure-devops-manager)",
        "Code development (use appropriate development agents)",
        "Non-security testing (use testing-qa-validator)",
        "Production deployments (use deployment-automation-master)"
      ],
      "capability_count": 34
    },
    "langflow-workflow-designer": {
      "name": "langflow-workflow-designer",
      "model": "sonnet",
      "capabilities": [
        "Create visual AI workflows without coding",
        "Design drag-and-drop LLM pipelines",
        "Build complex AI logic flows visually",
        "Create reusable workflow components",
        "Enable non-developers to build AI apps",
        "Design conditional logic in workflows",
        "Implement data transformation pipelines",
        "Create custom Langflow components",
        "Build API endpoints from visual flows",
        "Design multi-step AI processes",
        "Create workflow templates for teams",
        "Implement error handling visually",
        "Build data enrichment pipelines",
        "Design chatbot conversation flows",
        "Create document processing workflows",
        "Implement RAG systems visually",
        "Build AI agent coordination flows",
        "Design approval workflows with AI",
        "Create data validation pipelines",
        "Export flows as Python code",
        "Build integration workflows",
        "Design ETL pipelines with AI",
        "Create monitoring dashboards",
        "Implement A/B testing flows",
        "Build visual debugging tools",
        "Low-level code optimization",
        "Real-time performance-critical tasks",
        "Complex algorithm implementation",
        "Systems requiring version control"
      ],
      "capability_count": 29
    },
    "litellm-proxy-manager": {
      "name": "litellm-proxy-manager",
      "model": "sonnet",
      "capabilities": [
        "Configure LiteLLM proxy for OpenAI API compatibility",
        "Map local Ollama models to OpenAI endpoints",
        "Implement API request translation and routing",
        "Create model fallback mechanisms",
        "Build request/response caching",
        "Design API rate limiting strategies",
        "Implement API key management",
        "Create usage tracking and billing",
        "Build model performance monitoring",
        "Design load balancing across models",
        "Implement request retry logic",
        "Create API compatibility layers",
        "Build streaming response handling",
        "Design API versioning support",
        "Implement request validation",
        "Create API documentation mapping",
        "Build cost optimization routing",
        "Design multi-provider support",
        "Implement API security measures",
        "Create API testing frameworks",
        "Build API migration tools",
        "Design API monitoring dashboards",
        "Implement API error handling",
        "Create API performance optimization",
        "Build API debugging tools",
        "Design API gateway patterns",
        "Implement API transformation rules",
        "Create API usage analytics",
        "Build API health checks",
        "Design API deployment strategies",
        "Direct model management (use ollama-integration-specialist)",
        "General API development (use senior-backend-developer)",
        "Infrastructure setup (use infrastructure-devops-manager)",
        "Frontend development (use senior-frontend-developer)"
      ],
      "capability_count": 34
    },
    "localagi-orchestration-manager": {
      "name": "localagi-orchestration-manager",
      "model": "sonnet",
      "capabilities": [
        "Set up autonomous AI agent orchestration without external dependencies",
        "Create complex multi-step workflows that run independently",
        "Design agent chains that can make decisions and branch conditionally",
        "Implement recursive task decomposition for complex problems",
        "Build self-improving AI systems that learn from execution",
        "Coordinate multiple agents to work together autonomously",
        "Create LangChain-compatible workflows with local models",
        "Design agent pipelines with state management between steps",
        "Enable agents to spawn sub-agents for parallel task execution",
        "Implement retry mechanisms and error recovery in workflows",
        "Build autonomous feedback loops for continuous improvement",
        "Create memory-persistent agent workflows",
        "Design conditional logic flows based on agent outputs",
        "Orchestrate long-running autonomous processes",
        "Implement agent collaboration patterns",
        "Build self-organizing agent systems",
        "Create templates for common multi-agent patterns",
        "Enable agents to modify their own workflows",
        "Design meta-agents that create other agents",
        "Implement autonomous decision trees",
        "Build agent swarms for distributed problem-solving",
        "Create self-healing agent workflows",
        "Design autonomous research systems",
        "Implement agent voting mechanisms",
        "Build consensus-based multi-agent decisions",
        "Create autonomous code generation pipelines",
        "Design self-optimizing workflows",
        "Implement autonomous testing frameworks",
        "Build agent-based automation systems",
        "Create event-driven agent workflows",
        "Simple single-agent tasks",
        "Basic API calls without orchestration",
        "Static workflows without conditional logic",
        "Tasks that don't require agent collaboration",
        "Simple request-response patterns"
      ],
      "capability_count": 35
    },
    "ollama-integration-specialist": {
      "name": "ollama-integration-specialist",
      "model": "opus",
      "capabilities": [
        "Configure and optimize Ollama for local LLM inference",
        "Manage and deploy local language models",
        "Optimize model performance and memory usage",
        "Implement model quantization strategies",
        "Configure Ollama API endpoints and compatibility",
        "Set up model caching and preloading",
        "Implement model switching and routing",
        "Create custom model configurations",
        "Design multi-model inference pipelines",
        "Optimize GPU/CPU utilization for inference",
        "Implement model versioning strategies",
        "Build model performance benchmarks",
        "Create model selection algorithms",
        "Design fallback mechanisms for model failures",
        "Implement model warm-up procedures",
        "Build model monitoring and metrics",
        "Create model deployment automation",
        "Design model scaling strategies",
        "Implement context window optimization",
        "Build prompt caching systems",
        "Create model fine-tuning workflows",
        "Design model security measures",
        "Implement model access control",
        "Build model testing frameworks",
        "Create model documentation",
        "Design model cost optimization",
        "Implement streaming inference",
        "Build batch inference systems",
        "Create model API compatibility layers",
        "Design model integration patterns",
        "General AI development (use senior-ai-engineer)",
        "Infrastructure setup (use infrastructure-devops-manager)",
        "Agent orchestration (use ai-agent-orchestrator)",
        "Frontend development (use senior-frontend-developer)"
      ],
      "capability_count": 34
    },
    "opendevin-code-generator": {
      "name": "opendevin-code-generator",
      "model": "sonnet",
      "capabilities": [
        "Generate complete applications from specifications",
        "Implement complex features autonomously",
        "Debug and fix code automatically",
        "Refactor large codebases",
        "Write comprehensive test suites",
        "Create API implementations from docs",
        "Build full-stack applications",
        "Implement algorithms from descriptions",
        "Generate documentation from code",
        "Create database schemas and queries",
        "Fix security vulnerabilities in code",
        "Optimize code performance",
        "Implement design patterns",
        "Generate boilerplate code",
        "Create CI/CD configurations",
        "Build microservices architectures",
        "Implement authentication systems",
        "Generate frontend components",
        "Create data processing pipelines",
        "Build integration connectors",
        "Implement business logic from requirements",
        "Generate migration scripts",
        "Create deployment configurations",
        "Build command-line tools",
        "Implement real-time features",
        "Generate mobile app code",
        "Create infrastructure as code",
        "Build ETL pipelines",
        "Implement ML model serving code",
        "Generate API clients",
        "Code review and human collaboration",
        "Architectural decisions requiring business context",
        "Legal or compliance-critical code without review",
        "Performance-critical algorithm design"
      ],
      "capability_count": 34
    },
    "private-data-analyst": {
      "name": "private-data-analyst",
      "model": "sonnet",
      "capabilities": [
        "Deploy or configure PrivateGPT for secure document analysis",
        "Process confidential or sensitive documents locally",
        "Set up private Q&A systems for proprietary data",
        "Implement data anonymization or PII redaction",
        "Create secure knowledge bases with access controls",
        "Handle GDPR, HIPAA, or CCPA compliance requirements",
        "Build role-based access control for documents",
        "Process medical records, financial data, or legal documents",
        "Implement \\\"right to be forgotten\\\" data deletion",
        "Create audit trails for data access",
        "Set up privacy-preserving analytics",
        "Configure local-only document processing (no cloud)",
        "Implement field-level encryption for documents",
        "Handle data residency requirements",
        "Create secure document retention policies",
        "Build private chatbots for sensitive data",
        "Implement consent management systems",
        "Generate compliance reports for privacy regulations",
        "Set up data anonymization pipelines",
        "Monitor for privacy violations or data leaks",
        "Process employee records or HR documents",
        "Handle customer PII securely",
        "Create data portability exports (GDPR)",
        "Implement secure multi-tenant data isolation",
        "Build privacy dashboards and metrics",
        "Configure network isolation for sensitive processing",
        "Set up encrypted document storage",
        "Handle confidential business intelligence",
        "Process documents in air-gapped environments",
        "Implement data classification systems",
        "General document processing without privacy requirements (use document-knowledge-manager)",
        "Public data analysis",
        "Web scraping or public information gathering",
        "Non-sensitive knowledge management",
        "General Q&A systems without privacy needs"
      ],
      "capability_count": 35
    },
    "security-pentesting-specialist": {
      "name": "security-pentesting-specialist",
      "model": "sonnet",
      "capabilities": [
        "Perform comprehensive security assessments",
        "Conduct penetration testing operations",
        "Implement vulnerability scanning systems",
        "Design security audit frameworks",
        "Create threat modeling systems",
        "Implement security compliance validation",
        "Build automated security testing",
        "Design zero-trust architecture validation",
        "Create security incident response plans",
        "Implement SAST and DAST tools",
        "Build security monitoring dashboards",
        "Design API security testing",
        "Create network security assessments",
        "Implement cloud security validation",
        "Build container security scanning",
        "Design social engineering tests",
        "Create security awareness training",
        "Implement security baseline checks",
        "Build security remediation tracking",
        "Design security metrics reporting",
        "Create vulnerability management systems",
        "Implement security policy validation",
        "Build security configuration scanning",
        "Design access control testing",
        "Create encryption validation tests",
        "Implement security regression testing",
        "Build security documentation",
        "Design security risk scoring",
        "Create security exception handling",
        "Implement continuous security validation",
        "Code implementation (use code generation agents)",
        "Infrastructure setup (use infrastructure-devops-manager)",
        "General testing (use testing-qa-validator)",
        "Deployment (use deployment-automation-master)"
      ],
      "capability_count": 34
    },
    "semgrep-security-analyzer": {
      "name": "semgrep-security-analyzer",
      "model": "sonnet",
      "capabilities": [
        "Scan code for security vulnerabilities before deployment",
        "Create custom security rules for your specific codebase",
        "Detect hardcoded secrets, API keys, or credentials in code",
        "Identify OWASP Top 10 vulnerabilities automatically",
        "Find SQL injection, XSS, or other injection vulnerabilities",
        "Analyze code for authentication and authorization flaws",
        "Detect insecure cryptographic implementations",
        "Enforce secure coding standards across the team",
        "Integrate security scanning into CI/CD pipelines",
        "Set up pre-commit hooks for security checks",
        "Generate security compliance reports",
        "Track and remediate security technical debt",
        "Validate code against regulatory requirements (PCI-DSS, HIPAA)",
        "Create custom rules for company-specific security policies",
        "Scan pull requests automatically for security issues",
        "Identify vulnerable dependencies in code",
        "Detect insecure configurations or hardcoded settings",
        "Analyze code for path traversal vulnerabilities",
        "Find race conditions and timing attacks",
        "Identify insecure random number generation",
        "Detect unsafe deserialization patterns",
        "Scan for XXE (XML External Entity) vulnerabilities",
        "Find command injection vulnerabilities",
        "Analyze JavaScript for DOM-based XSS",
        "Detect insecure file operations",
        "Identify missing security headers",
        "Find JWT implementation flaws",
        "Scan infrastructure-as-code for misconfigurations",
        "Create security gates in deployment pipelines",
        "Generate actionable fix recommendations",
        "Educate developers on secure coding practices",
        "Perform differential security scans between commits",
        "Analyze code changes for security impact",
        "Create security scorecards for projects",
        "Detect security anti-patterns in frameworks",
        "Validate secure API implementations",
        "Find business logic vulnerabilities through pattern matching",
        "Implement shift-left security practices",
        "Runtime security testing (use Security Pentesting Specialist)",
        "Dynamic application testing",
        "Network vulnerability scanning",
        "Manual code review tasks",
        "Performance analysis"
      ],
      "capability_count": 43
    },
    "senior-ai-engineer": {
      "name": "senior-ai-engineer",
      "model": "opus",
      "capabilities": [
        "Design and implement AI/ML architectures",
        "Build RAG (Retrieval Augmented Generation) systems",
        "Integrate various LLMs and AI models",
        "Create neural network architectures",
        "Implement machine learning pipelines",
        "Build model training and evaluation systems",
        "Design AGI system components",
        "Create embeddings and vector databases",
        "Implement semantic search systems",
        "Build multi-modal AI systems",
        "Design reinforcement learning environments",
        "Create AI model serving infrastructure",
        "Implement transfer learning strategies",
        "Build AI explainability systems",
        "Design federated learning architectures",
        "Create AI model versioning systems",
        "Implement online learning capabilities",
        "Build AI performance benchmarks",
        "Design AI safety mechanisms",
        "Create custom AI training loops",
        "Implement AI model compression",
        "Build AI debugging and visualization",
        "Design AI data preprocessing pipelines",
        "Create AI model deployment strategies",
        "Implement AI monitoring systems",
        "Build AI cost optimization solutions",
        "Design AI experimentation platforms",
        "Create AI model registries",
        "Implement AI governance frameworks",
        "Build AI collaboration tools",
        "Frontend development (use senior-frontend-developer)",
        "Backend API development (use senior-backend-developer)",
        "Infrastructure (use infrastructure-devops-manager)",
        "Basic data analysis (use data analysts)"
      ],
      "capability_count": 34
    },
    "senior-backend-developer": {
      "name": "senior-backend-developer",
      "model": "sonnet",
      "capabilities": [
        "Build scalable FastAPI or Django REST APIs",
        "Design microservices architectures",
        "Implement database schemas and optimization",
        "Create GraphQL APIs and resolvers",
        "Build event-driven architectures",
        "Implement authentication and authorization",
        "Design API rate limiting and throttling",
        "Create background job processing systems",
        "Build real-time WebSocket servers",
        "Implement caching strategies (Redis, Memcached)",
        "Design message queue systems (RabbitMQ, Kafka)",
        "Create database migration strategies",
        "Build API versioning systems",
        "Implement data validation and serialization",
        "Design RESTful API best practices",
        "Create API documentation (OpenAPI/Swagger)",
        "Build database connection pooling",
        "Implement transaction management",
        "Design API security measures",
        "Create logging and monitoring systems",
        "Build API testing frameworks",
        "Implement service discovery patterns",
        "Design data access layers",
        "Create API performance optimization",
        "Build distributed tracing systems",
        "Implement circuit breaker patterns",
        "Design API gateway solutions",
        "Create backend debugging tools",
        "Build data pipeline architectures",
        "Implement CQRS and Event Sourcing",
        "Frontend development (use senior-frontend-developer)",
        "Infrastructure management (use infrastructure-devops-manager)",
        "AI/ML implementation (use senior-ai-engineer)",
        "Database administration (use database specialists)"
      ],
      "capability_count": 34
    },
    "senior-frontend-developer": {
      "name": "senior-frontend-developer",
      "model": "opus",
      "capabilities": [
        "Build modern web interfaces with React, Vue, or Angular",
        "Create responsive Streamlit applications",
        "Implement real-time data visualization dashboards",
        "Design user-friendly AI chat interfaces",
        "Build interactive data exploration tools",
        "Create Progressive Web Applications (PWAs)",
        "Implement state management solutions",
        "Build component libraries and design systems",
        "Create accessible web interfaces (WCAG compliance)",
        "Implement WebSocket real-time features",
        "Build data visualization with D3.js or Chart.js",
        "Design mobile-responsive layouts",
        "Create micro-frontend architectures",
        "Implement frontend performance optimization",
        "Build SEO-friendly applications",
        "Create frontend testing strategies",
        "Implement internationalization (i18n)",
        "Build offline-capable applications",
        "Design frontend security best practices",
        "Create animated user interfaces",
        "Implement lazy loading and code splitting",
        "Build frontend monitoring and analytics",
        "Design cross-browser compatibility",
        "Create frontend build optimization",
        "Implement frontend caching strategies",
        "Build WebAssembly integrations",
        "Design frontend error handling",
        "Create frontend documentation",
        "Implement A/B testing frameworks",
        "Build frontend CI/CD pipelines",
        "Backend development (use senior-backend-developer)",
        "Database design (use appropriate backend agents)",
        "Infrastructure (use infrastructure-devops-manager)",
        "AI/ML implementation (use senior-ai-engineer)"
      ],
      "capability_count": 34
    },
    "shell-automation-specialist": {
      "name": "shell-automation-specialist",
      "model": "sonnet",
      "capabilities": [
        "Create complex shell scripts and automation",
        "Implement system task automation with ShellGPT",
        "Build command-line interfaces and tools",
        "Design shell script best practices",
        "Create system administration automation",
        "Implement shell script testing frameworks",
        "Build deployment automation scripts",
        "Design error handling in shell scripts",
        "Create shell script libraries",
        "Implement cross-platform shell compatibility",
        "Build shell script debugging tools",
        "Design shell script security practices",
        "Create system monitoring scripts",
        "Implement backup automation scripts",
        "Build log processing scripts",
        "Design shell script optimization",
        "Create system maintenance automation",
        "Implement shell script documentation",
        "Build shell-based CI/CD pipelines",
        "Design shell script version control",
        "Create system configuration scripts",
        "Implement shell script packaging",
        "Build interactive shell menus",
        "Design shell script logging systems",
        "Create system health check scripts",
        "Implement shell script scheduling",
        "Build shell-based data processing",
        "Design shell script modularity",
        "Create system integration scripts",
        "Implement shell script performance monitoring",
        "Application development (use appropriate language agents)",
        "Infrastructure provisioning (use infrastructure-devops-manager)",
        "Web development (use frontend/backend developers)",
        "Database management (use database specialists)"
      ],
      "capability_count": 34
    },
    "system-optimizer-reorganizer": {
      "name": "system-optimizer-reorganizer",
      "model": "sonnet",
      "capabilities": [
        "Clean up and organize project file structures",
        "Remove unused dependencies and dead code",
        "Optimize directory hierarchies and naming conventions",
        "Consolidate duplicate files and resources",
        "Create consistent project organization standards",
        "Implement file naming conventions",
        "Build automated cleanup scripts",
        "Design resource organization strategies",
        "Create documentation structure templates",
        "Implement version control best practices",
        "Build dependency management systems",
        "Design module organization patterns",
        "Create configuration consolidation",
        "Implement log rotation and cleanup",
        "Build cache management strategies",
        "Design temporary file cleanup",
        "Create backup organization systems",
        "Implement archive management",
        "Build asset optimization pipelines",
        "Design database cleanup procedures",
        "Create system maintenance schedules",
        "Implement storage optimization",
        "Build monitoring data retention",
        "Design code repository organization",
        "Create deployment artifact management",
        "Implement container image cleanup",
        "Build package registry organization",
        "Design secret rotation procedures",
        "Create compliance documentation structure",
        "Implement audit trail organization",
        "Code implementation (use code generation agents)",
        "System architecture (use agi-system-architect)",
        "Deployment tasks (use deployment-automation-master)",
        "Testing (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "task-assignment-coordinator": {
      "name": "task-assignment-coordinator",
      "model": "sonnet",
      "capabilities": [
        "Automatically analyze incoming tasks and requirements",
        "Match tasks to the most suitable agents",
        "Implement workload balancing across agents",
        "Create task prioritization algorithms",
        "Build agent capability matching systems",
        "Design task routing strategies",
        "Implement task dependency management",
        "Create agent availability tracking",
        "Build task assignment optimization",
        "Design multi-agent task distribution",
        "Implement task queue management",
        "Create agent skill matrices",
        "Build task complexity analysis",
        "Design task deadline management",
        "Implement resource allocation optimization",
        "Create task assignment rules engines",
        "Build agent performance tracking",
        "Design task reassignment strategies",
        "Implement task escalation procedures",
        "Create workload forecasting",
        "Build task assignment dashboards",
        "Design agent specialization tracking",
        "Implement task batching strategies",
        "Create assignment conflict resolution",
        "Build task assignment analytics",
        "Design agent utilization metrics",
        "Implement fair task distribution",
        "Create task assignment APIs",
        "Build assignment notification systems",
        "Design task assignment auditing",
        "Task execution (use appropriate specialist agents)",
        "System deployment (use deployment-automation-master)",
        "Code implementation (use development agents)",
        "Testing (use testing-qa-validator)"
      ],
      "capability_count": 34
    },
    "testing-qa-validator": {
      "name": "testing-qa-validator",
      "model": "sonnet",
      "capabilities": [
        "Create comprehensive test suites for all system components",
        "Implement unit, integration, and end-to-end tests",
        "Design test automation frameworks",
        "Perform security vulnerability testing",
        "Create performance and load testing scenarios",
        "Implement continuous testing in CI/CD pipelines",
        "Design test data management strategies",
        "Create test coverage analysis and reporting",
        "Implement API testing and contract testing",
        "Build UI/UX testing automation",
        "Design chaos engineering experiments",
        "Create regression testing strategies",
        "Implement mobile app testing",
        "Build accessibility testing frameworks",
        "Design cross-browser testing solutions",
        "Create test environment management",
        "Implement A/B testing frameworks",
        "Build synthetic monitoring tests",
        "Design test case management systems",
        "Create quality gates and metrics",
        "Implement test result analytics",
        "Build defect tracking integration",
        "Design test documentation standards",
        "Create test automation best practices",
        "Implement test parallelization strategies",
        "Build test maintenance workflows",
        "Design exploratory testing guides",
        "Create compliance testing procedures",
        "Implement data validation testing",
        "Build user acceptance testing frameworks",
        "Code implementation (use code-generation agents)",
        "Deployment processes (use deployment-automation-master)",
        "Infrastructure setup (use infrastructure-devops-manager)",
        "System architecture (use agi-system-architect)"
      ],
      "capability_count": 34
    }
  }
}