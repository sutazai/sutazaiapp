{
  "total_containers": 46,
  "containers_with_requirements": 12,
  "containers_without_requirements": 34,
  "total_requirements_files": 134,
  "used_requirements_files": 12,
  "orphaned_requirements_count": 122,
  "container_mapping": {
    "postgres": {
      "name": "postgres",
      "type": "database",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "redis": {
      "name": "redis",
      "type": "cache",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "neo4j": {
      "name": "neo4j",
      "type": "graph-db",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "chromadb": {
      "name": "chromadb",
      "type": "vector-db",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "qdrant": {
      "name": "qdrant",
      "type": "vector-db",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "faiss": {
      "name": "faiss",
      "type": "vector-db",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "ollama": {
      "name": "ollama",
      "type": "llm-runtime",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "backend": {
      "name": "backend",
      "type": "api",
      "requirements_file": "backend/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "frontend": {
      "name": "frontend",
      "type": "ui",
      "requirements_file": "frontend/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "autogpt": {
      "name": "autogpt",
      "type": "agent",
      "requirements_file": "docker/autogpt/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "crewai": {
      "name": "crewai",
      "type": "agent",
      "requirements_file": "docker/crewai/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "letta": {
      "name": "letta",
      "type": "agent",
      "requirements_file": "docker/letta/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "aider": {
      "name": "aider",
      "type": "agent",
      "requirements_file": "docker/aider/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "gpt-engineer": {
      "name": "gpt-engineer",
      "type": "agent",
      "requirements_file": "docker/gpt-engineer/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "agentgpt": {
      "name": "agentgpt",
      "type": "agent",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "privategpt": {
      "name": "privategpt",
      "type": "agent",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "pentestgpt": {
      "name": "pentestgpt",
      "type": "agent",
      "requirements_file": "docker/pentestgpt/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "shellgpt": {
      "name": "shellgpt",
      "type": "agent",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "langflow": {
      "name": "langflow",
      "type": "workflow",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "flowise": {
      "name": "flowise",
      "type": "workflow",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "n8n": {
      "name": "n8n",
      "type": "workflow",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "dify": {
      "name": "dify",
      "type": "workflow",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "pytorch": {
      "name": "pytorch",
      "type": "ml-framework",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "tensorflow": {
      "name": "tensorflow",
      "type": "ml-framework",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "jax": {
      "name": "jax",
      "type": "ml-framework",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "prometheus": {
      "name": "prometheus",
      "type": "monitoring",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "grafana": {
      "name": "grafana",
      "type": "monitoring",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "loki": {
      "name": "loki",
      "type": "monitoring",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "ai-metrics-exporter": {
      "name": "ai-metrics-exporter",
      "type": "monitoring",
      "requirements_file": "monitoring/ai-metrics-exporter/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "semgrep": {
      "name": "semgrep",
      "type": "security",
      "requirements_file": "docker/semgrep/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "browser-use": {
      "name": "browser-use",
      "type": "automation",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "documind": {
      "name": "documind",
      "type": "document-processing",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "finrobot": {
      "name": "finrobot",
      "type": "finance-ai",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "code-improver": {
      "name": "code-improver",
      "type": "code-ai",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "context-framework": {
      "name": "context-framework",
      "type": "context-ai",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "autogen": {
      "name": "autogen",
      "type": "agent",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "opendevin": {
      "name": "opendevin",
      "type": "agent",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "service-hub": {
      "name": "service-hub",
      "type": "service-manager",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "awesome-code-ai": {
      "name": "awesome-code-ai",
      "type": "code-ai",
      "requirements_file": "docker/awesome-code-ai/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "fsdp": {
      "name": "fsdp",
      "type": "ml-distributed",
      "requirements_file": "docker/fsdp/requirements.txt",
      "requirements_exist": true,
      "dockerfile_path": null
    },
    "agentzero": {
      "name": "agentzero",
      "type": "agent-coordinator",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "mcp-server": {
      "name": "mcp-server",
      "type": "mcp-protocol",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "health-monitor": {
      "name": "health-monitor",
      "type": "monitoring",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "llamaindex": {
      "name": "llamaindex",
      "type": "rag",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "tabbyml": {
      "name": "tabbyml",
      "type": "code-completion",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    },
    "skyvern": {
      "name": "skyvern",
      "type": "automation",
      "requirements_file": null,
      "requirements_exist": false,
      "dockerfile_path": null
    }
  },
  "missing_requirements": [
    "faiss: docker/faiss/requirements.txt",
    "agentgpt: docker/agentgpt/requirements.txt",
    "privategpt: docker/privategpt/requirements.txt",
    "shellgpt: docker/shellgpt/requirements.txt",
    "pytorch: docker/pytorch/requirements.txt",
    "tensorflow: docker/tensorflow/requirements.txt",
    "jax: docker/jax/requirements.txt",
    "browser-use: docker/browser-use/requirements.txt",
    "documind: docker/documind/requirements.txt",
    "finrobot: docker/finrobot/requirements.txt",
    "code-improver: docker/code-improver/requirements.txt",
    "context-framework: docker/context-framework/requirements.txt",
    "autogen: docker/autogen/requirements.txt",
    "opendevin: docker/opendevin/requirements.txt",
    "service-hub: docker/service-hub/requirements.txt",
    "agentzero: docker/agentzero/requirements.txt",
    "mcp-server: mcp_server/requirements.txt",
    "health-monitor: docker/health-check/requirements.txt",
    "llamaindex: docker/llamaindex/requirements.txt",
    "skyvern: docker/skyvern/requirements.txt"
  ],
  "orphaned_requirements": [
    "Verify before removing: requirements.txt",
    "Unmapped but likely used: backend/requirements-test.txt",
    "Unmapped but likely used: backend/requirements.secure.txt",
    "Unmapped but likely used: backend/requirements.minimal.txt",
    "Unmapped but likely used: backend/requirements-minimal.txt",
    "Unmapped but likely used: backend/requirements-fast.txt",
    "Verify before removing: system-validator/requirements.txt",
    "Safe to remove: tests/requirements-test.txt",
    "Unmapped but likely used: frontend/requirements.secure.txt",
    "Verify before removing: self-healing/requirements.txt",
    "Verify before removing: agents/requirements.txt",
    "Unmapped but likely used: docker/health-monitor/requirements.txt",
    "Verify before removing: docker/requirements/requirements.secure.txt",
    "Verify before removing: docker/requirements/requirements.txt",
    "Verify before removing: docker/base/requirements-base.txt",
    "Verify before removing: docker/base/requirements-agent.txt",
    "Verify before removing: docker/base/requirements-security.txt",
    "Verify before removing: docker/api-gateway/requirements.txt",
    "Unmapped but likely used: docs/requirements/autogpt/requirements.txt",
    "Safe to remove: docs/requirements/deployments/requirements.txt"
  ],
  "consolidation_opportunities": {
    "base_packages": [
      "fastapi",
      "uvicorn",
      "pydantic"
    ],
    "ml_packages": [],
    "agent_packages": [
      "openai"
    ],
    "monitoring_packages": [
      "aiohttp"
    ]
  },
  "validation_commands": [
    "#!/bin/bash",
    "# Container validation script",
    "set -e",
    "",
    "echo 'Stopping all services...'",
    "docker-compose down",
    "",
    "echo 'Testing postgres...'",
    "docker-compose up -d postgres",
    "sleep 10",
    "docker-compose ps postgres | grep 'Up' || exit 1",
    "",
    "echo 'Testing redis...'",
    "docker-compose up -d redis",
    "sleep 10",
    "docker-compose ps redis | grep 'Up' || exit 1",
    "",
    "echo 'Testing backend...'",
    "docker-compose up -d backend",
    "sleep 10",
    "docker-compose ps backend | grep 'Up' || exit 1",
    "",
    "echo 'Testing frontend...'",
    "docker-compose up -d frontend",
    "sleep 10",
    "docker-compose ps frontend | grep 'Up' || exit 1",
    "",
    "echo 'Testing ollama...'",
    "docker-compose up -d ollama",
    "sleep 10",
    "docker-compose ps ollama | grep 'Up' || exit 1",
    "",
    "echo 'Building autogpt...'",
    "docker-compose build autogpt",
    "",
    "echo 'Building crewai...'",
    "docker-compose build crewai",
    "",
    "echo 'Building letta...'",
    "docker-compose build letta",
    "",
    "echo 'Building aider...'",
    "docker-compose build aider",
    "",
    "echo 'All critical containers validated!'"
  ],
  "cleanup_script": [
    "#!/bin/bash",
    "# Safe cleanup script for orphaned requirements",
    "set -e",
    "",
    "# Create backup directory",
    "BACKUP_DIR='/opt/sutazaiapp/requirements_backup_$(date +%Y%m%d_%H%M%S)'",
    "mkdir -p $BACKUP_DIR",
    "",
    "echo 'Backing up all requirements files...'",
    "find /opt/sutazaiapp -name 'requirements*.txt' -type f | while read f; do",
    "    rel_path=${f#/opt/sutazaiapp/}",
    "    mkdir -p \"$BACKUP_DIR/$(dirname $rel_path)\"",
    "    cp \"$f\" \"$BACKUP_DIR/$rel_path\"",
    "done",
    "",
    "echo 'Removing safe orphaned files...'",
    "rm -f '/opt/sutazaiapp/tests/requirements-test.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/deployments/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/system/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/agent-message-bus/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/requirements/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/agent-registry/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/infrastructure-devops/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/localagi/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/brain/requirements_minimal.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/web_learning/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/context-optimizer/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/tests/requirements-test.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/universal-agent/requirements.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/archive/requirements-test.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/archive/requirements-optimized.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/archive/requirements-minimal.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/archive/requirements-agi.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/jarvis-agi/requirements_super.txt'",
    "rm -f '/opt/sutazaiapp/docs/requirements/hardware-optimizer/requirements.txt'",
    "",
    "echo 'Cleanup complete! Backup stored in: $BACKUP_DIR'"
  ]
}