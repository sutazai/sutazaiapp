{
  "timestamp": "2025-08-03T19:30:08.498724",
  "common_dependencies": {
    "base_requirements_file": "/opt/sutazaiapp/agents/health-monitor/requirements.txt",
    "dependencies": [
      "fastapi>=0.104.0",
      "uvicorn[standard]>=0.24.0",
      "pydantic>=2.5.0",
      "httpx>=0.25.0",
      "python-multipart>=0.0.6"
    ],
    "used_by_agents": 54
  },
  "base_dockerfiles": {
    "python-agent-base": "FROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    curl \\\n    git \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Copy and install common Python requirements\nCOPY base-requirements.txt .\nRUN pip install --no-cache-dir -r base-requirements.txt\n\n# Create agent user for security\nRUN groupadd -r agent && useradd -r -g agent agent\nRUN chown -R agent:agent /app\n\n# Set environment variables\nENV PYTHONPATH=/app\nENV PYTHONUNBUFFERED=1\n\nUSER agent\n\n# Default command\nCMD [\"python\", \"app.py\"]\n",
    "nodejs-base": "FROM node:18-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    python3 \\\n    python3-pip \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create app user\nRUN groupadd -r appuser && useradd -r -g appuser appuser\nRUN chown -R appuser:appuser /app\n\nUSER appuser\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n",
    "monitoring-base": "FROM alpine:3.18\n\n# Install common monitoring tools\nRUN apk add --no-cache \\\n    ca-certificates \\\n    curl \\\n    bash \\\n    tzdata\n\n# Create monitoring user\nRUN addgroup -g 1000 monitoring && \\\n    adduser -D -u 1000 -G monitoring monitoring\n\nUSER monitoring\n\nWORKDIR /app\n",
    "gpu-python-base": "FROM nvidia/cuda:11.8-runtime-ubuntu20.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# Install Python and system dependencies\nRUN apt-get update && apt-get install -y \\\n    python3.11 \\\n    python3-pip \\\n    python3.11-dev \\\n    git \\\n    curl \\\n    build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create symbolic links\nRUN ln -s /usr/bin/python3.11 /usr/bin/python\n\nWORKDIR /app\n\n# Copy GPU-optimized requirements\nCOPY gpu-requirements.txt .\nRUN pip install --no-cache-dir -r gpu-requirements.txt\n\n# Create user\nRUN groupadd -r gpuuser && useradd -r -g gpuuser gpuuser\nRUN chown -R gpuuser:gpuuser /app\n\nUSER gpuuser\n\nENV PYTHONPATH=/app\nENV PYTHONUNBUFFERED=1\n\nCMD [\"python\", \"app.py\"]\n"
  },
  "requirements_hierarchy": {
    "base-requirements.txt": [
      "fastapi==0.104.1",
      "uvicorn==0.24.0",
      "pydantic==2.5.0",
      "httpx==0.25.2",
      "python-dotenv==1.0.0",
      "loguru==0.7.2",
      "redis==5.0.1",
      "psycopg2-binary==2.9.9",
      "sqlalchemy==2.0.23",
      "alembic==1.13.1"
    ],
    "ai-requirements.txt": [
      "openai==1.3.0",
      "langchain==0.0.350",
      "chromadb==0.4.18",
      "sentence-transformers==2.2.2",
      "numpy==1.24.3",
      "pandas==2.0.3"
    ],
    "gpu-requirements.txt": [
      "torch==2.1.0+cu118",
      "torchvision==0.16.0+cu118",
      "tensorflow-gpu==2.14.0",
      "transformers==4.36.0",
      "accelerate==0.25.0"
    ],
    "monitoring-requirements.txt": [
      "prometheus-client==0.19.0",
      "grafana-api==1.0.3",
      "elasticsearch==8.11.0",
      "py-healthcheck==1.10.1"
    ]
  },
  "optimized_dockerfiles": {
    "agent-template": "FROM sutazai/python-agent-base:latest\n\n# Copy agent-specific requirements (if any)\nCOPY requirements-extra.txt* ./\nRUN if [ -f requirements-extra.txt ]; then pip install --no-cache-dir -r requirements-extra.txt; fi\n\n# Copy application code\nCOPY --chown=agent:agent . .\n\n# Agent-specific setup\nRUN if [ -f setup.sh ]; then bash setup.sh; fi\n\nEXPOSE 8000\n\nCMD [\"python\", \"app.py\"]\n",
    "service-template": "FROM sutazai/nodejs-base:latest\n\n# Copy package files\nCOPY package*.json ./\nRUN npm ci --only=production\n\n# Copy application code\nCOPY --chown=appuser:appuser . .\n\n# Service-specific build\nRUN if [ -f build.sh ]; then bash build.sh; fi\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n"
  },
  "build_scripts": {
    "build-base-images.sh": "#!/bin/bash\nset -e\n\n# Build SutazAI base images\necho \"\ud83c\udfd7\ufe0f  Building SutazAI base images...\"\n\n# Build Python agent base\necho \"Building python-agent-base...\"\ndocker build -t sutazai/python-agent-base:latest -f docker/base/Dockerfile.python-agent-base docker/base/\n\n# Build Node.js base  \necho \"Building nodejs-base...\"\ndocker build -t sutazai/nodejs-base:latest -f docker/base/Dockerfile.nodejs-base docker/base/\n\n# Build monitoring base\necho \"Building monitoring-base...\"\ndocker build -t sutazai/monitoring-base:latest -f docker/base/Dockerfile.monitoring-base docker/base/\n\n# Build GPU base (if NVIDIA runtime available)\nif docker info | grep -q nvidia; then\n    echo \"Building gpu-python-base...\"\n    docker build -t sutazai/gpu-python-base:latest -f docker/base/Dockerfile.gpu-python-base docker/base/\nelse\n    echo \"\u26a0\ufe0f  NVIDIA runtime not available, skipping GPU base image\"\nfi\n\necho \"\u2705 Base images built successfully!\"\n\n# Tag with version\nVERSION=${1:-latest}\nif [ \"$VERSION\" != \"latest\" ]; then\n    docker tag sutazai/python-agent-base:latest sutazai/python-agent-base:$VERSION\n    docker tag sutazai/nodejs-base:latest sutazai/nodejs-base:$VERSION\n    docker tag sutazai/monitoring-base:latest sutazai/monitoring-base:$VERSION\n    if docker info | grep -q nvidia; then\n        docker tag sutazai/gpu-python-base:latest sutazai/gpu-python-base:$VERSION\n    fi\nfi\n\necho \"\ud83c\udfaf Base images ready for use!\"\n",
    "update-dockerfiles.sh": "#!/bin/bash\nset -e\n\necho \"\ud83d\udd04 Updating existing Dockerfiles to use base images...\"\n\n# Find all agent Dockerfiles and update them\nfind agents/ -name \"Dockerfile\" -type f | while read dockerfile; do\n    if grep -q \"FROM python:\" \"$dockerfile\"; then\n        echo \"Updating $dockerfile to use python-agent-base\"\n        # Backup original\n        cp \"$dockerfile\" \"$dockerfile.backup\"\n        \n        # Replace FROM line and optimize\n        sed -e 's|FROM python:.*|FROM sutazai/python-agent-base:latest|' \\\n            -e '/RUN apt-get update/,/rm -rf \\/var\\/lib\\/apt\\/lists\\*/d' \\\n            -e '/RUN pip install.*fastapi\\|uvicorn\\|pydantic/d' \\\n            \"$dockerfile.backup\" > \"$dockerfile\"\n            \n        echo \"\u2705 Updated $dockerfile\"\n    fi\ndone\n\necho \"\ud83c\udfaf Dockerfile updates complete!\"\n"
  },
  "savings_analysis": {
    "current": {
      "total_dockerfiles": 125,
      "duplicate_requirements": 54,
      "total_requirements_files": 142,
      "exact_duplicates": 7,
      "avg_build_time_per_agent": 120,
      "avg_image_size": 800
    },
    "optimized": {
      "base_images": 4,
      "unique_requirements_files": 88,
      "estimated_build_time_reduction": 0.6,
      "estimated_size_reduction": 0.4
    },
    "savings": {
      "build_time_saved_per_agent": 72.0,
      "total_build_time_saved": 9000.0,
      "storage_saved_per_image": 320.0,
      "total_storage_saved": 40000.0,
      "requirements_files_removed": 54,
      "maintenance_complexity_reduction": "70%"
    }
  },
  "implementation_plan": {
    "phase_1_preparation": {
      "description": "Prepare base images and requirements",
      "tasks": [
        "Create /docker/base/ directory structure",
        "Generate base requirements files",
        "Create base Dockerfiles",
        "Set up build scripts"
      ],
      "risk": "low",
      "estimated_time": "2 hours"
    },
    "phase_2_base_build": {
      "description": "Build and test base images",
      "tasks": [
        "Build all base images locally",
        "Test base images can start successfully",
        "Verify all common dependencies work",
        "Tag and prepare for distribution"
      ],
      "risk": "low",
      "estimated_time": "1 hour"
    },
    "phase_3_pilot_migration": {
      "description": "Migrate 5 non-critical agents as pilot",
      "tasks": [
        "Select 5 agents using health-monitor requirements",
        "Update their Dockerfiles to use base image",
        "Remove duplicate requirements files",
        "Test builds and functionality"
      ],
      "risk": "medium",
      "estimated_time": "3 hours"
    },
    "phase_4_bulk_migration": {
      "description": "Migrate remaining 49 agents with identical requirements",
      "tasks": [
        "Run automated Dockerfile updates",
        "Remove 49 duplicate requirements files",
        "Batch test all builds",
        "Verify no functionality regression"
      ],
      "risk": "medium",
      "estimated_time": "4 hours"
    },
    "phase_5_optimization": {
      "description": "Optimize other services and final cleanup",
      "tasks": [
        "Migrate Node.js services to nodejs-base",
        "Update monitoring services",
        "Clean up old base images in /docker/base/",
        "Update CI/CD to use new base images"
      ],
      "risk": "low",
      "estimated_time": "2 hours"
    }
  },
  "rollback_plan": {
    "backup_strategy": {
      "dockerfile_backups": "All Dockerfiles backed up with .backup extension",
      "requirements_backup": "Full backup in /archive/base_image_migration_TIMESTAMP/",
      "image_backups": "Docker save for all current images before changes"
    },
    "rollback_steps": [
      "Stop all running containers",
      "Restore all Dockerfile.backup files",
      "Restore requirements files from archive",
      "Rebuild affected images",
      "Restart services",
      "Verify functionality"
    ],
    "validation_commands": [
      "docker-compose build --no-cache",
      "docker-compose up -d",
      "python scripts/validate-container-infrastructure.py --critical-only",
      "curl health check endpoints"
    ]
  }
}