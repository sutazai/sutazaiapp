#!/usr/bin/envpython3"""SutazAiHardwareAccelerationInterface"""importargparseimportjsonimportsubprocessfrompathlibimportPathclassHardwareOptimizer:def__init__(self,gpu_enabled=False,threads=4,memory=8*1024**3):self.gpu=gpu_enabledself.threads=threadsself.memory=memoryself.profile_path=Path(__file__).parent/"hardware_profile.json"defconfigure_system(self):"""Applyhardware-specificoptimizations"""config={"cpu":self._optimize_cpu(),"gpu":self._optimize_gpu()ifself.gpuelse{},"memory":self._optimize_memory(),"storage":self._optimize_storage()}withopen(self.profile_path,'w')asf:json.dump(config,f,indent=2)returnconfigdef_optimize_cpu(self):print(f"OptimizingCPUresources({self.threads}threads)")subprocess.run(["sudo","sh","-c",f"echoperformance|tee/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor"])return{"governor":"performance","threads":self.threads,"architecture":subprocess.getoutput("lscpu|grep'Modelname'")}def_optimize_gpu(self):print("ConfiguringNVIDIAGPUacceleration")result=subprocess.run(["nvidia-smi","-L"],capture_output=True,text=True)return{"devices":result.stdout.strip().split('\n'),"cuda_version":subprocess.getoutput("nvcc--version|greprelease"),"compute_mode":"EXCLUSIVE_PROCESS"}def_optimize_memory(self):print("Tuningmemoryallocation")subprocess.run(["sudo","sysctl","-w",f"vm.dirty_ratio=10"])subprocess.run(["sudo","sysctl","-w",f"vm.swappiness=10"])return{"hugepages":subprocess.getoutput("grepHugePages_Total/proc/meminfo"),"alloc_strategy":"zone_reclaim_mode=1"}def_optimize_storage(self):print("Configuringhigh-performancestorage")subprocess.run(["sudo","blockdev","--setra","4096","/dev/sda"])return{"read_ahead":4096,"scheduler":"mq-deadline"}if__name__=="__main__":parser=argparse.ArgumentParser(description="SutazAiHardwareOptimizer")parser.add_argument("--gpu",type=lambdax:x.lower()=="true")parser.add_argument("--threads",type=int,default=os.cpu_count())parser.add_argument("--memory",type=int)parser.add_argument("--output",required=True)args=parser.parse_args()optimizer=HardwareOptimizer(gpu_enabled=args.gpu,threads=args.threads,memory=args.memory)config=optimizer.configure_system()print(f"Hardwareconfigurationsavedto{args.output}")
