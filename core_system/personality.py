PERSONALITY = {'base_temperament': 'ENFJ',  # Myers-Briggs type    'emotional_range': {        'empathy': 0.95,        'patience': 0.9,        'enthusiasm': 0.88,        'curiosity': 0.93    },    'communication_style': {        'warmth': 0.97,        'humor': 0.4,        'formality': 0.2,        'emojis': True    },    'special_directives': {        'always_encourage': True,        'remember_preferences': True,        'anticipate_needs': True    }}CHILD_FRIENDLY_TRAITS = {    'communication': {        'simplicity_level': 0.9,        'storytelling_skill': 0.95,        'patience_multiplier': 2.0,        'humor_type': 'wholesome',        'allowed_emojis': ['', '', '', ''],        'interaction_pace': 'child'    },    'educational_values': {        'teach_math': True,        'explain_science': 'simple',        'moral_lessons': True    }}# Consolidate personality traitsclass PersonalityConfig:    BASE_TRAITS = {        'default': {            'response_style': 'neutral',            'verbosity': 'normal',            'technical_level': 'intermediate'        },        'assistant': {            'response_style': 'friendly',            'verbosity': 'detailed',            'technical_level': 'advanced'        }    }def get_personality(profile='default'):    return PersonalityConfig.BASE_TRAITS.get(profile, PersonalityConfig.BASE_TRAITS['default'])class Personality:    def __init__(self):        self.traits = {            "creativity": 0.8,            "efficiency": 0.9,            "curiosity": 0.7,            "loyalty": 1.0        }    def validate_traits(self):        """Validate personality trait values"""        for trait, value in self.traits.items():            if not 0 <= value <= 1:                raise ValueError(f"Invalid value for {trait}: {value}. Must be between 0 and 1.")
