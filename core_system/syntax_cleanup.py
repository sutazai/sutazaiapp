#!/usr/bin/envpython3"""SutazAiSyntaxCleanupandValidationScript"""importosimportreimportsysimportloggingimporttokenizeimportastimportunicodedataclassSyntaxCleaner:def__init__(self,root_dir='.'):self.root_dir=os.path.abspath(root_dir)self.log_file='/var/log/sutazai/syntax_cleanup.log'#Setuplogginglogging.basicConfig(level=logging.INFO,format='%(asctime)s-%(levelname)s:%(message)s',handlers=[logging.FileHandler(self.log_file),logging.StreamHandler(sys.stdout)])self.logger=logging.getLogger(__name__)defremove_invalid_characters(self,content:str)->str:"""Removeorreplaceinvalidcharacters"""#Removenon-printablecharacterscontent=''.join(charforcharincontentifunicodedata.category(char)[0]notin['C','Z'])#ReplaceproblematicUnicodecharacterscontent=content.replace('','')#Removedegreesymbolreturncontentdeffix_print_syntax(self,content:str)->str:"""FixPython2styleprintstatements"""#ConvertprintstatementstoPython3syntaxcontent=re.sub(r'^(\s*)print\s+([^(].*?)$',r'\1print(\2)',content,flags=re.MULTILINE)returncontentdefprocess_file(self,file_path:str):"""Comprehensivefilesyntaxcleanup"""try:withopen(file_path,'r',encoding='utf-8')asf:original_content=f.read()#Applycleanupmethodscleaned_content=self.remove_invalid_characters(original_content)cleaned_content=self.fix_print_syntax(cleaned_content)#Validatesyntaxtry:ast.parse(cleaned_content)exceptSyntaxErrorase:self.logger.error(f"SyntaxErrorin{file_path}aftercleanup:{e}")returnFalse#Writebackifcontentchangedifcleaned_content!=original_content:withopen(file_path,'w',encoding='utf-8')asf:f.write(cleaned_content)self.logger.info(f"Cleanedsyntaxin:{file_path}")returnTrueexceptExceptionase:self.logger.error(f"Errorprocessing{file_path}:{e}")returnFalsedefrun_cleanup(self):"""Executefullsystemsyntaxcleanup"""self.logger.info("StartingSutazAisyntaxcleanup")cleaned_files=0error_files=0#ProcessallPythonfilesforroot,_,filesinos.walk(self.root_dir):forfileinfiles:iffile.endswith('.py'):file_path=os.path.join(root,file)#Skipvirtualenvironmentandcachedirectoriesifany(xinfile_pathforxin['.venv','node_modules','__pycache__']):continueifself.process_file(file_path):cleaned_files+=1else:error_files+=1self.logger.info(f"Syntaxcleanupcomplete.Cleaned:{cleaned_files},Errors:{error_files}")returncleaned_files,error_filesdefmain():cleaner=SyntaxCleaner()cleaned_files,error_files=cleaner.run_cleanup()print("\nSutazAiSyntaxCleanupSummary:")print(f"CleanedFiles:{cleaned_files}")print(f"FileswithErrors:{error_files}")if__name__=='__main__':main()
