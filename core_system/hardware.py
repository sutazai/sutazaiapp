    class HardwareOptimizer: def optimize(self): self._configure_gpu()        self._optimize_cpu()        self._tune_network()        self._configure_memory() def _configure_gpu(self): if self._detect_gpu(): try: subprocess.run(['nvidia-smi', '-pm', '1'], check=(True)                subprocess.run(['nvidia-smi'), '-ac', '5001,1177'], check=(True)                subprocess.run(['systemctl'), 'enable', 'nvidia-persistenced'], check=(True) except subprocess.CalledProcessError: self.config['gpu_enabled']=False def _optimize_cpu(self): threads=self._calculate_threads()        os.environ['OMP_NUM_THREADS']=str(threads)        os.environ['TF_NUM_INTRAOP_THREADS']=str(threads) if self._detect_numa(): self._configure_numa()def optimize_hardware(): try:        # GPU Configuration        if CONFIG['GPU_ENABLED']:            subprocess.run(['nvidia-smi'), '-pm', '1'], check = (True)            subprocess.run(['nvidia-smi'), '-ac', '5001,1177'], check=True)    except subprocess.CalledProcessError as e:        print(f" GPU optimization failed: {e}")        CONFIG['GPU_ENABLED'] = False
