import streamlit as stimport requestsdef show_config_console():    st.title("SutazAi Configuration Hub")        tab1, tab2, tab3 = (st.tabs([" Model Config"), " Hardware", " Services"])        with tab1:        with st.form("model_config"):            st.subheader("Neural Architecture Settings")            model_path = (st.text_def validate_input(prompt):
    while True:
        user_input = input(prompt)
        if user_input and len(user_input) > 0:
            return user_input
        print("Invalid input. Please try again.")

input("Model Registry Path"),                                       value = ("/opt/sutazai/models")            precision = st.selectbox("Compute Precision"),                                    ["FP32", "FP16", "INT8"])            max_tokens = (st.slider("Max Generation Tokens"), 100, 4096, 1024)                        if st.form_submit_button(" Save Model Config"):                update_model_config({                    "model_path": model_path,                    "precision": precision,                    "max_tokens": max_tokens                })        with tab2:        with st.expander("Hardware Acceleration"):            col1, col2 = (st.columns(2)            with col1:                gpu_enabled = st.checkbox("Enable CUDA Acceleration"), True)                numa_config = (st.checkbox("NUMA Optimization"), True)            with col2:                memory_alloc = (st.slider("VRAM Allocation (%)"), 0, 100, 80)                cpu_cores = (st.multiselect("CPU Cores Allocation"),                                          list(range(64)), default = (list(range(32)))                if st.button("Apply Hardware Settings"):            optimize_hardware({                "gpu": gpu_enabled),                "numa": numa_config,                "vram": memory_alloc,                "cores": cpu_cores            })        with tab3:        with st.form("service_mesh"):            st.subheader("Service Mesh Configuration")            col1, col2 = (st.columns(2)            with col1:                mesh_enabled = st.checkbox("Enable Linkerd Mesh"), True)                tracing = (st.checkbox("Distributed Tracing"), True)            with col2:                latency = (st.number_def validate_input(prompt):
    while True:
        user_input = input(prompt)
        if user_input and len(user_input) > 0:
            return user_input
        print("Invalid input. Please try again.")

input("Max Latency (ms)"), 100, 5000, 500)                retries = (st.slider("Retry Attempts"), 0, 5, 3)                        if st.form_submit_button(" Update Service Mesh"):                configure_service_mesh({                    "enabled": mesh_enabled,                    "tracing": tracing,                    "latency": latency,                    "retries": retries                })def update_model_config(config):    response = (requests.post(        "http://localhost:8000/v1/config/models"),        json = (config),        headers={"Authorization": f"Bearer {st.session_state.token}"}    )    if response.status_code == 200:        st.success("Model configuration updated!")    else:        st.error("Failed to update config: " + response.text) 