# ============================================================================
# SUTAZAI MASTER TEMPLATE: Frontend Base
# ============================================================================
# Purpose: Production-ready frontend service for web applications
# Security: Non-root user, hardened web environment
# Performance: Optimized for React, Vue, Angular, Streamlit
# Compatibility: Node.js, Python web frameworks
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

# Multi-stage build for different frontend types
FROM node:20-alpine as node-base
FROM python:3.12.8-slim-bookworm as python-base

# ============================================================================
# NODE.JS FRONTEND STAGE (React, Vue, Angular)
# ============================================================================
FROM node-base as nodejs-frontend

# Install essential packages
RUN apk add --no-cache \
        curl \
        git \
        ca-certificates \
        dumb-init \
        nginx \
        && rm -rf /var/cache/apk/*

# Create frontend user
RUN addgroup -g 1000 -S frontend && \
    adduser -u 1000 -S frontend -G frontend

# Create directories
RUN mkdir -p /app /var/log/nginx /var/cache/nginx \
    && chown -R frontend:frontend /app \
    && chown -R frontend:frontend /var/log/nginx /var/cache/nginx

WORKDIR /app

# Install dependencies first for better caching
COPY --chown=frontend:frontend package*.json ./
RUN npm ci --only=production --no-optional && npm cache clean --force

# Copy application code
COPY --chown=frontend:frontend . .

# Build application
RUN npm run build

# Configure Nginx
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user frontend;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;
    
    server {
        listen 3000;
        server_name localhost;
        root /app/dist;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}
EOF

USER frontend
EXPOSE 3000
CMD ["nginx", "-g", "daemon off;"]

# ============================================================================
# PYTHON FRONTEND STAGE (Streamlit, FastAPI + Jinja2)
# ============================================================================
FROM python-base as python-frontend

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        git \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Create frontend user
RUN groupadd --gid 1000 frontend && \
    useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash frontend

# Create directories
RUN mkdir -p /app /app/static /app/templates /app/logs \
    && chown -R frontend:frontend /app

WORKDIR /app

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel
COPY requirements.txt /tmp/requirements.txt 2>/dev/null || echo "streamlit>=1.28.0\nfastapi>=0.104.1\nuvicorn[standard]>=0.24.0\njinja2>=3.1.2\nstatic3>=0.7.0" > /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt && rm /tmp/requirements.txt

# Copy application code
COPY --chown=frontend:frontend . .

USER frontend

# Create Streamlit config
RUN mkdir -p ~/.streamlit && cat > ~/.streamlit/config.toml << 'EOF'
[server]
port = 8501
address = "0.0.0.0"
enableCORS = false
headless = true

[browser]
gatherUsageStats = false
EOF

EXPOSE 8501 3000

# Default to Streamlit
CMD ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]

# ============================================================================
# FINAL STAGE - RUNTIME SELECTION
# ============================================================================
FROM nodejs-frontend as runtime

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

ENV NODE_ENV=production \
    FRONTEND_PORT=3000 \
    FRONTEND_HOST=0.0.0.0

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
#
# Node.js Frontend (React/Vue/Angular):
# docker build --target nodejs-frontend -t frontend:nodejs .
# docker run -p 3000:3000 frontend:nodejs
#
# Python Frontend (Streamlit):
# docker build --target python-frontend -t frontend:streamlit .
# docker run -p 8501:8501 frontend:streamlit
#
# Features:
# - Multi-framework support (React, Vue, Angular, Streamlit)
# - Production-ready Nginx configuration
# - Non-root execution for security
# - Optimized build process with layer caching
# - Health checks and monitoring
# - Static file serving with compression
# - Hot reload support for development
#
# Directory Structure:
# /app/dist/        - Built frontend assets (Node.js)
# /app/static/      - Static files (Python)
# /app/templates/   - Template files (Python)
# /app/logs/        - Application logs
#
# Required Files:
# - package.json (Node.js frontend)
# - requirements.txt (Python frontend) 
# - app.py (Streamlit entry point)
# ============================================================================