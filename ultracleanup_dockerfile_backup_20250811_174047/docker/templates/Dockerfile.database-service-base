# ============================================================================
# SUTAZAI MASTER TEMPLATE: Database Service Base
# ============================================================================
# Purpose: Production-ready database service base template
# Security: Non-root user, hardened database environment
# Performance: Optimized for database workloads with proper permissions
# Compatibility: PostgreSQL, MySQL, MongoDB compatible
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

# Use Ubuntu LTS as base for better database support
FROM ubuntu:22.04 as base

# ============================================================================
# SYSTEM CONFIGURATION & SECURITY HARDENING
# ============================================================================

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8

# Update system and install essential packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        wget \
        ca-certificates \
        gnupg \
        lsb-release \
        gosu \
        tzdata \
        locales \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

# Generate locales
RUN locale-gen en_US.UTF-8

# Create database user for security (non-root)
RUN groupadd --gid 999 dbuser && \
    useradd --uid 999 --gid 999 --create-home --shell /bin/bash dbuser

# ============================================================================
# DATABASE DIRECTORY SETUP
# ============================================================================

# Create database directories with proper ownership
RUN mkdir -p /var/lib/database \
             /var/lib/database/data \
             /var/lib/database/logs \
             /var/lib/database/backup \
             /var/lib/database/config \
             /etc/database \
             /docker-entrypoint-initdb.d \
             && chown -R dbuser:dbuser /var/lib/database \
             && chown -R dbuser:dbuser /etc/database \
             && chmod 750 /var/lib/database/data

# ============================================================================
# DATABASE-SPECIFIC INSTALLATIONS
# ============================================================================

# PostgreSQL installation
RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - && \
    echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        postgresql-16 \
        postgresql-client-16 \
        postgresql-contrib-16 \
        && rm -rf /var/lib/apt/lists/*

# MySQL/MariaDB installation
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        mariadb-server \
        mariadb-client \
        && rm -rf /var/lib/apt/lists/*

# MongoDB installation
RUN wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | apt-key add - && \
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" > /etc/apt/sources.list.d/mongodb-org-7.0.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        mongodb-org \
        && rm -rf /var/lib/apt/lists/*

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# Copy database configuration templates
RUN mkdir -p /templates/postgresql /templates/mysql /templates/mongodb

# PostgreSQL configuration template
RUN cat > /templates/postgresql/postgresql.conf << 'EOF'
# PostgreSQL configuration optimized for containers
listen_addresses = '*'
port = 5432
max_connections = 100
shared_buffers = 128MB
effective_cache_size = 1GB
maintenance_work_mem = 64MB
checkpoint_completion_target = 0.7
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200
work_mem = 4MB
min_wal_size = 1GB
max_wal_size = 4GB
max_worker_processes = 8
max_parallel_workers_per_gather = 2
max_parallel_workers = 8
max_parallel_maintenance_workers = 2
EOF

# PostgreSQL HBA configuration template
RUN cat > /templates/postgresql/pg_hba.conf << 'EOF'
# PostgreSQL Client Authentication Configuration File
local   all             all                                     trust
host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
host    all             all             0.0.0.0/0               md5
EOF

# MySQL configuration template
RUN cat > /templates/mysql/my.cnf << 'EOF'
[mysqld]
bind-address = 0.0.0.0
port = 3306
datadir = /var/lib/database/data
socket = /var/run/mysqld/mysqld.sock
pid-file = /var/run/mysqld/mysqld.pid
log-error = /var/lib/database/logs/error.log
slow-query-log = 1
slow-query-log-file = /var/lib/database/logs/slow.log
long-query-time = 2
innodb_buffer_pool_size = 256M
innodb_log_file_size = 64M
innodb_flush_log_at_trx_commit = 1
innodb_flush_method = O_DIRECT
max_connections = 100
query_cache_size = 32M
query_cache_type = 1
EOF

# MongoDB configuration template
RUN cat > /templates/mongodb/mongod.conf << 'EOF'
# MongoDB configuration optimized for containers
storage:
  dbPath: /var/lib/database/data
  journal:
    enabled: true

systemLog:
  destination: file
  logAppend: true
  path: /var/lib/database/logs/mongod.log

net:
  port: 27017
  bindIp: 0.0.0.0

processManagement:
  fork: false
  pidFilePath: /var/run/mongodb/mongod.pid

security:
  authorization: enabled
EOF

# ============================================================================
# ENTRYPOINT SCRIPT
# ============================================================================

# Create universal database entrypoint script
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Database type detection and initialization
DB_TYPE=${DB_TYPE:-postgresql}

case "$DB_TYPE" in
    postgresql)
        exec gosu dbuser postgres "$@"
        ;;
    mysql|mariadb)
        exec gosu dbuser mysqld "$@"
        ;;
    mongodb)
        exec gosu dbuser mongod "$@"
        ;;
    *)
        echo "Unknown database type: $DB_TYPE"
        exit 1
        ;;
esac
EOF

RUN chmod +x /docker-entrypoint.sh

# ============================================================================
# HEALTH CHECK & MONITORING
# ============================================================================

# Universal health check script
RUN cat > /healthcheck.sh << 'EOF'
#!/bin/bash
DB_TYPE=${DB_TYPE:-postgresql}

case "$DB_TYPE" in
    postgresql)
        pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-dbuser}
        ;;
    mysql|mariadb)
        mysqladmin ping -h localhost -P 3306 -u ${MYSQL_USER:-root} --silent
        ;;
    mongodb)
        mongosh --eval "db.adminCommand('ping')" --quiet
        ;;
    *)
        exit 1
        ;;
esac
EOF

RUN chmod +x /healthcheck.sh

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /healthcheck.sh || exit 1

# ============================================================================
# RUNTIME CONFIGURATION
# ============================================================================

# Expose common database ports
EXPOSE 5432 3306 27017

# Set database environment variables
ENV DB_TYPE=postgresql \
    POSTGRES_DB=sutazai \
    POSTGRES_USER=dbuser \
    POSTGRES_PASSWORD=changeme \
    MYSQL_DATABASE=sutazai \
    MYSQL_USER=dbuser \
    MYSQL_PASSWORD=changeme \
    MONGO_INITDB_DATABASE=sutazai \
    MONGO_INITDB_ROOT_USERNAME=dbuser \
    MONGO_INITDB_ROOT_PASSWORD=changeme

# Create volume mount points
VOLUME ["/var/lib/database/data", "/var/lib/database/logs", "/var/lib/database/backup"]

# Set working directory
WORKDIR /var/lib/database

# Default entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["postgres"]

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
# 
# PostgreSQL:
# docker build -t db-service:postgresql .
# docker run -e DB_TYPE=postgresql -e POSTGRES_PASSWORD=secret -p 5432:5432 db-service:postgresql
#
# MySQL/MariaDB:
# docker run -e DB_TYPE=mysql -e MYSQL_ROOT_PASSWORD=secret -p 3306:3306 db-service:mysql
#
# MongoDB:
# docker run -e DB_TYPE=mongodb -e MONGO_INITDB_ROOT_PASSWORD=secret -p 27017:27017 db-service:mongodb
#
# Security Features:
# - Non-root database user (uid/gid 999)
# - Proper file permissions and ownership
# - Configurable authentication
# - Secure default configurations
#
# Performance Features:
# - Optimized configuration templates
# - Proper memory allocation
# - Connection pooling ready
# - Logging and monitoring configured
#
# Volumes:
# - /var/lib/database/data - Database files
# - /var/lib/database/logs - Log files  
# - /var/lib/database/backup - Backup files
# ============================================================================