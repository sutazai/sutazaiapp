# ============================================================================
# SUTAZAI MASTER TEMPLATE: Build Tools Base
# ============================================================================
# Purpose: Production-ready CI/CD build tools container
# Security: Non-root user, secure build environment
# Performance: Optimized for fast builds and deployments
# Compatibility: Docker, Jenkins, GitHub Actions, GitLab CI
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

FROM ubuntu:22.04 as base

# ============================================================================
# BUILD ENVIRONMENT CONFIGURATION
# ============================================================================

ENV DEBIAN_FRONTEND=noninteractive \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PATH=/usr/local/bin:$PATH

# Install essential build tools and dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        wget \
        ca-certificates \
        gnupg \
        lsb-release \
        git \
        ssh \
        unzip \
        zip \
        jq \
        make \
        cmake \
        pkg-config \
        && rm -rf /var/lib/apt/lists/*

# ============================================================================
# DOCKER INSTALLATION
# ============================================================================

# Install Docker CLI and Docker Compose
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y --no-install-recommends docker-ce-cli docker-compose-plugin && \
    rm -rf /var/lib/apt/lists/*

# ============================================================================
# LANGUAGE RUNTIMES INSTALLATION
# ============================================================================

# Install Python 3.12.8
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.12 \
        python3.12-dev \
        python3-pip \
        && ln -s /usr/bin/python3.12 /usr/bin/python && \
        python -m pip install --upgrade pip setuptools wheel && \
        rm -rf /var/lib/apt/lists/*

# Install Node.js LTS
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    npm install -g npm@latest && \
    rm -rf /var/lib/apt/lists/*

# Install Go
RUN GO_VERSION=1.21.5 && \
    wget https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
    tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
    rm go${GO_VERSION}.linux-amd64.tar.gz
ENV PATH=/usr/local/go/bin:$PATH

# ============================================================================
# CI/CD TOOLS INSTALLATION
# ============================================================================

# Install kubectl
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
    rm kubectl

# Install Helm
RUN curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends helm && \
    rm -rf /var/lib/apt/lists/*

# Install Terraform
RUN TERRAFORM_VERSION=1.6.6 && \
    wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
    unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip && \
    mv terraform /usr/local/bin/ && \
    rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip

# Install AWS CLI
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    ./aws/install && \
    rm -rf aws awscliv2.zip

# Install Google Cloud SDK
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update && \
    apt-get install -y --no-install-recommends google-cloud-sdk && \
    rm -rf /var/lib/apt/lists/*

# ============================================================================
# BUILD TOOLS AND UTILITIES
# ============================================================================

# Install security scanning tools
RUN pip install --no-cache-dir \
        bandit==1.7.5 \
        safety==2.3.5 \
        semgrep==1.45.0

# Install code quality tools
RUN pip install --no-cache-dir \
        black==23.11.0 \
        isort==5.12.0 \
        flake8==6.1.0 \
        mypy==1.7.0 \
        pytest==7.4.3 \
        pytest-cov==4.1.0

# Install Node.js build tools
RUN npm install -g \
        eslint@latest \
        prettier@latest \
        webpack@latest \
        webpack-cli@latest \
        @babel/core@latest \
        @babel/cli@latest

# Create build user
RUN groupadd --gid 1000 builder && \
    useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash builder && \
    usermod -aG docker builder

# ============================================================================
# BUILD SCRIPTS AND AUTOMATION
# ============================================================================

WORKDIR /app

# Create universal build script
RUN cat > /app/build.sh << 'EOF'
#!/bin/bash
# Universal Build Script for SutazAI Projects
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Default configuration
BUILD_TYPE=${BUILD_TYPE:-production}
PROJECT_TYPE=${PROJECT_TYPE:-auto}
SKIP_TESTS=${SKIP_TESTS:-false}
SKIP_LINT=${SKIP_LINT:-false}
SKIP_SECURITY=${SKIP_SECURITY:-false}
DOCKER_BUILD=${DOCKER_BUILD:-false}
DEPLOY_ENV=${DEPLOY_ENV:-}

log_info "Starting build process..."
log_info "Build type: $BUILD_TYPE"
log_info "Project type: $PROJECT_TYPE"

# Auto-detect project type
if [ "$PROJECT_TYPE" = "auto" ]; then
    if [ -f "package.json" ]; then
        PROJECT_TYPE="nodejs"
    elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
        PROJECT_TYPE="python"
    elif [ -f "go.mod" ]; then
        PROJECT_TYPE="golang"
    elif [ -f "Dockerfile" ]; then
        PROJECT_TYPE="docker"
    else
        log_warning "Could not auto-detect project type"
        PROJECT_TYPE="generic"
    fi
fi

log_info "Detected project type: $PROJECT_TYPE"

# Install dependencies
install_dependencies() {
    case "$PROJECT_TYPE" in
        nodejs)
            log_info "Installing Node.js dependencies..."
            npm ci
            ;;
        python)
            log_info "Installing Python dependencies..."
            if [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
            elif [ -f "pyproject.toml" ]; then
                pip install .
            fi
            ;;
        golang)
            log_info "Installing Go dependencies..."
            go mod download
            ;;
    esac
}

# Run linting
run_lint() {
    if [ "$SKIP_LINT" = "true" ]; then
        log_warning "Skipping linting"
        return
    fi
    
    log_info "Running code linting..."
    case "$PROJECT_TYPE" in
        nodejs)
            eslint . || log_warning "ESLint found issues"
            prettier --check . || log_warning "Prettier found formatting issues"
            ;;
        python)
            black --check . || log_warning "Black found formatting issues"
            isort --check-only . || log_warning "isort found import issues"
            flake8 . || log_warning "flake8 found style issues"
            mypy . || log_warning "mypy found type issues"
            ;;
        golang)
            go fmt ./...
            go vet ./...
            ;;
    esac
}

# Run security scans
run_security_scan() {
    if [ "$SKIP_SECURITY" = "true" ]; then
        log_warning "Skipping security scan"
        return
    fi
    
    log_info "Running security scans..."
    case "$PROJECT_TYPE" in
        nodejs)
            npm audit || log_warning "npm audit found vulnerabilities"
            ;;
        python)
            bandit -r . -f json -o bandit-report.json || log_warning "Bandit found security issues"
            safety check || log_warning "Safety found vulnerabilities"
            semgrep --config=auto . || log_warning "Semgrep found security issues"
            ;;
    esac
}

# Run tests
run_tests() {
    if [ "$SKIP_TESTS" = "true" ]; then
        log_warning "Skipping tests"
        return
    fi
    
    log_info "Running tests..."
    case "$PROJECT_TYPE" in
        nodejs)
            npm test
            ;;
        python)
            pytest --cov=. --cov-report=html --cov-report=xml
            ;;
        golang)
            go test -v -race -coverprofile=coverage.out ./...
            ;;
    esac
}

# Build project
build_project() {
    log_info "Building project..."
    case "$PROJECT_TYPE" in
        nodejs)
            if [ "$BUILD_TYPE" = "production" ]; then
                npm run build:prod
            else
                npm run build
            fi
            ;;
        python)
            if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
                python -m build
            fi
            ;;
        golang)
            go build -v -o bin/ ./...
            ;;
        docker)
            if [ "$DOCKER_BUILD" = "true" ]; then
                docker build -t "$(basename $(pwd)):$BUILD_TYPE" .
            fi
            ;;
    esac
}

# Deploy if specified
deploy_project() {
    if [ -z "$DEPLOY_ENV" ]; then
        return
    fi
    
    log_info "Deploying to $DEPLOY_ENV..."
    case "$DEPLOY_ENV" in
        kubernetes)
            kubectl apply -f k8s/
            ;;
        docker-compose)
            docker-compose up -d
            ;;
        aws)
            aws deploy create-deployment --application-name sutazai --deployment-group-name production
            ;;
    esac
}

# Main build process
main() {
    install_dependencies
    run_lint
    run_security_scan
    run_tests
    build_project
    deploy_project
    
    log_success "Build completed successfully!"
}

# Run main function
main "$@"
EOF

RUN chmod +x /app/build.sh

# Create CI/CD pipeline configurations
RUN mkdir -p /app/ci-templates

# GitHub Actions workflow template
RUN cat > /app/ci-templates/github-actions.yml << 'EOF'
name: SutazAI CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build and test
      run: |
        docker run --rm \
          -v $(pwd):/app \
          -w /app \
          sutazai/build-tools:latest \
          /app/build.sh
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          reports/
          coverage/
EOF

# GitLab CI template
RUN cat > /app/ci-templates/gitlab-ci.yml << 'EOF'
stages:
  - lint
  - test
  - build
  - deploy

variables:
  BUILD_TYPE: production
  DOCKER_DRIVER: overlay2

build:
  stage: build
  image: sutazai/build-tools:latest
  script:
    - /app/build.sh
  artifacts:
    reports:
      junit: reports/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage.xml
    paths:
      - dist/
      - build/
EOF

# Jenkins pipeline template
RUN cat > /app/ci-templates/Jenkinsfile << 'EOF'
pipeline {
    agent {
        docker {
            image 'sutazai/build-tools:latest'
        }
    }
    
    stages {
        stage('Build') {
            steps {
                sh '/app/build.sh'
            }
        }
        
        stage('Test') {
            steps {
                sh 'BUILD_TYPE=test /app/build.sh'
            }
            post {
                always {
                    publishTestResults testResultsPattern: 'reports/junit.xml'
                    publishCoverage adapters: [coberturaAdapter('reports/coverage.xml')]
                }
            }
        }
        
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                sh 'DEPLOY_ENV=kubernetes /app/build.sh'
            }
        }
    }
}
EOF

# ============================================================================
# APPLICATION SETUP
# ============================================================================

# Set ownership and permissions
RUN chown -R builder:builder /app

# Switch to builder user
USER builder

# ============================================================================
# HEALTH CHECK & MONITORING
# ============================================================================

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD echo "Build tools container is healthy"

# ============================================================================
# RUNTIME CONFIGURATION
# ============================================================================

WORKDIR /workspace

ENV BUILD_TYPE=production \
    PROJECT_TYPE=auto \
    SKIP_TESTS=false \
    SKIP_LINT=false \
    SKIP_SECURITY=false \
    DOCKER_BUILD=false

VOLUME ["/workspace", "/app/cache"]

# Default command
CMD ["/app/build.sh"]

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
#
# Basic build:
# docker build -t build-tools .
# docker run -v $(pwd):/workspace build-tools
#
# Custom build configuration:
# docker run -e BUILD_TYPE=development \
#            -e PROJECT_TYPE=python \
#            -e SKIP_TESTS=false \
#            -v $(pwd):/workspace build-tools
#
# Docker-in-Docker build:
# docker run --privileged -v /var/run/docker.sock:/var/run/docker.sock \
#            -v $(pwd):/workspace build-tools
#
# CI/CD Usage:
# - Copy ci-templates/github-actions.yml to .github/workflows/
# - Copy ci-templates/gitlab-ci.yml to .gitlab-ci.yml
# - Copy ci-templates/Jenkinsfile to repository root
#
# Features:
# - Multi-language support (Python, Node.js, Go)
# - Comprehensive security scanning
# - Code quality checks and linting
# - Automated testing with coverage
# - Docker and container builds
# - Kubernetes and cloud deployment
# - CI/CD pipeline templates
# - Non-root execution for security
#
# Build Tools Included:
# - Docker CLI and Compose
# - kubectl and Helm
# - Terraform and cloud CLIs
# - Language-specific build tools
# - Security scanners (Bandit, Safety, Semgrep)
# - Code quality tools (ESLint, Black, etc.)
#
# Environment Variables:
# - BUILD_TYPE: production, development, test
# - PROJECT_TYPE: auto, nodejs, python, golang, docker
# - SKIP_TESTS: true/false
# - SKIP_LINT: true/false
# - SKIP_SECURITY: true/false
# - DOCKER_BUILD: true/false
# - DEPLOY_ENV: kubernetes, docker-compose, aws
# ============================================================================