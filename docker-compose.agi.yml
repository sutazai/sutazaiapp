version: '3.8'

# AGI Orchestration Layer Services
# This file defines the advanced AGI orchestration infrastructure

networks:
  sutazai-network:
    external: true

volumes:
  agi_orchestration_data:
    driver: local
  agi_task_data:
    driver: local
  agi_metrics_data:
    driver: local
  agi_agent_profiles:
    driver: local

services:
  # Main AGI Orchestration Layer
  agi-orchestration-layer:
    build:
      context: ./docker/agi-orchestration
      dockerfile: Dockerfile
    container_name: sutazai-agi-orchestration
    depends_on:
      - redis
      - postgres
      - prometheus
    environment:
      # Core configuration
      ORCHESTRATION_MODE: "active"
      LOG_LEVEL: "INFO"
      
      # Database connections
      REDIS_URL: "redis://redis:6379/1"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}"
      
      # Service mesh integration
      CONSUL_HOST: "consul"
      CONSUL_PORT: "8500"
      KONG_ADMIN_URL: "http://kong:8001"
      
      # Monitoring integration
      PROMETHEUS_URL: "http://prometheus:9090"
      GRAFANA_URL: "http://grafana:3000"
      
      # AGI-specific settings
      MAX_CONCURRENT_TASKS: "100"
      TASK_TIMEOUT_DEFAULT: "3600"
      AGENT_HEALTH_CHECK_INTERVAL: "30"
      PERFORMANCE_OPTIMIZATION_INTERVAL: "300"
      META_LEARNING_INTERVAL: "600"
      SAFETY_MONITORING_INTERVAL: "15"
      EMERGENT_BEHAVIOR_DETECTION_INTERVAL: "60"
      
      # Safety and security
      SAFETY_MODE: "enabled"
      ANOMALY_DETECTION: "enabled"
      AUTO_SCALING: "enabled"
      EMERGENCY_SHUTDOWN_THRESHOLD: "0.5"
      
      # Resource limits
      RESOURCE_ALLOCATION_MODE: "adaptive"
      CPU_LIMIT: "4.0"
      MEMORY_LIMIT: "8G"
      
    networks:
      - sutazai-network
    ports:
      - "10500:8080"  # Main orchestration API
      - "10501:8081"  # Health and metrics endpoint
      - "10502:8082"  # Admin interface
    restart: unless-stopped
    volumes:
      - agi_orchestration_data:/data/orchestration
      - agi_task_data:/data/tasks
      - agi_metrics_data:/data/metrics
      - ./config/agi_orchestration.yaml:/config/orchestration.yaml:ro
      - ./agents/agi:/app/agi:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For agent management
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agi-orchestration.rule=Host(`agi.${DOMAIN:-localhost}`)"
      - "traefik.http.services.agi-orchestration.loadbalancer.server.port=8080"

  # Task Decomposition Service
  agi-task-decomposer:
    build:
      context: ./docker/agi-task-decomposer
      dockerfile: Dockerfile
    container_name: sutazai-agi-task-decomposer
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Task analysis settings
      COMPLEXITY_ANALYSIS_MODEL: "tinyllama"
      CAPABILITY_EXTRACTION_MODEL: "tinyllama"
      DECOMPOSITION_STRATEGY: "hierarchical"
      
      # Ollama integration
      OLLAMA_BASE_URL: "http://ollama:11434"
      OLLAMA_MODEL: "tinyllama"
      
    networks:
      - sutazai-network
    ports:
      - "10510:8080"
    restart: unless-stopped
    volumes:
      - agi_task_data:/data/tasks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Agent Matcher Service
  agi-agent-matcher:
    build:
      context: ./docker/agi-agent-matcher
      dockerfile: Dockerfile
    container_name: sutazai-agi-agent-matcher
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Matching algorithms
      MATCHING_ALGORITHM: "capability_weighted"
      PERFORMANCE_WEIGHT: "0.3"
      CAPABILITY_WEIGHT: "0.4"
      LOAD_BALANCE_WEIGHT: "0.3"
      
      # Agent profiling
      AGENT_PROFILING_ENABLED: "true"
      PERFORMANCE_HISTORY_WINDOW: "1000"
      
    networks:
      - sutazai-network
    ports:
      - "10520:8080"
    restart: unless-stopped
    volumes:
      - agi_agent_profiles:/data/agent_profiles
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Consensus Manager Service
  agi-consensus-manager:
    build:
      context: ./docker/agi-consensus
      dockerfile: Dockerfile
    container_name: sutazai-agi-consensus
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Consensus parameters
      MINIMUM_VOTES: "3"
      CONSENSUS_THRESHOLD: "0.7"
      VOTE_TIMEOUT: "300"
      
      # Voting algorithms
      NUMERICAL_AGGREGATION: "weighted_average"
      CATEGORICAL_AGGREGATION: "majority_vote"
      CONFIDENCE_WEIGHT: "0.3"
      EXPERTISE_WEIGHT: "0.4"
      PERFORMANCE_WEIGHT: "0.3"
      
    networks:
      - sutazai-network
    ports:
      - "10530:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Emergent Behavior Detector
  agi-behavior-detector:
    build:
      context: ./docker/agi-behavior-detector
      dockerfile: Dockerfile
    container_name: sutazai-agi-behavior-detector
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Detection parameters
      PATTERN_WINDOW: "3600"
      MINIMUM_PARTICIPANTS: "3"
      EMERGENCE_THRESHOLD: "0.7"
      IMPACT_THRESHOLD: "0.5"
      
      # Pattern analysis
      PATTERN_TYPES: "swarm_coordination,adaptive_learning,self_optimization,collective_intelligence"
      ANALYSIS_MODEL: "tinyllama"
      
      # Ollama integration
      OLLAMA_BASE_URL: "http://ollama:11434"
      
    networks:
      - sutazai-network
    ports:
      - "10540:8080"
    restart: unless-stopped
    volumes:
      - agi_metrics_data:/data/behavior_patterns
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Meta-Learning Engine
  agi-meta-learner:
    build:
      context: ./docker/agi-meta-learner
      dockerfile: Dockerfile
    container_name: sutazai-agi-meta-learner
    depends_on:
      - agi-orchestration-layer
      - redis
      - postgres
    environment:
      REDIS_URL: "redis://redis:6379/1"
      DATABASE_URL: "postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Learning parameters
      LEARNING_RATE: "0.01"
      ADAPTATION_THRESHOLD: "0.8"
      PATTERN_MEMORY_SIZE: "10000"
      OPTIMIZATION_WINDOW: "86400"
      
      # Optimization targets
      OPTIMIZATION_TARGETS: "task_success_rate,agent_utilization,response_time,resource_efficiency"
      
      # ML model settings
      ML_MODEL_TYPE: "neural_network"
      MODEL_UPDATE_INTERVAL: "3600"
      
    networks:
      - sutazai-network
    ports:
      - "10550:8080"
    restart: unless-stopped
    volumes:
      - agi_metrics_data:/data/learning
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Safety Monitor Service
  agi-safety-monitor:
    build:
      context: ./docker/agi-safety
      dockerfile: Dockerfile
    container_name: sutazai-agi-safety-monitor
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Safety thresholds
      AGENT_FAILURE_RATE_THRESHOLD: "0.2"
      TASK_FAILURE_RATE_THRESHOLD: "0.3"
      RESPONSE_TIME_LIMIT: "10.0"
      RESOURCE_USAGE_LIMIT: "0.95"
      
      # Monitoring intervals
      CRITICAL_CHECK_INTERVAL: "15"
      WARNING_CHECK_INTERVAL: "60"
      INFO_CHECK_INTERVAL: "300"
      
      # Emergency procedures
      AUTO_SHUTDOWN_THRESHOLD: "0.5"
      EMERGENCY_ACTIONS_ENABLED: "true"
      
    networks:
      - sutazai-network
    ports:
      - "10560:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Performance Optimizer
  agi-performance-optimizer:
    build:
      context: ./docker/agi-optimizer
      dockerfile: Dockerfile
    container_name: sutazai-agi-optimizer
    depends_on:
      - agi-orchestration-layer
      - redis
      - prometheus
    environment:
      REDIS_URL: "redis://redis:6379/1"
      PROMETHEUS_URL: "http://prometheus:9090"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Optimization targets
      TASK_SUCCESS_RATE_TARGET: "0.95"
      AVG_RESPONSE_TIME_TARGET: "2.0"
      AGENT_UTILIZATION_TARGET: "0.8"
      SYSTEM_AVAILABILITY_TARGET: "0.99"
      
      # Optimization strategies
      LOAD_BALANCING_ENABLED: "true"
      AGENT_REALLOCATION_ENABLED: "true"
      TASK_PRIORITIZATION_ENABLED: "true"
      RESOURCE_OPTIMIZATION_ENABLED: "true"
      
      # Optimization intervals
      REAL_TIME_INTERVAL: "30"
      SHORT_TERM_INTERVAL: "300"
      MEDIUM_TERM_INTERVAL: "1800"
      LONG_TERM_INTERVAL: "86400"
      
    networks:
      - sutazai-network
    ports:
      - "10570:8080"
    restart: unless-stopped
    volumes:
      - agi_metrics_data:/data/optimization
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Resource Allocator
  agi-resource-allocator:
    build:
      context: ./docker/agi-resource-allocator
      dockerfile: Dockerfile
    container_name: sutazai-agi-resource-allocator
    depends_on:
      - agi-orchestration-layer
      - redis
    environment:
      REDIS_URL: "redis://redis:6379/1"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      LOG_LEVEL: "INFO"
      
      # Allocation policies
      DEFAULT_CPU_LIMIT: "1.0"
      DEFAULT_MEMORY_LIMIT: "2G"
      EMERGENCY_RESERVE: "0.2"
      
      # Scaling parameters
      SCALE_UP_THRESHOLD: "0.8"
      SCALE_DOWN_THRESHOLD: "0.3"
      SCALING_COOLDOWN: "300"
      MAX_SCALE_FACTOR: "3.0"
      
      # Load balancing
      LOAD_BALANCING_ALGORITHM: "least_loaded"
      REBALANCE_THRESHOLD: "0.3"
      MAX_REDISTRIBUTION: "0.5"
      
    networks:
      - sutazai-network
    ports:
      - "10580:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AGI Dashboard and Monitoring UI
  agi-dashboard:
    build:
      context: ./docker/agi-dashboard
      dockerfile: Dockerfile
    container_name: sutazai-agi-dashboard
    depends_on:
      - agi-orchestration-layer
      - redis
      - grafana
    environment:
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      REDIS_URL: "redis://redis:6379/1"
      GRAFANA_URL: "http://grafana:3000"
      
      # Dashboard settings
      REFRESH_INTERVAL: "5"
      REAL_TIME_UPDATES: "true"
      ENABLE_ALERTS: "true"
      
      # UI configuration
      THEME: "dark"
      ENABLE_ADVANCED_FEATURES: "true"
      SHOW_EMERGENT_BEHAVIORS: "true"
      SHOW_META_LEARNING: "true"
      
    networks:
      - sutazai-network
    ports:
      - "10590:3000"  # Dashboard UI
    restart: unless-stopped
    volumes:
      - agi_metrics_data:/data/dashboard
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agi-dashboard.rule=Host(`agi-dashboard.${DOMAIN:-localhost}`)"
      - "traefik.http.services.agi-dashboard.loadbalancer.server.port=3000"

  # AGI Metrics Collector
  agi-metrics-collector:
    build:
      context: ./docker/agi-metrics
      dockerfile: Dockerfile
    container_name: sutazai-agi-metrics
    depends_on:
      - agi-orchestration-layer
      - prometheus
      - redis
    environment:
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      PROMETHEUS_URL: "http://prometheus:9090"
      REDIS_URL: "redis://redis:6379/1"
      
      # Collection settings
      COLLECTION_INTERVAL: "30"
      RETENTION_PERIOD: "604800"  # 7 days
      HIGH_RESOLUTION_PERIOD: "3600"  # 1 hour
      
      # Metric types
      COLLECT_AGENT_METRICS: "true"
      COLLECT_TASK_METRICS: "true"
      COLLECT_PERFORMANCE_METRICS: "true"
      COLLECT_EMERGENT_BEHAVIOR_METRICS: "true"
      COLLECT_RESOURCE_METRICS: "true"
      
    networks:
      - sutazai-network
    ports:
      - "10591:9090"  # Metrics endpoint
    restart: unless-stopped
    volumes:
      - agi_metrics_data:/data/metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 5s
      retries: 3

  # AGI Event Stream Processor
  agi-event-processor:
    build:
      context: ./docker/agi-events
      dockerfile: Dockerfile
    container_name: sutazai-agi-events
    depends_on:
      - agi-orchestration-layer
      - redis
      - rabbitmq
    environment:
      REDIS_URL: "redis://redis:6379/1"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
      ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      
      # Event processing
      EVENT_BUFFER_SIZE: "10000"
      PROCESSING_BATCH_SIZE: "100"
      PROCESSING_INTERVAL: "5"
      
      # Event types
      PROCESS_TASK_EVENTS: "true"
      PROCESS_AGENT_EVENTS: "true"
      PROCESS_COORDINATION_EVENTS: "true"
      PROCESS_EMERGENT_EVENTS: "true"
      PROCESS_SAFETY_EVENTS: "true"
      
    networks:
      - sutazai-network
    restart: unless-stopped
    volumes:
      - agi_orchestration_data:/data/events
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Additional configuration for existing services to integrate with AGI orchestration
x-agi-integration-overrides:
  # Override for existing agent services to integrate with AGI orchestration
  agent-integration-common: &agi-agent-integration
    environment:
      AGI_ORCHESTRATION_ENABLED: "true"
      AGI_ORCHESTRATION_ENDPOINT: "http://agi-orchestration-layer:8080"
      AGI_AGENT_REGISTRATION: "auto"
      AGI_TASK_SUBSCRIPTION: "true"
      AGI_CONSENSUS_PARTICIPATION: "true"
      AGI_PERFORMANCE_REPORTING: "true"