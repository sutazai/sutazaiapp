syntax = "proto3";

package neuromorphic.v1;

service NeuromorphicEngine {
  rpc ProcessSpikes(SpikeInput) returns (SpikeOutput) {};
  rpc TrainModel(TrainingData) returns (TrainingResult) {};
  rpc GetResourceUsage(ResourceQuery) returns (NeuroResourceUsage) {};
}

message SpikeInput {
  bytes encoded_spikes = 1;
  uint32 temporal_window = 2;
  string neuron_profile = 3;
  map<string, string> context_tags = 4;
}

message SpikeOutput {
  repeated float activations = 1 [packed=true];
  map<uint32, float> energy_usage = 2;
  string processing_metadata = 3;
}

message TrainingData {
  repeated SpikeInput samples = 1;
  repeated SpikeOutput targets = 2;
  string training_profile = 3;
}

message TrainingResult {
  float loss = 1;
  float accuracy = 2;
  NeuroResourceUsage resources_used = 3;
}

message ResourceQuery {
  string component_id = 1;
  uint32 history_window = 2;
}

message NeuroResourceUsage {
  float energy_joules = 1;
  float compute_seconds = 2;
  uint32 spike_ops = 3;
  uint32 memory_bytes = 4;
}