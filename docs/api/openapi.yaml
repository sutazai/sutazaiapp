openapi: 3.0.3
info:
  title: SutazAI Multi-Agent System API
  description: |
    Comprehensive API documentation for the SutazAI distributed multi-agent AI system.
    
    This API provides access to 137+ AI agents, voice interfaces, infrastructure services,
    and comprehensive monitoring capabilities.
    
    ## Features
    - 137+ specialized AI agents with unique capabilities
    - Voice interface through Jarvis agent
    - Real-time monitoring and health checks
    - Service mesh integration (Kong/Consul)
    - Vector databases and knowledge graphs
    - Authentication and authorization
    - Rate limiting and request throttling
    
    ## Authentication
    All API endpoints require authentication via JWT tokens or API keys.
    
    ## Rate Limiting
    API requests are rate-limited based on the endpoint and authentication level.
    
    ## Base URLs
    - Production: `https://api.sutazai.com/api/v1`
    - Development: `http://localhost:10010/api/v1`
    
  version: 1.0.0
  contact:
    name: SutazAI API Support
    email: api-support@sutazai.com
    url: https://docs.sutazai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
    
servers:
  - url: http://localhost:10010/api/v1
    description: Local Development Server
  - url: https://api.sutazai.com/api/v1
    description: Production Server
    
security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # System Health and Status
  /health:
    get:
      tags:
        - System Health
      summary: System Health Check
      description: Returns overall system health status
      operationId: getSystemHealth
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      
  /system/status:
    get:
      tags:
        - System Health
      summary: Detailed System Status
      description: Returns detailed status of all system components
      operationId: getSystemStatus
      responses:
        '200':
          description: System status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatusResponse'
                
  # Agent Management
  /agents:
    get:
      tags:
        - Agent Management
      summary: List All Agents
      description: Returns a list of all available AI agents
      operationId: listAgents
      parameters:
        - name: status
          in: query
          description: Filter agents by status
          schema:
            type: string
            enum: [active, inactive, error, starting]
        - name: capability
          in: query
          description: Filter agents by capability
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of agents to return
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
        - name: offset
          in: query
          description: Number of agents to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsListResponse'
    
  /agents/register:
    post:
      tags:
        - Agent Management
      summary: Register New Agent
      description: Register a new AI agent with the system
      operationId: registerAgent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentRegistration'
      responses:
        '201':
          description: Agent registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInfo'
        '400':
          description: Invalid agent configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /agents/{agentId}:
    get:
      tags:
        - Agent Management
      summary: Get Agent Details
      description: Returns detailed information about a specific agent
      operationId: getAgent
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
      responses:
        '200':
          description: Agent details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInfo'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    put:
      tags:
        - Agent Management
      summary: Update Agent Configuration
      description: Update configuration for an existing agent
      operationId: updateAgent
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdate'
      responses:
        '200':
          description: Agent updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInfo'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
    delete:
      tags:
        - Agent Management
      summary: Unregister Agent
      description: Remove an agent from the system
      operationId: unregisterAgent
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
      responses:
        '204':
          description: Agent unregistered successfully
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /agents/{agentId}/health:
    get:
      tags:
        - Agent Management
      summary: Get Agent Health
      description: Returns health status of a specific agent
      operationId: getAgentHealth
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
      responses:
        '200':
          description: Agent health retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentHealthResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /agents/{agentId}/execute:
    post:
      tags:
        - Agent Execution
      summary: Execute Agent Task
      description: Execute a task using a specific agent
      operationId: executeAgentTask
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid task request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Agent not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Agent unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /agents/{agentId}/tasks:
    get:
      tags:
        - Agent Execution
      summary: Get Agent Task History
      description: Returns execution history for a specific agent
      operationId: getAgentTasks
      parameters:
        - name: agentId
          in: path
          required: true
          description: Unique agent identifier
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of tasks to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of tasks to skip
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: status
          in: query
          description: Filter tasks by status
          schema:
            type: string
            enum: [pending, running, completed, failed, cancelled]
      responses:
        '200':
          description: Task history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskHistoryResponse'
                
  # Jarvis Voice Interface
  /jarvis/speech-to-text:
    post:
      tags:
        - Jarvis Voice Interface
      summary: Convert Speech to Text
      description: Convert audio input to text using Jarvis voice recognition
      operationId: speechToText
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file (WAV, MP3, M4A, WebM)
                language:
                  type: string
                  description: Language code (e.g., en-US, es-ES)
                  default: en-US
                sample_rate:
                  type: integer
                  description: Audio sample rate in Hz
                  default: 16000
      responses:
        '200':
          description: Speech converted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeechToTextResponse'
        '400':
          description: Invalid audio format or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /jarvis/text-to-speech:
    post:
      tags:
        - Jarvis Voice Interface
      summary: Convert Text to Speech
      description: Convert text to speech using Jarvis voice synthesis
      operationId: textToSpeech
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextToSpeechRequest'
      responses:
        '200':
          description: Text converted to speech successfully
          content:
            audio/wav:
              schema:
                type: string
                format: binary
            audio/mp3:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid text or parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                
  /jarvis/voice-command:
    post:
      tags:
        - Jarvis Voice Interface
      summary: Process Voice Command
      description: Process a complete voice command through Jarvis
      operationId: processVoiceCommand
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file containing voice command
                context:
                  type: string
                  description: Additional context for command processing
                  format: json
      responses:
        '200':
          description: Voice command processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceCommandResponse'
                
  # Authentication
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: Authenticate user and return JWT token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      
  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Token
      description: Refresh JWT token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
      
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: Invalidate user session and JWT token
      operationId: logout
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
                
  # Monitoring and Metrics
  /metrics:
    get:
      tags:
        - Monitoring
      summary: Get System Metrics
      description: Returns Prometheus-compatible system metrics
      operationId: getMetrics
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Prometheus metrics format
                
  /metrics/agents:
    get:
      tags:
        - Monitoring
      summary: Get Agent Metrics
      description: Returns detailed metrics for all agents
      operationId: getAgentMetrics
      parameters:
        - name: agent_id
          in: query
          description: Filter metrics for specific agent
          schema:
            type: string
        - name: timerange
          in: query
          description: Time range for metrics (e.g., 1h, 24h, 7d)
          schema:
            type: string
            default: 1h
      responses:
        '200':
          description: Agent metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentMetricsResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login endpoint
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication
      
  schemas:
    # Health and Status Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
          description: System uptime in seconds
        version:
          type: string
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, unhealthy, starting, stopping]
      required: [status, timestamp, uptime, version]
      
    SystemStatusResponse:
      type: object
      properties:
        overall_status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          properties:
            backend:
              $ref: '#/components/schemas/ServiceStatus'
            database:
              $ref: '#/components/schemas/ServiceStatus'
            redis:
              $ref: '#/components/schemas/ServiceStatus'
            ollama:
              $ref: '#/components/schemas/ServiceStatus'
            agents:
              $ref: '#/components/schemas/ServiceStatus'
        metrics:
          type: object
          properties:
            active_agents:
              type: integer
            total_tasks_completed:
              type: integer
            avg_response_time:
              type: number
              format: float
            cpu_usage:
              type: number
              format: float
            memory_usage:
              type: number
              format: float
              
    ServiceStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, starting, stopping, error]
        last_check:
          type: string
          format: date-time
        response_time:
          type: number
          format: float
        details:
          type: string
          
    # Agent Schemas
    AgentInfo:
      type: object
      properties:
        id:
          type: string
          description: Unique agent identifier
        name:
          type: string
          description: Human-readable agent name
        description:
          type: string
          description: Agent description and purpose
        capabilities:
          type: array
          items:
            type: string
          description: List of agent capabilities
        framework:
          type: string
          description: Agent framework (autogpt, crewai, langchain, etc.)
        status:
          type: string
          enum: [active, inactive, error, starting, stopping]
        health:
          $ref: '#/components/schemas/AgentHealth'
        config:
          type: object
          description: Agent configuration parameters
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        endpoint:
          type: string
          description: Agent API endpoint URL
        port:
          type: integer
          description: Agent service port
        version:
          type: string
          description: Agent version
      required: [id, name, status, capabilities, framework]
      
    AgentHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, warning]
        last_check:
          type: string
          format: date-time
        response_time:
          type: number
          format: float
        error_rate:
          type: number
          format: float
        uptime:
          type: integer
          description: Agent uptime in seconds
        memory_usage:
          type: number
          format: float
        cpu_usage:
          type: number
          format: float
        active_tasks:
          type: integer
        total_tasks_completed:
          type: integer
        
    AgentsListResponse:
      type: object
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/AgentInfo'
        total:
          type: integer
          description: Total number of agents
        limit:
          type: integer
        offset:
          type: integer
        filters:
          type: object
          description: Applied filters
      required: [agents, total]
      
    AgentRegistration:
      type: object
      properties:
        id:
          type: string
          description: Unique agent identifier
        name:
          type: string
          description: Human-readable agent name
        description:
          type: string
          description: Agent description and purpose
        capabilities:
          type: array
          items:
            type: string
          description: List of agent capabilities
        framework:
          type: string
          description: Agent framework
        endpoint:
          type: string
          description: Agent API endpoint URL
        port:
          type: integer
          description: Agent service port
        config:
          type: object
          description: Agent configuration parameters
        health_check_path:
          type: string
          description: Health check endpoint path
          default: /health
      required: [id, name, capabilities, framework, endpoint]
      
    AgentUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        capabilities:
          type: array
          items:
            type: string
        config:
          type: object
        status:
          type: string
          enum: [active, inactive]
          
    AgentHealthResponse:
      type: object
      properties:
        agent_id:
          type: string
        health:
          $ref: '#/components/schemas/AgentHealth'
        diagnostics:
          type: object
          description: Additional diagnostic information
        recommendations:
          type: array
          items:
            type: string
          description: Health improvement recommendations
          
    # Task Execution Schemas
    TaskRequest:
      type: object
      properties:
        task:
          type: string
          description: Task description or command
        parameters:
          type: object
          description: Task-specific parameters
        context:
          type: object
          description: Additional context for task execution
        priority:
          type: string
          enum: [low, normal, high, urgent]
          default: normal
        timeout:
          type: integer
          description: Task timeout in seconds
          default: 300
        async:
          type: boolean
          description: Execute task asynchronously
          default: false
        callback_url:
          type: string
          description: Webhook URL for async task completion
      required: [task]
      
    TaskResponse:
      type: object
      properties:
        task_id:
          type: string
          description: Unique task identifier
        agent_id:
          type: string
          description: Agent that executed the task
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
        result:
          description: Task execution result
        error:
          type: string
          description: Error message if task failed
        execution_time:
          type: number
          format: float
          description: Task execution time in seconds
        created_at:
          type: string
          format: date-time
        completed_at:
          type: string
          format: date-time
        metadata:
          type: object
          description: Additional task metadata
      required: [task_id, agent_id, status]
      
    TaskHistoryResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer
        agent_id:
          type: string
          
    # Jarvis Voice Interface Schemas
    SpeechToTextResponse:
      type: object
      properties:
        text:
          type: string
          description: Transcribed text
        confidence:
          type: number
          format: float
          description: Transcription confidence score (0-1)
        language:
          type: string
          description: Detected language
        duration:
          type: number
          format: float
          description: Audio duration in seconds
        processing_time:
          type: number
          format: float
          description: Processing time in seconds
        alternatives:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              confidence:
                type: number
                format: float
      required: [text, confidence]
      
    TextToSpeechRequest:
      type: object
      properties:
        text:
          type: string
          description: Text to convert to speech
        voice:
          type: string
          description: Voice identifier
          default: jarvis
        language:
          type: string
          description: Language code
          default: en-US
        speed:
          type: number
          format: float
          description: Speech speed multiplier
          default: 1.0
          minimum: 0.5
          maximum: 2.0
        pitch:
          type: number
          format: float
          description: Voice pitch adjustment
          default: 1.0
          minimum: 0.5
          maximum: 2.0
        format:
          type: string
          enum: [wav, mp3, ogg]
          default: wav
        quality:
          type: string
          enum: [low, medium, high]
          default: medium
      required: [text]
      
    VoiceCommandResponse:
      type: object
      properties:
        command:
          type: string
          description: Recognized voice command
        intent:
          type: string
          description: Detected intent
        entities:
          type: object
          description: Extracted entities from command
        confidence:
          type: number
          format: float
          description: Command recognition confidence
        response:
          type: string
          description: System response to the command
        actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
              parameters:
                type: object
          description: Actions to be executed
        audio_response:
          type: string
          format: binary
          description: Audio response (if requested)
          
    # Authentication Schemas
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        remember_me:
          type: boolean
          default: false
      required: [username, password]
      
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserInfo'
      required: [access_token, token_type, expires_in]
      
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
      required: [refresh_token]
      
    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          default: Logout successful
        
    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
          
    # Monitoring Schemas
    AgentMetricsResponse:
      type: object
      properties:
        agent_id:
          type: string
        timerange:
          type: string
        metrics:
          type: object
          properties:
            requests_total:
              type: integer
            requests_per_second:
              type: number
              format: float
            avg_response_time:
              type: number
              format: float
            error_rate:
              type: number
              format: float
            success_rate:
              type: number
              format: float
            cpu_usage:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  value:
                    type: number
                    format: float
            memory_usage:
              type: array
              items:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  value:
                    type: number
                    format: float
        summary:
          type: object
          properties:
            total_tasks:
              type: integer
            successful_tasks:
              type: integer
            failed_tasks:
              type: integer
            avg_execution_time:
              type: number
              format: float
              
    # Common Schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Human-readable error message
        details:
          type: string
          description: Additional error details
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          description: Unique request identifier for tracking
      required: [error, message, timestamp]

tags:
  - name: System Health
    description: System health monitoring and status endpoints
  - name: Agent Management
    description: AI agent registration, configuration, and lifecycle management
  - name: Agent Execution
    description: Task execution and agent interaction endpoints
  - name: Jarvis Voice Interface
    description: Voice recognition, synthesis, and command processing
  - name: Authentication
    description: User authentication and authorization
  - name: Monitoring
    description: System and agent metrics and monitoring

externalDocs:
  description: SutazAI Documentation
  url: https://docs.sutazai.com