openapi: 3.0.3
info:
  title: SutazAI Authentication & Authorization API
  description: |
    Complete authentication and authorization system for SutazAI multi-agent platform.
    
    ## Authentication Methods
    
    SutazAI supports multiple authentication methods:
    
    1. **JWT Bearer Tokens** - Primary method for user authentication
    2. **API Keys** - For service-to-service authentication  
    3. **OAuth2** - For third-party integrations
    4. **Service Mesh Authentication** - Internal service communication
    
    ## Authorization Model
    
    The platform uses Role-Based Access Control (RBAC) with the following hierarchy:
    
    - **Super Admin** - Full system access
    - **Admin** - Agent management and system configuration
    - **Developer** - Agent development and deployment
    - **Operator** - System monitoring and maintenance  
    - **User** - Basic agent interaction and task execution
    - **Guest** - Read-only access to public endpoints
    
    ## Security Features
    
    - JWT tokens with configurable expiration
    - Refresh token rotation
    - Rate limiting per user and endpoint
    - IP allowlisting/blocklisting
    - Multi-factor authentication (MFA)
    - Session management and timeout
    - Audit logging for all authentication events
    
  version: 1.0.0
  contact:
    name: SutazAI Security Team
    email: security@sutazai.com

servers:
  - url: http://localhost:10010/api/v1
    description: Local Development Server
  - url: https://api.sutazai.com/api/v1
    description: Production Server

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticate user credentials and return JWT access and refresh tokens.
        
        Supports multiple authentication methods:
        - Username/password
        - Email/password
        - Single sign-on (SSO) tokens
        
        Returns both access token (short-lived) and refresh token (long-lived).
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              username_login:
                summary: Username/Password Login
                value:
                  username: "admin"
                  password: "secure_password"
                  remember_me: true
              email_login:
                summary: Email/Password Login
                value:
                  email: "user@sutazai.com"
                  password: "secure_password"
                  mfa_code: "123456"
              sso_login:
                summary: SSO Token Login
                value:
                  sso_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  provider: "google"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                successful_login:
                  summary: Successful Login Response
                  value:
                    access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    token_type: "bearer"
                    expires_in: 3600
                    user:
                      id: "user_123"
                      username: "admin"
                      email: "admin@sutazai.com"
                      roles: ["admin", "developer"]
                      permissions: ["agent:create", "agent:execute", "system:monitor"]
                    session_id: "session_456"
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
              examples:
                invalid_credentials:
                  summary: Invalid Credentials
                  value:
                    error: "authentication_failed"
                    message: "Invalid username or password"
                    code: "AUTH_001"
                mfa_required:
                  summary: MFA Required
                  value:
                    error: "mfa_required"
                    message: "Multi-factor authentication code required"
                    code: "AUTH_002"
                    mfa_methods: ["totp", "sms"]
        '423':
          description: Account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitError'
      security: []

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh Access Token
      description: |
        Refresh an expired access token using a valid refresh token.
        
        The refresh token will be rotated (new refresh token issued) for enhanced security.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security: []

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User Logout
      description: |
        Invalidate the current session and JWT tokens.
        
        - Blacklists the current access token
        - Invalidates the refresh token
        - Ends the user session
        - Logs the logout event
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                everywhere:
                  type: boolean
                  description: Logout from all devices/sessions
                  default: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutResponse'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User Registration
      description: |
        Register a new user account.
        
        Requires admin approval for production environments.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security: []

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Password Reset Request
      description: |
        Request a password reset token to be sent to the user's email.
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
              required: [email]
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset instructions sent to your email"
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security: []

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset Password
      description: |
        Reset password using a valid reset token.
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Password reset token
                new_password:
                  type: string
                  format: password
                  description: New password
                  minLength: 8
                confirm_password:
                  type: string
                  format: password
                  description: Confirm new password
              required: [token, new_password, confirm_password]
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Invalid token or password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security: []

  # MFA Endpoints
  /auth/mfa/setup:
    post:
      tags:
        - Multi-Factor Authentication
      summary: Setup MFA
      description: |
        Setup multi-factor authentication for the user account.
        
        Supports TOTP (Time-based One-Time Password) and SMS methods.
      operationId: setupMFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  enum: [totp, sms]
                  description: MFA method to setup
                phone_number:
                  type: string
                  description: Phone number for SMS (required if method is SMS)
      responses:
        '200':
          description: MFA setup successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  method:
                    type: string
                  qr_code:
                    type: string
                    description: QR code for TOTP setup (base64 encoded)
                  secret:
                    type: string
                    description: TOTP secret key
                  backup_codes:
                    type: array
                    items:
                      type: string
                    description: One-time backup codes

  /auth/mfa/verify:
    post:
      tags:
        - Multi-Factor Authentication
      summary: Verify MFA Code
      description: |
        Verify multi-factor authentication code during login.
      operationId: verifyMFA
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_token:
                  type: string
                  description: Temporary session token from login
                code:
                  type: string
                  description: MFA code
                method:
                  type: string
                  enum: [totp, sms, backup_code]
              required: [session_token, code, method]
      responses:
        '200':
          description: MFA verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid MFA code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security: []

  # Authorization Endpoints
  /auth/permissions:
    get:
      tags:
        - Authorization
      summary: Get User Permissions
      description: |
        Get the current user's permissions and access levels.
      operationId: getUserPermissions
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissions'

  /auth/permissions/check:
    post:
      tags:
        - Authorization
      summary: Check Permissions
      description: |
        Check if the current user has specific permissions.
      operationId: checkPermissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  items:
                    type: string
                  description: List of permissions to check
                resource:
                  type: string
                  description: Specific resource to check permissions for
              required: [permissions]
      responses:
        '200':
          description: Permission check results
          content:
            application/json:
              schema:
                type: object
                properties:
                  authorized:
                    type: boolean
                  permissions:
                    type: object
                    additionalProperties:
                      type: boolean
                  missing_permissions:
                    type: array
                    items:
                      type: string

  # API Key Management
  /auth/api-keys:
    get:
      tags:
        - API Key Management
      summary: List API Keys
      description: |
        List all API keys for the current user.
      operationId: listAPIKeys
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'

    post:
      tags:
        - API Key Management
      summary: Create API Key
      description: |
        Create a new API key for programmatic access.
      operationId: createAPIKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: API key name/description
                permissions:
                  type: array
                  items:
                    type: string
                  description: Permissions to grant to this API key
                expires_at:
                  type: string
                  format: date-time
                  description: API key expiration date (optional)
                ip_allowlist:
                  type: array
                  items:
                    type: string
                  description: IP addresses allowed to use this key
              required: [name]
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  key:
                    type: string
                    description: API key value (only shown once)
                  permissions:
                    type: array
                    items:
                      type: string
                  created_at:
                    type: string
                    format: date-time
                  expires_at:
                    type: string
                    format: date-time

  /auth/api-keys/{keyId}:
    delete:
      tags:
        - API Key Management
      summary: Revoke API Key
      description: |
        Revoke an API key, immediately disabling its access.
      operationId: revokeAPIKey
      parameters:
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: API key ID
      responses:
        '204':
          description: API key revoked successfully
        '404':
          description: API key not found

  # Session Management
  /auth/sessions:
    get:
      tags:
        - Session Management
      summary: List Active Sessions
      description: |
        List all active sessions for the current user.
      operationId: listSessions
      responses:
        '200':
          description: Active sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSession'

  /auth/sessions/{sessionId}:
    delete:
      tags:
        - Session Management
      summary: Terminate Session
      description: |
        Terminate a specific user session.
      operationId: terminateSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
          description: Session ID
      responses:
        '204':
          description: Session terminated successfully
        '404':
          description: Session not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: Username or email
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password
        remember_me:
          type: boolean
          description: Keep user logged in for extended period
          default: false
        mfa_code:
          type: string
          description: Multi-factor authentication code
        sso_token:
          type: string
          description: Single sign-on token
        provider:
          type: string
          enum: [google, microsoft, github, okta]
          description: SSO provider
      oneOf:
        - required: [username, password]
        - required: [email, password]
        - required: [sso_token, provider]

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        token_type:
          type: string
          default: bearer
        expires_in:
          type: integer
          description: Access token expiration time in seconds
        user:
          $ref: '#/components/schemas/UserInfo'
        session_id:
          type: string
          description: Session identifier
        permissions:
          type: array
          items:
            type: string
          description: User permissions
      required: [access_token, token_type, expires_in, user]

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
      required: [refresh_token]

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Logout successful"
        sessions_terminated:
          type: integer
          description: Number of sessions terminated

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
          description: Must contain uppercase, lowercase, number, and special character
        confirm_password:
          type: string
          format: password
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        organization:
          type: string
          maxLength: 100
        role_request:
          type: string
          enum: [user, developer, operator]
          default: user
          description: Requested role (subject to approval)
      required: [username, email, password, confirm_password]

    RegisterResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        status:
          type: string
          enum: [pending_approval, active]
        message:
          type: string
        created_at:
          type: string
          format: date-time

    UserInfo:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        organization:
          type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, inactive, suspended, pending_approval]
        mfa_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        last_login:
          type: string
          format: date-time
        login_count:
          type: integer
        timezone:
          type: string
        locale:
          type: string

    UserPermissions:
      type: object
      properties:
        user_id:
          type: string
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
        resource_permissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        effective_permissions:
          type: array
          items:
            type: string
          description: All permissions including inherited from roles

    APIKey:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        key_prefix:
          type: string
          description: First 8 characters of the key for identification
        permissions:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        last_used:
          type: string
          format: date-time
        usage_count:
          type: integer
        ip_allowlist:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [active, revoked, expired]

    UserSession:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        ip_address:
          type: string
        user_agent:
          type: string
        location:
          type: string
          description: Approximate geographic location
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        is_current:
          type: boolean
          description: Whether this is the current session

    AuthError:
      type: object
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        code:
          type: string
          description: Specific error code for programmatic handling
        timestamp:
          type: string
          format: date-time
        details:
          type: object
          description: Additional error details
      required: [error, message]

    ValidationError:
      type: object
      properties:
        error:
          type: string
          default: "validation_error"
        message:
          type: string
        field_errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        timestamp:
          type: string
          format: date-time

    RateLimitError:
      type: object
      properties:
        error:
          type: string
          default: "rate_limit_exceeded"
        message:
          type: string
        retry_after:
          type: integer
          description: Seconds to wait before retrying
        limit:
          type: integer
          description: Rate limit threshold
        remaining:
          type: integer
          description: Remaining requests in current window
        reset_at:
          type: string
          format: date-time
          description: When the rate limit window resets

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User authentication and token management
  - name: Multi-Factor Authentication
    description: MFA setup and verification
  - name: Authorization
    description: Permission and access control management
  - name: API Key Management
    description: API key creation and management
  - name: Session Management
    description: User session control and monitoring