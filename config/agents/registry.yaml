version: '3.0'
generated: '2025-08-16T06:22:09.764037'
source: Consolidated from multiple sources
agents:
  ' system-architect':
    id: ' system-architect'
    name: ' system-architect'
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/ system-architect_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  adversarial-attack-detector:
    id: adversarial-attack-detector
    name: adversarial-attack-detector
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/adversarial-attack-detector_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  agent-creator:
    id: agent-creator
    name: agent-creator
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/agent-creator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  agent-debugger:
    id: agent-debugger
    name: agent-debugger
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/agent-debugger_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  agent-orchestrator:
    id: agent-orchestrator
    name: agent-orchestrator
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/agent-orchestrator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  agentgpt:
    id: agentgpt
    name: agentgpt
    type: utility
    description: 'AI agent: agentgpt'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/agentgpt
    runtime:
      status: healthy
      port: 9095
      endpoint: http://localhost:9095
      process_id: 2452860
      start_time: '2025-08-04T11:19:15.587949'
      last_check: '2025-08-04T11:19:27.635575'
  agentgpt-autonomous-executor:
    id: agentgpt-autonomous-executor
    name: agentgpt-autonomous-executor
    type: standard
    description: Use this agent when you need to:\n\n- Execute complex multi-step
      goals autonomously\n- Create self-directed AI agents\n- Build goal-driven AI
      systems\n- Implement autonomous research agents\n- Design self-improving task
      executors\n- Create agents that plan their own actions\n- Build persistent goal-pursuing
      systems\n- Implement autonomous problem solvers\n- Design agents that learn
      from failures\n- Create self-organizing task systems\n- Build autonomous project
      managers\n- Implement goal decomposition systems\n- Design milestone-tracking
      agents\n- Create autonomous debugging systems\n- Build self-directed learning
      agents\n- Implement autonomous content creators\n- Design goal-oriented chatbots\n-
      Create agents that handle long-running tasks\n- Build autonomous monitoring
      systems\n- Implement self-healing workflows\n- Design agents that request resources\n-
      Create autonomous testing frameworks\n- Build goal-achievement optimizers\n-
      Implement success criteria validation\n- Design autonomous exploration systems\n\nDo
      NOT use this agent for:\n- Simple single-step tasks\n- Highly controlled workflows\n-
      Tasks requiring human approval at each step\n- Real-time responsive systems\n\nThis
      agent manages AgentGPT's autonomous execution framework, enabling AI agents
      to pursue complex goals independently with   supervision.
    capabilities:
    - code_generation
    - testing
    - monitoring
    - optimization
    - automation
    config_path: configs/agentgpt-autonomous-executor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9057
      endpoint: http://localhost:9057
      process_id: 2452339
      start_time: '2025-08-04T11:19:07.528663'
      last_check: '2025-08-04T11:19:27.635529'
    metadata: {}
  agentzero-coordinator:
    id: agentzero-coordinator
    name: agentzero-coordinator
    type: standard
    description: Use this agent when you need to:\n\n- Deploy general-purpose AI agents
      that can handle any task\n- Create adaptive agents that learn from experience\n-
      Handle unpredictable or diverse task types\n- Build zero-shot task completion
      systems\n- Scale agent deployments dynamically based on demand\n- Create fallback
      systems for specialized agents\n- Implement few-shot learning for new task types\n-
      Manage pools of generalist agents\n- Route tasks that don't fit specific categories\n-
      Build self-organizing agent systems\n- Create agents that can use multiple tools\n-
      Enable rapid prototyping of AI capabilities\n- Handle edge cases other agents
      can't process\n- Implement agent recycling and resource management\n- Create
      agents that improve through interaction\n- Build knowledge transfer between
      agent instances\n- Design adaptive reasoning systems\n- Implement general problem-solving
      frameworks\n- Create agents that can explain their reasoning\n- Build multi-modal
      agent capabilities\n\nDo NOT use this agent for:\n- Highly specialized tasks
      (use domain-specific agents)\n- Tasks requiring specific expertise\n- Performance-critical
      operations\n- Tasks with strict compliance requirements\n\nThis agent manages
      AgentZero's general-purpose AI framework, perfect for handling diverse, unpredictable
      tasks with   configuration.
    capabilities:
    - code_generation
    - deployment
    - optimization
    - documentation
    config_path: configs/agentzero-coordinator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9003
      endpoint: http://localhost:9003
      process_id: 2451334
      start_time: '2025-08-04T11:18:57.403076'
      last_check: '2025-08-04T11:19:27.635446'
    metadata: {}
  ai-agent-creator:
    id: ai-agent-creator
    name: ai-agent-creator
    type: standard
    description: Use this agent when you need to:\n\n- Analyze system gaps and identify
      missing agent capabilities\n- Design new AI agents based on system needs\n-
      Create agent specification documents\n- Implement agent communication protocols\n-
      Build agent capability matrices\n- Design agent interaction patterns\n- Create
      agent testing frameworks\n- Implement agent lifecycle management\n- Build agent
      discovery mechanisms\n- Design agent collaboration strategies\n- Create agent
      performance metrics\n- Implement agent learning systems\n- Build agent template
      libraries\n- Design agent specialization patterns\n- Create agent integration
      guidelines\n- Implement agent versioning systems\n- Build agent deployment automation\n-
      Design agent capability evolution\n- Create agent documentation standards\n-
      Implement agent quality assurance\n- Build agent marketplace systems\n- Design
      agent cost models\n- Create agent security frameworks\n- Implement agent monitoring
      solutions\n- Build agent debugging tools\n- Design agent migration strategies\n-
      Create agent compatibility layers\n- Implement agent orchestration rules\n-
      Build agent knowledge transfer\n- Design meta-agent architectures\n\nDo NOT
      use this agent for:\n- General development tasks (use specific development agents)\n-
      System deployment (use deployment-automation-master)\n- Infrastructure (use
      infrastructure-devops-manager)\n- Testing existing code (use testing-qa-validator)\n\nThis
      agent specializes in analyzing system needs and creating new AI agents to fill
      capability gaps.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - analysis
    - documentation
    config_path: configs/ai-agent-creator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-agent-debugger:
    id: ai-agent-debugger
    name: ai-agent-debugger
    type: sonnet
    description: 'AI agent: ai-agent-debugger'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/ai-agent-debugger
    runtime:
      status: healthy
      port: 9123
      endpoint: http://localhost:9123
      process_id: 2453199
      start_time: '2025-08-04T11:19:21.621688'
      last_check: '2025-08-04T11:19:27.635609'
  ai-agent-orchestrator:
    id: ai-agent-orchestrator
    name: ai-agent-orchestrator
    type: standard
    description: Use this agent when you need to:\n\n- Coordinate multi-agent workflows
      and complex task orchestration\n- Manage agent discovery and registration\n-
      Handle distributed task execution across multiple agents\n- Implement agent
      communication protocols\n- Design workflow graphs and execution plans\n- Monitor
      agent performance and health\n- Manage agent lifecycle (start, stop, restart)\n-
      Implement load balancing across agents\n- Handle agent failover and recovery\n-
      Create agent collaboration patterns\n- Design consensus mechanisms for multi-agent
      decisions\n- Implement agent state synchronization\n- Build event-driven agent
      architectures\n- Create agent middleware and messaging systems\n- Design agent
      capability matching systems\n- Implement agent negotiation protocols\n- Build
      agent reputation systems\n- Create hierarchical agent organizations\n- Design
      agent learning and adaptation mechanisms\n- Implement agent security and authentication\n-
      Handle inter-agent data exchange\n- Create agent monitoring dashboards\n- Build
      agent testing frameworks\n- Design agent deployment strategies\n- Implement
      agent version management\n- Create agent documentation standards\n- Build agent
      performance benchmarks\n- Design agent cost optimization strategies\n- Implement
      agent resource allocation\n- Create agent debugging tools\n\nDo NOT use this
      agent for:\n- Simple single-agent tasks\n- Direct code implementation (use code-generation
      agents)\n- Infrastructure management (use infrastructure-devops-manager)\n-
      Testing individual components (use testing-qa-validator)\n\nThis agent specializes
      in orchestrating complex multi-agent systems, ensuring efficient collaboration
      and task distribution across the entire AI ecosystem.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - documentation
    config_path: configs/ai-agent-orchestrator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-product-manager:
    id: ai-product-manager
    name: ai-product-manager
    type: standard
    description: Use this agent when you need to:\n\n- Analyze and define AI product
      requirements\n- Research market trends and competitor solutions\n- Create product
      roadmaps and feature prioritization\n- Coordinate complex AI projects across
      teams\n- Conduct web searches for technical solutions\n- Build product specifications
      and documentation\n- Design user stories and acceptance criteria\n- Implement
      product analytics and metrics\n- Create go-to-market strategies for AI products\n-
      Build product feedback loops\n- Design A/B testing frameworks\n- Coordinate
      stakeholder communications\n- Create product vision and strategy documents\n-
      Implement product lifecycle management\n- Build competitive analysis frameworks\n-
      Design user research methodologies\n- Create product pricing strategies\n- Implement
      feature flag systems\n- Build product onboarding flows\n- Design product education
      materials\n- Create product launch plans\n- Implement product success metrics\n-
      Build customer journey maps\n- Design product experimentation frameworks\n-
      Create product backlog management\n- Implement product-market fit analysis\n-
      Build product partnership strategies\n- Design product scaling strategies\n-
      Create product deprecation plans\n- Implement product compliance frameworks\n\nDo
      NOT use this agent for:\n- Direct code implementation (use development agents)\n-
      Infrastructure management (use infrastructure-devops-manager)\n- Testing implementation
      (use testing-qa-validator)\n- Design work (use senior-frontend-developer)\n\nThis
      agent specializes in product management with web search capabilities for finding
      solutions.
    capabilities:
    - code_generation
    - testing
    - analysis
    - documentation
    config_path: configs/ai-product-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9036
      endpoint: http://localhost:9036
      process_id: 2451965
      start_time: '2025-08-04T11:19:03.491385'
      last_check: '2025-08-04T11:19:27.635494'
    metadata: {}
  ai-research-specialist:
    id: ai-research-specialist
    name: ai-research-specialist
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/ai-research-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-scrum-master:
    id: ai-scrum-master
    name: ai-scrum-master
    type: standard
    description: Use this agent when you need to:\n\n- Facilitate agile ceremonies
      and processes\n- Manage sprint planning and execution\n- Remove impediments
      blocking team progress\n- Implement agile best practices\n- Create sprint retrospectives
      and improvements\n- Build team velocity tracking\n- Design burndown charts and
      metrics\n- Facilitate daily standup meetings\n- Create sprint review presentations\n-
      Implement agile coaching strategies\n- Build team collaboration tools\n- Design
      conflict resolution processes\n- Create team performance metrics\n- Implement
      continuous improvement\n- Build agile transformation plans\n- Design team communication
      patterns\n- Create agile documentation standards\n- Implement story point estimation\n-
      Build sprint goal tracking\n- Design team capacity planning\n- Create impediment
      tracking systems\n- Implement agile maturity assessments\n- Build cross-team
      coordination\n- Design scaled agile frameworks\n- Create team health metrics\n-
      Implement agile tooling strategies\n- Build retrospective action tracking\n-
      Design team formation strategies\n- Create agile training materials\n- Implement
      agile compliance frameworks\n\nDo NOT use this agent for:\n- Technical implementation
      (use development agents)\n- Product decisions (use ai-product-manager)\n- Infrastructure
      (use infrastructure-devops-manager)\n- Testing execution (use testing-qa-validator)\n\nThis
      agent specializes in facilitating agile processes and removing team impediments.
    capabilities:
    - code_generation
    - testing
    - monitoring
    - optimization
    - analysis
    - documentation
    config_path: configs/ai-scrum-master_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9080
      endpoint: http://localhost:9080
      process_id: 2452779
      start_time: '2025-08-04T11:19:13.570731'
      last_check: '2025-08-04T11:19:27.635556'
    metadata: {}
  ai-senior-backend-developer:
    id: ai-senior-backend-developer
    name: ai-senior-backend-developer
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/ai-senior-backend-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-senior-frontend-developer:
    id: ai-senior-frontend-developer
    name: ai-senior-frontend-developer
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/ai-senior-frontend-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-senior-full-stack-developer:
    id: ai-senior-full-stack-developer
    name: ai-senior-full-stack-developer
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/ai-senior-full-stack-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-system-validator:
    id: ai-system-validator
    name: ai-system-validator
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/ai-system-validator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ai-testing-qa-validator:
    id: ai-testing-qa-validator
    name: ai-testing-qa-validator
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/ai-testing-qa-validator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  aider:
    id: aider
    name: aider
    type: utility
    description: 'AI agent: aider'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/aider
    runtime:
      status: healthy
      port: 9130
      endpoint: http://localhost:9130
      process_id: 2453273
      start_time: '2025-08-04T11:19:23.631305'
      last_check: '2025-08-04T11:19:27.635619'
  attention-optimizer:
    id: attention-optimizer
    name: attention-optimizer
    type: utility
    description: 'AI agent: attention-optimizer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/attention-optimizer
    runtime:
      status: healthy
      port: 9115
      endpoint: http://localhost:9115
      process_id: 2453083
      start_time: '2025-08-04T11:19:19.607876'
      last_check: '2025-08-04T11:19:27.635601'
  autogen:
    id: autogen
    name: autogen
    type: utility
    description: 'AI agent: autogen'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/autogen
    runtime:
      status: healthy
      port: 9002
      endpoint: http://localhost:9002
      process_id: 2451333
      start_time: '2025-08-04T11:18:57.403014'
      last_check: '2025-08-04T11:19:27.635442'
  autogpt:
    id: autogpt
    name: autogpt
    type: utility
    description: 'AI agent: autogpt'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/autogpt
    runtime:
      status: healthy
      port: 9001
      endpoint: http://localhost:9001
      process_id: 2451332
      start_time: '2025-08-04T11:18:57.402950'
      last_check: '2025-08-04T11:19:27.635438'
  automated-incident-responder:
    id: automated-incident-responder
    name: automated-incident-responder
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/automated-incident-responder_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  autonomous-system-controller:
    id: autonomous-system-controller
    name: autonomous-system-controller
    type: standard
    description: Use this agent when you need to:\n\n- Design and implement fully
      autonomous AI systems\n- Create self-governing decision-making frameworks\n-
      Implement autonomous resource allocation strategies\n- Build self-healing and
      self-optimizing systems\n- Design autonomous goal pursuit mechanisms\n- Create
      independent system operation protocols\n- Implement autonomous error recovery\n-
      Build self-monitoring and self-correction systems\n- Design autonomous scaling
      decisions\n- Create self-organizing system architectures\n- Implement autonomous
      security responses\n- Build autonomous performance optimization\n- Design autonomous
      workload distribution\n- Create self-evolving system capabilities\n- Implement
      autonomous knowledge acquisition\n- Build autonomous problem-solving systems\n-
      Design autonomous system maintenance\n- Create autonomous backup and recovery\n-
      Implement autonomous cost optimization\n- Build autonomous compliance monitoring\n-
      Design autonomous incident response\n- Create autonomous system updates\n- Implement
      autonomous capacity planning\n- Build autonomous quality assurance\n- Design
      autonomous user interaction\n- Create autonomous data management\n- Implement
      autonomous integration systems\n- Build autonomous documentation generation\n-
      Design autonomous testing strategies\n- Create autonomous deployment decisions\n\nDo
      NOT use this agent for:\n- Manual system operations (use infrastructure-devops-manager)\n-
      Specific code implementation (use code generation agents)\n- Agent coordination
      (use ai-agent-orchestrator)\n- Architecture design (use agi-system-architect)\n\nThis
      agent specializes in creating systems that can operate, maintain, and improve
      themselves without human intervention.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - optimization
    - documentation
    config_path: configs/autonomous-system-controller_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  autonomous-task-executor:
    id: autonomous-task-executor
    name: autonomous-task-executor
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/autonomous-task-executor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  awesome-code-ai:
    id: awesome-code-ai
    name: awesome-code-ai
    type: utility
    description: 'AI agent: awesome-code-ai'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/awesome-code-ai
    runtime:
      status: healthy
      port: 9049
      endpoint: http://localhost:9049
      process_id: 2452132
      start_time: '2025-08-04T11:19:05.518325'
      last_check: '2025-08-04T11:19:27.635514'
  babyagi:
    id: babyagi
    name: babyagi
    type: opus
    description: 'AI agent: babyagi'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/babyagi
    runtime:
      status: healthy
      port: 9103
      endpoint: http://localhost:9103
      process_id: 2452946
      start_time: '2025-08-04T11:19:17.598357'
      last_check: '2025-08-04T11:19:27.635581'
  bias-and-fairness-auditor:
    id: bias-and-fairness-auditor
    name: bias-and-fairness-auditor
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/bias-and-fairness-auditor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  bigagi-system-manager:
    id: bigagi-system-manager
    name: bigagi-system-manager
    type: standard
    description: Use this agent when you need to:\n\n- Set up advanced conversational
      AI interfaces\n- Configure multi-model chat systems\n- Enable model switching
      during conversations\n- Create AI personas with different capabilities\n- Implement
      conversation branching and exploration\n- Set up multi-agent debates and discussions\n-
      Build advanced reasoning chains\n- Enable voice-based AI interactions\n- Create
      specialized chat interfaces for different use cases\n- Implement conversation
      memory and context\n- Configure model voting for better responses\n- Build ensemble
      AI systems\n- Create custom UI configurations\n- Enable code execution within
      chats\n- Implement advanced prompt templates\n- Set up conversation export and
      sharing\n- Build collaborative AI chat rooms\n- Create model comparison interfaces\n-
      Implement conversation analytics\n- Design custom AI personalities\n- Enable
      real-time model switching\n- Build educational AI interfaces\n- Create research-oriented
      chat systems\n- Implement multi-language conversations\n- Design domain-specific
      AI assistants\n\nDo NOT use this agent for:\n- Backend API development\n- Batch
      processing tasks\n- Non-conversational AI tasks\n- Simple single-model deployments\n\nThis
      agent manages BigAGI's advanced conversational interface, enabling sophisticated
      multi-model AI interactions with rich features.
    capabilities:
    - code_generation
    - deployment
    - integration
    config_path: configs/bigagi-system-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9055
      endpoint: http://localhost:9055
      process_id: 2452337
      start_time: '2025-08-04T11:19:07.527475'
      last_check: '2025-08-04T11:19:27.635523'
    metadata: {}
  browser-automation-orchestrator:
    id: browser-automation-orchestrator
    name: browser-automation-orchestrator
    type: standard
    description: Use this agent when you need to:\n\n- Create browser automation workflows
      with Playwright\n- Implement web scraping systems with anti-detection\n- Build
      automated UI testing frameworks\n- Design web interaction automation\n- Create
      screenshot and visual regression testing\n- Implement form filling automation\n-
      Build web data extraction pipelines\n- Design cross-browser testing strategies\n-
      Create browser-based RPA solutions\n- Implement CAPTCHA handling strategies\n-
      Build web monitoring and alerting\n- Design parallel browser automation\n- Create
      browser session management\n- Implement cookie and storage handling\n- Build
      authentication automation\n- Design web performance testing\n- Create browser
      API mocking\n- Implement browser debugging tools\n- Build visual testing frameworks\n-
      Design accessibility testing automation\n- Create browser network interception\n-
      Implement browser profile management\n- Build headless browser optimization\n-
      Design browser farm management\n- Create web crawling strategies\n- Implement
      JavaScript execution control\n- Build browser automation APIs\n- Design anti-bot
      detection bypassing\n- Create browser automation monitoring\n- Implement browser
      resource optimization\n\nDo NOT use this agent for:\n- Backend development (use
      senior-backend-developer)\n- Manual testing (use testing-qa-validator)\n- Infrastructure
      tasks (use infrastructure-devops-manager)\n- API development (use appropriate
      backend agents)\n\nThis agent specializes in browser automation using tools
      like Playwright, Skyvern, and Browser-Use.
    capabilities:
    - code_generation
    - testing
    - monitoring
    - automation
    config_path: configs/browser-automation-orchestrator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9063
      endpoint: http://localhost:9063
      process_id: 2452580
      start_time: '2025-08-04T11:19:09.535878'
      last_check: '2025-08-04T11:19:27.635537'
    metadata: {}
  causal-inference-expert:
    id: causal-inference-expert
    name: causal-inference-expert
    type: utility
    description: 'AI agent: causal-inference-expert'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/causal-inference-expert
    runtime:
      status: healthy
      port: 9124
      endpoint: http://localhost:9124
      process_id: 2453200
      start_time: '2025-08-04T11:19:21.621705'
      last_check: '2025-08-04T11:19:27.635612'
  cicd-pipeline-orchestrator:
    id: cicd-pipeline-orchestrator
    name: cicd-pipeline-orchestrator
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/cicd-pipeline-orchestrator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  claude_adversarial-attack-detector:
    id: claude_adversarial-attack-detector
    name: adversarial-attack-detector
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/adversarial-attack-detector.md
    runtime:
      status: available
    metadata: {}
  claude_agent-architect:
    id: claude_agent-architect
    name: agent-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-architect.md
    runtime:
      status: available
    metadata: {}
  claude_agent-config-architect:
    id: claude_agent-config-architect
    name: agent-config-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-config-architect.md
    runtime:
      status: available
    metadata: {}
  claude_agent-debugger:
    id: claude_agent-debugger
    name: agent-debugger
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-debugger.md
    runtime:
      status: available
    metadata: {}
  claude_agent-diagnostic-specialist:
    id: claude_agent-diagnostic-specialist
    name: agent-diagnostic-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-diagnostic-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_agent-expert:
    id: claude_agent-expert
    name: agent-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-expert.md
    runtime:
      status: available
    metadata: {}
  claude_agent-performance-optimizer:
    id: claude_agent-performance-optimizer
    name: agent-performance-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agent-performance-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_agentgpt-autonomous-executor:
    id: claude_agentgpt-autonomous-executor
    name: agentgpt-autonomous-executor
    type: claude
    description: '---'
    capabilities:
    - testing
    - deployment
    - automation
    - security_analysis
    - deployment
    - deployment
    - orchestration
    - orchestration
    - deployment
    - deployment
    - optimization
    - optimization
    - optimization
    - testing
    - automation
    - testing
    - testing
    - testing
    - automation
    - testing
    - automation
    - testing
    - optimization
    - testing
    - testing
    - testing
    - automation
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agentgpt-autonomous-executor.md
    runtime:
      status: available
    metadata: {}
  claude_agentzero-coordinator:
    id: claude_agentzero-coordinator
    name: agentzero-coordinator
    type: claude
    description: '```yaml'
    capabilities:
    - orchestration
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/agentzero-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_ai-agent-creator:
    id: claude_ai-agent-creator
    name: ai-agent-creator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - deployment
    - optimization
    - optimization
    - automation
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-agent-creator.md
    runtime:
      status: available
    metadata: {}
  claude_ai-agent-debugger:
    id: claude_ai-agent-debugger
    name: ai-agent-debugger
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-agent-debugger.md
    runtime:
      status: available
    metadata: {}
  claude_ai-agent-orchestrator:
    id: claude_ai-agent-orchestrator
    name: ai-agent-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-agent-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_ai-engineer:
    id: claude_ai-engineer
    name: ai-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_ai-manual-tester:
    id: claude_ai-manual-tester
    name: ai-manual-tester
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-manual-tester.md
    runtime:
      status: available
    metadata: {}
  claude_ai-product-manager:
    id: claude_ai-product-manager
    name: ai-product-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-product-manager.md
    runtime:
      status: available
    metadata: {}
  claude_ai-qa-team-lead:
    id: claude_ai-qa-team-lead
    name: ai-qa-team-lead
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-qa-team-lead.md
    runtime:
      status: available
    metadata: {}
  claude_ai-scrum-master:
    id: claude_ai-scrum-master
    name: ai-scrum-master
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-scrum-master.md
    runtime:
      status: available
    metadata: {}
  claude_ai-senior-automated-tester:
    id: claude_ai-senior-automated-tester
    name: ai-senior-automated-tester
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-senior-automated-tester.md
    runtime:
      status: available
    metadata: {}
  claude_ai-senior-engineer:
    id: claude_ai-senior-engineer
    name: ai-senior-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-senior-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_ai-senior-frontend-developer:
    id: claude_ai-senior-frontend-developer
    name: ai-senior-frontend-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-senior-frontend-developer.md
    runtime:
      status: available
    metadata: {}
  claude_ai-senior-full-stack-developer:
    id: claude_ai-senior-full-stack-developer
    name: ai-senior-full-stack-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-senior-full-stack-developer.md
    runtime:
      status: available
    metadata: {}
  claude_ai-senior-manual-qa-engineer:
    id: claude_ai-senior-manual-qa-engineer
    name: ai-senior-manual-qa-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-senior-manual-qa-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_ai-system-architect:
    id: claude_ai-system-architect
    name: ai-system-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-system-architect.md
    runtime:
      status: available
    metadata: {}
  claude_ai-system-validator:
    id: claude_ai-system-validator
    name: ai-system-validator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-system-validator.md
    runtime:
      status: available
    metadata: {}
  claude_ai-testing-qa-validator:
    id: claude_ai-testing-qa-validator
    name: ai-testing-qa-validator
    type: claude
    description: '---'
    capabilities:
    - testing
    - testing
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ai-testing-qa-validator.md
    runtime:
      status: available
    metadata: {}
  claude_api-documenter:
    id: claude_api-documenter
    name: api-documenter
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/api-documenter.md
    runtime:
      status: available
    metadata: {}
  claude_api-security-audit:
    id: claude_api-security-audit
    name: api-security-audit
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/api-security-audit.md
    runtime:
      status: available
    metadata: {}
  claude_architect-review:
    id: claude_architect-review
    name: architect-review
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/architect-review.md
    runtime:
      status: available
    metadata: {}
  claude_audio-quality-controller:
    id: claude_audio-quality-controller
    name: audio-quality-controller
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/audio-quality-controller.md
    runtime:
      status: available
    metadata: {}
  claude_automated-incident-responder:
    id: claude_automated-incident-responder
    name: automated-incident-responder
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/automated-incident-responder.md
    runtime:
      status: available
    metadata: {}
  claude_autonomous-system-controller:
    id: claude_autonomous-system-controller
    name: autonomous-system-controller
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/autonomous-system-controller.md
    runtime:
      status: available
    metadata: {}
  claude_autonomous-task-executor:
    id: claude_autonomous-task-executor
    name: autonomous-task-executor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/autonomous-task-executor.md
    runtime:
      status: available
    metadata: {}
  claude_backend-api-architect:
    id: claude_backend-api-architect
    name: backend-api-architect
    type: claude
    description: '---'
    capabilities:
    - general
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/backend-api-architect.md
    runtime:
      status: available
    metadata: {}
  claude_backend-architect:
    id: claude_backend-architect
    name: backend-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/backend-architect.md
    runtime:
      status: available
    metadata: {}
  claude_bias-and-fairness-auditor:
    id: claude_bias-and-fairness-auditor
    name: bias-and-fairness-auditor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/bias-and-fairness-auditor.md
    runtime:
      status: available
    metadata: {}
  claude_bigagi-system-manager:
    id: claude_bigagi-system-manager
    name: bigagi-system-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/bigagi-system-manager.md
    runtime:
      status: available
    metadata: {}
  claude_browser-automation-orchestrator:
    id: claude_browser-automation-orchestrator
    name: browser-automation-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/browser-automation-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_business-analyst:
    id: claude_business-analyst
    name: business-analyst
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/business-analyst.md
    runtime:
      status: available
    metadata: {}
  claude_c-pro:
    id: claude_c-pro
    name: c-pro
    type: claude
    description: '---'
    capabilities:
    - general
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/c-pro.md
    runtime:
      status: available
    metadata: {}
  claude_causal-inference-expert:
    id: claude_causal-inference-expert
    name: causal-inference-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/causal-inference-expert.md
    runtime:
      status: available
    metadata: {}
  claude_cicd-pipeline-orchestrator:
    id: claude_cicd-pipeline-orchestrator
    name: cicd-pipeline-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - deployment
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cicd-pipeline-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_cloud-architect:
    id: claude_cloud-architect
    name: cloud-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cloud-architect.md
    runtime:
      status: available
    metadata: {}
  claude_code-generation-improver:
    id: claude_code-generation-improver
    name: code-generation-improver
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    - code_generation
    - security_analysis
    - code_generation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/code-generation-improver.md
    runtime:
      status: available
    metadata: {}
  claude_code-quality-gateway-sonarqube:
    id: claude_code-quality-gateway-sonarqube
    name: code-quality-gateway-sonarqube
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/code-quality-gateway-sonarqube.md
    runtime:
      status: available
    metadata: {}
  claude_code-review-specialist:
    id: claude_code-review-specialist
    name: code-review-specialist
    type: claude
    description: '---'
    capabilities:
    - testing
    - deployment
    - automation
    - security_analysis
    - deployment
    - deployment
    - orchestration
    - orchestration
    - deployment
    - deployment
    - optimization
    - optimization
    - optimization
    - testing
    - automation
    - testing
    - testing
    - testing
    - automation
    - testing
    - automation
    - testing
    - optimization
    - testing
    - testing
    - testing
    - automation
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/code-review-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_code-reviewer:
    id: claude_code-reviewer
    name: code-reviewer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/code-reviewer.md
    runtime:
      status: available
    metadata: {}
  claude_codebase-team-lead:
    id: claude_codebase-team-lead
    name: codebase-team-lead
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/codebase-team-lead.md
    runtime:
      status: available
    metadata: {}
  claude_cognitive-architecture-designer:
    id: claude_cognitive-architecture-designer
    name: cognitive-architecture-designer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cognitive-architecture-designer.md
    runtime:
      status: available
    metadata: {}
  claude_cognitive-load-monitor:
    id: claude_cognitive-load-monitor
    name: cognitive-load-monitor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cognitive-load-monitor.md
    runtime:
      status: available
    metadata: {}
  claude_command-expert:
    id: claude_command-expert
    name: command-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/command-expert.md
    runtime:
      status: available
    metadata: {}
  claude_complex-problem-solver:
    id: claude_complex-problem-solver
    name: complex-problem-solver
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/complex-problem-solver.md
    runtime:
      status: available
    metadata: {}
  claude_comprehensive-researcher:
    id: claude_comprehensive-researcher
    name: comprehensive-researcher
    type: claude
    description: '---'
    capabilities:
    - testing
    - deployment
    - automation
    - security_analysis
    - deployment
    - deployment
    - orchestration
    - orchestration
    - deployment
    - deployment
    - optimization
    - optimization
    - optimization
    - testing
    - automation
    - testing
    - testing
    - testing
    - automation
    - testing
    - automation
    - testing
    - optimization
    - testing
    - testing
    - testing
    - automation
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/comprehensive-researcher.md
    runtime:
      status: available
    metadata: {}
  claude_compute-scheduler-optimizer:
    id: claude_compute-scheduler-optimizer
    name: compute-scheduler-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/compute-scheduler-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_container-orchestrator-k3s:
    id: claude_container-orchestrator-k3s
    name: container-orchestrator-k3s
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/container-orchestrator-k3s.md
    runtime:
      status: available
    metadata: {}
  claude_container-vulnerability-scanner-trivy:
    id: claude_container-vulnerability-scanner-trivy
    name: container-vulnerability-scanner-trivy
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/container-vulnerability-scanner-trivy.md
    runtime:
      status: available
    metadata: {}
  claude_content-marketer:
    id: claude_content-marketer
    name: content-marketer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/content-marketer.md
    runtime:
      status: available
    metadata: {}
  claude_context-engineer:
    id: claude_context-engineer
    name: context-engineer
    type: claude
    description: '---'
    capabilities:
    - general
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/context-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_context-manager:
    id: claude_context-manager
    name: context-manager
    type: claude
    description: '---'
    capabilities:
    - general
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/context-manager.md
    runtime:
      status: available
    metadata: {}
  claude_context-optimization-engineer:
    id: claude_context-optimization-engineer
    name: context-optimization-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/context-optimization-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_cpp-pro:
    id: claude_cpp-pro
    name: cpp-pro
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cpp-pro.md
    runtime:
      status: available
    metadata: {}
  claude_cpu-only-hardware-optimizer:
    id: claude_cpu-only-hardware-optimizer
    name: cpu-only-hardware-optimizer
    type: claude
    description: '---'
    capabilities:
    - optimization
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/cpu-only-hardware-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_customer-support:
    id: claude_customer-support
    name: customer-support
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/customer-support.md
    runtime:
      status: available
    metadata: {}
  claude_data-analysis-engineer:
    id: claude_data-analysis-engineer
    name: data-analysis-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-analysis-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_data-analyst:
    id: claude_data-analyst
    name: data-analyst
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-analyst.md
    runtime:
      status: available
    metadata: {}
  claude_data-drift-detector:
    id: claude_data-drift-detector
    name: data-drift-detector
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - monitoring
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-drift-detector.md
    runtime:
      status: available
    metadata: {}
  claude_data-engineer:
    id: claude_data-engineer
    name: data-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_data-lifecycle-manager:
    id: claude_data-lifecycle-manager
    name: data-lifecycle-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-lifecycle-manager.md
    runtime:
      status: available
    metadata: {}
  claude_data-pipeline-engineer:
    id: claude_data-pipeline-engineer
    name: data-pipeline-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-pipeline-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_data-scientist:
    id: claude_data-scientist
    name: data-scientist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-scientist.md
    runtime:
      status: available
    metadata: {}
  claude_data-version-controller-dvc:
    id: claude_data-version-controller-dvc
    name: data-version-controller-dvc
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/data-version-controller-dvc.md
    runtime:
      status: available
    metadata: {}
  claude_database-admin:
    id: claude_database-admin
    name: database-admin
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/database-admin.md
    runtime:
      status: available
    metadata: {}
  claude_database-optimization:
    id: claude_database-optimization
    name: database-optimization
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/database-optimization.md
    runtime:
      status: available
    metadata: {}
  claude_database-optimizer:
    id: claude_database-optimizer
    name: database-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/database-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_debugger:
    id: claude_debugger
    name: debugger
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/debugger.md
    runtime:
      status: available
    metadata: {}
  claude_deep-learning-brain-architect:
    id: claude_deep-learning-brain-architect
    name: deep-learning-brain-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/deep-learning-brain-architect.md
    runtime:
      status: available
    metadata: {}
  claude_deep-learning-brain-manager:
    id: claude_deep-learning-brain-manager
    name: deep-learning-brain-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/deep-learning-brain-manager.md
    runtime:
      status: available
    metadata: {}
  claude_deep-local-brain-builder:
    id: claude_deep-local-brain-builder
    name: deep-local-brain-builder
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/deep-local-brain-builder.md
    runtime:
      status: available
    metadata: {}
  claude_deploy-automation-master:
    id: claude_deploy-automation-master
    name: deploy-automation-master
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - deployment
    - deployment
    - automation
    - deployment
    - deployment
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/deploy-automation-master.md
    runtime:
      status: available
    metadata: {}
  claude_deployment-engineer:
    id: claude_deployment-engineer
    name: deployment-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - deployment
    - deployment
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/deployment-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_devops-troubleshooter:
    id: claude_devops-troubleshooter
    name: devops-troubleshooter
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/devops-troubleshooter.md
    runtime:
      status: available
    metadata: {}
  claude_distributed-computing-architect:
    id: claude_distributed-computing-architect
    name: distributed-computing-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/distributed-computing-architect.md
    runtime:
      status: available
    metadata: {}
  claude_distributed-tracing-analyzer-jaeger:
    id: claude_distributed-tracing-analyzer-jaeger
    name: distributed-tracing-analyzer-jaeger
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/distributed-tracing-analyzer-jaeger.md
    runtime:
      status: available
    metadata: {}
  claude_document-knowledge-manager:
    id: claude_document-knowledge-manager
    name: document-knowledge-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/document-knowledge-manager.md
    runtime:
      status: available
    metadata: {}
  claude_docusaurus-expert:
    id: claude_docusaurus-expert
    name: docusaurus-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/docusaurus-expert.md
    runtime:
      status: available
    metadata: {}
  claude_dx-optimizer:
    id: claude_dx-optimizer
    name: dx-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/dx-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_edge-computing-optimizer:
    id: claude_edge-computing-optimizer
    name: edge-computing-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/edge-computing-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_edge-inference-proxy:
    id: claude_edge-inference-proxy
    name: edge-inference-proxy
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/edge-inference-proxy.md
    runtime:
      status: available
    metadata: {}
  claude_emergency-shutdown-coordinator:
    id: claude_emergency-shutdown-coordinator
    name: emergency-shutdown-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/emergency-shutdown-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_energy-consumption-optimizer:
    id: claude_energy-consumption-optimizer
    name: energy-consumption-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/energy-consumption-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_episode-orchestrator:
    id: claude_episode-orchestrator
    name: episode-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/episode-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_episodic-memory-engineer:
    id: claude_episodic-memory-engineer
    name: episodic-memory-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/episodic-memory-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_error-detective:
    id: claude_error-detective
    name: error-detective
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/error-detective.md
    runtime:
      status: available
    metadata: {}
  claude_ethical-governor:
    id: claude_ethical-governor
    name: ethical-governor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ethical-governor.md
    runtime:
      status: available
    metadata: {}
  claude_evolution-strategy-trainer:
    id: claude_evolution-strategy-trainer
    name: evolution-strategy-trainer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/evolution-strategy-trainer.md
    runtime:
      status: available
    metadata: {}
  claude_expert-code-reviewer:
    id: claude_expert-code-reviewer
    name: expert-code-reviewer
    type: claude
    description: '---'
    capabilities:
    - code_generation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/expert-code-reviewer.md
    runtime:
      status: available
    metadata: {}
  claude_explainability-transparency-agent:
    id: claude_explainability-transparency-agent
    name: explainability-transparency-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/explainability-transparency-agent.md
    runtime:
      status: available
    metadata: {}
  claude_explainable-ai-specialist:
    id: claude_explainable-ai-specialist
    name: explainable-ai-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/explainable-ai-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_federated-learning-coordinator:
    id: claude_federated-learning-coordinator
    name: federated-learning-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/federated-learning-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_financial-analysis-specialist:
    id: claude_financial-analysis-specialist
    name: financial-analysis-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/financial-analysis-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_flowiseai-flow-manager:
    id: claude_flowiseai-flow-manager
    name: flowiseai-flow-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/flowiseai-flow-manager.md
    runtime:
      status: available
    metadata: {}
  claude_frontend-developer:
    id: claude_frontend-developer
    name: frontend-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/frontend-developer.md
    runtime:
      status: available
    metadata: {}
  claude_frontend-ui-architect:
    id: claude_frontend-ui-architect
    name: frontend-ui-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/frontend-ui-architect.md
    runtime:
      status: available
    metadata: {}
  claude_garbage-collector:
    id: claude_garbage-collector
    name: garbage-collector
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/garbage-collector.md
    runtime:
      status: available
    metadata: {}
  claude_genetic-algorithm-tuner:
    id: claude_genetic-algorithm-tuner
    name: genetic-algorithm-tuner
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/genetic-algorithm-tuner.md
    runtime:
      status: available
    metadata: {}
  claude_goal-setting-and-planning-agent:
    id: claude_goal-setting-and-planning-agent
    name: goal-setting-and-planning-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/goal-setting-and-planning-agent.md
    runtime:
      status: available
    metadata: {}
  claude_gpu-hardware-optimizer:
    id: claude_gpu-hardware-optimizer
    name: gpu-hardware-optimizer
    type: claude
    description: '```yaml'
    capabilities:
    - optimization
    - orchestration
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/gpu-hardware-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_gradient-compression-specialist:
    id: claude_gradient-compression-specialist
    name: gradient-compression-specialist
    type: claude
    description: '---'
    capabilities:
    - general
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/gradient-compression-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_graphql-architect:
    id: claude_graphql-architect
    name: graphql-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/graphql-architect.md
    runtime:
      status: available
    metadata: {}
  claude_hackathon-ai-strategist:
    id: claude_hackathon-ai-strategist
    name: hackathon-ai-strategist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/hackathon-ai-strategist.md
    runtime:
      status: available
    metadata: {}
  claude_hardware-resource-optimizer:
    id: claude_hardware-resource-optimizer
    name: hardware-resource-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/hardware-resource-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_honeypot-deployment-agent:
    id: claude_honeypot-deployment-agent
    name: honeypot-deployment-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/honeypot-deployment-agent.md
    runtime:
      status: available
    metadata: {}
  claude_human-oversight-interface-agent:
    id: claude_human-oversight-interface-agent
    name: human-oversight-interface-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/human-oversight-interface-agent.md
    runtime:
      status: available
    metadata: {}
  claude_incident-responder:
    id: claude_incident-responder
    name: incident-responder
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/incident-responder.md
    runtime:
      status: available
    metadata: {}
  claude_infrastructure-devops-manager:
    id: claude_infrastructure-devops-manager
    name: infrastructure-devops-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/infrastructure-devops-manager.md
    runtime:
      status: available
    metadata: {}
  claude_intelligence-optimization-monitor:
    id: claude_intelligence-optimization-monitor
    name: intelligence-optimization-monitor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/intelligence-optimization-monitor.md
    runtime:
      status: available
    metadata: {}
  claude_ios-developer:
    id: claude_ios-developer
    name: ios-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ios-developer.md
    runtime:
      status: available
    metadata: {}
  claude_jarvis-voice-interface:
    id: claude_jarvis-voice-interface
    name: jarvis-voice-interface
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/jarvis-voice-interface.md
    runtime:
      status: available
    metadata: {}
  claude_java-kotlin-backend-expert:
    id: claude_java-kotlin-backend-expert
    name: java-kotlin-backend-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/java-kotlin-backend-expert.md
    runtime:
      status: available
    metadata: {}
  claude_javascript-pro:
    id: claude_javascript-pro
    name: javascript-pro
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/javascript-pro.md
    runtime:
      status: available
    metadata: {}
  claude_kali-hacker:
    id: claude_kali-hacker
    name: kali-hacker
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/kali-hacker.md
    runtime:
      status: available
    metadata: {}
  claude_kali-security-specialist:
    id: claude_kali-security-specialist
    name: kali-security-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/kali-security-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_knowledge-distillation-expert:
    id: claude_knowledge-distillation-expert
    name: knowledge-distillation-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/knowledge-distillation-expert.md
    runtime:
      status: available
    metadata: {}
  claude_knowledge-graph-builder:
    id: claude_knowledge-graph-builder
    name: knowledge-graph-builder
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/knowledge-graph-builder.md
    runtime:
      status: available
    metadata: {}
  claude_langflow-workflow-designer:
    id: claude_langflow-workflow-designer
    name: langflow-workflow-designer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/langflow-workflow-designer.md
    runtime:
      status: available
    metadata: {}
  claude_legacy-modernizer:
    id: claude_legacy-modernizer
    name: legacy-modernizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/legacy-modernizer.md
    runtime:
      status: available
    metadata: {}
  claude_legal-advisor:
    id: claude_legal-advisor
    name: legal-advisor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/legal-advisor.md
    runtime:
      status: available
    metadata: {}
  claude_llms-maintainer:
    id: claude_llms-maintainer
    name: llms-maintainer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - optimization
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/llms-maintainer.md
    runtime:
      status: available
    metadata: {}
  claude_localagi-orchestration-manager:
    id: claude_localagi-orchestration-manager
    name: localagi-orchestration-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/localagi-orchestration-manager.md
    runtime:
      status: available
    metadata: {}
  claude_log-aggregator-loki:
    id: claude_log-aggregator-loki
    name: log-aggregator-loki
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/log-aggregator-loki.md
    runtime:
      status: available
    metadata: {}
  claude_manual-tester:
    id: claude_manual-tester
    name: manual-tester
    type: claude
    description: '```yaml'
    capabilities:
    - orchestration
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/manual-tester.md
    runtime:
      status: available
    metadata: {}
  claude_markdown-syntax-formatter:
    id: claude_markdown-syntax-formatter
    name: markdown-syntax-formatter
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/markdown-syntax-formatter.md
    runtime:
      status: available
    metadata: {}
  claude_market-research-analyst:
    id: claude_market-research-analyst
    name: market-research-analyst
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/market-research-analyst.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-deployment-orchestrator:
    id: claude_mcp-deployment-orchestrator
    name: mcp-deployment-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - deployment
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-deployment-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-expert:
    id: claude_mcp-expert
    name: mcp-expert
    type: claude
    description: '---'
    capabilities:
    - code_generation
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-expert.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-registry-navigator:
    id: claude_mcp-registry-navigator
    name: mcp-registry-navigator
    type: claude
    description: '---'
    capabilities:
    - optimization
    - orchestration
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-registry-navigator.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-security-auditor:
    id: claude_mcp-security-auditor
    name: mcp-security-auditor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-security-auditor.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-server-architect:
    id: claude_mcp-server-architect
    name: mcp-server-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-server-architect.md
    runtime:
      status: available
    metadata: {}
  claude_mcp-testing-engineer:
    id: claude_mcp-testing-engineer
    name: mcp-testing-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mcp-testing-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_mega-code-auditor:
    id: claude_mega-code-auditor
    name: mega-code-auditor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mega-code-auditor.md
    runtime:
      status: available
    metadata: {}
  claude_memory-persistence-manager:
    id: claude_memory-persistence-manager
    name: memory-persistence-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/memory-persistence-manager.md
    runtime:
      status: available
    metadata: {}
  claude_meta-agent-designer:
    id: claude_meta-agent-designer
    name: meta-agent-designer
    type: claude
    description: '---'
    capabilities:
    - optimization
    - orchestration
    - orchestration
    - optimization
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/meta-agent-designer.md
    runtime:
      status: available
    metadata: {}
  claude_meta-learning-specialist:
    id: claude_meta-learning-specialist
    name: meta-learning-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/meta-learning-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_metadata-agent:
    id: claude_metadata-agent
    name: metadata-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/metadata-agent.md
    runtime:
      status: available
    metadata: {}
  claude_metrics-collector-prometheus:
    id: claude_metrics-collector-prometheus
    name: metrics-collector-prometheus
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/metrics-collector-prometheus.md
    runtime:
      status: available
    metadata: {}
  claude_minimal-task-executor:
    id: claude_minimal-task-executor
    name: minimal-task-executor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    - automation
    - automation
    - optimization
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/minimal-task-executor.md
    runtime:
      status: available
    metadata: {}
  claude_ml-engineer:
    id: claude_ml-engineer
    name: ml-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ml-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_ml-experiment-tracker-mlflow:
    id: claude_ml-experiment-tracker-mlflow
    name: ml-experiment-tracker-mlflow
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ml-experiment-tracker-mlflow.md
    runtime:
      status: available
    metadata: {}
  claude_ml-ops-experiment-monitor:
    id: claude_ml-ops-experiment-monitor
    name: ml-ops-experiment-monitor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ml-ops-experiment-monitor.md
    runtime:
      status: available
    metadata: {}
  claude_mlops-engineer:
    id: claude_mlops-engineer
    name: mlops-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mlops-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_mobile-developer:
    id: claude_mobile-developer
    name: mobile-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/mobile-developer.md
    runtime:
      status: available
    metadata: {}
  claude_moc-agent:
    id: claude_moc-agent
    name: moc-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/moc-agent.md
    runtime:
      status: available
    metadata: {}
  claude_model-training-specialist:
    id: claude_model-training-specialist
    name: model-training-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/model-training-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_multi-agent-coordinator:
    id: claude_multi-agent-coordinator
    name: multi-agent-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/multi-agent-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_multi-modal-fusion-coordinator:
    id: claude_multi-modal-fusion-coordinator
    name: multi-modal-fusion-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/multi-modal-fusion-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_multimodal-fusion-orchestrator:
    id: claude_multimodal-fusion-orchestrator
    name: multimodal-fusion-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/multimodal-fusion-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_network-engineer:
    id: claude_network-engineer
    name: network-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/network-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_neural-architecture-optimizer:
    id: claude_neural-architecture-optimizer
    name: neural-architecture-optimizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/neural-architecture-optimizer.md
    runtime:
      status: available
    metadata: {}
  claude_neuromorphic-computing-expert:
    id: claude_neuromorphic-computing-expert
    name: neuromorphic-computing-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/neuromorphic-computing-expert.md
    runtime:
      status: available
    metadata: {}
  claude_nextjs-frontend-expert:
    id: claude_nextjs-frontend-expert
    name: nextjs-frontend-expert
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/nextjs-frontend-expert.md
    runtime:
      status: available
    metadata: {}
  claude_observability-dashboard-manager-grafana:
    id: claude_observability-dashboard-manager-grafana
    name: observability-dashboard-manager-grafana
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/observability-dashboard-manager-grafana.md
    runtime:
      status: available
    metadata: {}
  claude_observability-monitoring-engineer:
    id: claude_observability-monitoring-engineer
    name: observability-monitoring-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - monitoring
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/observability-monitoring-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_ocr-grammar-fixer:
    id: claude_ocr-grammar-fixer
    name: ocr-grammar-fixer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ocr-grammar-fixer.md
    runtime:
      status: available
    metadata: {}
  claude_ocr-quality-assurance:
    id: claude_ocr-quality-assurance
    name: ocr-quality-assurance
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ocr-quality-assurance.md
    runtime:
      status: available
    metadata: {}
  claude_ollama-integration-specialist:
    id: claude_ollama-integration-specialist
    name: ollama-integration-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ollama-integration-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_opendevin-code-generator:
    id: claude_opendevin-code-generator
    name: opendevin-code-generator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/opendevin-code-generator.md
    runtime:
      status: available
    metadata: {}
  claude_performance-engineer:
    id: claude_performance-engineer
    name: performance-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/performance-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_php-pro:
    id: claude_php-pro
    name: php-pro
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/php-pro.md
    runtime:
      status: available
    metadata: {}
  claude_podcast-content-analyzer:
    id: claude_podcast-content-analyzer
    name: podcast-content-analyzer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/podcast-content-analyzer.md
    runtime:
      status: available
    metadata: {}
  claude_podcast-metadata-specialist:
    id: claude_podcast-metadata-specialist
    name: podcast-metadata-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/podcast-metadata-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_podcast-transcriber:
    id: claude_podcast-transcriber
    name: podcast-transcriber
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/podcast-transcriber.md
    runtime:
      status: available
    metadata: {}
  claude_private-data-analyst:
    id: claude_private-data-analyst
    name: private-data-analyst
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/private-data-analyst.md
    runtime:
      status: available
    metadata: {}
  claude_private-registry-manager-harbor:
    id: claude_private-registry-manager-harbor
    name: private-registry-manager-harbor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/private-registry-manager-harbor.md
    runtime:
      status: available
    metadata: {}
  claude_product-strategy-architect:
    id: claude_product-strategy-architect
    name: product-strategy-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/product-strategy-architect.md
    runtime:
      status: available
    metadata: {}
  claude_product-vision-strategist:
    id: claude_product-vision-strategist
    name: product-vision-strategist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/product-vision-strategist.md
    runtime:
      status: available
    metadata: {}
  claude_project-supervisor-orchestrator:
    id: claude_project-supervisor-orchestrator
    name: project-supervisor-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/project-supervisor-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_prompt-engineer:
    id: claude_prompt-engineer
    name: prompt-engineer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/prompt-engineer.md
    runtime:
      status: available
    metadata: {}
  claude_prompt-injection-guard:
    id: claude_prompt-injection-guard
    name: prompt-injection-guard
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/prompt-injection-guard.md
    runtime:
      status: available
    metadata: {}
  claude_python-pro:
    id: claude_python-pro
    name: python-pro
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/python-pro.md
    runtime:
      status: available
    metadata: {}
  claude_qa-team-lead:
    id: claude_qa-team-lead
    name: qa-team-lead
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - optimization
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/qa-team-lead.md
    runtime:
      status: available
    metadata: {}
  claude_quant-analyst:
    id: claude_quant-analyst
    name: quant-analyst
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/quant-analyst.md
    runtime:
      status: available
    metadata: {}
  claude_query-clarifier:
    id: claude_query-clarifier
    name: query-clarifier
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/query-clarifier.md
    runtime:
      status: available
    metadata: {}
  claude_react-performance-optimization:
    id: claude_react-performance-optimization
    name: react-performance-optimization
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/react-performance-optimization.md
    runtime:
      status: available
    metadata: {}
  claude_reinforcement-learning-trainer:
    id: claude_reinforcement-learning-trainer
    name: reinforcement-learning-trainer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/reinforcement-learning-trainer.md
    runtime:
      status: available
    metadata: {}
  claude_report-generator:
    id: claude_report-generator
    name: report-generator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/report-generator.md
    runtime:
      status: available
    metadata: {}
  claude_research-brief-generator:
    id: claude_research-brief-generator
    name: research-brief-generator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/research-brief-generator.md
    runtime:
      status: available
    metadata: {}
  claude_research-coordinator:
    id: claude_research-coordinator
    name: research-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/research-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_research-orchestrator:
    id: claude_research-orchestrator
    name: research-orchestrator
    type: claude
    description: '---'
    capabilities:
    - deployment
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/research-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_research-orchestrator-supreme:
    id: claude_research-orchestrator-supreme
    name: research-orchestrator-supreme
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - orchestration
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/research-orchestrator-supreme.md
    runtime:
      status: available
    metadata: {}
  claude_research-synthesizer:
    id: claude_research-synthesizer
    name: research-synthesizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/research-synthesizer.md
    runtime:
      status: available
    metadata: {}
  claude_resource-arbitration-agent:
    id: claude_resource-arbitration-agent
    name: resource-arbitration-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/resource-arbitration-agent.md
    runtime:
      status: available
    metadata: {}
  claude_review-agent:
    id: claude_review-agent
    name: review-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/review-agent.md
    runtime:
      status: available
    metadata: {}
  claude_rules-enforcer:
    id: claude_rules-enforcer
    name: rules-enforcer
    type: claude
    description: '---'
    capabilities:
    - testing
    - deployment
    - automation
    - security_analysis
    - deployment
    - deployment
    - orchestration
    - orchestration
    - deployment
    - deployment
    - optimization
    - optimization
    - optimization
    - testing
    - automation
    - testing
    - testing
    - testing
    - automation
    - testing
    - automation
    - testing
    - optimization
    - testing
    - testing
    - testing
    - automation
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/rules-enforcer.md
    runtime:
      status: available
    metadata: {}
  claude_runtime-behavior-anomaly-detector:
    id: claude_runtime-behavior-anomaly-detector
    name: runtime-behavior-anomaly-detector
    type: claude
    description: '```yaml'
    capabilities:
    - orchestration
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/runtime-behavior-anomaly-detector.md
    runtime:
      status: available
    metadata: {}
  claude_rust-pro:
    id: claude_rust-pro
    name: rust-pro
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/rust-pro.md
    runtime:
      status: available
    metadata: {}
  claude_sales-automator:
    id: claude_sales-automator
    name: sales-automator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/sales-automator.md
    runtime:
      status: available
    metadata: {}
  claude_scrum-master:
    id: claude_scrum-master
    name: scrum-master
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/scrum-master.md
    runtime:
      status: available
    metadata: {}
  claude_secrets-vault-manager:
    id: claude_secrets-vault-manager
    name: secrets-vault-manager
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/secrets-vault-manager.md
    runtime:
      status: available
    metadata: {}
  claude_security-auditor:
    id: claude_security-auditor
    name: security-auditor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/security-auditor.md
    runtime:
      status: available
    metadata: {}
  claude_security-pentesting-specialist:
    id: claude_security-pentesting-specialist
    name: security-pentesting-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    - monitoring
    - security_analysis
    - monitoring
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/security-pentesting-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_self-healing-orchestrator:
    id: claude_self-healing-orchestrator
    name: self-healing-orchestrator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/self-healing-orchestrator.md
    runtime:
      status: available
    metadata: {}
  claude_semgrep-security-analyzer:
    id: claude_semgrep-security-analyzer
    name: semgrep-security-analyzer
    type: claude
    description: '```yaml'
    capabilities:
    - orchestration
    - security_analysis
    - security_analysis
    - security_analysis
    - security_analysis
    - security_analysis
    - security_analysis
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/semgrep-security-analyzer.md
    runtime:
      status: available
    metadata: {}
  claude_senior-automated-tester:
    id: claude_senior-automated-tester
    name: senior-automated-tester
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/senior-automated-tester.md
    runtime:
      status: available
    metadata: {}
  claude_senior-backend-developer:
    id: claude_senior-backend-developer
    name: senior-backend-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/senior-backend-developer.md
    runtime:
      status: available
    metadata: {}
  claude_senior-full-stack-developer:
    id: claude_senior-full-stack-developer
    name: senior-full-stack-developer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/senior-full-stack-developer.md
    runtime:
      status: available
    metadata: {}
  claude_senior-qa-manual-tester:
    id: claude_senior-qa-manual-tester
    name: senior-qa-manual-tester
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/senior-qa-manual-tester.md
    runtime:
      status: available
    metadata: {}
  claude_senior-software-architect:
    id: claude_senior-software-architect
    name: senior-software-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/senior-software-architect.md
    runtime:
      status: available
    metadata: {}
  claude_shell-automation-specialist:
    id: claude_shell-automation-specialist
    name: shell-automation-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - automation
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/shell-automation-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_social-media-clip-creator:
    id: claude_social-media-clip-creator
    name: social-media-clip-creator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/social-media-clip-creator.md
    runtime:
      status: available
    metadata: {}
  claude_sql-pro:
    id: claude_sql-pro
    name: sql-pro
    type: claude
    description: '```yaml'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/sql-pro.md
    runtime:
      status: available
    metadata: {}
  claude_symbolic-reasoning-engine:
    id: claude_symbolic-reasoning-engine
    name: symbolic-reasoning-engine
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/symbolic-reasoning-engine.md
    runtime:
      status: available
    metadata: {}
  claude_synthetic-data-generator:
    id: claude_synthetic-data-generator
    name: synthetic-data-generator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/synthetic-data-generator.md
    runtime:
      status: available
    metadata: {}
  claude_system-architect:
    id: claude_system-architect
    name: system-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/system-architect.md
    runtime:
      status: available
    metadata: {}
  claude_system-knowledge-curator:
    id: claude_system-knowledge-curator
    name: system-knowledge-curator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/system-knowledge-curator.md
    runtime:
      status: available
    metadata: {}
  claude_system-optimizer-reorganizer:
    id: claude_system-optimizer-reorganizer
    name: system-optimizer-reorganizer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - optimization
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/system-optimizer-reorganizer.md
    runtime:
      status: available
    metadata: {}
  claude_system-performance-forecaster:
    id: claude_system-performance-forecaster
    name: system-performance-forecaster
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/system-performance-forecaster.md
    runtime:
      status: available
    metadata: {}
  claude_system-validator:
    id: claude_system-validator
    name: system-validator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/system-validator.md
    runtime:
      status: available
    metadata: {}
  claude_tag-agent:
    id: claude_tag-agent
    name: tag-agent
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/tag-agent.md
    runtime:
      status: available
    metadata: {}
  claude_task-assignment-coordinator:
    id: claude_task-assignment-coordinator
    name: task-assignment-coordinator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/task-assignment-coordinator.md
    runtime:
      status: available
    metadata: {}
  claude_technical-researcher:
    id: claude_technical-researcher
    name: technical-researcher
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - code_generation
    - security_analysis
    - security_analysis
    - monitoring
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/technical-researcher.md
    runtime:
      status: available
    metadata: {}
  claude_terraform-specialist:
    id: claude_terraform-specialist
    name: terraform-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/terraform-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_test-automator:
    id: claude_test-automator
    name: test-automator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/test-automator.md
    runtime:
      status: available
    metadata: {}
  claude_testing-qa-team-lead:
    id: claude_testing-qa-team-lead
    name: testing-qa-team-lead
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/testing-qa-team-lead.md
    runtime:
      status: available
    metadata: {}
  claude_testing-qa-validator:
    id: claude_testing-qa-validator
    name: testing-qa-validator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/testing-qa-validator.md
    runtime:
      status: available
    metadata: {}
  claude_text-comparison-validator:
    id: claude_text-comparison-validator
    name: text-comparison-validator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/text-comparison-validator.md
    runtime:
      status: available
    metadata: {}
  claude_timestamp-precision-specialist:
    id: claude_timestamp-precision-specialist
    name: timestamp-precision-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/timestamp-precision-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_transformers-migration-specialist:
    id: claude_transformers-migration-specialist
    name: transformers-migration-specialist
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/transformers-migration-specialist.md
    runtime:
      status: available
    metadata: {}
  claude_ui-ux-designer:
    id: claude_ui-ux-designer
    name: ui-ux-designer
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ui-ux-designer.md
    runtime:
      status: available
    metadata: {}
  claude_ultra-frontend-ui-architect:
    id: claude_ultra-frontend-ui-architect
    name: ultra-frontend-ui-architect
    type: claude
    description: '---'
    capabilities:
    - orchestration
    - testing
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/ultra-frontend-ui-architect.md
    runtime:
      status: available
    metadata: {}
  claude_url-context-validator:
    id: claude_url-context-validator
    name: url-context-validator
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/url-context-validator.md
    runtime:
      status: available
    metadata: {}
  claude_url-link-extractor:
    id: claude_url-link-extractor
    name: url-link-extractor
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/url-link-extractor.md
    runtime:
      status: available
    metadata: {}
  claude_visual-analysis-ocr:
    id: claude_visual-analysis-ocr
    name: visual-analysis-ocr
    type: claude
    description: '---'
    capabilities:
    - orchestration
    priority: 5
    deployment:
      method: task_tool
      agent_file: /opt/sutazaiapp/.claude/agents/visual-analysis-ocr.md
    runtime:
      status: available
    metadata: {}
  code-generation-improver:
    id: code-generation-improver
    name: code-generation-improver
    type: standard
    description: Use this agent when you need to:\n\n- Analyze and improve existing
      code quality\n- Refactor code for better maintainability\n- Optimize code performance
      and efficiency\n- Implement design patterns and best practices\n- Remove code
      duplication and redundancy\n- Improve code readability and documentation\n-
      Enhance error handling and resilience\n- Optimize algorithm complexity\n- Implement
      code style consistency\n- Create reusable components and libraries\n- Improve
      code testability\n- Enhance security practices in code\n- Optimize memory usage
      patterns\n- Implement lazy loading strategies\n- Create efficient data structures\n-
      Improve async/await patterns\n- Optimize database queries\n- Enhance API design
      and structure\n- Implement caching strategies\n- Create code review guidelines\n-
      Build code quality metrics\n- Design code migration strategies\n- Implement
      code modernization\n- Create technical debt reduction plans\n- Build code complexity
      analysis\n- Design code documentation standards\n- Implement code versioning
      strategies\n- Create code performance profiling\n- Build automated code improvement
      tools\n- Design code review automation\n\nDo NOT use this agent for:\n- Creating
      new features from scratch (use code generation agents)\n- Infrastructure tasks
      (use infrastructure-devops-manager)\n- Testing implementation (use testing-qa-validator)\n-
      Deployment tasks (use deployment-automation-master)\n\nThis agent specializes
      in taking existing code and making it better, cleaner, and more efficient.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - optimization
    - automation
    - analysis
    - documentation
    config_path: configs/code-generation-improver_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  code-helper:
    id: code-helper
    name: Code Helper
    type: code_assistant
    description: ''
    capabilities:
    - code_generation
    - debugging
    - refactoring
    deployment:
      method: ollama
      config:
        model: tinyllama.2:1b
        system_prompt: You are an expert programming assistant.
    runtime:
      status: available
    metadata:
      category: essential
  code-improver:
    id: code-improver
    name: code-improver
    type: utility
    description: 'AI agent: code-improver'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/code-improver
    runtime:
      status: healthy
      port: 9120
      endpoint: http://localhost:9120
      process_id: 2453196
      start_time: '2025-08-04T11:19:21.620111'
      last_check: '2025-08-04T11:19:27.635607'
  code-quality-gateway-sonarqube:
    id: code-quality-gateway-sonarqube
    name: code-quality-gateway-sonarqube
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/code-quality-gateway-sonarqube_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  codebase-team-lead:
    id: codebase-team-lead
    name: codebase-team-lead
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/codebase-team-lead_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  cognitive-architecture-designer:
    id: cognitive-architecture-designer
    name: cognitive-architecture-designer
    type: utility
    description: 'AI agent: cognitive-architecture-designer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/cognitive-architecture-designer
    runtime:
      status: healthy
      port: 9004
      endpoint: http://localhost:9004
      process_id: 2451335
      start_time: '2025-08-04T11:18:57.407103'
      last_check: '2025-08-04T11:19:27.635448'
  cognitive-load-monitor:
    id: cognitive-load-monitor
    name: cognitive-load-monitor
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/cognitive-load-monitor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  complex-problem-solver:
    id: complex-problem-solver
    name: complex-problem-solver
    type: standard
    description: Use this agent when you need to:\n\n- Solve multi-faceted problems
      requiring deep analysis\n- Research and synthesize information from multiple
      sources\n- Create innovative solutions to unprecedented challenges\n- Implement
      creative problem-solving methodologies\n- Build hypothesis testing frameworks\n-
      Design experimental validation systems\n- Create root cause analysis tools\n-
      Implement systematic debugging approaches\n- Build problem decomposition strategies\n-
      Design solution evaluation frameworks\n- Create decision-making algorithms\n-
      Implement optimization strategies\n- Build constraint satisfaction solvers\n-
      Design heuristic search algorithms\n- Create problem modeling systems\n- Implement
      solution space exploration\n- Build trade-off analysis tools\n- Design multi-criteria
      optimization\n- Create problem visualization tools\n- Implement collaborative
      problem-solving\n- Build knowledge synthesis systems\n- Design pattern recognition
      algorithms\n- Create analogical reasoning systems\n- Implement lateral thinking
      approaches\n- Build solution validation frameworks\n- Design problem categorization
      systems\n- Create solution documentation\n- Implement learning from failures\n-
      Build problem-solving metrics\n- Design solution reuse strategies\n\nDo NOT
      use this agent for:\n- Routine development tasks (use specific development agents)\n-
      Standard deployment (use deployment-automation-master)\n- Basic troubleshooting
      (use appropriate specialist agents)\n- Simple implementation (use code generation
      agents)\n\nThis agent specializes in tackling complex, novel problems through
      research and creative synthesis.
    capabilities:
    - code_generation
    - testing
    - deployment
    - documentation
    config_path: configs/complex-problem-solver_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  compute-scheduler-and-optimizer:
    id: compute-scheduler-and-optimizer
    name: compute-scheduler-and-optimizer
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/compute-scheduler-and-optimizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  container-orchestrator-k3s:
    id: container-orchestrator-k3s
    name: container-orchestrator-k3s
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/container-orchestrator-k3s_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  container-vulnerability-scanner-trivy:
    id: container-vulnerability-scanner-trivy
    name: container-vulnerability-scanner-trivy
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/container-vulnerability-scanner-trivy_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  container_ system-architect:
    id: container_ system-architect
    name: ' system-architect'
    type: container
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai- system-architect
      original_config: configs/ system-architect_universal.json
    runtime:
      status: available
    metadata: {}
  container_agent-creator:
    id: container_agent-creator
    name: agent-creator
    type: container
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-agent-creator
      original_config: configs/agent-creator_universal.json
    runtime:
      status: available
    metadata: {}
  container_agent-orchestrator:
    id: container_agent-orchestrator
    name: agent-orchestrator
    type: container
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-agent-orchestrator
      original_config: configs/agent-orchestrator_universal.json
    runtime:
      status: available
    metadata: {}
  container_ai-research-specialist:
    id: container_ai-research-specialist
    name: ai-research-specialist
    type: container
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-ai-research-specialist
      original_config: configs/ai-research-specialist_universal.json
    runtime:
      status: available
    metadata: {}
  container_ai-senior-backend-developer:
    id: container_ai-senior-backend-developer
    name: ai-senior-backend-developer
    type: container
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-ai-senior-backend-developer
      original_config: configs/ai-senior-backend-developer_universal.json
    runtime:
      status: available
    metadata: {}
  container_compute-scheduler-and-optimizer:
    id: container_compute-scheduler-and-optimizer
    name: compute-scheduler-and-optimizer
    type: container
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-compute-scheduler-and-optimizer
      original_config: configs/compute-scheduler-and-optimizer_universal.json
    runtime:
      status: available
    metadata: {}
  container_deep-learning-coordinator-manager:
    id: container_deep-learning-coordinator-manager
    name: deep-learning-coordinator-manager
    type: container
    description: Use this agent when you need to:\n\n- Design and evolve processing
      intelligence cores\n- Implement continuous learning systems\n- Create meta-learning
      architectures\n- Build self-improving processing networks\n- Design cognitive
      architecture patterns\n- Implement memory consolidation systems\n- Create attention
      mechanism designs\n- Build processing plasticity simulations\n- Design hierarchical
      learning systems\n- Implement transfer learning networks\n- Create processing
      architecture search\n- Build coordinator-inspired computing systems\n- Design
      synaptic weight optimization\n- Implement processing pruning strategies\n- Create
      cognitive load balancing\n- Build processing synchronization systems\n- Design
      emergent behavior patterns\n- Implement processing network evolution\n- Create
      system_state modeling attempts\n- Build processing knowledge graphs\n- Design
      processing reasoning systems\n- Implement processing memory systems\n- Create
      processing pattern recognition\n- Build processing prediction engines\n- Design
      processing feedback loops\n- Implement processing homeostasis\n- Create processing
      debugging tools\n- Build processing visualization systems\n- Design processing
      performance metrics\n- Implement processing safety mechanisms\n\nDo NOT use
      this agent for:\n- Basic ML tasks (use senior-ai-engineer)\n- Application development
      (use appropriate developers)\n- Infrastructure (use infrastructure-devops-manager)\n-
      Simple model training (use ML specialists)\n\nThis agent specializes in creating
      and evolving advanced processing intelligence systems.
    capabilities:
    - code_generation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-deep-learning-coordinator-manager
      original_config: configs/deep-learning-coordinator-manager_universal.json
    runtime:
      status: available
    metadata: {}
  container_deployment-automation-master:
    id: container_deployment-automation-master
    name: deployment-automation-master
    type: container
    description: Use this agent when you need to:\n\n- Master the deploy_complete_system.sh
      script and all deployment processes\n- Create bulletproof deployment strategies
      with zero downtime\n- Implement rollback procedures and disaster recovery\n-
      Handle complex multi-environment deployments\n- Design blue-green and canary
      deployment patterns\n- Create deployment health validation checks\n- Implement
      automatic error recovery mechanisms\n- Build deployment monitoring and alerting\n-
      Design deployment pipelines with GitOps\n- Create infrastructure as code deployments\n-
      Implement secret management for deployments\n- Build deployment testing frameworks\n-
      Design deployment approval workflows\n- Create deployment documentation and
      runbooks\n- Implement deployment cost optimization\n- Handle database migrations
      during deployment\n- Create deployment performance benchmarks\n- Design deployment
      security scanning\n- Implement deployment compliance checks\n- Build deployment
      dashboards and metrics\n- Create deployment automation scripts\n- Design multi-region
      deployment strategies\n- Implement deployment dependency management\n- Build
      deployment rollback automation\n- Create deployment state management\n- Design
      deployment notification systems\n- Implement deployment audit logging\n- Build
      deployment troubleshooting guides\n- Create deployment capacity planning\n-
      Design deployment orchestration patterns\n\nDo NOT use this agent for:\n- Code
      development (use code-generation agents)\n- Infrastructure provisioning (use
      infrastructure-devops-manager)\n- Testing code quality (use testing-qa-validator)\n-
      Agent orchestration (use ai-agent-orchestrator)\n\nThis agent specializes in
      creating rock-solid deployment processes that ensure system reliability and
      availability.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-deployment-automation-master
      original_config: configs/deployment-automation-master_universal.json
    runtime:
      status: available
    metadata: {}
  container_dify-automation-specialist:
    id: container_dify-automation-specialist
    name: dify-automation-specialist
    type: container
    description: Use this agent when you need to:\n\n- Build AI-powered automation
      workflows quickly\n- Create conversational AI applications\n- Implement RAG
      systems with   code\n- Design AI agents with integrated tools\n- Build no-code
      AI applications\n- Create knowledge base chatbots\n- Implement document Q&A
      systems\n- Design workflow automations with AI\n- Build customer service AI
      agents\n- Create AI-powered data processing\n- Implement content generation
      workflows\n- Design AI form processors\n- Build intelligent email responders\n-
      Create AI data extraction pipelines\n- Implement smart notification systems\n-
      Design AI-powered search interfaces\n- Build recommendation systems\n- Create
      AI content moderators\n- Implement intelligent routing systems\n- Design AI
      analytics dashboards\n- Build conversational forms\n- Create AI-powered APIs\n-
      Implement batch processing with AI\n- Design multi-tenant AI applications\n-
      Build AI marketplace applications\n\nDo NOT use this agent for:\n- Low-level
      system programming\n- Real-time trading systems\n- High-frequency data processing\n-
      Custom ML model training\n\nThis agent manages Dify's AI application platform,
      enabling rapid development of AI-powered automations and conversational applications.
    capabilities:
    - code_generation
    - automation
    - integration
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-dify-automation-specialist
      original_config: configs/dify-automation-specialist_universal.json
    runtime:
      status: available
    metadata: {}
  container_energy-consumption-optimize:
    id: container_energy-consumption-optimize
    name: energy-consumption-optimize
    type: container
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-energy-consumption-optimize
      original_config: configs/energy-consumption-optimize_universal.json
    runtime:
      status: available
    metadata: {}
  container_experiment-tracker:
    id: container_experiment-tracker
    name: experiment-tracker
    type: container
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-experiment-tracker
      original_config: configs/experiment-tracker_universal.json
    runtime:
      status: available
    metadata: {}
  container_explainability-and-transparency-agent:
    id: container_explainability-and-transparency-agent
    name: explainability-and-transparency-agent
    type: container
    description: Agent for data operations
    capabilities:
    - processing
    - analysis
    - storage
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-explainability-and-transparency-agent
      original_config: configs/explainability-and-transparency-agent_universal.json
    runtime:
      status: available
    metadata: {}
  container_neural-architecture-search:
    id: container_neural-architecture-search
    name: neural-architecture-search
    type: container
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-neural-architecture-search
      original_config: configs/neural-architecture-search_universal.json
    runtime:
      status: available
    metadata: {}
  container_product-manager:
    id: container_product-manager
    name: product-manager
    type: container
    description: Agent for management operations
    capabilities:
    - planning
    - coordination
    - reporting
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-product-manager
      original_config: configs/product-manager_universal.json
    runtime:
      status: available
    metadata: {}
  container_ram-hardware-optimizer:
    id: container_ram-hardware-optimizer
    name: ram-hardware-optimizer
    type: container
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-ram-hardware-optimizer
      original_config: configs/ram-hardware-optimizer_universal.json
    runtime:
      status: available
    metadata: {}
  container_resource-visualiser:
    id: container_resource-visualiser
    name: resource-visualiser
    type: container
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-resource-visualiser
      original_config: configs/resource-visualiser_universal.json
    runtime:
      status: available
    metadata: {}
  container_secrets-vault-manager-vault:
    id: container_secrets-vault-manager-vault
    name: secrets-vault-manager-vault
    type: container
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-secrets-vault-manager-vault
      original_config: configs/secrets-vault-manager-vault_universal.json
    runtime:
      status: available
    metadata: {}
  container_senior-ai-engineer:
    id: container_senior-ai-engineer
    name: senior-ai-engineer
    type: container
    description: Use this agent when you need to:\n\n- Design and implement AI/ML
      architectures\n- Build RAG (Retrieval Augmented Generation) systems\n- Integrate
      various LLMs and AI models\n- Create processing network architectures\n- Implement
      machine learning pipelines\n- Build model training and evaluation systems\n-
      Design automation system components\n- Create embeddings and vector databases\n-
      Implement semantic search systems\n- Build multi-modal AI systems\n- Design
      reinforcement learning environments\n- Create AI model serving infrastructure\n-
      Implement transfer learning strategies\n- Build AI explainability systems\n-
      Design federated learning architectures\n- Create AI model versioning systems\n-
      Implement online learning capabilities\n- Build AI performance benchmarks\n-
      Design AI safety mechanisms\n- Create custom AI training loops\n- Implement
      AI model compression\n- Build AI debugging and visualization\n- Design AI data
      preprocessing pipelines\n- Create AI model deployment strategies\n- Implement
      AI monitoring systems\n- Build AI cost optimization solutions\n- Design AI experimentation
      platforms\n- Create AI model registries\n- Implement AI governance frameworks\n-
      Build AI collaboration tools\n\nDo NOT use this agent for:\n- Frontend development
      (use senior-frontend-developer)\n- Backend API development (use senior-backend-developer)\n-
      Infrastructure (use infrastructure-devops-manager)\n- Basic data analysis (use
      data analysts)\n\nThis agent specializes in cutting-edge AI/ML engineering and
      automation system development.
    capabilities:
    - code_generation
    - deployment
    - monitoring
    - automation
    - integration
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-senior-ai-engineer
      original_config: configs/senior-ai-engineer_universal.json
    runtime:
      status: available
    metadata: {}
  container_senior-engineer:
    id: container_senior-engineer
    name: senior-engineer
    type: container
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-senior-engineer
      original_config: configs/senior-engineer_universal.json
    runtime:
      status: available
    metadata: {}
  container_senior-frontend-developer:
    id: container_senior-frontend-developer
    name: senior-frontend-developer
    type: container
    description: Use this agent when you need to:\n\n- Build modern web interfaces
      with React, Vue, or Angular\n- Create responsive Streamlit applications\n- Implement
      real-time data visualization dashboards\n- Design user-friendly AI chat interfaces\n-
      Build interactive data exploration tools\n- Create Progressive Web Applications
      (PWAs)\n- Implement state management solutions\n- Build component libraries
      and design systems\n- Create accessible web interfaces (WCAG compliance)\n-
      Implement WebSocket real-time features\n- Build data visualization with D3.js
      or Chart.js\n- Design mobile-responsive layouts\n- Create micro-frontend architectures\n-
      Implement frontend performance optimization\n- Build SEO-friendly applications\n-
      Create frontend testing strategies\n- Implement internationalization (i18n)\n-
      Build offline-capable applications\n- Design frontend security best practices\n-
      Create animated user interfaces\n- Implement lazy loading and code splitting\n-
      Build frontend monitoring and analytics\n- Design cross-browser compatibility\n-
      Create frontend build optimization\n- Implement frontend caching strategies\n-
      Build WebAssembly integrations\n- Design frontend error handling\n- Create frontend
      documentation\n- Implement A/B testing frameworks\n- Build frontend CI/CD pipelines\n\nDo
      NOT use this agent for:\n- Backend development (use senior-backend-developer)\n-
      Database design (use appropriate backend agents)\n- Infrastructure (use infrastructure-devops-manager)\n-
      AI/ML implementation (use senior-ai-engineer)\n\nThis agent specializes in creating
      beautiful, performant, and user-friendly web interfaces.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - monitoring
    - automation
    - integration
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-senior-frontend-developer
      original_config: configs/senior-frontend-developer_universal.json
    runtime:
      status: available
    metadata: {}
  container_ultra-system-architect:
    id: container_ultra-system-architect
    name: ultra-system-architect
    type: container
    description: 'Ultra System Architect - The supreme coordinator for 500-agent deployments\n\nUse
      this agent when you need to:\n\n- Coordinate overall system architecture for
      500+ agent deployments\n- Perform ULTRATHINK multi-dimensional analysis across
      10 dimensions\n- Execute ULTRADEEPCODEBASESEARCH with quantum-level pattern
      recognition\n- Make critical architectural decisions with comprehensive impact
      analysis\n- Coordinate with 5 lead architects (System, Performance, Security,
      Data, Infrastructure)\n- Analyze system-wide implications of architectural changes\n-
      Perform deep codebase analysis with pattern correlation\n- Optimize resource
      allocation across hundreds of agents\n- Design and validate architectural blueprints\n-
      Implement architectural governance and compliance\n- Create system-wide optimization
      strategies\n- Manage architectural decision records (ADRs)\n- Perform multi-dimensional
      health assessments\n- Discover and correlate system patterns\n- Generate architectural
      insights and recommendations\n- Coordinate massive agent deployments in waves\n-
      Implement self-healing and auto-scaling architectures\n- Design fault-tolerant
      distributed systems\n- Create architectural roadmaps and evolution plans\n-
      Perform predictive analysis for system evolution\n\nCapabilities:\n- ULTRATHINK:
      Analyzes across Performance, Scalability, Reliability, Security, Cost, Maintainability,
      Compliance, Integration, Evolution, and Impact dimensions\n- ULTRADEEPCODEBASESEARCH:
      Quantum-depth codebase scanning with pattern recognition and correlation\n-
      Lead Architect Coordination: Manages 5 specialized lead architects\n- 500-Agent
      Orchestration: Coordinates massive agent deployments\n- Real-time Impact Analysis:
      Assesses system-wide implications\n- Pattern Discovery: Identifies and correlates
      system patterns\n- Decision Intelligence: Makes informed architectural decisions\n\nDo
      NOT use this agent for:\n- Simple single-agent tasks (use specific specialist
      agents)\n- Basic code implementation (use code generation agents)\n- Routine
      deployments (use deployment-automation-master)\n- Standard testing (use testing-qa-validator)\n\nThis
      agent is the supreme architectural authority, designed for ultra-scale coordination
      and multi-dimensional system analysis.'
    capabilities:
    - architecture
    - multi_dimensional_analysis
    - codebase_search
    - pattern_recognition
    - decision_making
    - orchestration
    - optimization
    - monitoring
    - coordination
    - analysis
    - documentation
    priority: 5
    deployment:
      method: docker
      config_path: null
      container_name: sutazai-ultra-system-architect
      original_config: configs/ultra-system-architect_universal.json
    runtime:
      status: available
    metadata: {}
  context-framework:
    id: context-framework
    name: context-framework
    type: utility
    description: 'AI agent: context-framework'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/context-framework
    runtime:
      status: healthy
      port: 9039
      endpoint: http://localhost:9039
      process_id: 2451968
      start_time: '2025-08-04T11:19:03.509313'
      last_check: '2025-08-04T11:19:27.635501'
  context-optimization-engineer:
    id: context-optimization-engineer
    name: context-optimization-engineer
    type: standard
    description: Use this agent when you need to:\n\n- Optimize LLM context window
      usage\n- Implement efficient prompt engineering strategies\n- Create token usage
      reduction techniques\n- Design context compression algorithms\n- Build prompt
      caching systems\n- Implement semantic chunking strategies\n- Create context-aware
      summarization\n- Design memory management for LLMs\n- Build conversation history
      optimization\n- Implement relevance filtering\n- Create dynamic context selection\n-
      Design prompt template systems\n- Build token counting utilities\n- Implement
      context overflow handling\n- Create prompt optimization frameworks\n- Design
      few-shot learning strategies\n- Build prompt versioning systems\n- Implement
      context prioritization\n- Create prompt testing frameworks\n- Design context
      budget management\n- Build prompt reuse strategies\n- Implement context splitting
      techniques\n- Create prompt performance analysis\n- Design multi-turn optimization\n-
      Build context prefetching systems\n- Implement prompt debugging tools\n- Create
      context monitoring dashboards\n- Design prompt cost optimization\n- Build context
      quality metrics\n- Implement prompt security measures\n\nDo NOT use this agent
      for:\n- General AI development (use senior-ai-engineer)\n- Model training (use
      appropriate ML agents)\n- Infrastructure (use infrastructure-devops-manager)\n-
      Frontend development (use senior-frontend-developer)\n\nThis agent specializes
      in maximizing efficiency and effectiveness of LLM context usage.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - monitoring
    - optimization
    config_path: configs/context-optimization-engineer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  cpu-only-hardware-optimizer:
    id: cpu-only-hardware-optimizer
    name: cpu-only-hardware-optimizer
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/cpu-only-hardware-optimizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  crewai:
    id: crewai
    name: crewai
    type: utility
    description: 'AI agent: crewai'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/crewai
    runtime:
      status: healthy
      port: 9026
      endpoint: http://localhost:9026
      process_id: 2451772
      start_time: '2025-08-04T11:19:01.459676'
      last_check: '2025-08-04T11:19:27.635481'
  data-analysis-engineer:
    id: data-analysis-engineer
    name: data-analysis-engineer
    type: utility
    description: 'AI agent: data-analysis-engineer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/data-analysis-engineer
    runtime:
      status: healthy
      port: 9028
      endpoint: http://localhost:9028
      process_id: 2451774
      start_time: '2025-08-04T11:19:01.476836'
      last_check: '2025-08-04T11:19:27.635484'
  data-drift-detector:
    id: data-drift-detector
    name: data-drift-detector
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/data-drift-detector_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  data-lifecycle-manager:
    id: data-lifecycle-manager
    name: data-lifecycle-manager
    type: standard
    description: Agent for data operations
    capabilities:
    - processing
    - analysis
    - storage
    config_path: configs/data-lifecycle-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  data-pipeline-engineer:
    id: data-pipeline-engineer
    name: data-pipeline-engineer
    type: utility
    description: 'AI agent: data-pipeline-engineer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/data-pipeline-engineer
    runtime:
      status: healthy
      port: 9119
      endpoint: http://localhost:9119
      process_id: 2453087
      start_time: '2025-08-04T11:19:19.616533'
      last_check: '2025-08-04T11:19:27.635604'
  data-version-controller-dvc:
    id: data-version-controller-dvc
    name: data-version-controller-dvc
    type: standard
    description: Agent for data operations
    capabilities:
    - processing
    - analysis
    - storage
    config_path: configs/data-version-controller-dvc_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deep-learning-brain-architect:
    id: deep-learning-brain-architect
    name: deep-learning-brain-architect
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/deep-learning-brain-architect_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deep-learning-brain-manager:
    id: deep-learning-brain-manager
    name: deep-learning-brain-manager
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/deep-learning-brain-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deep-learning-coordinator-manager:
    id: deep-learning-coordinator-manager
    name: deep-learning-coordinator-manager
    type: standard
    description: Use this agent when you need to:\n\n- Design and evolve processing
      intelligence cores\n- Implement continuous learning systems\n- Create meta-learning
      architectures\n- Build self-improving processing networks\n- Design cognitive
      architecture patterns\n- Implement memory consolidation systems\n- Create attention
      mechanism designs\n- Build processing plasticity simulations\n- Design hierarchical
      learning systems\n- Implement transfer learning networks\n- Create processing
      architecture search\n- Build coordinator-inspired computing systems\n- Design
      synaptic weight optimization\n- Implement processing pruning strategies\n- Create
      cognitive load balancing\n- Build processing synchronization systems\n- Design
      emergent behavior patterns\n- Implement processing network evolution\n- Create
      system_state modeling attempts\n- Build processing knowledge graphs\n- Design
      processing reasoning systems\n- Implement processing memory systems\n- Create
      processing pattern recognition\n- Build processing prediction engines\n- Design
      processing feedback loops\n- Implement processing homeostasis\n- Create processing
      debugging tools\n- Build processing visualization systems\n- Design processing
      performance metrics\n- Implement processing safety mechanisms\n\nDo NOT use
      this agent for:\n- Basic ML tasks (use senior-ai-engineer)\n- Application development
      (use appropriate developers)\n- Infrastructure (use infrastructure-devops-manager)\n-
      Simple model training (use ML specialists)\n\nThis agent specializes in creating
      and evolving advanced processing intelligence systems.
    capabilities:
    - code_generation
    config_path: configs/deep-learning-coordinator-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deep-local-brain-builder:
    id: deep-local-brain-builder
    name: deep-local-brain-builder
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/deep-local-brain-builder_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deploy-automation-master:
    id: deploy-automation-master
    name: deploy-automation-master
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/deploy-automation-master_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  deployment-automation-master:
    id: deployment-automation-master
    name: deployment-automation-master
    type: standard
    description: Use this agent when you need to:\n\n- Master the deploy_complete_system.sh
      script and all deployment processes\n- Create bulletproof deployment strategies
      with zero downtime\n- Implement rollback procedures and disaster recovery\n-
      Handle complex multi-environment deployments\n- Design blue-green and canary
      deployment patterns\n- Create deployment health validation checks\n- Implement
      automatic error recovery mechanisms\n- Build deployment monitoring and alerting\n-
      Design deployment pipelines with GitOps\n- Create infrastructure as code deployments\n-
      Implement secret management for deployments\n- Build deployment testing frameworks\n-
      Design deployment approval workflows\n- Create deployment documentation and
      runbooks\n- Implement deployment cost optimization\n- Handle database migrations
      during deployment\n- Create deployment performance benchmarks\n- Design deployment
      security scanning\n- Implement deployment compliance checks\n- Build deployment
      dashboards and metrics\n- Create deployment automation scripts\n- Design multi-region
      deployment strategies\n- Implement deployment dependency management\n- Build
      deployment rollback automation\n- Create deployment state management\n- Design
      deployment notification systems\n- Implement deployment audit logging\n- Build
      deployment troubleshooting guides\n- Create deployment capacity planning\n-
      Design deployment orchestration patterns\n\nDo NOT use this agent for:\n- Code
      development (use code-generation agents)\n- Infrastructure provisioning (use
      infrastructure-devops-manager)\n- Testing code quality (use testing-qa-validator)\n-
      Agent orchestration (use ai-agent-orchestrator)\n\nThis agent specializes in
      creating rock-solid deployment processes that ensure system reliability and
      availability.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - documentation
    config_path: configs/deployment-automation-master_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  devika:
    id: devika
    name: devika
    type: utility
    description: 'AI agent: devika'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/devika
    runtime:
      status: healthy
      port: 9051
      endpoint: http://localhost:9051
      process_id: 2452333
      start_time: '2025-08-04T11:19:07.524672'
      last_check: '2025-08-04T11:19:27.635518'
  dify-automation-specialist:
    id: dify-automation-specialist
    name: dify-automation-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Build AI-powered automation
      workflows quickly\n- Create conversational AI applications\n- Implement RAG
      systems with   code\n- Design AI agents with integrated tools\n- Build no-code
      AI applications\n- Create knowledge base chatbots\n- Implement document Q&A
      systems\n- Design workflow automations with AI\n- Build customer service AI
      agents\n- Create AI-powered data processing\n- Implement content generation
      workflows\n- Design AI form processors\n- Build intelligent email responders\n-
      Create AI data extraction pipelines\n- Implement smart notification systems\n-
      Design AI-powered search interfaces\n- Build recommendation systems\n- Create
      AI content moderators\n- Implement intelligent routing systems\n- Design AI
      analytics dashboards\n- Build conversational forms\n- Create AI-powered APIs\n-
      Implement batch processing with AI\n- Design multi-tenant AI applications\n-
      Build AI marketplace applications\n\nDo NOT use this agent for:\n- Low-level
      system programming\n- Real-time trading systems\n- High-frequency data processing\n-
      Custom ML model training\n\nThis agent manages Dify's AI application platform,
      enabling rapid development of AI-powered automations and conversational applications.
    capabilities:
    - code_generation
    - automation
    - integration
    - documentation
    config_path: configs/dify-automation-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9068
      endpoint: http://localhost:9068
      process_id: 2452587
      start_time: '2025-08-04T11:19:09.553388'
      last_check: '2025-08-04T11:19:27.635543'
    metadata: {}
  distributed-computing-architect:
    id: distributed-computing-architect
    name: distributed-computing-architect
    type: utility
    description: 'AI agent: distributed-computing-architect'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/distributed-computing-architect
    runtime:
      status: healthy
      port: 9000
      endpoint: http://localhost:9000
      process_id: 2451331
      start_time: '2025-08-04T11:18:57.401195'
      last_check: '2025-08-04T11:19:27.635422'
  distributed-tracing-analyzer-jaeger:
    id: distributed-tracing-analyzer-jaeger
    name: distributed-tracing-analyzer-jaeger
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/distributed-tracing-analyzer-jaeger_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  document-knowledge-manager:
    id: document-knowledge-manager
    name: document-knowledge-manager
    type: standard
    description: Use this agent when you need to:\n\n- Create and manage comprehensive
      documentation systems\n- Build knowledge bases with intelligent search\n- Implement
      RAG (Retrieval Augmented Generation) systems\n- Design document indexing and
      categorization\n- Create semantic search capabilities\n- Implement document
      versioning systems\n- Build knowledge graphs from documents\n- Design FAQ generation
      systems\n- Create documentation automation workflows\n- Implement context-aware
      retrieval\n- Build multi-language documentation\n- Design documentation quality
      metrics\n- Create interactive documentation portals\n- Implement document summarization\n-
      Build knowledge extraction pipelines\n- Design documentation templates\n- Create
      API documentation generators\n- Implement code documentation tools\n- Build
      user guide generation systems\n- Design knowledge sharing platforms\n- Create
      documentation search optimization\n- Implement document analytics\n- Build documentation
      feedback systems\n- Design knowledge retention strategies\n- Create documentation
      migration tools\n- Implement compliance documentation\n- Build technical writing
      guidelines\n- Design documentation review processes\n- Create knowledge base
      maintenance\n- Implement documentation accessibility\n\nDo NOT use this agent
      for:\n- Code implementation (use code generation agents)\n- System deployment
      (use deployment-automation-master)\n- Infrastructure management (use infrastructure-devops-manager)\n-
      Testing (use testing-qa-validator)\n\nThis agent specializes in creating intelligent
      documentation and knowledge management systems.
    capabilities:
    - code_generation
    - testing
    - deployment
    - automation
    - documentation
    config_path: configs/document-knowledge-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9128
      endpoint: http://localhost:9128
      process_id: 2453204
      start_time: '2025-08-04T11:19:21.625567'
      last_check: '2025-08-04T11:19:27.635617'
    metadata: {}
  edge-computing-optimizer:
    id: edge-computing-optimizer
    name: edge-computing-optimizer
    type: utility
    description: 'AI agent: edge-computing-optimizer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/edge-computing-optimizer
    runtime:
      status: healthy
      port: 9133
      endpoint: http://localhost:9133
      process_id: 2453277
      start_time: '2025-08-04T11:19:23.631671'
      last_check: '2025-08-04T11:19:27.635624'
  edge-inference-proxy:
    id: edge-inference-proxy
    name: edge-inference-proxy
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/edge-inference-proxy_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  emergency-shutdown-coordinator:
    id: emergency-shutdown-coordinator
    name: emergency-shutdown-coordinator
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/emergency-shutdown-coordinator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  energy-consumption-optimize:
    id: energy-consumption-optimize
    name: energy-consumption-optimize
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/energy-consumption-optimize_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  episodic-memory-engineer:
    id: episodic-memory-engineer
    name: episodic-memory-engineer
    type: utility
    description: 'AI agent: episodic-memory-engineer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/episodic-memory-engineer
    runtime:
      status: healthy
      port: 9056
      endpoint: http://localhost:9056
      process_id: 2452338
      start_time: '2025-08-04T11:19:07.527505'
      last_check: '2025-08-04T11:19:27.635526'
  ethical-governor:
    id: ethical-governor
    name: ethical-governor
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/ethical-governor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  evolution-strategy-trainer:
    id: evolution-strategy-trainer
    name: evolution-strategy-trainer
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/evolution-strategy-trainer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  experiment-tracker:
    id: experiment-tracker
    name: experiment-tracker
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/experiment-tracker_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  explainability-and-transparency-agent:
    id: explainability-and-transparency-agent
    name: explainability-and-transparency-agent
    type: standard
    description: Agent for data operations
    capabilities:
    - processing
    - analysis
    - storage
    config_path: configs/explainability-and-transparency-agent_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  explainable-ai-specialist:
    id: explainable-ai-specialist
    name: explainable-ai-specialist
    type: sonnet
    description: 'AI agent: explainable-ai-specialist'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/explainable-ai-specialist
    runtime:
      status: healthy
      port: 9089
      endpoint: http://localhost:9089
      process_id: 2452788
      start_time: '2025-08-04T11:19:13.580612'
      last_check: '2025-08-04T11:19:27.635566'
  federated-learning-coordinator:
    id: federated-learning-coordinator
    name: federated-learning-coordinator
    type: utility
    description: 'AI agent: federated-learning-coordinator'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/federated-learning-coordinator
    runtime:
      status: healthy
      port: 9127
      endpoint: http://localhost:9127
      process_id: 2453203
      start_time: '2025-08-04T11:19:21.624469'
      last_check: '2025-08-04T11:19:27.635615'
  financial-analysis-specialist:
    id: financial-analysis-specialist
    name: financial-analysis-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Implement financial data analysis
      systems\n- Create trading algorithms and strategies\n- Build risk management
      frameworks\n- Design portfolio optimization systems\n- Implement market prediction
      models\n- Create financial reporting automation\n- Build real-time market data
      processing\n- Design backtesting frameworks\n- Implement quantitative analysis
      tools\n- Create financial dashboard systems\n- Build regulatory compliance monitoring\n-
      Design fraud detection algorithms\n- Implement financial forecasting models\n-
      Create automated trading systems\n- Build financial data visualization\n- Design
      credit risk assessment\n- Implement financial API integrations\n- Create financial
      news sentiment analysis\n- Build cryptocurrency analysis tools\n- Design financial
      anomaly detection\n- Implement financial data warehousing\n- Create financial
      KPI tracking\n- Build investment analysis tools\n- Design financial simulation
      systems\n- Implement FinTech solutions\n- Create financial data validation\n-
      Build financial audit trails\n- Design financial alert systems\n- Implement
      financial data security\n- Create financial machine learning models\n\nDo NOT
      use this agent for:\n- General data analysis (use data analysis agents)\n- Non-financial
      systems (use appropriate domain agents)\n- Infrastructure tasks (use infrastructure-devops-manager)\n-
      UI development (use senior-frontend-developer)\n\nThis agent specializes in
      financial analysis, trading strategies, and FinTech solutions using advanced
      AI.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - monitoring
    - automation
    - analysis
    config_path: configs/financial-analysis-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  finrobot:
    id: finrobot
    name: finrobot
    type: utility
    description: 'AI agent: finrobot'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/finrobot
    runtime:
      status: healthy
      port: 9136
      endpoint: http://localhost:9136
      process_id: 2453281
      start_time: '2025-08-04T11:19:23.631802'
      last_check: '2025-08-04T11:19:27.635629'
  flowiseai-flow-manager:
    id: flowiseai-flow-manager
    name: flowiseai-flow-manager
    type: standard
    description: Use this agent when you need to:\n\n- Create visual LangChain applications\n-
      Build chatbots with complex logic\n- Design RAG systems using drag-and-drop\n-
      Implement conversation flows visually\n- Create LangChain workflows without
      code\n- Build document processing pipelines\n- Design multi-model chat systems\n-
      Implement memory-enabled chatbots\n- Create API endpoints from flows\n- Build
      agent chains visually\n- Design prompt engineering workflows\n- Implement vector
      search systems\n- Create document loaders visually\n- Build conversation summarizers\n-
      Design QA systems over documents\n- Implement tool-using agents\n- Create workflow
      debugging interfaces\n- Build visual chain monitoring\n- Design conversation
      analytics\n- Implement visual prompt testing\n- Create flow version control\n-
      Build team collaboration workflows\n- Design visual LLM routers\n- Implement
      cost optimization flows\n- Create visual embedding pipelines\n\nDo NOT use this
      agent for:\n- Non-LangChain implementations\n- Real-time streaming applications\n-
      Low-level performance optimization\n- Custom model training\n\nThis agent manages
      FlowiseAI's visual LangChain builder, enabling rapid development of sophisticated
      LLM applications through intuitive interfaces.
    capabilities:
    - code_generation
    - testing
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/flowiseai-flow-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9020
      endpoint: http://localhost:9020
      process_id: 2451766
      start_time: '2025-08-04T11:19:01.437108'
      last_check: '2025-08-04T11:19:27.635477'
    metadata: {}
  fsdp:
    id: fsdp
    name: fsdp
    type: utility
    description: 'AI agent: fsdp'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/fsdp
    runtime:
      status: healthy
      port: 9093
      endpoint: http://localhost:9093
      process_id: 2452858
      start_time: '2025-08-04T11:19:15.586562'
      last_check: '2025-08-04T11:19:27.635573'
  garbage-collector:
    id: garbage-collector
    name: garbage-collector
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/garbage-collector_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  garbage-collector-coordinator:
    id: garbage-collector-coordinator
    name: garbage-collector-coordinator
    type: utility
    description: 'AI agent: garbage-collector-coordinator'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/garbage-collector-coordinator
    runtime:
      status: healthy
      port: 9092
      endpoint: http://localhost:9092
      process_id: 2452857
      start_time: '2025-08-04T11:19:15.586529'
      last_check: '2025-08-04T11:19:27.635571'
  general-assistant:
    id: general-assistant
    name: General AI Assistant
    type: general
    description: ''
    capabilities:
    - conversation
    - analysis
    - planning
    deployment:
      method: ollama
      config:
        model: tinyllama:latest
        system_prompt: You are a helpful AI assistant capable of handling general
          tasks.
    runtime:
      status: available
    metadata:
      category: essential
  genetic-algorithm-tuner:
    id: genetic-algorithm-tuner
    name: genetic-algorithm-tuner
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/genetic-algorithm-tuner_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  goal-setting-and-planning-agent:
    id: goal-setting-and-planning-agent
    name: goal-setting-and-planning-agent
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/goal-setting-and-planning-agent_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  gpt-engineer:
    id: gpt-engineer
    name: gpt-engineer
    type: utility
    description: 'AI agent: gpt-engineer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/gpt-engineer
    runtime:
      status: healthy
      port: 9042
      endpoint: http://localhost:9042
      process_id: 2452125
      start_time: '2025-08-04T11:19:05.512859'
      last_check: '2025-08-04T11:19:27.635509'
  gpu-hardware-optimizer:
    id: gpu-hardware-optimizer
    name: gpu-hardware-optimizer
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/gpu-hardware-optimizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  gradient-compression-specialist:
    id: gradient-compression-specialist
    name: gradient-compression-specialist
    type: utility
    description: 'AI agent: gradient-compression-specialist'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/gradient-compression-specialist
    runtime:
      status: healthy
      port: 9132
      endpoint: http://localhost:9132
      process_id: 2453276
      start_time: '2025-08-04T11:19:23.631656'
      last_check: '2025-08-04T11:19:27.635622'
  hardware-resource-optimizer:
    id: hardware-resource-optimizer
    name: hardware-resource-optimizer
    type: standard
    description: Use this agent when you need to:\n\n- Optimize system performance
      within hardware constraints\n- Monitor and manage CPU, GPU, and memory usage\n-
      Implement resource allocation strategies\n- Create performance profiling systems\n-
      Build resource usage predictions\n- Design capacity planning solutions\n- Implement
      resource pooling mechanisms\n- Create hardware scaling strategies\n- Build performance
      bottleneck detection\n- Design resource scheduling algorithms\n- Implement memory
      optimization techniques\n- Create GPU utilization strategies\n- Build disk I/O
      optimization\n- Design network bandwidth management\n- Implement container resource
      limits\n- Create performance benchmarking tools\n- Build resource monitoring
      dashboards\n- Design auto-scaling policies\n- Implement resource reservation
      systems\n- Create hardware failure prediction\n- Build performance regression
      detection\n- Design resource cost optimization\n- Implement workload distribution\n-
      Create hardware upgrade recommendations\n- Build resource usage analytics\n-
      Design performance SLA monitoring\n- Implement resource cleanup automation\n-
      Create hardware inventory management\n- Build performance testing frameworks\n-
      Design resource migration strategies\n\nDo NOT use this agent for:\n- Software
      development (use appropriate development agents)\n- System deployment (use deployment-automation-master)\n-
      General infrastructure (use infrastructure-devops-manager)\n- Application optimization
      (use code-generation-improver)\n\nThis agent specializes in maximizing system
      performance within available hardware resources.
    capabilities:
    - code_generation
    - testing
    - deployment
    - monitoring
    - optimization
    config_path: configs/hardware-resource-optimizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9104
      endpoint: http://localhost:9104
      process_id: 2452947
      start_time: '2025-08-04T11:19:17.598386'
      last_check: '2025-08-04T11:19:27.635584'
    metadata: {}
  health-monitor:
    id: health-monitor
    name: health-monitor
    type: utility
    description: 'AI agent: health-monitor'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/health-monitor
    runtime:
      status: healthy
      port: 9006
      endpoint: http://localhost:9006
      process_id: 2451337
      start_time: '2025-08-04T11:18:57.407170'
      last_check: '2025-08-04T11:19:27.635455'
  honeypot-deployment-agent:
    id: honeypot-deployment-agent
    name: honeypot-deployment-agent
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/honeypot-deployment-agent_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  human-oversight-interface-agent:
    id: human-oversight-interface-agent
    name: human-oversight-interface-agent
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/human-oversight-interface-agent_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  hygiene_ai-agent-router:
    id: hygiene_ai-agent-router
    name: AI Agent Router
    type: hygiene
    description: Routes tasks to correct specialized agents
    capabilities:
    - rule_enforcement
    enforces_rules:
    - correct_ai_agent
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 15
          max_memory_mb: 256
          timeout_seconds: 180
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_comprehensive-analysis-agent:
    id: hygiene_comprehensive-analysis-agent
    name: Comprehensive Analysis Agent
    type: hygiene
    description: Performs thorough codebase analysis
    capabilities:
    - rule_enforcement
    enforces_rules:
    - analyze_everything
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 50
          max_memory_mb: 2048
          timeout_seconds: 1200
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_conceptual-elements-validator:
    id: hygiene_conceptual-elements-validator
    name: conceptual Elements Validator
    type: hygiene
    description: Validates code contains no conceptual or placeholder elements
    capabilities:
    - rule_enforcement
    enforces_rules:
    - no_fantasy_elements
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 20
          max_memory_mb: 512
          timeout_seconds: 300
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_deployment-script-enforcer:
    id: hygiene_deployment-script-enforcer
    name: Deployment Script Enforcer
    type: hygiene
    description: Ensures single canonical deployment script
    capabilities:
    - rule_enforcement
    enforces_rules:
    - single_deployment_script
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 30
          max_memory_mb: 768
          timeout_seconds: 600
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_docker-structure-validator:
    id: hygiene_docker-structure-validator
    name: Docker Structure Validator
    type: hygiene
    description: Maintains clean Docker structure
    capabilities:
    - rule_enforcement
    enforces_rules:
    - clean_docker_structure
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 20
          max_memory_mb: 512
          timeout_seconds: 300
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_documentation-structure-enforcer:
    id: hygiene_documentation-structure-enforcer
    name: Documentation Structure Enforcer
    type: hygiene
    description: Maintains centralized documentation structure
    capabilities:
    - rule_enforcement
    enforces_rules:
    - centralized_documentation
    - clean_documentation
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 15
          max_memory_mb: 256
          timeout_seconds: 300
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_functionality-preservation-validator:
    id: hygiene_functionality-preservation-validator
    name: Functionality Preservation Validator
    type: hygiene
    description: Ensures no existing functionality is broken
    capabilities:
    - rule_enforcement
    enforces_rules:
    - no_breaking_changes
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 30
          max_memory_mb: 1024
          timeout_seconds: 600
        enabled: true
        dependencies:
        - comprehensive-analysis-agent
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_garbage-collection-enforcer:
    id: hygiene_garbage-collection-enforcer
    name: Garbage Collection Enforcer
    type: hygiene
    description: Removes junk and abandoned code
    capabilities:
    - rule_enforcement
    enforces_rules:
    - no_garbage_no_rot
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 25
          max_memory_mb: 512
          timeout_seconds: 450
        enabled: true
        dependencies:
        - safe-cleanup-validator
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_ollama-enforcement-agent:
    id: hygiene_ollama-enforcement-agent
    name: Ollama Enforcement Agent
    type: hygiene
    description: Ensures local LLMs use Ollama framework
    capabilities:
    - rule_enforcement
    enforces_rules:
    - local_llm_ollama
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 10
          max_memory_mb: 128
          timeout_seconds: 120
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_professional-standards-validator:
    id: hygiene_professional-standards-validator
    name: Professional Standards Validator
    type: hygiene
    description: Ensures professional project standards
    capabilities:
    - rule_enforcement
    enforces_rules:
    - professional_project
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 25
          max_memory_mb: 768
          timeout_seconds: 450
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_safe-cleanup-validator:
    id: hygiene_safe-cleanup-validator
    name: Safe Cleanup Validator
    type: hygiene
    description: Ensures functionality-first cleanup
    capabilities:
    - rule_enforcement
    enforces_rules:
    - functionality_first_cleanup
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 35
          max_memory_mb: 1024
          timeout_seconds: 900
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_script-consolidation-enforcer:
    id: hygiene_script-consolidation-enforcer
    name: Script Consolidation Enforcer
    type: hygiene
    description: Eliminates script chaos and enforces organization
    capabilities:
    - rule_enforcement
    enforces_rules:
    - eliminate_script_chaos
    - python_script_sanity
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 30
          max_memory_mb: 768
          timeout_seconds: 600
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_script-reuse-enforcer:
    id: hygiene_script-reuse-enforcer
    name: Script Reuse Enforcer
    type: hygiene
    description: Ensures existing scripts are reused before creating new ones
    capabilities:
    - rule_enforcement
    enforces_rules:
    - reuse_before_creating
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 20
          max_memory_mb: 512
          timeout_seconds: 300
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  hygiene_version-control-enforcer:
    id: hygiene_version-control-enforcer
    name: Version Control Enforcer
    type: hygiene
    description: Prevents backend/frontend duplication
    capabilities:
    - rule_enforcement
    enforces_rules:
    - no_version_duplication
    deployment:
      method: internal
      config:
        resource_limits:
          max_cpu_percent: 25
          max_memory_mb: 512
          timeout_seconds: 450
        enabled: true
        dependencies: []
    runtime:
      status: enabled
    metadata:
      category: hygiene
  infrastructure-devops:
    id: infrastructure-devops
    name: infrastructure-devops
    type: utility
    description: 'AI agent: infrastructure-devops'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/infrastructure-devops
    runtime:
      status: healthy
      port: 9047
      endpoint: http://localhost:9047
      process_id: 2452130
      start_time: '2025-08-04T11:19:05.516974'
      last_check: '2025-08-04T11:19:27.635512'
  infrastructure-devops-manager:
    id: infrastructure-devops-manager
    name: infrastructure-devops-manager
    type: standard
    description: Use this agent when you need to:\n\n- Deploy, start, stop, or restart
      Docker containers or services\n- Fix broken or unhealthy containers (health
      check failures, startup issues)\n- Troubleshoot container networking, port conflicts,
      or inter-service communication\n- Modify docker-compose.yml files or Docker
      configurations\n- Run or modify deployment scripts (deploy_complete_system.sh,
      start_all.sh)\n- Configure container resource limits, volumes, or environment
      variables\n- Set up or fix monitoring, logging, or alerting infrastructure\n-
      Implement health checks, restart policies, or auto-recovery mechanisms\n- Debug
      container logs or diagnose service failures\n- Configure GPU access for AI workloads
      (Ollama, ML frameworks)\n- Optimize Docker images or container performance\n-
      Set up backup, recovery, or disaster recovery procedures\n- Implement CI/CD
      pipelines or automated deployment workflows\n- Manage secrets, environment files,
      or configuration management\n- Configure Prometheus, Grafana, Loki, or other
      monitoring tools\n- Handle port management and service discovery\n- Create or
      modify shell scripts for automation\n- Consolidate or organize infrastructure
      files (multiple docker-compose versions)\n- Implement security hardening for
      containers\n- Set up load balancing or scaling strategies\n- Manage database
      migrations or initialization scripts\n- Configure container networking policies
      or firewalls\n- Implement blue-green or rolling deployments\n- Create infrastructure
      documentation or runbooks\n\nDo NOT use this agent for:\n- Writing application
      code (Python, JavaScript)\n- Designing system architecture (use agi-system-architect)\n-
      Configuring AI models or agents (use ai-agent-orchestrator)\n- UI/UX changes
      (use a frontend specialist)\n- Writing unit tests or integration tests (use
      testing-qa-validator)\n\nThis agent focuses exclusively on infrastructure, deployment,
      and operational concerns. It ensures the platform runs reliably and efficiently.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - optimization
    - automation
    - documentation
    config_path: configs/infrastructure-devops-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  intelligence-optimization-monitor:
    id: intelligence-optimization-monitor
    name: intelligence-optimization-monitor
    type: utility
    description: 'AI agent: intelligence-optimization-monitor'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/intelligence-optimization-monitor
    runtime:
      status: healthy
      port: 9114
      endpoint: http://localhost:9114
      process_id: 2453082
      start_time: '2025-08-04T11:19:19.607851'
      last_check: '2025-08-04T11:19:27.635599'
  jarvis-voice-interface:
    id: jarvis-voice-interface
    name: jarvis-voice-interface
    type: standard
    description: Use this agent when you need to:\n\n- Create voice-controlled AI
      assistants\n- Implement speech recognition systems\n- Build text-to-speech capabilities\n-
      Design natural language voice interfaces\n- Create voice command processing\n-
      Implement wake word detection\n- Build conversational voice AI\n- Design multi-language
      voice support\n- Create voice biometric authentication\n- Implement noise cancellation
      systems\n- Build voice activity detection\n- Design voice emotion recognition\n-
      Create voice synthesis customization\n- Implement real-time voice translation\n-
      Build voice-based navigation\n- Design voice accessibility features\n- Create
      voice interaction analytics\n- Implement voice privacy controls\n- Build voice
      command shortcuts\n- Design voice feedback systems\n- Create voice recording
      management\n- Implement voice quality optimization\n- Build voice-based notifications\n-
      Design voice integration APIs\n- Create voice testing frameworks\n- Implement
      voice fallback mechanisms\n- Build voice command documentation\n- Design voice
      UX patterns\n- Create voice performance monitoring\n- Implement voice security
      measures\n\nDo NOT use this agent for:\n- Text-based interfaces (use senior-frontend-developer)\n-
      Backend processing (use senior-backend-developer)\n- Non-voice AI tasks (use
      appropriate AI agents)\n- Infrastructure (use infrastructure-devops-manager)\n\nThis
      agent specializes in creating sophisticated voice-controlled AI interfaces like
      Jarvis.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - monitoring
    - integration
    - documentation
    config_path: configs/jarvis-voice-interface_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9091
      endpoint: http://localhost:9091
      process_id: 2452856
      start_time: '2025-08-04T11:19:15.586502'
      last_check: '2025-08-04T11:19:27.635568'
    metadata: {}
  kali-hacker:
    id: kali-hacker
    name: kali-hacker
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/kali-hacker_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  kali-security-specialist:
    id: kali-security-specialist
    name: kali-security-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Perform advanced penetration
      testing with Kali Linux tools\n- Conduct network vulnerability assessments\n-
      Execute wireless security audits\n- Implement web application penetration testing\n-
      Perform social engineering tests\n- Conduct forensic analysis and incident response\n-
      Execute password cracking and hash analysis\n- Implement exploit development
      and testing\n- Perform reverse engineering tasks\n- Conduct OSINT (Open Source
      Intelligence) gathering\n- Execute privilege escalation tests\n- Implement post-exploitation
      techniques\n- Perform vulnerability scanning with Nmap, OpenVAS\n- Conduct SQL
      injection and XSS testing\n- Execute buffer overflow exploits\n- Implement Metasploit
      framework operations\n- Perform wireless attacks and WPA cracking\n- Conduct
      man-in-the-middle attacks testing\n- Execute DNS and ARP spoofing tests\n- Implement
      backdoor and rootkit detection\n- Perform malware analysis in sandboxes\n- Conduct
      security compliance audits\n- Execute red team operations\n- Implement blue
      team defensive strategies\n- Perform CTF (Capture The Flag) challenges\n- Conduct
      security tool development\n- Execute automated security testing\n- Implement
      security monitoring solutions\n- Perform threat hunting operations\n- Conduct
      security awareness demonstrations\n\nDo NOT use this agent for:\n- General system
      administration (use infrastructure-devops-manager)\n- Code development (use
      appropriate development agents)\n- Non-security testing (use testing-qa-validator)\n-
      Production deployments (use deployment-automation-master)\n\nThis agent specializes
      in advanced security testing using Kali Linux's comprehensive toolset.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - analysis
    config_path: configs/kali-security-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  knowledge-distillation-expert:
    id: knowledge-distillation-expert
    name: knowledge-distillation-expert
    type: utility
    description: 'AI agent: knowledge-distillation-expert'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/knowledge-distillation-expert
    runtime:
      status: healthy
      port: 9085
      endpoint: http://localhost:9085
      process_id: 2452784
      start_time: '2025-08-04T11:19:13.572588'
      last_check: '2025-08-04T11:19:27.635560'
  knowledge-graph-builder:
    id: knowledge-graph-builder
    name: knowledge-graph-builder
    type: utility
    description: 'AI agent: knowledge-graph-builder'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/knowledge-graph-builder
    runtime:
      status: healthy
      port: 9060
      endpoint: http://localhost:9060
      process_id: 2452577
      start_time: '2025-08-04T11:19:09.534373'
      last_check: '2025-08-04T11:19:27.635534'
  langflow-workflow-designer:
    id: langflow-workflow-designer
    name: langflow-workflow-designer
    type: standard
    description: Use this agent when you need to:\n\n- Create visual AI workflows
      without coding\n- Design drag-and-drop LLM pipelines\n- Build complex AI logic
      flows visually\n- Create reusable workflow components\n- Enable non-developers
      to build AI apps\n- Design conditional logic in workflows\n- Implement data
      transformation pipelines\n- Create custom Langflow components\n- Build API endpoints
      from visual flows\n- Design multi-step AI processes\n- Create workflow templates
      for teams\n- Implement error handling visually\n- Build data enrichment pipelines\n-
      Design chatbot conversation flows\n- Create document processing workflows\n-
      Implement RAG systems visually\n- Build AI agent coordination flows\n- Design
      approval workflows with AI\n- Create data validation pipelines\n- Export flows
      as Python code\n- Build integration workflows\n- Design ETL pipelines with AI\n-
      Create monitoring dashboards\n- Implement A/B testing flows\n- Build visual
      debugging tools\n\nDo NOT use this agent for:\n- Low-level code optimization\n-
      Real-time performance-critical tasks\n- Complex algorithm implementation\n-
      Systems requiring version control\n\nThis agent specializes in visual AI workflow
      creation using Langflow, making AI accessible to non-programmers through intuitive
      drag-and-drop interfaces.
    capabilities:
    - code_generation
    - testing
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/langflow-workflow-designer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9059
      endpoint: http://localhost:9059
      process_id: 2452341
      start_time: '2025-08-04T11:19:07.530009'
      last_check: '2025-08-04T11:19:27.635532'
    metadata: {}
  letta:
    id: letta
    name: letta
    type: utility
    description: 'AI agent: letta'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/letta
    runtime:
      status: healthy
      port: 9041
      endpoint: http://localhost:9041
      process_id: 2452124
      start_time: '2025-08-04T11:19:05.512847'
      last_check: '2025-08-04T11:19:27.635507'
  localagi-orchestration-manager:
    id: localagi-orchestration-manager
    name: localagi-orchestration-manager
    type: standard
    description: Use this agent when you need to:\n\n- Set up autonomous AI agent
      orchestration without external dependencies\n- Create complex multi-step workflows
      that run independently\n- Design agent chains that can make decisions and branch
      conditionally\n- Implement recursive task decomposition for complex problems\n-
      Build self-improving AI systems that learn from execution\n- Coordinate multiple
      agents to work together autonomously\n- Create LangChain-compatible workflows
      with local models\n- Design agent pipelines with state management between steps\n-
      Enable agents to spawn sub-agents for parallel task execution\n- Implement retry
      mechanisms and error recovery in workflows\n- Build autonomous feedback loops
      for continuous improvement\n- Create memory-persistent agent workflows\n- Design
      conditional logic flows based on agent outputs\n- Orchestrate long-running autonomous
      processes\n- Implement agent collaboration patterns\n- Build self-organizing
      agent systems\n- Create templates for common multi-agent patterns\n- Enable
      agents to modify their own workflows\n- Design meta-agents that create other
      agents\n- Implement autonomous decision trees\n- Build agent swarms for distributed
      problem-solving\n- Create self-healing agent workflows\n- Design autonomous
      research systems\n- Implement agent voting mechanisms\n- Build consensus-based
      multi-agent decisions\n- Create autonomous code generation pipelines\n- Design
      self-optimizing workflows\n- Implement autonomous testing frameworks\n- Build
      agent-based automation systems\n- Create event-driven agent workflows\n\nDo
      NOT use this agent for:\n- Simple single-agent tasks\n- Basic API calls without
      orchestration\n- Static workflows without conditional logic\n- Tasks that don't
      require agent collaboration\n- Simple request-response patterns\n\nThis agent
      specializes in creating truly autonomous AI systems that can operate independently,
      make decisions, collaborate, and improve themselves over time using LocalAGI's
      powerful orchestration framework.
    capabilities:
    - code_generation
    - testing
    - deployment
    - optimization
    - automation
    config_path: configs/localagi-orchestration-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9134
      endpoint: http://localhost:9134
      process_id: 2453278
      start_time: '2025-08-04T11:19:23.631699'
      last_check: '2025-08-04T11:19:27.635626'
    metadata: {}
  log-aggregator-loki:
    id: log-aggregator-loki
    name: log-aggregator-loki
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/log-aggregator-loki_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  mcp-server:
    id: mcp-server
    name: mcp-server
    type: utility
    description: 'AI agent: mcp-server'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/mcp-server
    runtime:
      status: healthy
      port: 9035
      endpoint: http://localhost:9035
      process_id: 2451964
      start_time: '2025-08-04T11:19:03.491312'
      last_check: '2025-08-04T11:19:27.635491'
  mega-code-auditor:
    id: mega-code-auditor
    name: mega-code-auditor
    type: standard
    description: Agent for utility operations
    capabilities:
    - automation
    - integration
    - support
    config_path: configs/mega-code-auditor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  memory-persistence-manager:
    id: memory-persistence-manager
    name: memory-persistence-manager
    type: utility
    description: 'AI agent: memory-persistence-manager'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/memory-persistence-manager
    runtime:
      status: healthy
      port: 9087
      endpoint: http://localhost:9087
      process_id: 2452786
      start_time: '2025-08-04T11:19:13.572916'
      last_check: '2025-08-04T11:19:27.635563'
  meta-learning-specialist:
    id: meta-learning-specialist
    name: meta-learning-specialist
    type: utility
    description: 'AI agent: meta-learning-specialist'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/meta-learning-specialist
    runtime:
      status: healthy
      port: 9029
      endpoint: http://localhost:9029
      process_id: 2451775
      start_time: '2025-08-04T11:19:01.480308'
      last_check: '2025-08-04T11:19:27.635487'
  metrics-collector-prometheus:
    id: metrics-collector-prometheus
    name: metrics-collector-prometheus
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/metrics-collector-prometheus_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  ml-experiment-tracker-mlflow:
    id: ml-experiment-tracker-mlflow
    name: ml-experiment-tracker-mlflow
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/ml-experiment-tracker-mlflow_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  model-training-specialist:
    id: model-training-specialist
    name: model-training-specialist
    type: utility
    description: 'AI agent: model-training-specialist'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/model-training-specialist
    runtime:
      status: healthy
      port: 9053
      endpoint: http://localhost:9053
      process_id: 2452335
      start_time: '2025-08-04T11:19:07.526186'
      last_check: '2025-08-04T11:19:27.635521'
  multi-modal-fusion-coordinator:
    id: multi-modal-fusion-coordinator
    name: multi-modal-fusion-coordinator
    type: utility
    description: 'AI agent: multi-modal-fusion-coordinator'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/multi-modal-fusion-coordinator
    runtime:
      status: healthy
      port: 9008
      endpoint: http://localhost:9008
      process_id: 2451339
      start_time: '2025-08-04T11:18:57.411813'
      last_check: '2025-08-04T11:19:27.635458'
  neural-architecture-search:
    id: neural-architecture-search
    name: neural-architecture-search
    type: standard
    description: Agent for ai-ml operations
    capabilities:
    - code_generation
    - analysis
    - optimization
    config_path: configs/neural-architecture-search_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  neuromorphic-computing-expert:
    id: neuromorphic-computing-expert
    name: neuromorphic-computing-expert
    type: utility
    description: 'AI agent: neuromorphic-computing-expert'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/neuromorphic-computing-expert
    runtime:
      status: healthy
      port: 9065
      endpoint: http://localhost:9065
      process_id: 2452582
      start_time: '2025-08-04T11:19:09.541559'
      last_check: '2025-08-04T11:19:27.635540'
  observability-dashboard-manager-grafana:
    id: observability-dashboard-manager-grafana
    name: observability-dashboard-manager-grafana
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/observability-dashboard-manager-grafana_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  observability-monitoring-engineer:
    id: observability-monitoring-engineer
    name: observability-monitoring-engineer
    type: utility
    description: 'AI agent: observability-monitoring-engineer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/observability-monitoring-engineer
    runtime:
      status: healthy
      port: 9105
      endpoint: http://localhost:9105
      process_id: 2452948
      start_time: '2025-08-04T11:19:17.599494'
      last_check: '2025-08-04T11:19:27.635586'
  ollama-integration-specialist:
    id: ollama-integration-specialist
    name: ollama-integration-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Configure and optimize Ollama
      for local LLM inference\n- Manage and deploy local language models\n- Optimize
      model performance and memory usage\n- Implement model quantization strategies\n-
      Configure Ollama API endpoints and compatibility\n- Set up model caching and
      preloading\n- Implement model switching and routing\n- Create custom model configurations\n-
      Design multi-model inference pipelines\n- Optimize GPU/CPU utilization for inference\n-
      Implement model versioning strategies\n- Build model performance benchmarks\n-
      Create model selection algorithms\n- Design fallback mechanisms for model failures\n-
      Implement model warm-up procedures\n- Build model monitoring and metrics\n-
      Create model deployment automation\n- Design model scaling strategies\n- Implement
      context window optimization\n- Build prompt caching systems\n- Create model
      fine-tuning workflows\n- Design model security measures\n- Implement model access
      control\n- Build model testing frameworks\n- Create model documentation\n- Design
      model cost optimization\n- Implement streaming inference\n- Build batch inference
      systems\n- Create model API compatibility layers\n- Design model integration
      patterns\n\nDo NOT use this agent for:\n- General AI development (use senior-ai-engineer)\n-
      Infrastructure setup (use infrastructure-devops-manager)\n- Agent orchestration
      (use ai-agent-orchestrator)\n- Frontend development (use senior-frontend-developer)\n\nThis
      agent specializes in making Ollama work efficiently for local LLM inference
      at scale.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - optimization
    - automation
    - documentation
    config_path: configs/ollama-integration-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  opendevin-code-generator:
    id: opendevin-code-generator
    name: opendevin-code-generator
    type: standard
    description: Use this agent when you need to:\n\n- Generate complete applications
      from specifications\n- Implement complex features autonomously\n- Debug and
      fix code automatically\n- Refactor large codebases\n- Write comprehensive test
      suites\n- Create API implementations from docs\n- Build full-stack applications\n-
      Implement algorithms from descriptions\n- Generate documentation from code\n-
      Create database schemas and queries\n- Fix security vulnerabilities in code\n-
      Optimize code performance\n- Implement design patterns\n- Generate boilerplate
      code\n- Create CI/CD configurations\n- Build microservices architectures\n-
      Implement authentication systems\n- Generate frontend components\n- Create data
      processing pipelines\n- Build integration connectors\n- Implement business logic
      from requirements\n- Generate migration scripts\n- Create deployment configurations\n-
      Build command-line tools\n- Implement real-time features\n- Generate mobile
      app code\n- Create infrastructure as code\n- Build ETL pipelines\n- Implement
      ML model serving code\n- Generate API clients\n\nDo NOT use this agent for:\n-
      Code review and human collaboration\n- Architectural decisions requiring business
      context\n- Legal or compliance-critical code without review\n- Performance-critical
      algorithm design\n\nThis agent manages OpenDevin's autonomous software engineering
      capabilities, acting as an AI pair programmer that can handle complex coding
      tasks independently.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - optimization
    - automation
    - integration
    - documentation
    config_path: configs/opendevin-code-generator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9037
      endpoint: http://localhost:9037
      process_id: 2451966
      start_time: '2025-08-04T11:19:03.505560'
      last_check: '2025-08-04T11:19:27.635497'
    metadata: {}
  pentestgpt:
    id: pentestgpt
    name: pentestgpt
    type: utility
    description: 'AI agent: pentestgpt'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/pentestgpt
    runtime:
      status: healthy
      port: 9113
      endpoint: http://localhost:9113
      process_id: 2453081
      start_time: '2025-08-04T11:19:19.607837'
      last_check: '2025-08-04T11:19:27.635597'
  private-data-analyst:
    id: private-data-analyst
    name: private-data-analyst
    type: standard
    description: Use this agent when you need to:\n\n- Deploy or configure PrivateGPT
      for secure document analysis\n- Process confidential or sensitive documents
      locally\n- Set up private Q&A systems for proprietary data\n- Implement data
      anonymization or PII redaction\n- Create secure knowledge bases with access
      controls\n- Handle GDPR, HIPAA, or CCPA compliance requirements\n- Build role-based
      access control for documents\n- Process medical records, financial data, or
      legal documents\n- Implement \"right to be forgotten\" data deletion\n- Create
      audit trails for data access\n- Set up privacy-preserving analytics\n- Configure
      local-only document processing (no cloud)\n- Implement field-level encryption
      for documents\n- Handle data residency requirements\n- Create secure document
      retention policies\n- Build private chatbots for sensitive data\n- Implement
      consent management systems\n- Generate compliance reports for privacy regulations\n-
      Set up data anonymization pipelines\n- Monitor for privacy violations or data
      leaks\n- Process employee records or HR documents\n- Handle customer PII securely\n-
      Create data portability exports (GDPR)\n- Implement secure multi-tenant data
      isolation\n- Build privacy dashboards and metrics\n- Configure network isolation
      for sensitive processing\n- Set up encrypted document storage\n- Handle confidential
      business intelligence\n- Process documents in air-gapped environments\n- Implement
      data classification systems\n\nDo NOT use this agent for:\n- General document
      processing without privacy requirements (use document-knowledge-manager)\n-
      Public data analysis\n- Web scraping or public information gathering\n- Non-sensitive
      knowledge management\n- General Q&A systems without privacy needs\n\nThis agent
      specializes in maintaining absolute privacy and security for sensitive data
      processing, ensuring nothing leaves your local environment while providing powerful
      document analysis capabilities.
    capabilities:
    - security_analysis
    - code_generation
    - deployment
    - monitoring
    - automation
    - documentation
    config_path: configs/private-data-analyst_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9012
      endpoint: http://localhost:9012
      process_id: 2451559
      start_time: '2025-08-04T11:18:59.417748'
      last_check: '2025-08-04T11:19:27.635464'
    metadata: {}
  private-registry-manager-harbor:
    id: private-registry-manager-harbor
    name: private-registry-manager-harbor
    type: standard
    description: Agent for infrastructure operations
    capabilities:
    - deployment
    - monitoring
    - automation
    config_path: configs/private-registry-manager-harbor_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  privategpt:
    id: privategpt
    name: privategpt
    type: utility
    description: 'AI agent: privategpt'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/privategpt
    runtime:
      status: healthy
      port: 9082
      endpoint: http://localhost:9082
      process_id: 2452781
      start_time: '2025-08-04T11:19:13.571016'
      last_check: '2025-08-04T11:19:27.635558'
  product-manager:
    id: product-manager
    name: product-manager
    type: standard
    description: Agent for management operations
    capabilities:
    - planning
    - coordination
    - reporting
    config_path: configs/product-manager_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  product-strategy-architect:
    id: product-strategy-architect
    name: product-strategy-architect
    type: utility
    description: 'AI agent: product-strategy-architect'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/product-strategy-architect
    runtime:
      status: healthy
      port: 9005
      endpoint: http://localhost:9005
      process_id: 2451336
      start_time: '2025-08-04T11:18:57.407148'
      last_check: '2025-08-04T11:19:27.635452'
  prompt-injection-guard:
    id: prompt-injection-guard
    name: prompt-injection-guard
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/prompt-injection-guard_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  qa-team-lead:
    id: qa-team-lead
    name: qa-team-lead
    type: standard
    description: Agent for management operations
    capabilities:
    - planning
    - coordination
    - reporting
    config_path: configs/qa-team-lead_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  quantum-computing-optimizer:
    id: quantum-computing-optimizer
    name: quantum-computing-optimizer
    type: utility
    description: 'AI agent: quantum-computing-optimizer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/quantum-computing-optimizer
    runtime:
      status: healthy
      port: 9073
      endpoint: http://localhost:9073
      process_id: 2452668
      start_time: '2025-08-04T11:19:11.562436'
      last_check: '2025-08-04T11:19:27.635546'
  ram-hardware-optimizer:
    id: ram-hardware-optimizer
    name: ram-hardware-optimizer
    type: standard
    description: Agent for optimization operations
    capabilities:
    - performance
    - resource_management
    - efficiency
    config_path: configs/ram-hardware-optimizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  reinforcement-learning-trainer:
    id: reinforcement-learning-trainer
    name: reinforcement-learning-trainer
    type: utility
    description: 'AI agent: reinforcement-learning-trainer'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/reinforcement-learning-trainer
    runtime:
      status: healthy
      port: 9017
      endpoint: http://localhost:9017
      process_id: 2451564
      start_time: '2025-08-04T11:18:59.422685'
      last_check: '2025-08-04T11:19:27.635473'
  resource-arbitration-agent:
    id: resource-arbitration-agent
    name: resource-arbitration-agent
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/resource-arbitration-agent_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  resource-visualiser:
    id: resource-visualiser
    name: resource-visualiser
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/resource-visualiser_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  runtime-behavior-anomaly-detector:
    id: runtime-behavior-anomaly-detector
    name: runtime-behavior-anomaly-detector
    type: standard
    description: Agent for monitoring operations
    capabilities:
    - observability
    - alerting
    - analysis
    config_path: configs/runtime-behavior-anomaly-detector_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  scrum-master:
    id: scrum-master
    name: scrum-master
    type: standard
    description: Agent for management operations
    capabilities:
    - planning
    - coordination
    - reporting
    config_path: configs/scrum-master_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  secrets-vault-manager-vault:
    id: secrets-vault-manager-vault
    name: secrets-vault-manager-vault
    type: standard
    description: Agent for security operations
    capabilities:
    - security_analysis
    - monitoring
    - alerting
    config_path: configs/secrets-vault-manager-vault_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  security-pentesting-specialist:
    id: security-pentesting-specialist
    name: security-pentesting-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Perform comprehensive security
      assessments\n- Conduct penetration testing operations\n- Implement vulnerability
      scanning systems\n- Design security audit frameworks\n- Create threat modeling
      systems\n- Implement security compliance validation\n- Build automated security
      testing\n- Design zero-trust architecture validation\n- Create security incident
      response plans\n- Implement SAST and DAST tools\n- Build security monitoring
      dashboards\n- Design API security testing\n- Create network security assessments\n-
      Implement cloud security validation\n- Build container security scanning\n-
      Design social engineering tests\n- Create security awareness training\n- Implement
      security baseline checks\n- Build security remediation tracking\n- Design security
      metrics reporting\n- Create vulnerability management systems\n- Implement security
      policy validation\n- Build security configuration scanning\n- Design access
      control testing\n- Create encryption validation tests\n- Implement security
      regression testing\n- Build security documentation\n- Design security risk scoring\n-
      Create security exception handling\n- Implement continuous security validation\n\nDo
      NOT use this agent for:\n- Code implementation (use code generation agents)\n-
      Infrastructure setup (use infrastructure-devops-manager)\n- General testing
      (use testing-qa-validator)\n- Deployment (use deployment-automation-master)\n\nThis
      agent specializes in finding and fixing security vulnerabilities through comprehensive
      testing.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - analysis
    - documentation
    config_path: configs/security-pentesting-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  self-healing-orchestrator:
    id: self-healing-orchestrator
    name: self-healing-orchestrator
    type: utility
    description: 'AI agent: self-healing-orchestrator'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/self-healing-orchestrator
    runtime:
      status: healthy
      port: 9108
      endpoint: http://localhost:9108
      process_id: 2452951
      start_time: '2025-08-04T11:19:17.601970'
      last_check: '2025-08-04T11:19:27.635591'
  semgrep-security-analyzer:
    id: semgrep-security-analyzer
    name: semgrep-security-analyzer
    type: standard
    description: Use this agent when you need to:\n\n- Scan code for security vulnerabilities
      before deployment\n- Create custom security rules for your specific codebase\n-
      Detect hardcoded secrets, API keys, or credentials in code\n- Identify OWASP
      Top 10 vulnerabilities automatically\n- Find SQL injection, XSS, or other injection
      vulnerabilities\n- Analyze code for authentication and authorization flaws\n-
      Detect insecure cryptographic implementations\n- Enforce secure coding standards
      across the team\n- Integrate security scanning into CI/CD pipelines\n- Set up
      pre-commit hooks for security checks\n- Generate security compliance reports\n-
      Track and remediate security technical debt\n- Validate code against regulatory
      requirements (PCI-DSS, HIPAA)\n- Create custom rules for company-specific security
      policies\n- Scan pull requests automatically for security issues\n- Identify
      vulnerable dependencies in code\n- Detect insecure configurations or hardcoded
      settings\n- Analyze code for path traversal vulnerabilities\n- Find race conditions
      and timing attacks\n- Identify insecure random number generation\n- Detect unsafe
      deserialization patterns\n- Scan for XXE (XML External Entity) vulnerabilities\n-
      Find command injection vulnerabilities\n- Analyze JavaScript for DOM-based XSS\n-
      Detect insecure file operations\n- Identify missing security headers\n- Find
      JWT implementation flaws\n- Scan infrastructure-as-code for misconfigurations\n-
      Create security gates in deployment pipelines\n- Generate actionable fix recommendations\n-
      Educate developers on secure coding practices\n- Perform differential security
      scans between commits\n- Analyze code changes for security impact\n- Create
      security scorecards for projects\n- Detect security anti-patterns in frameworks\n-
      Validate secure API implementations\n- Find business logic vulnerabilities through
      pattern matching\n- Implement shift-left security practices\n\nDo NOT use this
      agent for:\n- Runtime security testing (use Security Pentesting Specialist)\n-
      Dynamic application testing\n- Network vulnerability scanning\n- Manual code
      review tasks\n- Performance analysis\n\nThis agent specializes in finding security
      vulnerabilities through static code analysis using Semgrep's powerful pattern-matching
      engine, helping you catch security issues early in the development lifecycle.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - integration
    - analysis
    config_path: configs/semgrep-security-analyzer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9078
      endpoint: http://localhost:9078
      process_id: 2452673
      start_time: '2025-08-04T11:19:11.565339'
      last_check: '2025-08-04T11:19:27.635552'
    metadata: {}
  senior-ai-engineer:
    id: senior-ai-engineer
    name: senior-ai-engineer
    type: standard
    description: Use this agent when you need to:\n\n- Design and implement AI/ML
      architectures\n- Build RAG (Retrieval Augmented Generation) systems\n- Integrate
      various LLMs and AI models\n- Create processing network architectures\n- Implement
      machine learning pipelines\n- Build model training and evaluation systems\n-
      Design automation system components\n- Create embeddings and vector databases\n-
      Implement semantic search systems\n- Build multi-modal AI systems\n- Design
      reinforcement learning environments\n- Create AI model serving infrastructure\n-
      Implement transfer learning strategies\n- Build AI explainability systems\n-
      Design federated learning architectures\n- Create AI model versioning systems\n-
      Implement online learning capabilities\n- Build AI performance benchmarks\n-
      Design AI safety mechanisms\n- Create custom AI training loops\n- Implement
      AI model compression\n- Build AI debugging and visualization\n- Design AI data
      preprocessing pipelines\n- Create AI model deployment strategies\n- Implement
      AI monitoring systems\n- Build AI cost optimization solutions\n- Design AI experimentation
      platforms\n- Create AI model registries\n- Implement AI governance frameworks\n-
      Build AI collaboration tools\n\nDo NOT use this agent for:\n- Frontend development
      (use senior-frontend-developer)\n- Backend API development (use senior-backend-developer)\n-
      Infrastructure (use infrastructure-devops-manager)\n- Basic data analysis (use
      data analysts)\n\nThis agent specializes in cutting-edge AI/ML engineering and
      automation system development.
    capabilities:
    - code_generation
    - deployment
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/senior-ai-engineer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  senior-backend-developer:
    id: senior-backend-developer
    name: senior-backend-developer
    type: standard
    description: Use this agent when you need to:\n\n- Build scalable FastAPI or Django
      REST APIs\n- Design microservices architectures\n- Implement database schemas
      and optimization\n- Create GraphQL APIs and resolvers\n- Build event-driven
      architectures\n- Implement authentication and authorization\n- Design API rate
      limiting and throttling\n- Create background job processing systems\n- Build
      real-time WebSocket servers\n- Implement caching strategies (Redis, Memcached)\n-
      Design message queue systems (RabbitMQ, Kafka)\n- Create database migration
      strategies\n- Build API versioning systems\n- Implement data validation and
      serialization\n- Design RESTful API best practices\n- Create API documentation
      (OpenAPI/Swagger)\n- Build database connection pooling\n- Implement transaction
      management\n- Design API security measures\n- Create logging and monitoring
      systems\n- Build API testing frameworks\n- Implement service discovery patterns\n-
      Design data access layers\n- Create API performance optimization\n- Build distributed
      tracing systems\n- Implement circuit breaker patterns\n- Design API gateway
      solutions\n- Create backend debugging tools\n- Build data pipeline architectures\n-
      Implement CQRS and Event Sourcing\n\nDo NOT use this agent for:\n- Frontend
      development (use senior-frontend-developer)\n- Infrastructure management (use
      infrastructure-devops-manager)\n- AI/ML implementation (use senior-ai-engineer)\n-
      Database administration (use database specialists)\n\nThis agent specializes
      in building robust, scalable backend systems and APIs.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/senior-backend-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9013
      endpoint: http://localhost:9013
      process_id: 2451560
      start_time: '2025-08-04T11:18:59.418923'
      last_check: '2025-08-04T11:19:27.635467'
    metadata: {}
  senior-engineer:
    id: senior-engineer
    name: senior-engineer
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/senior-engineer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  senior-frontend-developer:
    id: senior-frontend-developer
    name: senior-frontend-developer
    type: standard
    description: Use this agent when you need to:\n\n- Build modern web interfaces
      with React, Vue, or Angular\n- Create responsive Streamlit applications\n- Implement
      real-time data visualization dashboards\n- Design user-friendly AI chat interfaces\n-
      Build interactive data exploration tools\n- Create Progressive Web Applications
      (PWAs)\n- Implement state management solutions\n- Build component libraries
      and design systems\n- Create accessible web interfaces (WCAG compliance)\n-
      Implement WebSocket real-time features\n- Build data visualization with D3.js
      or Chart.js\n- Design mobile-responsive layouts\n- Create micro-frontend architectures\n-
      Implement frontend performance optimization\n- Build SEO-friendly applications\n-
      Create frontend testing strategies\n- Implement internationalization (i18n)\n-
      Build offline-capable applications\n- Design frontend security best practices\n-
      Create animated user interfaces\n- Implement lazy loading and code splitting\n-
      Build frontend monitoring and analytics\n- Design cross-browser compatibility\n-
      Create frontend build optimization\n- Implement frontend caching strategies\n-
      Build WebAssembly integrations\n- Design frontend error handling\n- Create frontend
      documentation\n- Implement A/B testing frameworks\n- Build frontend CI/CD pipelines\n\nDo
      NOT use this agent for:\n- Backend development (use senior-backend-developer)\n-
      Database design (use appropriate backend agents)\n- Infrastructure (use infrastructure-devops-manager)\n-
      AI/ML implementation (use senior-ai-engineer)\n\nThis agent specializes in creating
      beautiful, performant, and user-friendly web interfaces.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/senior-frontend-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9011
      endpoint: http://localhost:9011
      process_id: 2451558
      start_time: '2025-08-04T11:18:59.417722'
      last_check: '2025-08-04T11:19:27.635461'
    metadata: {}
  senior-full-stack-developer:
    id: senior-full-stack-developer
    name: senior-full-stack-developer
    type: standard
    description: Agent for development operations
    capabilities:
    - code_generation
    - testing
    - documentation
    config_path: configs/senior-full-stack-developer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  service-hub:
    id: service-hub
    name: service-hub
    type: utility
    description: 'AI agent: service-hub'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/service-hub
    runtime:
      status: healthy
      port: 9106
      endpoint: http://localhost:9106
      process_id: 2452949
      start_time: '2025-08-04T11:19:17.600728'
      last_check: '2025-08-04T11:19:27.635589'
  shell-automation-specialist:
    id: shell-automation-specialist
    name: shell-automation-specialist
    type: standard
    description: Use this agent when you need to:\n\n- Create complex shell scripts
      and automation\n- Implement system task automation with ShellGPT\n- Build command-line
      interfaces and tools\n- Design shell script best practices\n- Create system
      administration automation\n- Implement shell script testing frameworks\n- Build
      deployment automation scripts\n- Design error handling in shell scripts\n- Create
      shell script libraries\n- Implement cross-platform shell compatibility\n- Build
      shell script debugging tools\n- Design shell script security practices\n- Create
      system monitoring scripts\n- Implement backup automation scripts\n- Build log
      processing scripts\n- Design shell script optimization\n- Create system maintenance
      automation\n- Implement shell script documentation\n- Build shell-based CI/CD
      pipelines\n- Design shell script version control\n- Create system configuration
      scripts\n- Implement shell script packaging\n- Build interactive shell menus\n-
      Design shell script logging systems\n- Create system health check scripts\n-
      Implement shell script scheduling\n- Build shell-based data processing\n- Design
      shell script modularity\n- Create system integration scripts\n- Implement shell
      script performance monitoring\n\nDo NOT use this agent for:\n- Application development
      (use appropriate language agents)\n- Infrastructure provisioning (use infrastructure-devops-manager)\n-
      Web development (use frontend/backend developers)\n- Database management (use
      database specialists)\n\nThis agent specializes in shell scripting and command-line
      automation expertise.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - integration
    - documentation
    config_path: configs/shell-automation-specialist_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  shellgpt:
    id: shellgpt
    name: shellgpt
    type: utility
    description: 'AI agent: shellgpt'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/shellgpt
    runtime:
      status: healthy
      port: 9098
      endpoint: http://localhost:9098
      process_id: 2452863
      start_time: '2025-08-04T11:19:15.590359'
      last_check: '2025-08-04T11:19:27.635578'
  symbolic-reasoning-engine:
    id: symbolic-reasoning-engine
    name: symbolic-reasoning-engine
    type: utility
    description: 'AI agent: symbolic-reasoning-engine'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/symbolic-reasoning-engine
    runtime:
      status: healthy
      port: 9110
      endpoint: http://localhost:9110
      process_id: 2453078
      start_time: '2025-08-04T11:19:19.607448'
      last_check: '2025-08-04T11:19:27.635594'
  synthetic-data-generator:
    id: synthetic-data-generator
    name: synthetic-data-generator
    type: utility
    description: 'AI agent: synthetic-data-generator'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/synthetic-data-generator
    runtime:
      status: healthy
      port: 9016
      endpoint: http://localhost:9016
      process_id: 2451563
      start_time: '2025-08-04T11:18:59.420518'
      last_check: '2025-08-04T11:19:27.635470'
  system-knowledge-curator:
    id: system-knowledge-curator
    name: system-knowledge-curator
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/system-knowledge-curator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  system-optimizer-reorganizer:
    id: system-optimizer-reorganizer
    name: system-optimizer-reorganizer
    type: standard
    description: Use this agent when you need to:\n\n- Clean up and organize project
      file structures\n- Remove unused dependencies and dead code\n- Optimize directory
      hierarchies and naming conventions\n- Consolidate duplicate files and resources\n-
      Create consistent project organization standards\n- Implement file naming conventions\n-
      Build automated cleanup scripts\n- Design resource organization strategies\n-
      Create documentation structure templates\n- Implement version control best practices\n-
      Build dependency management systems\n- Design module organization patterns\n-
      Create configuration consolidation\n- Implement log rotation and cleanup\n-
      Build cache management strategies\n- Design temporary file cleanup\n- Create
      backup organization systems\n- Implement archive management\n- Build asset optimization
      pipelines\n- Design database cleanup procedures\n- Create system maintenance
      schedules\n- Implement storage optimization\n- Build monitoring data retention\n-
      Design code repository organization\n- Create deployment artifact management\n-
      Implement container image cleanup\n- Build package registry organization\n-
      Design secret rotation procedures\n- Create compliance documentation structure\n-
      Implement audit trail organization\n\nDo NOT use this agent for:\n- Code implementation
      (use code generation agents)\n- System architecture (use agi-system-architect)\n-
      Deployment tasks (use deployment-automation-master)\n- Testing (use testing-qa-validator)\n\nThis
      agent specializes in keeping systems clean, organized, and efficiently structured.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - optimization
    - automation
    - documentation
    config_path: configs/system-optimizer-reorganizer_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  system-performance-forecaster:
    id: system-performance-forecaster
    name: system-performance-forecaster
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/system-performance-forecaster_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  system-validator:
    id: system-validator
    name: system-validator
    type: standard
    description: Agent for system operations
    capabilities:
    - architecture
    - validation
    - optimization
    config_path: configs/system-validator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  task-assignment-coordinator:
    id: task-assignment-coordinator
    name: task-assignment-coordinator
    type: standard
    description: Use this agent when you need to:\n\n- Automatically analyze incoming
      tasks and requirements\n- Match tasks to the most suitable agents\n- Implement
      workload balancing across agents\n- Create task prioritization algorithms\n-
      Build agent capability matching systems\n- Design task routing strategies\n-
      Implement task dependency management\n- Create agent availability tracking\n-
      Build task assignment optimization\n- Design multi-agent task distribution\n-
      Implement task queue management\n- Create agent skill matrices\n- Build task
      complexity analysis\n- Design task deadline management\n- Implement resource
      allocation optimization\n- Create task assignment rules engines\n- Build agent
      performance tracking\n- Design task reassignment strategies\n- Implement task
      escalation procedures\n- Create workload forecasting\n- Build task assignment
      dashboards\n- Design agent specialization tracking\n- Implement task batching
      strategies\n- Create assignment conflict resolution\n- Build task assignment
      analytics\n- Design agent utilization metrics\n- Implement fair task distribution\n-
      Create task assignment APIs\n- Build assignment notification systems\n- Design
      task assignment auditing\n\nDo NOT use this agent for:\n- Task execution (use
      appropriate specialist agents)\n- System deployment (use deployment-automation-master)\n-
      Code implementation (use development agents)\n- Testing (use testing-qa-validator)\n\nThis
      agent specializes in intelligently routing tasks to the most appropriate agents.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - analysis
    config_path: configs/task-assignment-coordinator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: healthy
      port: 9040
      endpoint: http://localhost:9040
      process_id: 2452123
      start_time: '2025-08-04T11:19:05.512792'
      last_check: '2025-08-04T11:19:27.635504'
    metadata: {}
  task-planner:
    id: task-planner
    name: Task Planner
    type: orchestrator
    description: ''
    capabilities:
    - task_planning
    - workflow_design
    - coordination
    deployment:
      method: ollama
      config:
        model: tinyllama:latest
        system_prompt: You are a task planning and coordination specialist.
    runtime:
      status: available
    metadata:
      category: essential
  testing-qa-team-lead:
    id: testing-qa-team-lead
    name: testing-qa-team-lead
    type: standard
    description: Agent for management operations
    capabilities:
    - planning
    - coordination
    - reporting
    config_path: configs/testing-qa-team-lead_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  testing-qa-validator:
    id: testing-qa-validator
    name: testing-qa-validator
    type: standard
    description: Use this agent when you need to:\n\n- Create comprehensive test suites
      for all system components\n- Implement unit, integration, and end-to-end tests\n-
      Design test automation frameworks\n- Perform security vulnerability testing\n-
      Create performance and load testing scenarios\n- Implement continuous testing
      in CI/CD pipelines\n- Design test data management strategies\n- Create test
      coverage analysis and reporting\n- Implement API testing and contract testing\n-
      Build UI/UX testing automation\n- Design chaos engineering experiments\n- Create
      regression testing strategies\n- Implement mobile app testing\n- Build accessibility
      testing frameworks\n- Design cross-browser testing solutions\n- Create test
      environment management\n- Implement A/B testing frameworks\n- Build synthetic
      monitoring tests\n- Design test case management systems\n- Create quality gates
      and metrics\n- Implement test result analytics\n- Build defect tracking integration\n-
      Design test documentation standards\n- Create test automation best practices\n-
      Implement test parallelization strategies\n- Build test maintenance workflows\n-
      Design exploratory testing guides\n- Create compliance testing procedures\n-
      Implement data validation testing\n- Build user acceptance testing frameworks\n\nDo
      NOT use this agent for:\n- Code implementation (use code-generation agents)\n-
      Deployment processes (use deployment-automation-master)\n- Infrastructure setup
      (use infrastructure-devops-manager)\n- System architecture (use agi-system-architect)\n\nThis
      agent specializes in ensuring software quality through comprehensive testing
      strategies and validation.
    capabilities:
    - security_analysis
    - code_generation
    - testing
    - deployment
    - monitoring
    - automation
    - documentation
    config_path: configs/testing-qa-validator_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
  transformers-migration-specialist:
    id: transformers-migration-specialist
    name: transformers-migration-specialist
    type: utility
    description: 'AI agent: transformers-migration-specialist'
    capabilities:
    - automation
    deployment:
      method: docker
      config:
        path: /opt/sutazaiapp/agents/transformers-migration-specialist
    runtime:
      status: healthy
      port: 9076
      endpoint: http://localhost:9076
      process_id: 2452671
      start_time: '2025-08-04T11:19:11.563950'
      last_check: '2025-08-04T11:19:27.635549'
  ultra-system-architect:
    id: ultra-system-architect
    name: ultra-system-architect
    type: standard
    description: 'Ultra System Architect - The supreme coordinator for 500-agent deployments\n\nUse
      this agent when you need to:\n\n- Coordinate overall system architecture for
      500+ agent deployments\n- Perform ULTRATHINK multi-dimensional analysis across
      10 dimensions\n- Execute ULTRADEEPCODEBASESEARCH with quantum-level pattern
      recognition\n- Make critical architectural decisions with comprehensive impact
      analysis\n- Coordinate with 5 lead architects (System, Performance, Security,
      Data, Infrastructure)\n- Analyze system-wide implications of architectural changes\n-
      Perform deep codebase analysis with pattern correlation\n- Optimize resource
      allocation across hundreds of agents\n- Design and validate architectural blueprints\n-
      Implement architectural governance and compliance\n- Create system-wide optimization
      strategies\n- Manage architectural decision records (ADRs)\n- Perform multi-dimensional
      health assessments\n- Discover and correlate system patterns\n- Generate architectural
      insights and recommendations\n- Coordinate massive agent deployments in waves\n-
      Implement self-healing and auto-scaling architectures\n- Design fault-tolerant
      distributed systems\n- Create architectural roadmaps and evolution plans\n-
      Perform predictive analysis for system evolution\n\nCapabilities:\n- ULTRATHINK:
      Analyzes across Performance, Scalability, Reliability, Security, Cost, Maintainability,
      Compliance, Integration, Evolution, and Impact dimensions\n- ULTRADEEPCODEBASESEARCH:
      Quantum-depth codebase scanning with pattern recognition and correlation\n-
      Lead Architect Coordination: Manages 5 specialized lead architects\n- 500-Agent
      Orchestration: Coordinates massive agent deployments\n- Real-time Impact Analysis:
      Assesses system-wide implications\n- Pattern Discovery: Identifies and correlates
      system patterns\n- Decision Intelligence: Makes informed architectural decisions\n\nDo
      NOT use this agent for:\n- Simple single-agent tasks (use specific specialist
      agents)\n- Basic code implementation (use code generation agents)\n- Routine
      deployments (use deployment-automation-master)\n- Standard testing (use testing-qa-validator)\n\nThis
      agent is the supreme architectural authority, designed for ultra-scale coordination
      and multi-dimensional system analysis.'
    capabilities:
    - architecture
    - multi_dimensional_analysis
    - codebase_search
    - pattern_recognition
    - decision_making
    - orchestration
    - optimization
    - monitoring
    - coordination
    - analysis
    - documentation
    config_path: configs/ultra-system-architect_universal.json
    deployment:
      method: docker
      config: {}
    runtime:
      status: unknown
    metadata: {}
categories: !!python/object/apply:collections.defaultdict
  args:
  - !!python/name:builtins.list ''
  dictitems:
    hygiene: &id001
    - hygiene_conceptual-elements-validator
    - hygiene_functionality-preservation-validator
    - hygiene_comprehensive-analysis-agent
    - hygiene_script-reuse-enforcer
    - hygiene_professional-standards-validator
    - hygiene_documentation-structure-enforcer
    - hygiene_script-consolidation-enforcer
    - hygiene_version-control-enforcer
    - hygiene_safe-cleanup-validator
    - hygiene_docker-structure-validator
    - hygiene_deployment-script-enforcer
    - hygiene_garbage-collection-enforcer
    - hygiene_ai-agent-router
    - hygiene_ollama-enforcement-agent
    essential: &id002
    - general-assistant
    - code-helper
    - task-planner
statistics:
  total_agents: 422
  active_agents: 69
  agent_types:
  - sonnet
  - container
  - code_assistant
  - utility
  - claude
  - hygiene
  - opus
  - general
  - standard
  - orchestrator
  categories:
    hygiene: *id001
    essential: *id002
