upstream ollama_backend {
    server ${UPSTREAM_OLLAMA};
    keepalive ${MAX_CONNECTIONS};
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=agent_limit:10m rate=20r/s;
limit_req_zone $http_x_agent_type zone=opus_limit:10m rate=10r/m;
limit_req_zone $http_x_agent_type zone=opus_limit:10m rate=20r/m;

server {
    listen 80;
    server_name ollama-gateway;

    # Timeouts
    proxy_connect_timeout ${REQUEST_TIMEOUT};
    proxy_send_timeout ${REQUEST_TIMEOUT};
    proxy_read_timeout ${REQUEST_TIMEOUT};
    send_timeout ${REQUEST_TIMEOUT};

    # Buffering
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;

    # Request size limits
    client_max_body_size 10M;
    client_body_buffer_size 1M;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint
    location /metrics {
        access_log off;
        stub_status;
    }

    # Ollama API proxy
    location /api/ {
        # Apply rate limiting based on agent type
        set $limit_zone agent_limit;
        if ($http_x_agent_type = "opus") {
            set $limit_zone opus_limit;
        }
        if ($http_x_agent_type = "opus") {
            set $limit_zone opus_limit;
        }
        
        limit_req zone=$limit_zone burst=5 nodelay;
        limit_req_status 429;

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Agent-ID $http_x_agent_id;
        proxy_set_header X-Request-ID $request_id;

        # Connection reuse
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        # Circuit breaker headers
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;

        # Pass to Ollama
        proxy_pass http://ollama_backend;

        # Response headers
        add_header X-Gateway-Request-ID $request_id always;
        add_header X-Gateway-Response-Time $request_time always;
        add_header X-RateLimit-Limit $limit_req_rate always;
    }

    # Error handling
    error_page 429 /429.json;
    location = /429.json {
        default_type application/json;
        return 429 '{"error": "Rate limit exceeded", "retry_after": 60}';
    }

    error_page 502 503 504 /50x.json;
    location = /50x.json {
        default_type application/json;
        return 503 '{"error": "Service temporarily unavailable", "retry_after": 30}';
    }

    # Logging
    access_log /var/log/nginx/ollama-gateway.access.log combined buffer=32k flush=5s;
    error_log /var/log/nginx/ollama-gateway.error.log warn;
}