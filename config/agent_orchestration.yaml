# SutazAI Agent Orchestration Configuration
# This configuration defines how all agents work together

version: "1.0"

# Agent Communication Bus Configuration
communication:
  bus_type: "redis"
  redis:
    host: "redis"
    port: 6379
    db: 0
    channels:
      - "agent:tasks"
      - "agent:responses"
      - "agent:events"
      - "agent:health"

# Agent Registry
agents:
  # Core System Agents
  infrastructure-devops-manager:
    type: "system"
    priority: "critical"
    capabilities:
      - "docker_management"
      - "deployment_automation"
      - "health_monitoring"
      - "resource_optimization"
    endpoints:
      api: "http://sutazai-devops-manager:8080"
      health: "http://sutazai-devops-manager:8080/health"
    
  ollama-integration-specialist:
    type: "model_management"
    priority: "critical"
    capabilities:
      - "model_loading"
      - "model_optimization"
      - "inference_management"
      - "model_routing"
    endpoints:
      api: "http://sutazai-ollama-specialist:8081"
      health: "http://sutazai-ollama-specialist:8081/health"
    
  hardware-resource-optimizer:
    type: "system"
    priority: "high"
    capabilities:
      - "resource_monitoring"
      - "performance_optimization"
      - "capacity_planning"
      - "bottleneck_detection"
    endpoints:
      api: "http://sutazai-hardware-optimizer:8082"
      health: "http://sutazai-hardware-optimizer:8082/health"
    
  # AI Development Agents
  senior-ai-engineer:
    type: "development"
    priority: "high"
    capabilities:
      - "ml_architecture_design"
      - "rag_implementation"
      - "model_training"
      - "ai_system_integration"
    communication:
      subscribes_to: ["agent:tasks:ai_development"]
      publishes_to: ["agent:responses:ai_solutions"]
    
  senior-backend-developer:
    type: "development"
    priority: "high"
    capabilities:
      - "api_development"
      - "microservices_architecture"
      - "database_design"
      - "backend_optimization"
    communication:
      subscribes_to: ["agent:tasks:backend_development"]
      publishes_to: ["agent:responses:backend_solutions"]
    
  senior-frontend-developer:
    type: "development"
    priority: "high"
    capabilities:
      - "ui_development"
      - "streamlit_apps"
      - "data_visualization"
      - "responsive_design"
    communication:
      subscribes_to: ["agent:tasks:frontend_development"]
      publishes_to: ["agent:responses:frontend_solutions"]
    
  # Orchestration Agents
  ai-agent-orchestrator:
    type: "orchestration"
    priority: "critical"
    capabilities:
      - "task_distribution"
      - "agent_coordination"
      - "workflow_management"
      - "load_balancing"
    orchestration:
      max_concurrent_tasks: 50
      task_timeout: 3600
      retry_policy:
        max_retries: 3
        backoff_factor: 2
    
  task-assignment-coordinator:
    type: "orchestration"
    priority: "high"
    capabilities:
      - "task_analysis"
      - "agent_matching"
      - "priority_management"
      - "workload_distribution"
    rules:
      - if: "task.type == 'deployment'"
        assign_to: "infrastructure-devops-manager"
      - if: "task.type == 'ml_model'"
        assign_to: "ollama-integration-specialist"
      - if: "task.type == 'ai_development'"
        assign_to: "senior-ai-engineer"
    
  # Specialized Agents
  deployment-automation-master:
    type: "deployment"
    priority: "high"
    capabilities:
      - "zero_downtime_deployment"
      - "rollback_procedures"
      - "deployment_validation"
      - "multi_environment_deploy"
    
  testing-qa-validator:
    type: "quality"
    priority: "medium"
    capabilities:
      - "automated_testing"
      - "integration_testing"
      - "performance_testing"
      - "security_testing"
    
  security-pentesting-specialist:
    type: "security"
    priority: "high"
    capabilities:
      - "vulnerability_scanning"
      - "penetration_testing"
      - "security_auditing"
      - "compliance_validation"
    
  # Advanced AI Agents
  system-architect:
    type: "architecture"
    priority: "high"
    capabilities:
      - "system_design"
      - "architecture_patterns"
      - "scalability_planning"
      - "integration_design"
    
  autonomous-system-controller:
    type: "control"
    priority: "high"
    capabilities:
      - "autonomous_operations"
      - "self_healing"
      - "auto_scaling"
      - "incident_response"
    
  context-optimization-engineer:
    type: "optimization"
    priority: "medium"
    capabilities:
      - "prompt_optimization"
      - "context_management"
      - "token_optimization"
      - "memory_management"

# Task Routing Rules
task_routing:
  rules:
    - pattern: "deploy.*"
      agents: ["deployment-automation-master", "infrastructure-devops-manager"]
      strategy: "sequential"
    
    - pattern: "test.*"
      agents: ["testing-qa-validator"]
      strategy: "single"
    
    - pattern: "security.*"
      agents: ["security-pentesting-specialist", "kali-security-specialist"]
      strategy: "parallel"
    
    - pattern: "ai.*"
      agents: ["senior-engineer", "system-architect"]
      strategy: "collaborative"
    
    - pattern: "optimize.*"
      agents: ["hardware-resource-optimizer", "context-optimization-engineer"]
      strategy: "sequential"

# Workflow Definitions
workflows:
  full_deployment:
    steps:
      - name: "Pre-deployment checks"
        agent: "infrastructure-devops-manager"
        timeout: 300
      - name: "Run tests"
        agent: "testing-qa-validator"
        timeout: 600
      - name: "Security scan"
        agent: "security-pentesting-specialist"
        timeout: 900
      - name: "Deploy"
        agent: "deployment-automation-master"
        timeout: 1800
      - name: "Post-deployment validation"
        agent: "infrastructure-devops-manager"
        timeout: 300
    
  ai_model_deployment:
    steps:
      - name: "Model validation"
        agent: "senior-ai-engineer"
        timeout: 600
      - name: "Resource allocation"
        agent: "hardware-resource-optimizer"
        timeout: 300
      - name: "Model loading"
        agent: "ollama-integration-specialist"
        timeout: 900
      - name: "Performance testing"
        agent: "testing-qa-validator"
        timeout: 600

# Health Monitoring
health_monitoring:
  check_interval: 30
  unhealthy_threshold: 3
  recovery_actions:
    - action: "restart"
      after_failures: 3
    - action: "recreate"
      after_failures: 5
    - action: "alert"
      after_failures: 1

# Resource Allocation
resource_allocation:
  policies:
    - agent_type: "development"
      cpu_limit: "2.0"
      memory_limit: "4G"
    - agent_type: "orchestration"
      cpu_limit: "1.0"
      memory_limit: "2G"
    - agent_type: "system"
      cpu_limit: "4.0"
      memory_limit: "8G"
  
  scaling:
    enabled: true
    min_replicas: 1
    max_replicas: 5
    target_cpu_utilization: 70
    target_memory_utilization: 80

# Integration Points
integrations:
  mcp_server:
    enabled: true
    endpoint: "http://mcp-server:8100"
    capabilities:
      - "agent_deployment"
      - "task_execution"
      - "model_management"
      - "knowledge_query"
  
  litellm:
    enabled: true
    endpoint: "http://litellm:8000"
    models:
      - "ollama/*"
      - "openai/*"
  
  monitoring:
    prometheus:
      endpoint: "http://prometheus:9090"
      scrape_interval: 15
    grafana:
      endpoint: "http://grafana:3000"
      dashboards:
        - "agent_performance"
        - "system_resources"
        - "task_metrics"