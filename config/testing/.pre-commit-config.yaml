# =====================================================================
# COMPREHENSIVE QUALITY GATES - PRE-COMMIT CONFIGURATION
# Enterprise-grade quality enforcement before commits
# Version: 3.0.0 - Comprehensive Quality Gates Integration
# Last Updated: 2025-08-15 - SutazAI v91.6.0
# =====================================================================

# Pre-commit configuration settings
minimum_pre_commit_version: '3.0.0'
default_language_version:
  python: python3.11
  node: '18.0.0'
fail_fast: false  # Continue checking all hooks even if one fails
default_stages: [commit, push]
ci:
  autofix_commit_msg: 'pre-commit auto-fixes'
  autoupdate_commit_msg: 'pre-commit dependency updates'

repos:
  # Standard hooks for basic hygiene (Rules 1, 13)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: "Hygiene: Remove trailing whitespace"
      - id: end-of-file-fixer
        name: "Hygiene: Fix end of file"
      - id: check-yaml
        name: "Config: Validate YAML syntax"
        args: ['--unsafe']  # Allow custom tags
      - id: check-json
        name: "Config: Validate JSON syntax"
      - id: check-toml
        name: "Config: Validate TOML syntax"
      - id: check-xml
        name: "Config: Validate XML syntax"
      - id: check-added-large-files
        name: "Rule 13: Block large files"
        args: ['--maxkb=5000']
      - id: check-case-conflict
        name: "Rule 13: Check filename case conflicts"
      - id: check-merge-conflict
        name: "Rule 13: Check for merge conflicts"
      - id: detect-private-key
        name: "Security: Detect private keys"
      - id: no-commit-to-branch
        name: "Protection: Block direct commits to protected branches"
        args: ['--branch', 'main', '--branch', 'master', '--branch', 'production']

  # Python code formatting (Rule 8)
  - repo: https://github.com/psf/black
    rev: 24.1.1
    hooks:
      - id: black
        name: "Rule 8: Python code formatting (Black)"
        language_version: python3.11
        args: ['--line-length=100']

  # Python import sorting (Rule 8)
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "Rule 8: Python import sorting"
        args: ['--profile=black', '--line-length=100']

  # Python linting with Ruff (faster than flake8)
  - repo: https://github.com/charliermarsh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        name: "Rule 8: Python linting (Ruff)"
        args: ['--fix', '--exit-non-zero-on-fix']

  # ===================================================================
  # ENHANCED SECURITY SCANNING HOOKS
  # ===================================================================

  # Comprehensive Python security scanning
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: "Security: Python security scanning (Bandit)"
        args: ['-r', '--skip', 'B101', '-ll', '-f', 'json', '--severity-level', 'medium']
        files: \.py$
        exclude: ^tests/|^\.venv/

  # Advanced secret detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: "Security: Advanced secret detection"
        args: ['--baseline', '.secrets.baseline', '--force-use-all-plugins']
        exclude: '^(\.secrets\.baseline|tests/.*|\.env\.example|archive/)$'

  # Dependency vulnerability scanning
  - repo: local
    hooks:
      - id: safety-check
        name: "Security: Dependency vulnerability scan (Safety)"
        entry: safety check --json --full-report
        language: python
        additional_dependencies: [safety]
        pass_filenames: false
        files: 'requirements.*\.txt$|setup\.py$|pyproject\.toml$'

  # Semgrep security analysis
  - repo: https://github.com/returntocorp/semgrep
    rev: v1.45.0
    hooks:
      - id: semgrep
        name: "Security: Advanced static analysis (Semgrep)"
        args: ['--config=auto', '--error', '--json', '--output=semgrep-report.json']
        files: \.(py|js|ts|java|go|php|rb|cs|cpp|c|scala|swift|kt)$
        exclude: ^tests/|^\.venv/|^node_modules/

  # Dockerfile linting (Rule 11)
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "Rule 11: Dockerfile linting"
        entry: hadolint/hadolint:v2.12.0 hadolint
        types: [dockerfile]

  # Shell script linting (Rule 7)
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: "Rule 7: Shell script validation"
        types: [shell]
        args: ['-x', '--severity=warning']

  # ===================================================================
  # COMPREHENSIVE TESTING & COVERAGE HOOKS
  # ===================================================================
  
  - repo: local
    hooks:
      # Pre-commit test execution
      - id: pytest-quick
        name: "Testing: Quick unit test validation"
        entry: pytest tests/unit/ -x --tb=short --maxfail=3
        language: python
        files: ^tests/.*\.py$|^(backend|agents)/.*\.py$
        pass_filenames: false
        additional_dependencies: [pytest, pytest-cov]

      # Test coverage validation
      - id: coverage-check
        name: "Testing: Coverage validation (95%+ threshold)"
        entry: pytest --cov=backend --cov=agents --cov-fail-under=95 --cov-report=term-missing tests/unit/
        language: python
        files: ^(backend|agents)/.*\.py$
        pass_filenames: false
        additional_dependencies: [pytest, pytest-cov]

  # ===================================================================
  # CODE QUALITY & ANALYSIS HOOKS
  # ===================================================================
  
  - repo: local
    hooks:
      # Advanced Python analysis
      - id: pylint-critical
        name: "Quality: Critical issue detection (Pylint)"
        entry: pylint --errors-only --score=no
        language: python
        files: ^(backend|agents)/.*\.py$
        additional_dependencies: [pylint]

      # Code complexity analysis
      - id: complexity-check
        name: "Quality: Code complexity analysis"
        entry: radon cc --min=B --show-complexity --json
        language: python
        files: ^(backend|agents)/.*\.py$
        additional_dependencies: [radon]
        pass_filenames: true

      # Maintainability index
      - id: maintainability-check
        name: "Quality: Maintainability index check"
        entry: radon mi --min=B --show --json
        language: python
        files: ^(backend|agents)/.*\.py$
        additional_dependencies: [radon]
        pass_filenames: true

  # ===================================================================
  # PERFORMANCE & OPTIMIZATION HOOKS
  # ===================================================================
  
  - repo: local
    hooks:
      # Large file detection
      - id: performance-file-check
        name: "Performance: Large file impact validation"
        entry: bash -c 'find . -name "*.py" -size +100k -not -path "./.git/*" -not -path "./archive/*" | while read file; do echo "WARNING: Large Python file detected: $file"; done'
        language: system
        pass_filenames: false
        always_run: true

      # Memory usage pattern analysis
      - id: memory-pattern-check
        name: "Performance: Memory usage pattern validation"
        entry: python3 -c "
import ast
import sys
memory_patterns = ['numpy.array', 'pandas.DataFrame', 'torch.tensor', 'list(range(']
for filename in sys.argv[1:]:
    try:
        with open(filename) as f:
            content = f.read()
        for pattern in memory_patterns:
            if pattern in content and 'del ' not in content:
                print(f'INFO: {filename} uses {pattern} - ensure proper memory management')
    except: pass
"
        language: python
        files: ^(backend|agents)/.*\.py$
        pass_filenames: true

  # ===================================================================
  # INFRASTRUCTURE & DEPLOYMENT HOOKS
  # ===================================================================
  
  - repo: local
    hooks:
      # Docker security validation
      - id: docker-security-check
        name: "Infrastructure: Docker security validation"
        entry: python3 -c "
import sys
import re
security_issues = []
for filename in sys.argv[1:]:
    try:
        with open(filename) as f:
            content = f.read()
        if 'USER root' in content:
            security_issues.append(f'{filename}: Running as root user')
        if '--privileged' in content:
            security_issues.append(f'{filename}: Privileged container')
        if re.search(r'COPY.*--chown=root', content):
            security_issues.append(f'{filename}: Root ownership in COPY')
    except: pass
if security_issues:
    for issue in security_issues[:5]:
        print(f'SECURITY: {issue}')
    sys.exit(1)
"
        language: python
        files: 'Dockerfile.*'
        pass_filenames: true

      # Port allocation validation
      - id: port-allocation-check
        name: "Infrastructure: Port allocation conflict detection"
        entry: python3 -c "
import yaml
import sys
from collections import Counter
try:
    with open('docker-compose.yml') as f:
        config = yaml.safe_load(f)
    ports = []
    for service in config.get('services', {}).values():
        if 'ports' in service:
            for port_mapping in service['ports']:
                if ':' in str(port_mapping):
                    host_port = str(port_mapping).split(':')[0]
                    ports.append(host_port)
    duplicates = [port for port, count in Counter(ports).items() if count > 1]
    if duplicates:
        print(f'ERROR: Port conflicts detected: {duplicates}')
        sys.exit(1)
except Exception as e:
    print(f'INFO: Could not validate ports: {e}')
"
        language: python
        files: 'docker-compose.*\.ya?ml$'
        pass_filenames: false

  # ===================================================================
  # COMPREHENSIVE QUALITY VALIDATION HOOKS
  # ===================================================================
  
  - repo: local
    hooks:
      # Multi-dimensional quality scoring
      - id: quality-score-calculation
        name: "Quality: Multi-dimensional quality scoring"
        entry: python3 -c "
import subprocess
import json
import sys

def get_quality_metrics():
    metrics = {'quality_score': 100}
    
    # Test coverage impact
    try:
        result = subprocess.run(['python', '-m', 'pytest', '--cov=backend', '--cov=agents', '--cov-report=json', 'tests/unit/'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0 and 'coverage.json' in result.stdout:
            # Extract coverage percentage
            metrics['coverage'] = 85  # Placeholder
        else:
            metrics['quality_score'] -= 15
    except:
        metrics['quality_score'] -= 10
    
    # Code complexity impact
    try:
        result = subprocess.run(['radon', 'cc', 'backend/', 'agents/', '--json'], 
                              capture_output=True, text=True, timeout=15)
        if result.returncode == 0:
            # Parse complexity and adjust score
            pass  # Placeholder logic
    except:
        pass
    
    print(f'Quality Score: {metrics[\"quality_score\"]}%')
    if metrics['quality_score'] < 85:
        print('WARNING: Quality score below recommended threshold (85%)')
        print('Consider improving code coverage, reducing complexity, or fixing security issues')
    
    return metrics['quality_score'] >= 85

sys.exit(0 if get_quality_metrics() else 1)
"
        language: python
        pass_filenames: false
        always_run: true

  # ===================================================================
  # CUSTOM SUTAZAI HYGIENE ENFORCEMENT HOOKS
  # ===================================================================

  # Custom hygiene enforcement hooks
  - repo: local
    hooks:
      # Phase 1: Critical violations (Rules 13, 12, 9)
      - id: no-garbage-files
        name: "Rule 13: Block garbage/backup files"
        entry: bash -c 'find . -type f \( -name "*.backup*" -o -name "*.tmp" -o -name "*.bak" -o -name "*~" -o -name "*.old" -o -name "*copy*" -o -name "*.backup" -o -name "*.conceptual*" \) -not -path "./archive/*" -not -path "./.git/*" | grep -q . && echo "ERROR: Garbage files detected (Rule 13)" && exit 1 || exit 0'
        language: system
        pass_filenames: false
        always_run: true

      - id: single-deployment-script
        name: "Rule 12: Verify single deployment script"
        entry: python scripts/pre-commit/check-deployment-scripts.py
        language: python
        pass_filenames: false
        always_run: true

      - id: no-duplicate-directories
        name: "Rule 9: Check for duplicate directories"
        entry: python scripts/pre-commit/check-directory-duplication.py
        language: python
        pass_filenames: false
        always_run: true

      # Phase 2: Structural violations (Rules 11, 8, 1, 2, 3)
      - id: docker-structure
        name: "Rule 11: Validate Docker structure"
        entry: python scripts/pre-commit/check-docker-structure.py
        language: python
        files: '(Dockerfile|docker-compose\.ya?ml)$'
        pass_filenames: true

      - id: python-documentation
        name: "Rule 8: Verify Python documentation"
        entry: python scripts/pre-commit/check-python-docs.py
        language: python
        types: [python]
        pass_filenames: true

      - id: no-conceptual-elements
        name: "Rule 1: Block conceptual/placeholder code"
        entry: python scripts/pre-commit/check-conceptual-elements.py
        language: python
        pass_filenames: true
        types: [python, javascript, typescript, java, go]

      - id: no-breaking-changes
        name: "Rule 2: Detect breaking changes"
        entry: python scripts/pre-commit/check-breaking-changes.py
        language: python
        pass_filenames: false
        always_run: true

      - id: system-analysis
        name: "Rule 3: Quick system analysis"
        entry: python scripts/pre-commit/quick-system-check.py
        language: python
        pass_filenames: false
        always_run: true

      # Phase 3: Organizational violations (Rules 7, 6, 15, 4, 5, 10, 14, 16)
      - id: script-organization
        name: "Rule 7: Validate script organization"
        entry: python scripts/pre-commit/check-script-organization.py
        language: python
        pass_filenames: true
        files: '^scripts/'

      - id: documentation-structure
        name: "Rule 6: Validate documentation structure"
        entry: python scripts/pre-commit/check-doc-structure.py
        language: python
        types: [markdown]
        pass_filenames: true

      - id: no-doc-duplication
        name: "Rule 15: Check documentation duplication"
        entry: python scripts/pre-commit/check-doc-duplication.py
        language: python
        types: [markdown]
        pass_filenames: true

      - id: script-reuse
        name: "Rule 4: Verify script reuse"
        entry: python scripts/pre-commit/check-script-duplication.py
        language: python
        types: [python, shell]
        pass_filenames: true

      - id: safe-deletion
        name: "Rule 10: Verify safe deletions"
        entry: python scripts/pre-commit/check-safe-deletion.py
        language: python
        pass_filenames: false
        always_run: true

      - id: require-changelog-update
        name: "Rule 19: Require docs/CHANGELOG.md update"
        entry: python scripts/pre-commit/check-changelog-updated.py
        language: python
        pass_filenames: false
        always_run: true
        stages: [commit]

      - id: agent-selection
        name: "Rule 14: Verify correct agent usage"
        entry: python scripts/pre-commit/check-agent-usage.py
        language: python
        pass_filenames: true
        types: [python]

      - id: llm-usage
        name: "Rule 16: Verify Ollama/tinyllama usage"
        entry: python scripts/pre-commit/check-llm-usage.py
        language: python
        types: [python, yaml]
        pass_filenames: true

      # Existing custom checks (migrated and enhanced)
      - id: no-hardcoded-secrets
        name: "Security: Check for hardcoded secrets"
        entry: python scripts/check_secrets.py
        language: python
        pass_filenames: false
        always_run: true

      - id: enforce-naming-conventions
        name: "Hygiene: Enforce naming conventions"
        entry: python scripts/check_naming.py
        language: python
        types: [python]

      - id: check-duplicate-files
        name: "Hygiene: Check for duplicate files"
        entry: python scripts/check_duplicates.py
        language: python
        pass_filenames: false

      - id: validate-agent-format
        name: "Agents: Validate agent configurations"
        entry: python scripts/validate_agents.py
        language: python
        files: '^(\.claude/agents/.*\.md|agents/.*\.json|config/agents/.*\.json)$'

      - id: check-requirements
        name: "Dependencies: Check requirements files"
        entry: python scripts/check_requirements.py
        language: python
        files: 'requirements.*\.txt$'

      # Master orchestration hooks (run last)
      - id: hygiene-coordinator
        name: "Master: Run hygiene enforcement coordinator"
        entry: python scripts/hygiene-enforcement-coordinator.py --phase=1 --dry-run
        language: python
        pass_filenames: false
        always_run: true
        stages: [commit]

      - id: agent-orchestrator
        name: "Master: Run agent orchestration check"
        entry: python scripts/agents/hygiene-agent-orchestrator.py --phase=1 --dry-run
        language: python
        pass_filenames: false
        always_run: true
        stages: [commit]

      # Final comprehensive check
      - id: enforce-all-claude-rules
        name: "Final: Enforce all CLAUDE.md rules"
        entry: python scripts/enforce_claude_md_rules.py --comprehensive
        language: python
        pass_filenames: false
        always_run: true
        stages: [commit]
        
      # Continuous compliance monitoring integration
      - id: continuous-compliance-check
        name: "Compliance: Run continuous compliance monitor"
        entry: python scripts/monitoring/continuous-compliance-monitor.py --report-only
        language: python
        pass_filenames: false
        always_run: true
        stages: [commit]

# Emergency bypass configuration
# To bypass in emergency (requires justification):
#   SKIP=hook-id git commit -m "Emergency fix: [justification]"
# Or to skip all checks (logged for audit):
#   git commit --no-verify -m "Emergency bypass: [justification]"
# All bypasses are logged to: .git/hooks/bypass.log