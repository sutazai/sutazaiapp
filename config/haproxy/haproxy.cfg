global
    maxconn 8192
    log stdout local0
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    # Enable multi-threading
    nbthread 4

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  http-server-close
    option  forwardfor except 127.0.0.0/8
    option  redispatch
    retries 3
    timeout connect 10s
    timeout client  1m
    timeout server  1m
    timeout http-request 10s
    timeout queue   1m
    timeout http-keep-alive 10s
    timeout check   10s
    maxconn 3000
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Frontend for agent load balancing
frontend agent_frontend
    bind *:8080
    option httpclose
    option forwardfor
    
    # Add request ID if not present
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID
    
    # Capture agent information
    capture request header X-Agent-ID len 64
    capture request header X-Agent-Type len 32
    capture request header X-Priority len 2
    
    # ACLs for routing
    acl is_health_check path /health
    acl is_metrics path /metrics
    acl is_ollama_api path_beg /api/
    
    # Route to appropriate backend
    use_backend health_backend if is_health_check
    use_backend stats if is_metrics
    use_backend ollama_backend if is_ollama_api
    default_backend ollama_backend

# Health check backend
backend health_backend
    errorfile 200 /dev/null
    http-request return status 200 content-type text/plain string "OK"

# Ollama backend with intelligent routing
backend ollama_backend
    balance leastconn
    option httpchk GET /api/tags
    
    # Retry policy
    retry-on all-retryable-errors
    retries 2
    
    # Connection reuse
    http-reuse safe
    
    # Queue management
    timeout queue 30s
    
    # Circuit breaker via health checks
    option redispatch
    
    # Primary Ollama gateway
    server ollama-gw1 ollama-gateway:80 check inter 2s fall 3 rise 2 weight 100
    
    # Queue processor as fallback
    server queue-proc queue-processor:8080 check inter 2s fall 3 rise 2 weight 50 backup

# Stats page
listen stats
    bind *:8404
    stats enable
    stats hide-version
    stats realm HAProxy\ Statistics
    stats uri /
    stats refresh 10s
    
# Prometheus exporter
frontend prometheus
    bind *:9101
    option http-use-htx
    http-request use-service prometheus-exporter if { path /metrics }
    no log