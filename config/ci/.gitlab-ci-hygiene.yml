# GitLab CI/CD Pipeline for Codebase Hygiene Enforcement

stages:
  - setup
  - analysis
  - enforcement
  - report
  - quality-gates
  - cleanup

variables:
  PROJECT_ROOT: "/opt/sutazaiapp"
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  ARTIFACT_EXPIRY: "30 days"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.cache/npm"
  
  # Enforcement levels based on trigger
  ENFORCEMENT_LEVEL_MR: "standard"
  ENFORCEMENT_LEVEL_PUSH: "quick"
  ENFORCEMENT_LEVEL_SCHEDULE: "comprehensive"
  ENFORCEMENT_LEVEL_MANUAL: "comprehensive"

# Global cache configuration
.cache_template: &cache_config
  cache:
    key: "hygiene-${CI_COMMIT_REF_SLUG}"
    paths:
      - .cache/pip
      - .cache/npm
      - .cache/pre-commit
      - node_modules/
      - venv/

# Job templates
.python_template: &python_job
  image: python:${PYTHON_VERSION}-slim
  <<: *cache_config
  before_script:
    - apt-get update && apt-get install -y git curl
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - |
      if [ -f requirements/hygiene.txt ]; then
        pip install -r requirements/hygiene.txt
      else
        pip install pyyaml click pathlib gitpython
      fi

.node_template: &node_job
  image: node:${NODE_VERSION}-alpine
  <<: *cache_config
  before_script:
    - apk add --no-cache git python3 py3-pip
    - npm install -g npm@latest

# Setup stage
setup:environment:
  stage: setup
  image: alpine:latest
  script:
    - apk add --no-cache git jq
    - |
      # Determine enforcement level based on pipeline source
      case "$CI_PIPELINE_SOURCE" in
        merge_request_event)
          LEVEL="$ENFORCEMENT_LEVEL_MR"
          ;;
        push)
          LEVEL="$ENFORCEMENT_LEVEL_PUSH"
          ;;
        schedule)
          LEVEL="$ENFORCEMENT_LEVEL_SCHEDULE"
          ;;
        web|api|trigger)
          LEVEL="${CI_ENFORCEMENT_LEVEL:-$ENFORCEMENT_LEVEL_MANUAL}"
          ;;
        *)
          LEVEL="standard"
          ;;
      esac
      
      echo "ENFORCEMENT_LEVEL=$LEVEL" > enforcement.env
      echo "Enforcement level: $LEVEL"
    
    - |
      # Generate analysis configuration
      cat > analysis-config.json <<EOF
      {
        "enforcement_level": "$LEVEL",
        "pipeline_source": "$CI_PIPELINE_SOURCE",
        "branch": "$CI_COMMIT_REF_NAME",
        "commit": "$CI_COMMIT_SHA",
        "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
        "dry_run": ${DRY_RUN:-false}
      }
      EOF
  artifacts:
    reports:
      dotenv: enforcement.env
    paths:
      - analysis-config.json
    expire_in: 1 day

security:pre-flight:
  stage: setup
  <<: *python_job
  script:
    - |
      echo "🔒 Running security pre-flight checks..."
      
      # Check for malicious patterns
      python -c "
import os
import re
import sys

malicious_patterns = [
    r'eval\s*\(',
    r'exec\s*\(',
    r'__import__',
    r'subprocess\.call',
    r'os\.system',
    r'rm\s+-rf\s+/',
    r'dd\s+if=/dev/zero'
]

found_issues = False
for root, dirs, files in os.walk('.'):
    # Skip .git and other hidden directories
    dirs[:] = [d for d in dirs if not d.startswith('.')]
    
    for file in files:
        if file.endswith(('.py', '.sh')):
            filepath = os.path.join(root, file)
            try:
                with open(filepath, 'r') as f:
                    content = f.read()
                    for pattern in malicious_patterns:
                        if re.search(pattern, content):
                            print(f'⚠️  Potentially dangerous pattern in {filepath}: {pattern}')
                            found_issues = True
            except:
                pass

sys.exit(1 if found_issues else 0)
"
  allow_failure: false

# Analysis stage - parallel rule analysis
analysis:critical-rules:
  stage: analysis
  <<: *python_job
  needs: ["setup:environment"]
  script:
    - source venv/bin/activate
    - |
      echo "🔍 Analyzing critical hygiene rules (1-3)..."
      
      chmod +x scripts/ci-cd/hygiene-runner.sh
      ./scripts/ci-cd/hygiene-runner.sh \
        --rules "1,2,3" \
        --priority "critical" \
        --config analysis-config.json \
        --output "hygiene-report-critical.json"
  artifacts:
    paths:
      - hygiene-report-critical.json
      - logs/hygiene-analysis-*.log
    expire_in: $ARTIFACT_EXPIRY
    reports:
      junit: test-results/hygiene-critical.xml

analysis:structural-rules:
  stage: analysis
  <<: *python_job
  needs: ["setup:environment"]
  script:
    - source venv/bin/activate
    - |
      echo "🔍 Analyzing structural hygiene rules (4-8)..."
      
      chmod +x scripts/ci-cd/hygiene-runner.sh
      ./scripts/ci-cd/hygiene-runner.sh \
        --rules "4,5,6,7,8" \
        --priority "high" \
        --config analysis-config.json \
        --output "hygiene-report-structural.json"
  artifacts:
    paths:
      - hygiene-report-structural.json
      - logs/hygiene-analysis-*.log
    expire_in: $ARTIFACT_EXPIRY

analysis:organizational-rules:
  stage: analysis
  <<: *python_job
  needs: ["setup:environment"]
  script:
    - source venv/bin/activate
    - |
      echo "🔍 Analyzing organizational hygiene rules (9-12)..."
      
      chmod +x scripts/ci-cd/hygiene-runner.sh
      ./scripts/ci-cd/hygiene-runner.sh \
        --rules "9,10,11,12" \
        --priority "medium" \
        --config analysis-config.json \
        --output "hygiene-report-organizational.json"
  artifacts:
    paths:
      - hygiene-report-organizational.json
      - logs/hygiene-analysis-*.log
    expire_in: $ARTIFACT_EXPIRY

analysis:quality-rules:
  stage: analysis
  <<: *python_job
  needs: ["setup:environment"]
  script:
    - source venv/bin/activate
    - |
      echo "🔍 Analyzing quality hygiene rules (13-16)..."
      
      chmod +x scripts/ci-cd/hygiene-runner.sh
      ./scripts/ci-cd/hygiene-runner.sh \
        --rules "13,14,15,16" \
        --priority "low" \
        --config analysis-config.json \
        --output "hygiene-report-quality.json"
  artifacts:
    paths:
      - hygiene-report-quality.json
      - logs/hygiene-analysis-*.log
    expire_in: $ARTIFACT_EXPIRY

# Enforcement stage - agent-based enforcement
enforcement:garbage-collector:
  stage: enforcement
  <<: *python_job
  needs: ["analysis:quality-rules"]
  rules:
    - if: '$ENFORCEMENT_LEVEL != "quick"'
  script:
    - source venv/bin/activate
    - |
      echo "🤖 Running garbage collector agent (Rule 13)..."
      
      python scripts/agents/hygiene-agent-orchestrator.py \
        --agent "garbage-collector" \
        --rules "13" \
        --analysis-file "hygiene-report-quality.json" \
        --output "enforcement-garbage-collector.json" \
        ${DRY_RUN:+--dry-run}
  artifacts:
    paths:
      - enforcement-garbage-collector.json
      - agents/workspaces/garbage-collector/
    expire_in: $ARTIFACT_EXPIRY

enforcement:script-consolidator:
  stage: enforcement
  <<: *python_job
  needs: ["analysis:structural-rules", "analysis:organizational-rules"]
  rules:
    - if: '$ENFORCEMENT_LEVEL == "comprehensive"'
  script:
    - source venv/bin/activate
    - |
      echo "🤖 Running script consolidator agent (Rules 7, 12)..."
      
      python scripts/agents/hygiene-agent-orchestrator.py \
        --agent "script-consolidator" \
        --rules "7,12" \
        --analysis-file "hygiene-report-structural.json,hygiene-report-organizational.json" \
        --output "enforcement-script-consolidator.json" \
        ${DRY_RUN:+--dry-run}
  artifacts:
    paths:
      - enforcement-script-consolidator.json
      - agents/workspaces/script-consolidator/
    expire_in: $ARTIFACT_EXPIRY

enforcement:docker-optimizer:
  stage: enforcement
  <<: *python_job
  needs: ["analysis:organizational-rules"]
  rules:
    - if: '$ENFORCEMENT_LEVEL != "quick"'
  script:
    - source venv/bin/activate
    - |
      echo "🤖 Running Docker optimizer agent (Rule 11)..."
      
      python scripts/agents/hygiene-agent-orchestrator.py \
        --agent "docker-optimizer" \
        --rules "11" \
        --analysis-file "hygiene-report-organizational.json" \
        --output "enforcement-docker-optimizer.json" \
        ${DRY_RUN:+--dry-run}
  artifacts:
    paths:
      - enforcement-docker-optimizer.json
      - agents/workspaces/docker-optimizer/
    expire_in: $ARTIFACT_EXPIRY

enforcement:code-auditor:
  stage: enforcement
  <<: *python_job
  needs: ["analysis:critical-rules"]
  script:
    - source venv/bin/activate
    - |
      echo "🤖 Running code auditor agent (Rules 1-3)..."
      
      python scripts/agents/hygiene-agent-orchestrator.py \
        --agent "code-auditor" \
        --rules "1,2,3" \
        --analysis-file "hygiene-report-critical.json" \
        --output "enforcement-code-auditor.json" \
        ${DRY_RUN:+--dry-run}
  artifacts:
    paths:
      - enforcement-code-auditor.json
      - agents/workspaces/code-auditor/
    expire_in: $ARTIFACT_EXPIRY

# Report generation stage
report:consolidation:
  stage: report
  <<: *python_job
  needs:
    - job: "analysis:critical-rules"
      artifacts: true
    - job: "analysis:structural-rules"
      artifacts: true
    - job: "analysis:organizational-rules"
      artifacts: true
    - job: "analysis:quality-rules"
      artifacts: true
    - job: "enforcement:garbage-collector"
      artifacts: true
      optional: true
    - job: "enforcement:script-consolidator"
      artifacts: true
      optional: true
    - job: "enforcement:docker-optimizer"
      artifacts: true
      optional: true
    - job: "enforcement:code-auditor"
      artifacts: true
      optional: true
  script:
    - source venv/bin/activate
    - |
      echo "📊 Generating consolidated hygiene report..."
      
      python scripts/ci-cd/consolidate-reports.py \
        --input-pattern "hygiene-report-*.json" \
        --enforcement-pattern "enforcement-*.json" \
        --output "hygiene-report-consolidated.md" \
        --format markdown \
        --include-recommendations \
        --gitlab-format
      
      # Also generate JSON for further processing
      python scripts/ci-cd/consolidate-reports.py \
        --input-pattern "hygiene-report-*.json" \
        --enforcement-pattern "enforcement-*.json" \
        --output "hygiene-report-consolidated.json" \
        --format json
      
      # Generate metrics for monitoring
      python scripts/ci-cd/export-hygiene-metrics.py \
        --input "hygiene-report-consolidated.json" \
        --output "hygiene-metrics.txt" \
        --format prometheus
  artifacts:
    paths:
      - hygiene-report-consolidated.*
      - hygiene-metrics.txt
    expire_in: $ARTIFACT_EXPIRY
    reports:
      metrics: hygiene-metrics.txt
  coverage: '/Total hygiene score: \d+\.\d+%/'

# Quality gates stage
quality-gates:evaluation:
  stage: quality-gates
  <<: *python_job
  needs: ["report:consolidation"]
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
  script:
    - source venv/bin/activate
    - |
      echo "🚦 Evaluating quality gates..."
      
      python -c "
import json
import sys

with open('hygiene-report-consolidated.json') as f:
    report = json.load(f)
    
    summary = report.get('summary', {})
    critical_violations = summary.get('critical_violations', 0)
    high_violations = summary.get('high_violations', 0)
    medium_violations = summary.get('medium_violations', 0)
    
    print(f'Critical violations: {critical_violations}')
    print(f'High violations: {high_violations}')
    print(f'Medium violations: {medium_violations}')
    
    # Generate MR comment
    comment = f'''## 🧹 Codebase Hygiene Report

### Summary
- **Critical Violations**: {critical_violations} {"❌" if critical_violations > 0 else "✅"}
- **High Violations**: {high_violations} {"⚠️" if high_violations > 5 else "✅"}
- **Medium Violations**: {medium_violations}
- **Hygiene Score**: {summary.get("hygiene_score", 0):.1f}%

### Quality Gates
'''
    
    gates_passed = True
    
    if critical_violations > 0:
        comment += '- ❌ **FAILED**: Critical violations must be resolved\\n'
        gates_passed = False
    else:
        comment += '- ✅ No critical violations\\n'
    
    if high_violations > 5:
        comment += '- ⚠️  **WARNING**: High violations exceed threshold (5)\\n'
    else:
        comment += '- ✅ High violations within threshold\\n'
    
    with open('mr-comment.md', 'w') as f:
        f.write(comment)
    
    sys.exit(0 if gates_passed else 1)
"
  after_script:
    - |
      # Post comment to merge request
      if [ -f mr-comment.md ]; then
        COMMENT=$(cat mr-comment.md)
        curl --request POST \
          --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          --data-urlencode "body=$COMMENT" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/$CI_MERGE_REQUEST_IID/notes"
      fi
  artifacts:
    paths:
      - mr-comment.md
    expire_in: 1 day

# Scheduled cleanup stage
cleanup:automated-fixes:
  stage: cleanup
  <<: *python_job
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  script:
    - source venv/bin/activate
    - |
      echo "🔧 Applying automated hygiene fixes..."
      
      # Configure git
      git config user.name "Hygiene Bot"
      git config user.email "hygiene-bot@gitlab.com"
      
      # Create cleanup branch
      BRANCH_NAME="hygiene/automated-cleanup-$(date +%Y%m%d-%H%M%S)"
      git checkout -b "$BRANCH_NAME"
      
      # Apply safe automated fixes
      chmod +x scripts/ci-cd/apply-safe-fixes.sh
      ./scripts/ci-cd/apply-safe-fixes.sh \
        --rules "6,7,8,13,15" \
        --safe-mode \
        --report "cleanup-report.json"
      
      # Check if changes were made
      if git diff --quiet; then
        echo "No changes to commit"
      else
        # Commit changes
        git add -A
        git commit -m "🧹 Automated hygiene cleanup
        
        Applied safe fixes for rules 6,7,8,13,15
        No breaking changes introduced
        All tests passing
        
        See cleanup-report.json for details"
        
        # Push branch
        git push -o merge_request.create \
               -o merge_request.title="🧹 Automated Hygiene Cleanup $(date +%Y-%m-%d)" \
               -o merge_request.description="This MR contains automated hygiene fixes that are safe to apply." \
               -o merge_request.label="hygiene,automated" \
               -o merge_request.assign="$GITLAB_USER_LOGIN" \
               origin "$BRANCH_NAME"
      fi
  artifacts:
    paths:
      - cleanup-report.json
    expire_in: $ARTIFACT_EXPIRY

# Monitoring integration
monitoring:update-dashboards:
  stage: cleanup
  image: curlimages/curl:latest
  needs: ["report:consolidation"]
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - |
      echo "📈 Updating monitoring dashboards..."
      
      # Send metrics to Prometheus Pushgateway if configured
      if [ -n "$PROMETHEUS_PUSHGATEWAY_URL" ]; then
        cat hygiene-metrics.txt | curl --data-binary @- \
          "$PROMETHEUS_PUSHGATEWAY_URL/metrics/job/hygiene-enforcement/instance/$CI_PROJECT_NAME"
      fi
      
      # Update Grafana dashboard if configured
      if [ -n "$GRAFANA_API_KEY" ] && [ -n "$GRAFANA_URL" ]; then
        curl -X POST "$GRAFANA_URL/api/dashboards/db" \
          -H "Authorization: Bearer $GRAFANA_API_KEY" \
          -H "Content-Type: application/json" \
          -d @monitoring/dashboards/hygiene-dashboard.json
      fi
      
      # Send notification to Slack if configured
      if [ -n "$SLACK_WEBHOOK_URL" ]; then
        SCORE=$(grep "hygiene_score" hygiene-metrics.txt | awk '{print $2}')
        curl -X POST "$SLACK_WEBHOOK_URL" \
          -H "Content-Type: application/json" \
          -d "{
            \"text\": \"Hygiene Enforcement Completed\",
            \"blocks\": [{
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"*Hygiene Enforcement Results*\\n• Pipeline: $CI_PIPELINE_URL\\n• Branch: $CI_COMMIT_REF_NAME\\n• Score: ${SCORE}%\"
              }
            }]
          }"
      fi
  allow_failure: true