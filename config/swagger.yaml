swagger: '2.0'
info:
  version: 1.0.0
  title: Super AI Agent API
  description: API for the Super AI Agent
  contact:
    email: support@superai.com
  license:
    name: MIT

securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-KEY
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: Use format "Bearer {token}"
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://auth.sutazai.ai/oauth2/authorize
    tokenUrl: https://auth.sutazai.ai/oauth2/token
    scopes:
      chat.write: "Write access to chat"
      admin: "Admin privileges"
  SutazAiSafe:
    type: apiKey
    name: X-SutazAi-Safe-Signature
    in: header
    description: |
      Post-sutazai signature using CRYSTALS-Dilithium algorithm
      Format: Base64 encoded {message}{signature}

paths:
  /api/v1/agent:
    get:
      summary: Get agent status
      responses:
        200:
          description: Successful operation
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
  /ai/chat:
    post:
      # Add proper response schemas
      responses:
        '200':
          description: Successful response
          content:
            application/json:  # Ensure correct MIME type
              schema:
                $ref: '#/definitions/ChatResponse'
  /api/v1/predict:
    post:
      responses:
        '200':
          description: Successful prediction
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '429':
          description: Rate limited
  /api/v1/chat:
    post:
      security:
        - OAuth2: [chat.write]
      parameters:
        - name: X-Request-ID
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Content-Security
          in: header
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\-_]+$'
      responses:
        403:
          description: Forbidden (RBAC violation)
        418:
          description: I'm a teapot (Anti-automation)
  /ai/predict:
    post:
      tags: [AI]
      security:
        - APIKey: []
      parameters:
        - $ref: '#/components/parameters/AITemperature'
        - $ref: '#/components/parameters/AIMaxTokens'
      responses:
        200:
          description: AI prediction result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIPrediction'
  /api/v1/endpoint:
    get:
      tags: [Core]
      summary: Get important data
      produces:
        - application/json
      parameters:
        - name: X-Audit-Token
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success response
          schema:
            $ref: '#/definitions/DataResponse'
  /api/v1/sutazai-safe:
    post:
      security:
        - SutazAiSafe: []
      parameters:
        - name: X-SutazAi-Nonce
          in: header
          required: true
          schema:
            type: string
            pattern: '^[A-Za-z0-9_-]+$'
  /api/v1/audit:
    get:
      security:
        - SutazAiSafe: []
      parameters:
        - name: X-Audit-Token
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        423:
          description: Locked (Forensic preservation)
  /api/data:
    get:
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/users:
    get:
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
      security:
        - BearerAuth: []
    post:
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          example: Bearer abc123
      responses:
        201:
          description: User created
        400:
          description: Invalid input

definitions:
  ErrorResponse:
    type: object
    properties:
      error:
        type: string
      message:
        type: string
      code:
        type: integer
  ChatResponse:
    type: object
    properties:
      response:
        type: string
      confidence:
        type: number
        minimum: 0
        maximum: 1

# Add response schemas for error cases
responses:
  UnauthorizedError:
    description: API key is missing or invalid
  NotFoundError:
    description: Resource not found
  InternalError:
    description: Internal server error
  TooManyRequests:
    description: Rate limit exceeded
    headers:
      Retry-After:
        description: Number of seconds to wait before retrying
        type: integer

# Add rate limiting headers
parameters:
  X-RateLimit-Limit:
    description: Request limit per hour
    type: integer
  X-RateLimit-Remaining:
    description: Number of requests remaining
    type: integer

# Remove components section and move schemas to definitions 
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    BearerAuth:
      $ref: '#/securityDefinitions/BearerAuth'
  schemas:
    AIPrediction:
      type: object
      properties:
        prediction: {type: string}
        confidence: {type: number}
    UserList:
      type: object
      properties:
        users: 
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id: 
          type: string
          format: uuid
    ApiResponse:
      type: object
      properties:
        status: 
          type: string
          enum: [success, error]
        data:
          type: object

security:
  - BearerAuth: []
  - ApiKeyAuth: []

# Fix duplicate components section
components:
  schemas:
    AIPrediction:
      type: object
      properties:
        prediction:
          type: string
        confidence:
          type: number
          format: float

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY 