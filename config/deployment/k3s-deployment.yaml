# K3s Deployment Configuration for SutazAI
# Production-ready Kubernetes manifests for K3s deployment
# Created: August 10, 2025

---
apiVersion: v1
kind: Namespace
metadata:
  name: sutazai
  labels:
    name: sutazai
    environment: production

---
# PostgreSQL StatefulSet with persistent storage
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: sutazai
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      securityContext:
        runAsUser: 70
        runAsGroup: 70
        fsGroup: 70
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: sutazai
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: scram-sha-256
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1536Mi"
            cpu: "1500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sutazai
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sutazai
            - -d
            - sutazai
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - SETUID
            - SETGID
      volumes:
      - name: init-sql
        configMap:
          name: postgres-init
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: local-path
      resources:
        requests:
          storage: 10Gi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sutazai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tier: cache
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --save
        - ""
        - --appendonly
        - "no"
        - --maxmemory
        - "512mb"
        - --maxmemory-policy
        - allkeys-lru
        - --tcp-backlog
        - "511"
        - --tcp-keepalive
        - "60"
        - --timeout
        - "300"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - SETUID
            - SETGID
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: sutazai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: application
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done']
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis 6379; do echo waiting for redis; sleep 2; done']
      containers:
      - name: backend
        image: sutazai-backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: API_V1_STR
          value: /api/v1
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: database-url
        - name: REDIS_URL
          value: redis://redis:6379/0
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: jwt-secret
        - name: SUTAZAI_ENV
          value: production
        - name: LOG_LEVEL
          value: INFO
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        volumeMounts:
        - name: data
          mountPath: /data
        - name: logs
          mountPath: /logs
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      - name: logs
        emptyDir: {}

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: sutazai
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: presentation
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: sutazai-frontend:latest
        ports:
        - containerPort: 8501
          name: http
        env:
        - name: BACKEND_URL
          value: http://backend:8000
        - name: STREAMLIT_SERVER_ADDRESS
          value: 0.0.0.0
        - name: STREAMLIT_SERVER_PORT
          value: "8501"
        - name: STREAMLIT_SERVER_HEADLESS
          value: "true"
        - name: STREAMLIT_BROWSER_GATHER_USAGE_STATS
          value: "false"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /_stcore/health
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}

---
# Hardware Resource Optimizer Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hardware-resource-optimizer
  namespace: sutazai
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hardware-resource-optimizer
  template:
    metadata:
      labels:
        app: hardware-resource-optimizer
        tier: agent
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: hardware-resource-optimizer
        image: sutazai-hardware-resource-optimizer:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: AGENT_TYPE
          value: hardware-resource-optimizer
        - name: API_ENDPOINT
          value: http://backend:8000
        - name: REDIS_URL
          value: redis://redis:6379/0
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq-secret
              key: url
        - name: LOG_LEVEL
          value: INFO
        - name: PORT
          value: "8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - SYS_PTRACE

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: sutazai
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
  clusterIP: None

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: sutazai
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: sutazai
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: backend

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: sutazai
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8501
  selector:
    app: frontend

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sutazai-ingress
  namespace: sutazai
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - sutazai.example.com
    secretName: sutazai-tls
  rules:
  - host: sutazai.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8000

---
# HorizontalPodAutoscaler for Backend
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: sutazai
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# NetworkPolicy for database tier
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-network-policy
  namespace: sutazai
spec:
  podSelector:
    matchLabels:
      tier: database
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: application
    ports:
    - protocol: TCP
      port: 5432

---
# NetworkPolicy for cache tier
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cache-network-policy
  namespace: sutazai
spec:
  podSelector:
    matchLabels:
      tier: cache
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: application
    - podSelector:
        matchLabels:
          tier: agent
    ports:
    - protocol: TCP
      port: 6379

---
# PersistentVolumeClaims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: sutazai
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backend-data-pvc
  namespace: sutazai
spec:
  accessModes:
  - ReadWriteMany
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi

---
# ConfigMap for PostgreSQL initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: sutazai
data:
  init.sql: |
    -- SutazAI Database Schema Initialization
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        username VARCHAR(255) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS agents (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        name VARCHAR(255) NOT NULL,
        type VARCHAR(100) NOT NULL,
        status VARCHAR(50) DEFAULT 'inactive',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE INDEX idx_agents_status ON agents(status);
    CREATE INDEX idx_agents_type ON agents(type);

---
# Secrets (base64 encoded - replace with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: sutazai
type: Opaque
data:
  username: c3V0YXphaQ==  # sutazai
  password: Y2hhbmdlbWU=  # changeme

---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  namespace: sutazai
type: Opaque
data:
  database-url: cG9zdGdyZXNxbDovL3N1dGF6YWk6Y2hhbmdlbWVAcG9zdGdyZXM6NTQzMi9zdXRhemFp  # postgresql://sutazai:changeme@postgres:5432/sutazai
  jwt-secret: c3VwZXJzZWNyZXRrZXk=  # supersecretkey

---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-secret
  namespace: sutazai
type: Opaque
data:
  url: YW1xcDovL3N1dGF6YWk6Y2hhbmdlbWVAcmFiYml0bXE6NTY3Mi8=  # amqp://sutazai:changeme@rabbitmq:5672/