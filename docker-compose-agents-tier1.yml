version: '3.9'

# Tier 1: Critical Infrastructure Agents
# Total Memory: ~2GB
# These agents are essential for system operation and resource management

networks:
  sutazai-network:
    external: true
    name: sutazaiapp_sutazai-network

services:
  # 1. Ollama Integration Specialist - Core model management
  ollama-integration-specialist:
    build:
      context: ./agents/ollama-integration
      dockerfile: Dockerfile
    container_name: sutazai-ollama-specialist
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=http://sutazai-ollama:11434
      - OPENAI_API_BASE=http://sutazai-litellm:4000
      - OPENAI_API_KEY=local
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/models
      - ./config/ollama:/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - sutazai-network
    # Ollama is running externally as sutazai-ollama
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8520/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 2. LiteLLM Proxy Manager - API compatibility layer
  litellm-proxy-manager:
    build:
      context: ./agents/litellm-manager
      dockerfile: Dockerfile
    container_name: sutazai-litellm-manager
    restart: unless-stopped
    environment:
      - LITELLM_HOST=http://host.docker.internal:4000
      - DATABASE_URL=postgresql://postgres:postgres@sutazai-postgres:5432/litellm_db
      - TELEMETRY=false
    volumes:
      - ./config/litellm:/config
      - ./logs/litellm:/logs
    networks:
      - sutazai-network
    # PostgreSQL is running externally as sutazai-postgres
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8521/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 3. Infrastructure DevOps Manager - Container and system management
  infrastructure-devops-manager:
    build:
      context: ./agents/infrastructure-devops
      dockerfile: Dockerfile
    container_name: sutazai-devops-manager
    restart: unless-stopped
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MONITORING_ENABLED=true
      - PROMETHEUS_URL=http://sutazai-prometheus:9090
      - GRAFANA_URL=http://sutazai-grafana:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts:/scripts:ro
      - ./logs/devops:/logs
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8522/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 4. Hardware Resource Optimizer - Dynamic resource management
  hardware-resource-optimizer:
    build:
      context: ./agents/hardware-optimizer
      dockerfile: Dockerfile
    container_name: sutazai-hardware-optimizer
    restart: unless-stopped
    environment:
      - MAX_MEMORY_MB=8192
      - CPU_THRESHOLD=80
      - MEMORY_THRESHOLD=85
      - OPTIMIZATION_INTERVAL=60
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - ./logs/optimizer:/logs
    networks:
      - sutazai-network
    privileged: true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8523/health"]
      interval: 20s
      timeout: 10s
      retries: 3

  # 5. Context Optimization Engineer - Token and context management
  context-optimization-engineer:
    build:
      context: ./agents/context-optimizer
      dockerfile: Dockerfile
    container_name: sutazai-context-optimizer
    restart: unless-stopped
    environment:
      - OPENAI_API_BASE=http://sutazai-litellm:4000
      - OPENAI_API_KEY=local
      - MAX_CONTEXT_LENGTH=4096
      - OPTIMIZATION_LEVEL=aggressive
    volumes:
      - ./config/context-engineering:/config
      - ./cache/context:/cache
      - ./logs/context:/logs
    networks:
      - sutazai-network
    # LiteLLM is running externally on host port 4000
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8524/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring exporter for Tier 1 agents
  tier1-exporter:
    image: prom/node-exporter:latest
    container_name: sutazai-tier1-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M