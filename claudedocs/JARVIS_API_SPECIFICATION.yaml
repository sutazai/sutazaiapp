openapi: 3.0.0
info:
  title: JARVIS Multi-Agent AI System API
  version: 3.0.0
  description: |
    Complete API specification for JARVIS AI orchestration platform.
    Provides voice control, multi-agent coordination, and self-improvement capabilities.
  contact:
    name: SutazAI Team
    email: support@sutazai.local

servers:
  - url: http://localhost:10010
    description: Backend API Server
  - url: http://localhost:11321
    description: JARVIS Core Server
  - url: http://localhost:10005
    description: Kong API Gateway

tags:
  - name: jarvis
    description: JARVIS voice and chat operations
  - name: agents
    description: Multi-agent orchestration
  - name: models
    description: LLM model management
  - name: tasks
    description: Task execution and monitoring
  - name: system
    description: System health and monitoring
  - name: improvement
    description: Self-improvement operations

paths:
  # === JARVIS ENDPOINTS ===
  /api/v1/jarvis/command:
    post:
      tags: [jarvis]
      summary: Process JARVIS command
      operationId: processJarvisCommand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Command text
                  example: "Hey JARVIS, generate a Python function for fibonacci"
                context:
                  type: object
                  description: Optional context
                voice_enabled:
                  type: boolean
                  default: false
      responses:
        200:
          description: Command processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JarvisResponse'
        400:
          $ref: '#/components/responses/BadRequest'

  /api/v1/jarvis/voice:
    post:
      tags: [jarvis]
      summary: Process voice input
      operationId: processVoiceInput
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - audio
              properties:
                audio:
                  type: string
                  format: binary
                  description: Audio file (WAV, MP3)
                format:
                  type: string
                  enum: [wav, mp3, webm]
                  default: wav
      responses:
        200:
          description: Voice processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoiceResponse'

  /ws/jarvis:
    get:
      tags: [jarvis]
      summary: WebSocket for real-time JARVIS interaction
      operationId: jarvisWebSocket
      responses:
        101:
          description: WebSocket connection established

  # === AGENT ENDPOINTS ===
  /api/v1/agents:
    get:
      tags: [agents]
      summary: List all agents
      operationId: listAgents
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive, all]
            default: all
        - name: capability
          in: query
          schema:
            type: string
      responses:
        200:
          description: List of agents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'

  /api/v1/agents/{agentName}:
    get:
      tags: [agents]
      summary: Get agent details
      operationId: getAgent
      parameters:
        - name: agentName
          in: path
          required: true
          schema:
            type: string
            enum: [letta, autogpt, agent-zero, crewai, gpt-engineer]
      responses:
        200:
          description: Agent details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDetail'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags: [agents]
      summary: Execute task on specific agent
      operationId: executeAgentTask
      parameters:
        - name: agentName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        202:
          description: Task accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /api/v1/agents/orchestrate:
    post:
      tags: [agents]
      summary: Orchestrate multi-agent task
      operationId: orchestrateTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - task
              properties:
                task:
                  type: string
                  description: Task description
                strategy:
                  type: string
                  enum: [parallel, sequential, collaborative]
                  default: collaborative
                agents:
                  type: array
                  items:
                    type: string
                  description: Specific agents to use (optional)
      responses:
        202:
          description: Orchestration started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationResponse'

  # === MODEL ENDPOINTS ===
  /api/v1/models:
    get:
      tags: [models]
      summary: List available models
      operationId: listModels
      responses:
        200:
          description: List of models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'

  /api/v1/models/select:
    post:
      tags: [models]
      summary: Select model based on complexity
      operationId: selectModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - task
              properties:
                task:
                  type: string
                complexity:
                  type: number
                  minimum: 0
                  maximum: 1
      responses:
        200:
          description: Model selected
          content:
            application/json:
              schema:
                type: object
                properties:
                  model:
                    type: string
                    enum: [tinyllama, qwen3]
                  reason:
                    type: string

  /api/v1/models/generate:
    post:
      tags: [models]
      summary: Generate with selected model
      operationId: generateWithModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
              properties:
                prompt:
                  type: string
                model:
                  type: string
                  enum: [tinyllama, qwen3, auto]
                  default: auto
                max_tokens:
                  type: integer
                  default: 512
                temperature:
                  type: number
                  default: 0.7
                stream:
                  type: boolean
                  default: false
      responses:
        200:
          description: Generation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerationResponse'
            text/event-stream:
              schema:
                type: string
                description: Server-sent events for streaming

  # === TASK ENDPOINTS ===
  /api/v1/tasks:
    get:
      tags: [tasks]
      summary: List tasks
      operationId: listTasks
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        200:
          description: List of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'

    post:
      tags: [tasks]
      summary: Create new task
      operationId: createTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        201:
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /api/v1/tasks/{taskId}:
    get:
      tags: [tasks]
      summary: Get task status
      operationId: getTaskStatus
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDetail'
        404:
          $ref: '#/components/responses/NotFound'

  /api/v1/tasks/{taskId}/cancel:
    post:
      tags: [tasks]
      summary: Cancel task
      operationId: cancelTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Task cancelled
        404:
          $ref: '#/components/responses/NotFound'

  # === SYSTEM ENDPOINTS ===
  /api/v1/system/health:
    get:
      tags: [system]
      summary: System health check
      operationId: getSystemHealth
      responses:
        200:
          description: System healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /api/v1/system/metrics:
    get:
      tags: [system]
      summary: Get system metrics
      operationId: getSystemMetrics
      responses:
        200:
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'

  /api/v1/system/agents/status:
    get:
      tags: [system]
      summary: Get all agent statuses
      operationId: getAgentStatuses
      responses:
        200:
          description: Agent statuses
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AgentStatus'

  # === SELF-IMPROVEMENT ENDPOINTS ===
  /api/v1/improvement/analyze:
    post:
      tags: [improvement]
      summary: Analyze system for improvements
      operationId: analyzeSystem
      responses:
        200:
          description: Analysis complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImprovementAnalysis'

  /api/v1/improvement/generate:
    post:
      tags: [improvement]
      summary: Generate improvement code
      operationId: generateImprovement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - analysis_id
              properties:
                analysis_id:
                  type: string
                target:
                  type: string
                  enum: [security, performance, tech_debt]
      responses:
        200:
          description: Code generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImprovementSuggestion'

  /api/v1/improvement/apply:
    post:
      tags: [improvement]
      summary: Apply improvement (requires approval)
      operationId: applyImprovement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - suggestion_id
                - approved
              properties:
                suggestion_id:
                  type: string
                approved:
                  type: boolean
                approval_token:
                  type: string
      responses:
        200:
          description: Improvement applied
        403:
          description: Approval required

components:
  schemas:
    JarvisResponse:
      type: object
      properties:
        command:
          type: string
        intent:
          type: object
          properties:
            type:
              type: string
            confidence:
              type: number
        agent_used:
          type: string
        response:
          type: string
        model_used:
          type: string
        processing_time:
          type: number
        metadata:
          type: object

    VoiceResponse:
      type: object
      properties:
        transcription:
          type: string
        wake_word_detected:
          type: boolean
        command:
          type: string
        response:
          type: string
        audio_url:
          type: string
          format: uri

    Agent:
      type: object
      properties:
        name:
          type: string
        port:
          type: integer
        status:
          type: string
          enum: [active, inactive, starting]
        capabilities:
          type: array
          items:
            type: string
        resource_usage:
          type: object
          properties:
            memory_mb:
              type: integer
            cpu_percent:
              type: number

    AgentDetail:
      allOf:
        - $ref: '#/components/schemas/Agent'
        - type: object
          properties:
            health_check_url:
              type: string
              format: uri
            current_tasks:
              type: integer
            total_processed:
              type: integer
            average_processing_time:
              type: number
            last_active:
              type: string
              format: date-time

    AgentStatus:
      type: object
      properties:
        healthy:
          type: boolean
        uptime:
          type: integer
        current_load:
          type: number
        queue_depth:
          type: integer

    TaskRequest:
      type: object
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum: [code_generation, research, automation, security, financial, general]
        data:
          type: object
        priority:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
        timeout:
          type: integer
          description: Timeout in seconds
          default: 300

    TaskResponse:
      type: object
      properties:
        task_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [accepted, queued]
        estimated_completion:
          type: string
          format: date-time
        queue_position:
          type: integer

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed, cancelled]
        created_at:
          type: string
          format: date-time
        agent:
          type: string

    TaskDetail:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            started_at:
              type: string
              format: date-time
            completed_at:
              type: string
              format: date-time
            result:
              type: object
            error:
              type: string
            processing_time:
              type: number
            retries:
              type: integer

    OrchestrationResponse:
      type: object
      properties:
        orchestration_id:
          type: string
          format: uuid
        strategy:
          type: string
        agents_assigned:
          type: array
          items:
            type: string
        subtasks:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              agent:
                type: string
              status:
                type: string

    Model:
      type: object
      properties:
        name:
          type: string
        size_mb:
          type: integer
        context_window:
          type: integer
        loaded:
          type: boolean
        parameters:
          type: integer
        capabilities:
          type: array
          items:
            type: string

    GenerationResponse:
      type: object
      properties:
        response:
          type: string
        model_used:
          type: string
        tokens_used:
          type: integer
        processing_time:
          type: number
        cached:
          type: boolean

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              latency_ms:
                type: number
        timestamp:
          type: string
          format: date-time

    SystemMetrics:
      type: object
      properties:
        cpu_percent:
          type: number
        memory:
          type: object
          properties:
            used_gb:
              type: number
            total_gb:
              type: number
            percent:
              type: number
        disk:
          type: object
          properties:
            used_gb:
              type: number
            total_gb:
              type: number
            percent:
              type: number
        network:
          type: object
          properties:
            bytes_sent:
              type: integer
            bytes_recv:
              type: integer
        agents:
          type: object
          properties:
            active:
              type: integer
            total:
              type: integer
        tasks:
          type: object
          properties:
            pending:
              type: integer
            processing:
              type: integer
            completed_24h:
              type: integer

    ImprovementAnalysis:
      type: object
      properties:
        analysis_id:
          type: string
        timestamp:
          type: string
          format: date-time
        security_issues:
          type: array
          items:
            type: object
            properties:
              severity:
                type: string
                enum: [low, medium, high, critical]
              description:
                type: string
              file:
                type: string
              line:
                type: integer
        performance_issues:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              impact:
                type: string
              location:
                type: string
        tech_debt:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              description:
                type: string
              estimated_effort:
                type: string

    ImprovementSuggestion:
      type: object
      properties:
        suggestion_id:
          type: string
        type:
          type: string
        description:
          type: string
        code:
          type: string
        files_affected:
          type: array
          items:
            type: string
        requires_approval:
          type: boolean
        risk_level:
          type: string
          enum: [low, medium, high]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: object

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                default: "Resource not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []