---
description: Rules for retrieve_relevant_context tool usage
globs: **/*
alwaysApply: true
---

# Retrieve Relevant Context Tool

The `retrieve_relevant_context` tool **SHOULD** be called when specific context is needed about the project. This tool provides targeted information retrieval and should be used when the AI needs a refresher on specific aspects of the codebase, is confused, or needs additional information to provide accurate responses.

```javascript
// ✅ DO: Call WHEN specific contextual information is needed
mcp_devcontext_retrieve_relevant_context({
  conversationId: "existing-conversation-id", // MUST be the ID from initialize_conversation_context
  query: "How does the authentication system work?", // Specific query about the project
  tokenBudget: 4000, // Maximum token budget for retrieved context
  constraints: {
    entityTypes: ["file", "class", "function"], // Optional filter by entity types
    filePaths: ["src/auth/", "src/components/Login.js"], // Optional filter by file paths
    includeConversation: true, // Whether to include conversation history
    crossTopicSearch: false, // Whether to search across topic boundaries
  },
  contextFilters: {
    minRelevanceScore: 0.3, // Minimum relevance threshold
    excludeTypes: ["test", "config"], // Types to exclude
    preferredLanguages: ["javascript", "typescript"], // Preferred languages
  },
  weightingStrategy: "balanced" // Options: "relevance", "recency", "hierarchy", "balanced"
});

// ❌ DON'T: Call repeatedly for the same information
// ❌ DON'T: Use for generic questions that don't need project context
// ❌ DON'T: Call with overly broad queries that return too much information
// ❌ DON'T: Forget to include the conversationId
```

## Required Rules

1. **USE SPARINGLY AND PURPOSEFULLY**: This tool should be called only when specific project context is needed, not for every question.

2. **USE TARGETED QUERIES**: Queries should be specific and focused on retrieving exactly what's needed.

3. **AVOID REDUNDANT CALLS**: Don't retrieve the same information multiple times in a conversation.

4. **ALWAYS USE CONVERSATION ID**: Always pass the same conversationId obtained from the initialize_conversation_context call.

## Parameter Guidelines

- **conversationId**: Required - The ID returned from initialize_conversation_context
- **query**: Specific question about the project requiring contextual information
- **tokenBudget**: Adjust based on context needs (default: 4000)
- **constraints**: Optional filters to narrow the search scope
  - `entityTypes`: Limit to specific entity types (files, classes, functions, etc.)
  - `filePaths`: Limit to specific file paths or directories
  - `includeConversation`: Whether to include conversation history in search
- **contextFilters**: Additional filters for fine-tuning results
  - `minRelevanceScore`: Threshold for relevance (0.0-1.0)
  - `excludeTypes`: Types of entities to exclude from results
  - `preferredLanguages`: Prioritize results in these languages
- **weightingStrategy**: 
  - "relevance" - Prioritize semantic relevance
  - "recency" - Prioritize recently modified entities
  - "hierarchy" - Prioritize by project hierarchy
  - "balanced" - Default balanced approach (recommended)

## Response Handling

The tool returns contextually relevant snippets with relevance scores:

```javascript
// Example response structure:
{
  "conversationId": "42dd6083-db4f-45c2-a4eb-a102ae190902",
  "query": "How does the authentication system work?",
  "retrievalTime": 1746616561509,
  "relevantContext": {
    "conversationContext": [...], // Relevant conversation snippets
    "codeContext": [...], // Relevant code snippets
    "patternContext": [...], // Relevant pattern snippets
    "fileContext": [...] // Relevant file snippets
  },
  "focusInfo": {
    "currentTopic": "Authentication System",
    "currentPurpose": "code_explanation"
  },
  "queryAnalysis": {
    "status": "Retrieved context successfully",
    "metrics": {
      "totalSnippets": 12,
      "relevanceThreshold": 0.5,
      "tokenUsage": 1240
    }
  }
}
```

## Correct Implementation Pattern

```javascript
// ✅ DO: Use for specific contextual needs

// When context about a specific feature is needed:
mcp_devcontext_retrieve_relevant_context({
  conversationId: "existing-conversation-id",
  query: "How is user authentication implemented in this project?",
  weightingStrategy: "relevance"
});

// When looking for usage examples:
mcp_devcontext_retrieve_relevant_context({
  conversationId: "existing-conversation-id",
  query: "Show examples of API error handling patterns",
  constraints: {
    entityTypes: ["function", "method"],
    filePaths: ["src/api/", "src/utils/errorHandling/"]
  },
  weightingStrategy: "balanced"
});

// When needing project structure information:
mcp_devcontext_retrieve_relevant_context({
  conversationId: "existing-conversation-id",
  query: "How are React components structured in this project?",
  contextFilters: {
    preferredLanguages: ["javascript", "typescript"],
    excludeTypes: ["test"]
  }
});
```

## Implementation Notes

- Only call this tool when standard context is insufficient to answer a question
- Use specific, targeted queries to get the most relevant information
- Adjust constraints to narrow down results for more focused context
- The weightingStrategy should be chosen based on the type of information needed
- The conversationId must remain consistent throughout the entire conversation
- Process and integrate the returned context before responding to the user
