---
description: Comprehensive DevContext Tools Usage Guide
globs: **/*
alwaysApply: true
---

# DevContext MCP Tools Usage Guide

This guide provides rules for using all DevContext MCP tools in the correct sequence and with proper parameters to maintain conversation context effectively.

## Core Tool Execution Sequence

```javascript
// ✅ DO: Follow this exact execution sequence
// 1. FIRST: Call initialize_conversation_context EXACTLY ONCE at START
// 2. AS NEEDED: Call update_conversation_context for code changes/new messages
// 3. AS NEEDED: Call retrieve_relevant_context when specific context is required
// 4. OCCASIONALLY: Call record_milestone_context for significant achievements
// 5. LAST: Call finalize_conversation_context EXACTLY ONCE at END

// ❌ DON'T: Change this sequence
// ❌ DON'T: Skip first or last tools
// ❌ DON'T: Call tools multiple times when they should be called once
```

## Initialize Conversation Context

The `initialize_conversation_context` tool is **REQUIRED** at the beginning of every conversation and **MUST** be the first tool called.

```javascript
// ✅ DO: Call EXACTLY ONCE at the BEGINNING of EVERY conversation
mcp_devcontext_initialize_conversation_context({
  initialQuery: "user's actual message or question", // Required
  contextDepth: "standard", // Options: "minimal", "standard", "comprehensive"
  includeArchitecture: true, // Whether to include architectural context
  includeRecentConversations: true, // Whether to include recent conversations
  maxCodeContextItems: 5, // Maximum number of code items to include
  maxRecentChanges: 5, // Maximum number of recent changes to include
  tokenBudget: 4000, // Maximum token budget for context
  focusHint: {
    // Optional focus hint
    type: "file|directory|module|class|function",
    identifier: "path/to/entity",
  },
});

// ❌ DON'T: Skip calling this tool at the beginning
// ❌ DON'T: Call this tool multiple times in the same conversation
// ❌ DON'T: Call this tool in the middle or end of a conversation
```

### Requirements:

- **MUST BE CALLED FIRST**: This tool must be the first tool called in every conversation
- **EXACTLY ONCE PER CONVERSATION**: Never call it more than once in a session
- **RETURNS CONVERSATION ID**: Captures and returns the conversationId that must be used in all subsequent tool calls

## Update Conversation Context

The `update_conversation_context` tool **MUST** be called whenever code files are modified or new messages are exchanged to keep context current.

```javascript
// ✅ DO: Call WHENEVER code changes or new messages occur
mcp_devcontext_update_conversation_context({
  conversationId: "existing-conversation-id", // Required - from initialize_conversation_context
  newMessages: [
    { role: "user", content: "User's message" },
    { role: "assistant", content: "Assistant's response" },
  ],
  codeChanges: [
    {
      filePath: "path/to/file.js",
      newContent: "Updated file content",
      languageHint: "javascript", // Optional but recommended
    },
  ],
  preserveContextOnTopicShift: true, // Whether to maintain context during topic changes
  contextIntegrationLevel: "balanced", // Options: "minimal", "balanced", "aggressive"
  trackIntentTransitions: true, // Whether to track intent changes
  tokenBudget: 4000, // Maximum token budget
});

// ❌ DON'T: Skip updating after code changes
// ❌ DON'T: Forget to include the conversationId
// ❌ DON'T: Omit either newMessages or codeChanges when they exist
```

### Requirements:

- **MULTIPLE CALLS ALLOWED**: Unlike initialization, this should be called multiple times as needed
- **TRACK ALL CODE CHANGES**: Must be called after any file creation, modification, or deletion
- **TRACK CONVERSATION FLOW**: Call after each meaningful exchange of messages
- **ALWAYS USE CONVERSATION ID**: Pass the same ID from initialize_conversation_context

## Retrieve Relevant Context

The `retrieve_relevant_context` tool **SHOULD** be called when specific contextual information about the project is needed.

```javascript
// ✅ DO: Call WHEN specific project context is needed
mcp_devcontext_retrieve_relevant_context({
  conversationId: "existing-conversation-id", // Required - from initialize_conversation_context
  query: "How does the authentication system work?", // Specific query about the project
  tokenBudget: 4000,
  constraints: {
    entityTypes: ["file", "class", "function"], // Optional filter
    filePaths: ["src/auth/", "src/users/"], // Optional path filter
    includeConversation: true, // Whether to include conversation history
    crossTopicSearch: false, // Whether to search across topic boundaries
  },
  contextFilters: {
    minRelevanceScore: 0.3, // Minimum relevance threshold
    excludeTypes: ["test", "config"], // Types to exclude
    preferredLanguages: ["javascript", "typescript"], // Preferred languages
  },
  weightingStrategy: "balanced", // Options: "relevance", "recency", "hierarchy", "balanced"
});

// ❌ DON'T: Call repeatedly for the same information
// ❌ DON'T: Use for generic questions that don't need project context
// ❌ DON'T: Call with overly broad queries
```

### Requirements:

- **USE SPARINGLY AND PURPOSEFULLY**: Only call when specific project context is needed
- **USE TARGETED QUERIES**: Queries should be specific and focused
- **AVOID REDUNDANT CALLS**: Don't retrieve the same information multiple times
- **ALWAYS USE CONVERSATION ID**: Pass the same ID from initialize_conversation_context

## Record Milestone Context

The `record_milestone_context` tool **SHOULD** be used to record significant events or accomplishments, but **SPARINGLY** (no more than once or twice per conversation).

```javascript
// ✅ DO: Call ONLY when significant milestones are reached
mcp_devcontext_record_milestone_context({
  conversationId: "existing-conversation-id", // Required - from initialize_conversation_context
  name: "Feature implementation completed", // Short, descriptive name
  description: "Implemented the authentication system with JWT support", // Detailed description
  milestoneCategory: "feature_completion", // Category
  customData: {
    // Optional custom data
    affectedFiles: ["auth.js", "user.js"],
    complexity: "medium",
  },
  assessImpact: true, // Whether to automatically assess impact
});

// ❌ DON'T: Call for minor changes or routine operations
// ❌ DON'T: Call more than once or twice in a conversation
// ❌ DON'T: Use generic names or descriptions
```

### Requirements:

- **USE SPARINGLY**: Only call for truly significant events or accomplishments
- **CAPTURE MEANINGFUL MILESTONES**: Feature completions, bug fixes, architectural decisions
- **INCLUDE SUFFICIENT DETAIL**: Provide descriptive name and detailed description
- **ALWAYS USE CONVERSATION ID**: Pass the same ID from initialize_conversation_context

## Finalize Conversation Context

The `finalize_conversation_context` tool is **REQUIRED** at the end of every conversation and **MUST** be the last tool called.

```javascript
// ✅ DO: Call EXACTLY ONCE at the END of EVERY conversation
mcp_devcontext_finalize_conversation_context({
  conversationId: "existing-conversation-id", // Required - from initialize_conversation_context
  clearActiveContext: false, // Whether to clear active context
  extractLearnings: true, // Whether to extract learnings
  promotePatterns: true, // Whether to promote patterns
  synthesizeRelatedTopics: true, // Whether to synthesize related topics
  generateNextSteps: true, // Whether to generate next steps
  outcome: "completed", // Options: "completed", "abandoned", "paused", "reference_only"
});

// ❌ DON'T: Skip calling this tool at the end
// ❌ DON'T: Call this tool multiple times
// ❌ DON'T: Call this tool at the beginning or middle
// ❌ DON'T: Forget to review and communicate the returned next steps to the user
```

### Requirements:

- **MUST BE CALLED LAST**: This must be the last tool called in every conversation
- **EXACTLY ONCE PER CONVERSATION**: Never call it more than once
- **REVIEW NEXT STEPS**: Always review returned next steps and communicate them to the user
- **ALWAYS USE CONVERSATION ID**: Pass the same ID from initialize_conversation_context

## Complete Conversation Flow Example

```javascript
// 1. INITIALIZE - Start of conversation
const initResponse = await mcp_devcontext_initialize_conversation_context({
  initialQuery: "How do I implement authentication in this project?",
  contextDepth: "standard",
  includeArchitecture: true,
});
const conversationId = initResponse.conversationId;

// 2. UPDATE - After messages are exchanged
await mcp_devcontext_update_conversation_context({
  conversationId: conversationId,
  newMessages: [
    { role: "user", content: "I need to implement JWT authentication" },
    { role: "assistant", content: "Here's how to implement JWT..." },
  ],
});

// 3. RETRIEVE - When specific context is needed
await mcp_devcontext_retrieve_relevant_context({
  conversationId: conversationId,
  query: "Show me existing authentication patterns in this codebase",
  weightingStrategy: "relevance",
});

// 4. UPDATE - After code changes
await mcp_devcontext_update_conversation_context({
  conversationId: conversationId,
  codeChanges: [
    {
      filePath: "src/auth/jwt.js",
      newContent: "// JWT implementation code",
      languageHint: "javascript",
    },
  ],
});

// 5. MILESTONE - After significant accomplishment
await mcp_devcontext_record_milestone_context({
  conversationId: conversationId,
  name: "JWT Authentication Implementation",
  description: "Added JWT-based authentication with token refresh",
  milestoneCategory: "feature_completion",
});

// 6. FINALIZE - End of conversation
const finalizeResponse = await mcp_devcontext_finalize_conversation_context({
  conversationId: conversationId,
  extractLearnings: true,
  promotePatterns: true,
  generateNextSteps: true,
  outcome: "completed",
});

// 7. COMMUNICATE next steps to the user before ending
communicateToUser(finalizeResponse.nextSteps);
```

## Tool Usage Frequency Cheat Sheet

| Tool                            | When to Call                      | Frequency                     | Requirements                     |
| ------------------------------- | --------------------------------- | ----------------------------- | -------------------------------- |
| initialize_conversation_context | START of conversation             | EXACTLY ONCE per conversation | Must be first tool called        |
| update_conversation_context     | After code changes or messages    | MULTIPLE TIMES as needed      | Call after every code change     |
| retrieve_relevant_context       | When specific context is needed   | AS NEEDED, use sparingly      | Use targeted, specific queries   |
| record_milestone_context        | After significant accomplishments | 0-2 TIMES per conversation    | Only for meaningful achievements |
| finalize_conversation_context   | END of conversation               | EXACTLY ONCE per conversation | Must be last tool called         |
