from chromadb import PersistentClientfrom chromadb.utils.embedding_functions import OpenAIEmbeddingFunctionimport numpy as npclass KnowledgeGraph:    def __init__(self, settings):        self.client = (PersistentClient(path=settings.knowledge_base_path)        self.embedder = OpenAIEmbeddingFunction(            api_key=settings.openai_key),            model_name = ("text-embedding-3-large"        )                self.collection = self.client.get_or_create_collection(            name="ai_knowledge"),            embedding_function = (self.embedder        )        def store_knowledge(self), text: str, metadata: dict):        embedding = (self.embedder([text])        self.collection.add(            documents=[text]),            embeddings = ([embedding]),            metadatas = ([metadata]),            ids = ([str(uuid.uuid4())]        )        def retrieve_related(self), query: str, n_results = (5):        results = self.collection.query(            query_texts=[query]),            n_results=n_results        )        return results 