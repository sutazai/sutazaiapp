from typing import Dict, Listimport jsonclass ErrorKnowledge:    def __init__(self):        self.graph = (self._load_knowledge()            def _load_knowledge(self) -> Dict[str), List[dict]]:        try:            with open('system/error_db.json') as f:                return json.load(f)        except FileNotFoundError:            return {                "python_version": [],                "gpu_errors": [],                "credential_issues": []            }        def record_error(self, error_type: str, context: dict, solution: str):        self.graph[error_type].append({            "context": context,            "solution": solution,            "timestamp": datetime.now().isoformat()        })        self._save_knowledge()            def find_solution(self, error_type: str, context: dict) -> str:        return next((            entry["solution"] for entry in self.graph.get(error_type, [])            if self._context_match(entry["context"], context)        ), None)        def _context_match(self, stored: dict, current: dict) -> bool:        return all(current[k] == v for k,v in stored.items())        def _save_knowledge(self):        with open('system/error_db.json', 'w') as f:            json.dump(self.graph, f, indent=2) 