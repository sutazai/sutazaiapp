# SutazAI - ULTRA OPTIMIZED Production Deployment
# ENTERPRISE GRADE - Optimized for performance and security
# 100% NON-ROOT containers, minimal resource usage, production ready

networks:
  sutazai-network:
    external: true
    name: sutazai-network

services:
  # === CORE DATABASE LAYER - SECURED & OPTIMIZED ===
  postgres:
    container_name: sutazai-postgres
    image: sutazai-postgres-secure:latest
    user: postgres  # NON-ROOT
    mem_limit: 1G
    cpus: 1.5
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
    ports: ["10000:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./IMPORTANT/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks: [sutazai-network]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 30s
      retries: 3

  redis:
    container_name: sutazai-redis  
    image: sutazai-redis-secure:latest
    user: redis  # NON-ROOT
    mem_limit: 512M
    cpus: 0.5
    ports: ["10001:6379"]
    volumes:
      - redis_data:/data
      - ./config/redis-optimized.conf:/usr/local/etc/redis/redis.conf:ro
    restart: unless-stopped
    networks: [sutazai-network]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      
  # === AI/ML LAYER - OPTIMIZED FOR PERFORMANCE ===
  ollama:
    container_name: sutazai-ollama
    image: sutazai-ollama-secure:latest
    user: ollama  # NON-ROOT (FIXED\!)
    mem_limit: 2G
    cpus: 2
    ports: ["10104:11434"]
    volumes:
      - ollama_data:/home/ollama/.ollama
      - models_data:/models
    restart: unless-stopped
    networks: [sutazai-network]
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_NUM_PARALLEL: "1"
      
  # === MESSAGE QUEUE - SECURED ===
  rabbitmq:
    container_name: sutazai-rabbitmq
    image: sutazai-rabbitmq-secure:latest
    user: rabbitmq  # NON-ROOT (FIXED\!)
    mem_limit: 512M
    cpus: 0.5
    ports: ["10007:5672", "10008:15672"]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks: [sutazai-network]
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-sutazai}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      
  # === GRAPH DATABASE - SECURED ===
  neo4j:
    container_name: sutazai-neo4j
    image: sutazai-neo4j-secure:latest
    user: neo4j  # NON-ROOT (FIXED\!)
    mem_limit: 1G
    cpus: 1
    ports: ["10002:7474", "10003:7687"]
    volumes:
      - neo4j_data:/data
    restart: unless-stopped
    networks: [sutazai-network]
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_server_memory_heap_max__size: 512m
      
  # === CORE APPLICATION - OPTIMIZED ===
  backend:
    container_name: sutazai-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    user: appuser  # NON-ROOT
    depends_on: [postgres, redis, ollama]
    mem_limit: 2G
    cpus: 2
    ports: ["10010:8000"]
    volumes:
      - ./backend:/app
      - ./data:/data
    restart: unless-stopped
    networks: [sutazai-network]
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      
  frontend:
    container_name: sutazai-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile  
    user: appuser  # NON-ROOT
    depends_on: [backend]
    mem_limit: 1G
    cpus: 1
    ports: ["10011:8501"]
    volumes:
      - ./frontend:/app
    restart: unless-stopped
    networks: [sutazai-network]
    environment:
      BACKEND_URL: http://backend:8000

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  ollama_data:
  models_data:
  rabbitmq_data:
EOF < /dev/null
