openapi: 3.0.3
info:
  title: Perfect Jarvis API
  description: |
    The Perfect Jarvis API provides comprehensive AI automation capabilities through a RESTful interface. 
    This specification covers all implemented endpoints based on the actual system architecture.
    
    ## Features
    - Multi-model AI reasoning and chat capabilities
    - Agent orchestration and management  
    - Deep reasoning and advanced processing
    - System monitoring and metrics
    - Enterprise workflow management
    - Real-time WebSocket streaming
    
    ## Authentication
    - Basic endpoints: No authentication required
    - Enterprise endpoints: Bearer token required
    
    ## Base URL
    - Development: `http://localhost:10010`
    - Production: Configure according to deployment
  version: 17.0.0
  contact:
    name: Jarvis Development Team
    email: dev-team@company.com
  license:
    name: Proprietary
    url: https://company.com/license

servers:
  - url: http://localhost:10010
    description: Local development server
  - url: https://api.company.com
    description: Production server (configure as needed)

security:
  - BearerAuth: []
  - {}

paths:
  /:
    get:
      tags:
        - Core
      summary: System Information
      description: Get comprehensive system information and capabilities
      operationId: getSystemInfo
      security: []
      responses:
        '200':
          description: System information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
              example:
                name: "SutazAI Jarvis System"
                version: "17.0.0"
                status: "running"
                enterprise_features: false

  /health:
    get:
      tags:
        - Core
      summary: Health Check
      description: Check system health and service status
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "healthy"
                service: "sutazai-backend"
                version: "17.0.0"
        '503':
          description: System is degraded or unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: "degraded"
                service: "sutazai-backend"

  /agents:
    get:
      tags:
        - Agents
      summary: List Available Agents
      description: Get list of all available AI agents and their status
      operationId: getAgents
      security: []
      responses:
        '200':
          description: Agents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentList'

  /models:
    get:
      tags:
        - Models
      summary: List Available Models
      description: Get all loaded AI models and their capabilities
      operationId: getModels
      security: []
      responses:
        '200':
          description: Models retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'

  /chat:
    post:
      tags:
        - AI Interaction
      summary: Chat with AI
      description: Interactive chat with AI models supporting multiple agents
      operationId: chatWithAI
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
            example:
              message: "How can I optimize database performance?"
              agent: "task_coordinator"
              temperature: 0.7
      responses:
        '200':
          description: Chat response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /simple-chat:
    post:
      tags:
        - AI Interaction
      summary: Simple Chat
      description: Simplified chat endpoint for basic interactions
      operationId: simpleChatWithAI
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: User message
                  example: "Hello, how are you?"
      responses:
        '200':
          description: Simple chat response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleChatResponse'

  /think:
    post:
      tags:
        - AI Interaction
      summary: Jarvis Deep Thinking
      description: Access Jarvis's deep reasoning capabilities (requires authentication)
      operationId: jarvisThink
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThinkRequest'
            example:
              query: "What are the implications of artificial intelligence automation?"
              reasoning_type: "deductive"
      responses:
        '200':
          description: Deep thinking response generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThinkResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /public/think:
    post:
      tags:
        - AI Interaction
      summary: Public Thinking
      description: Public reasoning endpoint without authentication
      operationId: publicThink
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThinkRequest'
      responses:
        '200':
          description: Public thinking response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicThinkResponse'

  /execute:
    post:
      tags:
        - AI Interaction
      summary: Execute Task
      description: Execute complex tasks through appropriate agents
      operationId: executeTask
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
            example:
              description: "Create a REST API for user management"
              type: "coding"
      responses:
        '200':
          description: Task executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /reason:
    post:
      tags:
        - AI Interaction
      summary: Advanced Reasoning
      description: Apply structured reasoning to complex problems
      operationId: advancedReasoning
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReasoningRequest'
      responses:
        '200':
          description: Reasoning analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReasoningResponse'

  /learn:
    post:
      tags:
        - AI Interaction
      summary: Knowledge Learning
      description: Integrate new knowledge into the system
      operationId: learnKnowledge
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeRequest'
      responses:
        '200':
          description: Knowledge learned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeResponse'

  /improve:
    post:
      tags:
        - System Management
      summary: Self-Improvement
      description: Trigger system optimization and learning
      operationId: selfImprovement
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Self-improvement process completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImprovementResponse'

  /metrics:
    get:
      tags:
        - Monitoring
      summary: System Metrics
      description: Get comprehensive system performance metrics
      operationId: getMetrics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'

  /public/metrics:
    get:
      tags:
        - Monitoring
      summary: Public System Metrics
      description: Get system metrics without authentication (limited data)
      operationId: getPublicMetrics
      security: []
      responses:
        '200':
          description: Public metrics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicMetrics'

  /prometheus-metrics:
    get:
      tags:
        - Monitoring
      summary: Prometheus Metrics
      description: Get metrics in Prometheus format for monitoring integration
      operationId: getPrometheusMetrics
      security: []
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP sutazai_uptime_seconds Application uptime in seconds
                # TYPE sutazai_uptime_seconds counter
                sutazai_uptime_seconds 23520

  # Enterprise Endpoints
  /api/v1/orchestration/agents:
    post:
      tags:
        - Enterprise
      summary: Create Orchestrated Agent
      description: Create a new agent through the orchestration system
      operationId: createOrchestratedAgent
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCreateRequest'
      responses:
        '201':
          description: Agent created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentCreateResponse'
        '503':
          description: Orchestration system not available

  /api/v1/orchestration/workflows:
    post:
      tags:
        - Enterprise
      summary: Create Workflow
      description: Create and execute a workflow through the orchestration system
      operationId: createWorkflow
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowRequest'
      responses:
        '201':
          description: Workflow created and started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'

  /api/v1/orchestration/status:
    get:
      tags:
        - Enterprise
      summary: Orchestration Status
      description: Get comprehensive orchestration system status
      operationId: getOrchestrationStatus
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Orchestration status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrchestrationStatus'

  /api/v1/agents/consensus:
    post:
      tags:
        - Enterprise
      summary: Agent Consensus
      description: Multi-agent collaborative decision making
      operationId: agentConsensus
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsensusRequest'
      responses:
        '200':
          description: Consensus analysis completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsensusResponse'

  /api/v1/models/generate:
    post:
      tags:
        - Enterprise
      summary: Model Generation
      description: Generate text using specific AI models with advanced options
      operationId: modelGeneration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelGenerateRequest'
      responses:
        '200':
          description: Text generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelGenerateResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token for enterprise features

  schemas:
    SystemInfo:
      type: object
      properties:
        name:
          type: string
          example: "SutazAI Jarvis System"
        version:
          type: string
          example: "17.0.0"
        description:
          type: string
          example: "Enterprise AI Automation and Orchestration Platform"
        status:
          type: string
          enum: [running, degraded, maintenance]
          example: "running"
        capabilities:
          type: array
          items:
            type: string
          example: ["Multi-model AI reasoning", "Agent orchestration"]
        enterprise_features:
          type: boolean
          example: false
        endpoints:
          type: object
          properties:
            core:
              type: array
              items:
                type: string
            enterprise:
              type: array
              items:
                type: string
        architecture:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time

    HealthStatus:
      type: object
      required:
        - status
        - service
        - version
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          example: "healthy"
        service:
          type: string
          example: "sutazai-backend"
        version:
          type: string
          example: "17.0.0"
        enterprise_features:
          type: boolean
        timestamp:
          type: string
          format: date-time
        gpu_available:
          type: boolean
        services:
          type: object
          properties:
            ollama:
              type: string
              enum: [connected, disconnected]
            chromadb:
              type: string
              enum: [connected, disconnected]
            qdrant:
              type: string
              enum: [connected, disconnected]
            database:
              type: string
              enum: [connected, disconnected]
            redis:
              type: string
              enum: [connected, disconnected]
            models:
              type: object
              properties:
                status:
                  type: string
                loaded_count:
                  type: integer
            agents:
              type: object
              properties:
                status:
                  type: string
                active_count:
                  type: integer
                orchestration_active:
                  type: boolean
        system:
          type: object
          properties:
            cpu_percent:
              type: number
              format: float
            memory_percent:
              type: number
              format: float
            memory_used_gb:
              type: number
              format: float
            memory_total_gb:
              type: number
              format: float
            gpu_available:
              type: boolean

    AgentList:
      type: object
      properties:
        agents:
          type: array
          items:
            $ref: '#/components/schemas/Agent'

    Agent:
      type: object
      properties:
        id:
          type: string
          example: "task_coordinator"
        name:
          type: string
          example: "Jarvis Coordinator"
        status:
          type: string
          enum: [active, inactive, degraded, maintenance]
        type:
          type: string
          example: "reasoning"
        description:
          type: string
          example: "Central Jarvis reasoning system"
        capabilities:
          type: array
          items:
            type: string
          example: ["task_routing", "workflow_management", "resource_allocation"]
        health:
          type: string
          enum: [healthy, degraded, unhealthy]

    ModelList:
      type: object
      properties:
        models:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        total_models:
          type: integer
        default_model:
          type: string
        recommended_models:
          type: array
          items:
            type: string

    Model:
      type: object
      properties:
        id:
          type: string
          example: "tinyllama"
        name:
          type: string
          example: "tinyllama"
        status:
          type: string
          enum: [loaded, loading, error]
        type:
          type: string
          example: "language_model"
        capabilities:
          type: array
          items:
            type: string
        size:
          type: string
          example: "7B"

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: User message
          minLength: 1
          maxLength: 10000
          example: "How can I optimize database performance?"
        model:
          type: string
          description: Specific model to use
          pattern: '^[a-zA-Z0-9._:-]+$'
          example: "tinyllama"
        agent:
          type: string
          description: Agent to route request to
          pattern: '^[a-zA-Z0-9._-]+$'
          example: "task_coordinator"
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          description: Response creativity
          example: 0.7

    ChatResponse:
      type: object
      properties:
        response:
          type: string
          description: AI-generated response
        model:
          type: string
          description: Model used for generation
        agent:
          type: string
          description: Agent that processed the request
        processing_enhancement:
          type: boolean
          description: Whether advanced processing was used
        reasoning_pathways:
          type: array
          items:
            type: string
          description: Activated reasoning pathways
        confidence_level:
          type: number
          format: float
          description: Current confidence level
        vector_context_used:
          type: boolean
          description: Whether vector context was injected
        vector_context_info:
          type: object
          nullable: true
          properties:
            total_results:
              type: integer
            sources_used:
              type: array
              items:
                type: string
            query_time_ms:
              type: number
        timestamp:
          type: string
          format: date-time
        processing_time:
          type: string
          example: "1.2s"

    SimpleChatResponse:
      type: object
      properties:
        response:
          type: string
        model:
          type: string
        timestamp:
          type: string
          format: date-time
        processing_time:
          type: number
          format: float

    ThinkRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: Query for deep thinking
          minLength: 1
          maxLength: 5000
          example: "What are the implications of artificial general intelligence?"
        reasoning_type:
          type: string
          enum: [general, deductive, inductive, abductive, analogical, causal]
          default: general
          description: Type of reasoning to apply

    ThinkResponse:
      type: object
      properties:
        thought:
          type: string
          description: Deep thinking response
        reasoning:
          type: string
          description: Reasoning methodology used
        confidence:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        model_used:
          type: string
        cognitive_load:
          type: string
          enum: [low, medium, high]
        processing_stages:
          type: array
          items:
            type: string
        analysis_pathways:
          type: array
          items:
            type: string
        confidence_level:
          type: number
          format: float
        reasoning_depth:
          type: integer
        vector_context_used:
          type: boolean
        vector_context_info:
          type: object
          nullable: true
        timestamp:
          type: string
          format: date-time

    PublicThinkResponse:
      type: object
      properties:
        response:
          type: string
        reasoning_type:
          type: string
        model_used:
          type: string
        confidence:
          type: number
          format: float
        thought_process:
          type: array
          items:
            type: string
        cognitive_load:
          type: string
        processing_time:
          type: string
        vector_context_used:
          type: boolean
        timestamp:
          type: string
          format: date-time

    TaskRequest:
      type: object
      required:
        - description
      properties:
        description:
          type: string
          description: Task description
          minLength: 1
          maxLength: 5000
          example: "Create a REST API for user management"
        type:
          type: string
          enum: [general, complex, multi_agent, workflow, coding, analysis]
          default: general
          description: Type of task

    TaskResponse:
      type: object
      properties:
        result:
          type: string
          description: Task execution result
        status:
          type: string
          enum: [completed, failed, in_progress]
        task_id:
          type: string
        task_type:
          type: string
        execution_time:
          type: string
        success_probability:
          type: number
          format: float
        orchestrated:
          type: boolean
        orchestration_id:
          type: string
          nullable: true
        resources_used:
          type: array
          items:
            type: string
        agents_involved:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time

    ReasoningRequest:
      type: object
      required:
        - type
        - description
      properties:
        type:
          type: string
          enum: [deductive, inductive, abductive, analogical, causal]
        description:
          type: string
          minLength: 1
          maxLength: 5000

    ReasoningResponse:
      type: object
      properties:
        analysis:
          type: string
        reasoning_type:
          type: string
        steps:
          type: array
          items:
            type: string
        conclusion:
          type: string
        logical_framework:
          type: string
        confidence_level:
          type: number
          format: float
        timestamp:
          type: string
          format: date-time

    KnowledgeRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: Content to learn
          minLength: 1
          maxLength: 100000
        type:
          type: string
          enum: [text, code, document, data]
          default: text

    KnowledgeResponse:
      type: object
      properties:
        learned:
          type: boolean
        content_type:
          type: string
        content_size:
          type: integer
        summary:
          type: string
        knowledge_points:
          type: array
          items:
            type: string
        processing_stats:
          type: object
          properties:
            concepts_extracted:
              type: integer
            embeddings_created:
              type: integer
            connections_established:
              type: integer
        processing_time:
          type: string
        timestamp:
          type: string
          format: date-time

    ImprovementResponse:
      type: object
      properties:
        improvement:
          type: string
        changes:
          type: array
          items:
            type: string
        impact:
          type: string
        next_optimization:
          type: string
        optimization_areas:
          type: array
          items:
            type: string
        performance_gains:
          type: object
          additionalProperties:
            type: string
        enterprise_mode:
          type: boolean
        timestamp:
          type: string
          format: date-time

    SystemMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system:
          type: object
          properties:
            cpu_percent:
              type: number
              format: float
            memory_percent:
              type: number
              format: float
            memory_used_gb:
              type: number
              format: float
            memory_total_gb:
              type: number
              format: float
            disk_percent:
              type: number
              format: float
            disk_free_gb:
              type: number
              format: float
            uptime:
              type: string
            load_average:
              type: array
              items:
                type: number
                format: float
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, unhealthy]
        performance:
          type: object
          properties:
            avg_response_time_ms:
              type: number
            success_rate:
              type: number
              format: float
            requests_per_minute:
              type: number
            active_agents:
              type: integer
            processed_requests:
              type: integer
            total_tokens_processed:
              type: integer
        ai_metrics:
          type: object
          properties:
            models_loaded:
              type: integer
            embeddings_generated:
              type: integer
            reasoning_operations:
              type: integer
            learning_events:
              type: integer
            self_improvements:
              type: integer

    PublicMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system:
          type: object
          properties:
            cpu_percent:
              type: number
              format: float
            memory_percent:
              type: number
              format: float
            uptime:
              type: string
        services:
          type: object
          additionalProperties:
            type: string
        performance:
          type: object
          properties:
            success_rate:
              type: number
            active_agents:
              type: integer

    # Enterprise Schemas
    AgentCreateRequest:
      type: object
      required:
        - agent_type
      properties:
        agent_type:
          type: string
          example: "research_agent"
        config:
          type: object
          additionalProperties: true
        name:
          type: string
          example: "research_specialist_01"

    AgentCreateResponse:
      type: object
      properties:
        agent_id:
          type: string
        status:
          type: string
        config:
          type: object
        timestamp:
          type: string
          format: date-time

    WorkflowRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
        tasks:
          type: array
          items:
            type: object
        agents:
          type: array
          items:
            type: string

    WorkflowResponse:
      type: object
      properties:
        workflow_id:
          type: string
        status:
          type: string
        definition:
          type: object
        timestamp:
          type: string
          format: date-time

    OrchestrationStatus:
      type: object
      properties:
        orchestrator_status:
          type: string
        active_agents:
          type: integer
        active_workflows:
          type: integer
        system_metrics:
          type: object
        health:
          type: boolean
        timestamp:
          type: string
          format: date-time

    ConsensusRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          example: "Should we implement microservices or monolithic architecture?"
        agents:
          type: array
          items:
            type: string
          example: ["architect_agent", "performance_agent", "security_agent"]
        consensus_type:
          type: string
          enum: [majority, unanimous, weighted]
          default: majority

    ConsensusResponse:
      type: object
      properties:
        analysis:
          type: string
        agents_consulted:
          type: array
          items:
            type: string
        consensus_reached:
          type: boolean
        consensus_type:
          type: string
        confidence:
          type: number
          format: float
        recommendations:
          type: array
          items:
            type: string
        agent_votes:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time

    ModelGenerateRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 10000
        model:
          type: string
          default: "default"
        max_tokens:
          type: integer
          minimum: 1
          maximum: 4096
          default: 1024
        temperature:
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
          default: 0.7

    ModelGenerateResponse:
      type: object
      properties:
        analysis:
          type: string
        model_used:
          type: string
        generated_text:
          type: string
        tokens_used:
          type: integer
        temperature:
          type: number
          format: float
        insights:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string
        output:
          type: string
        timestamp:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "INVALID_REQUEST"
            message:
              type: string
              example: "The request body is invalid"
            details:
              oneOf:
                - type: string
                - type: object
              example: "Field 'message' is required but missing"
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string
              example: "req_abc123"

  responses:
    BadRequest:
      description: Invalid request format
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "INVALID_REQUEST"
              message: "The request body is invalid"
              details: "Field 'message' is required but missing"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "AUTHENTICATION_REQUIRED"
              message: "Bearer token required for this endpoint"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Endpoint not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimitExceeded:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per time window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when the rate limit resets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "Rate limit exceeded"
              details: "Limit: 60 requests per hour. Try again in 45 minutes."
              retry_after: 2700

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServiceUnavailable:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    OffsetParam:
      name: offset
      in: query
      description: Number of results to skip
      schema:
        type: integer
        minimum: 0
        default: 0

tags:
  - name: Core
    description: Core system endpoints
  - name: Agents
    description: AI agent management
  - name: Models
    description: AI model operations
  - name: AI Interaction
    description: Chat, reasoning, and task execution
  - name: System Management
    description: System operations and maintenance
  - name: Monitoring
    description: System monitoring and metrics
  - name: Enterprise
    description: Enterprise features (authentication required)

externalDocs:
  description: Complete API Documentation
  url: /docs/api/JARVIS_API_REFERENCE.md