{
  "info": {
    "name": "Jarvis Endpoints Test Collection",
    "description": "Comprehensive test collection for all Jarvis-related endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "jarvis-endpoints-tests",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "BASE_URL",
      "value": "http://localhost:10010",
      "type": "string"
    },
    {
      "key": "JARVIS_VOICE_URL",
      "value": "http://localhost:11150",
      "type": "string"
    },
    {
      "key": "JARVIS_KNOWLEDGE_URL",
      "value": "http://localhost:11101",
      "type": "string"
    },
    {
      "key": "JARVIS_AUTOMATION_URL",
      "value": "http://localhost:11102",
      "type": "string"
    },
    {
      "key": "JARVIS_MULTIMODAL_URL", 
      "value": "http://localhost:11103",
      "type": "string"
    },
    {
      "key": "JARVIS_HARDWARE_URL",
      "value": "http://localhost:11104",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Backend Jarvis Endpoints",
      "description": "Tests for Jarvis-related endpoints in the main backend API",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{BASE_URL}}/health",
              "host": ["{{BASE_URL}}"],
              "path": ["health"]
            },
            "description": "Basic health check for the backend API"
          }
        },
        {
          "name": "Chat with Jarvis Agent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains message response', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "    pm.expect(jsonData.response).to.be.a('string');",
                  "    pm.expect(jsonData.response.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Response indicates agent used', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('agent');",
                  "});",
                  "",
                  "pm.test('Model information is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('model');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n    \\\"message\\\": \\\"Hello Jarvis, can you help me with task automation?\\\",\\n    \\\"agent\\\": \\\"task_coordinator\\\",\\n    \\\"model\\\": \\\"tinyllama\\\",\\n    \\\"temperature\\\": 0.7\\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/chat",
              "host": ["{{BASE_URL}}"],
              "path": ["chat"]
            },
            "description": "Test chat interaction with Jarvis through the backend API"
          }
        },
        {
          "name": "Jarvis Deep Thinking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains thought', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('thought');",
                  "    pm.expect(jsonData.thought).to.be.a('string');",
                  "});",
                  "",
                  "pm.test('Response includes cognitive processes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reasoning');",
                  "    pm.expect(jsonData).to.have.property('confidence');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n    \\\"query\\\": \\\"How can I optimize system performance using AI agents?\\\",\\n    \\\"reasoning_type\\\": \\\"analytical\\\"\\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/think",
              "host": ["{{BASE_URL}}"],
              "path": ["think"]
            },
            "description": "Test Jarvis deep thinking capabilities"
          }
        },
        {
          "name": "Execute Jarvis Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains result', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('result');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Task execution includes metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('task_id');",
                  "    pm.expect(jsonData).to.have.property('execution_time');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n    \\\"description\\\": \\\"Analyze system performance and provide optimization recommendations\\\",\\n    \\\"type\\\": \\\"analysis\\\"\\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/execute",
              "host": ["{{BASE_URL}}"],
              "path": ["execute"]
            },
            "description": "Test task execution through Jarvis"
          }
        }
      ]
    },
    {
      "name": "Jarvis Voice Interface Agent",
      "description": "Tests for the dedicated Jarvis Voice Interface service",
      "item": [
        {
          "name": "Voice Interface Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{JARVIS_VOICE_URL}}/health",
              "host": ["{{JARVIS_VOICE_URL}}"],
              "path": ["health"]
            },
            "description": "Health check for Jarvis Voice Interface service"
          }
        }
      ]
    },
    {
      "name": "Jarvis Knowledge Management Agent",
      "description": "Tests for the Jarvis Knowledge Management service", 
      "item": [
        {
          "name": "Knowledge Management Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{JARVIS_KNOWLEDGE_URL}}/health",
              "host": ["{{JARVIS_KNOWLEDGE_URL}}"],
              "path": ["health"]
            },
            "description": "Health check for Jarvis Knowledge Management service"
          }
        }
      ]
    },
    {
      "name": "Jarvis Automation Agent",
      "description": "Tests for the Jarvis Automation service",
      "item": [
        {
          "name": "Automation Agent Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{JARVIS_AUTOMATION_URL}}/health",
              "host": ["{{JARVIS_AUTOMATION_URL}}"],
              "path": ["health"]
            },
            "description": "Health check for Jarvis Automation service"
          }
        }
      ]
    },
    {
      "name": "Jarvis Multimodal AI Agent",
      "description": "Tests for the Jarvis Multimodal AI service",
      "item": [
        {
          "name": "Multimodal AI Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{JARVIS_MULTIMODAL_URL}}/health",
              "host": ["{{JARVIS_MULTIMODAL_URL}}"],
              "path": ["health"]
            },
            "description": "Health check for Jarvis Multimodal AI service"
          }
        }
      ]
    },
    {
      "name": "Jarvis Hardware Resource Optimizer",
      "description": "Tests for the Jarvis Hardware Resource Optimizer service",
      "item": [
        {
          "name": "Hardware Optimizer Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData.status).to.equal('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{JARVIS_HARDWARE_URL}}/health",
              "host": ["{{JARVIS_HARDWARE_URL}}"],
              "path": ["health"]
            },
            "description": "Health check for Jarvis Hardware Resource Optimizer service"
          }
        }
      ]
    },
    {
      "name": "Edge Cases and Error Handling",
      "description": "Tests for edge cases and error scenarios",
      "item": [
        {
          "name": "Invalid Chat Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 422', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test('Error response contains detail', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('detail');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw", 
              "raw": "{\\n    \\\"message\\\": \\\"\\\",\\n    \\\"agent\\\": \\\"invalid_agent\\\"\\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/chat",
              "host": ["{{BASE_URL}}"],
              "path": ["chat"]
            },
            "description": "Test error handling for invalid chat requests"
          }
        },
        {
          "name": "Large Payload Test",
          "event": [
            {
              "listen": "test", 
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test('Response contains result', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('response');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\\n    \\\"message\\\": \\\"This is a test with a very long message to test how Jarvis handles large text inputs. \\\" + \\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \\\" * 10,\\n    \\\"agent\\\": \\\"task_coordinator\\\"\\n}"
            },
            "url": {
              "raw": "{{BASE_URL}}/chat", 
              "host": ["{{BASE_URL}}"],
              "path": ["chat"]
            },
            "description": "Test handling of large text inputs"
          }
        }
      ]
    }
  ]
}