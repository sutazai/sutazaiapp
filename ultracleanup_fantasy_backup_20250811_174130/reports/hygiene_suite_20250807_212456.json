{
  "timestamp": "20250807_212456",
  "overall_status": "fail",
  "results": [
    {
      "name": "naming",
      "cmd": "/opt/sutazai-venv/bin/python3 scripts/check_naming.py",
      "returncode": 1,
      "stdout": "' should use snake_case\n  - Variable 'riskStatus' should use snake_case\n  - Variable 'riskColor' should use snake_case\n  - Variable 'riskStatus' should use snake_case\n  - Variable 'riskColor' should use snake_case\n  - Variable 'riskStatus' should use snake_case\n  - Variable 'riskColor' should use snake_case\n  - Variable 'riskStatus' should use snake_case\n  - Variable 'riskColor' should use snake_case\n  - Variable 'riskElement' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'avgResponseTime' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'agentsList' should use snake_case\n  - Variable 'sortedAgents' should use snake_case\n  - Variable 'statusClass' should use snake_case\n  - Variable 'alertsList' should use snake_case\n  - Variable 'severityClass' should use snake_case\n\nopt/sutazaiapp/jarvis/monitoring/logging-infrastructure.py:\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n\nopt/sutazaiapp/jarvis/self-healing/api_server.py:\n  - Variable 'dryRun' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'dryRun' should use snake_case\n\nopt/sutazaiapp/jarvis/scripts/utils/generate_architecture_diagram.py:\n  - Variable 'shrinkA' should use snake_case\n  - Variable 'shrinkB' should use snake_case\n  - Variable 'shrinkA' should use snake_case\n  - Variable 'shrinkB' should use snake_case\n  - Variable 'shrinkA' should use snake_case\n  - Variable 'shrinkB' should use snake_case\n  - Variable 'shrinkA' should use snake_case\n  - Variable 'shrinkB' should use snake_case\n\nopt/sutazaiapp/jarvis/scripts/utils/coverage_reporter.py:\n  - Variable 'distCtx' should use snake_case\n  - Variable 'trendCtx' should use snake_case\n\nopt/sutazaiapp/jarvis/scripts/monitoring/enhanced-compliance-monitor.py:\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/federated_learning/dashboard.py:\n  - Variable 'reconnectTimer' should use snake_case\n  - Variable 'metricsChart' should use snake_case\n  - Variable 'clientChart' should use snake_case\n  - Variable 'trainingData' should use snake_case\n  - Variable 'systemHealthData' should use snake_case\n  - Variable 'clientId' should use snake_case\n  - Variable 'wsUrl' should use snake_case\n  - Variable 'reconnectTimer' should use snake_case\n  - Variable 'statusElement' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'metricsCtx' should use snake_case\n  - Variable 'metricsChart' should use snake_case\n  - Variable 'clientCtx' should use snake_case\n  - Variable 'clientChart' should use snake_case\n  - Variable 'formData' should use snake_case\n  - Variable 'trainingRequest' should use snake_case\n  - Variable 'systemHealthData' should use snake_case\n  - Variable 'healthElement' should use snake_case\n  - Variable 'statusClass' should use snake_case\n  - Variable 'roundLabel' should use snake_case\n  - Variable 'alertDiv' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'zIndex' should use snake_case\n  - Variable 'maxWidth' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/security/web_honeypot.py:\n  - Variable 'objectClass' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/utils/logging_setup.py:\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/oversight/human_oversight_interface.py:\n  - Variable 'isConnected' should use snake_case\n  - Variable 'currentAgentId' should use snake_case\n  - Variable 'wsProtocol' should use snake_case\n  - Variable 'wsUrl' should use snake_case\n  - Variable 'isConnected' should use snake_case\n  - Variable 'isConnected' should use snake_case\n  - Variable 'statusElement' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'agentsList' should use snake_case\n  - Variable 'statusClass' should use snake_case\n  - Variable 'totalAgents' should use snake_case\n  - Variable 'activeAgents' should use snake_case\n  - Variable 'pausedAgents' should use snake_case\n  - Variable 'stoppedAgents' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'approvalsList' should use snake_case\n  - Variable 'overviewApprovals' should use snake_case\n  - Variable 'riskClass' should use snake_case\n  - Variable 'timeLeft' should use snake_case\n  - Variable 'timeLeftText' should use snake_case\n  - Variable 'finalHtml' should use snake_case\n  - Variable 'alertsList' should use snake_case\n  - Variable 'overviewAlerts' should use snake_case\n  - Variable 'severityClass' should use snake_case\n  - Variable 'finalHtml' should use snake_case\n  - Variable 'auditList' should use snake_case\n  - Variable 'currentAgentId' should use snake_case\n  - Variable 'formData' should use snake_case\n  - Variable 'tabButtons' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/knowledge_graph/visualization.py:\n  - Variable 'graphData' should use snake_case\n  - Variable 'baseDistance' should use snake_case\n  - Variable 'currentData' should use snake_case\n  - Variable 'linkEnter' should use snake_case\n  - Variable 'nodeEnter' should use snake_case\n  - Variable 'currentData' should use snake_case\n  - Variable 'currentData' should use snake_case\n  - Variable 'sourceType' should use snake_case\n  - Variable 'targetType' should use snake_case\n  - Variable 'sourceType' should use snake_case\n  - Variable 'targetType' should use snake_case\n  - Variable 'fullWidth' should use snake_case\n  - Variable 'fullHeight' should use snake_case\n  - Variable 'midX' should use snake_case\n  - Variable 'midY' should use snake_case\n  - Variable 'svgData' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/energy/monitoring_dashboard.py:\n  - Variable 'powerData' should use snake_case\n  - Variable 'efficiencyData' should use snake_case\n  - Variable 'wsUrl' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'metricsHtml' should use snake_case\n  - Variable 'powerValue' should use snake_case\n  - Variable 'efficiencyValue' should use snake_case\n  - Variable 'powerCtx' should use snake_case\n  - Variable 'powerChart' should use snake_case\n  - Variable 'efficiencyCtx' should use snake_case\n  - Variable 'efficiencyChart' should use snake_case\n  - Variable 'sustainabilityHtml' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/app/core/logging.py:\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/app/utils/logger.py:\n  - Variable 'maxBytes' should use snake_case\n  - Variable 'backupCount' should use snake_case\n\nopt/sutazaiapp/jarvis/backend/app/services/agent_orchestrator.py:\n  - Class 'settings' should use PascalCase\n\nopt/sutazaiapp/jarvis/tests/integration/test-dashboard-fix.py:\n  - Variable 'clickCount' should use snake_case\n  - Variable 'startTime' should use snake_case\n  - Variable 'originalError' should use snake_case\n  - Variable 'clickInterval' should use snake_case\n  - Variable 'auditBtn' should use snake_case\n  - Variable 'testResult' should use snake_case\n  - Variable 'testResults' should use snake_case\n  - Variable 'testScript' should use snake_case\n  - Variable 'backgroundColor' should use snake_case\n  - Variable 'backgroundColor' should use snake_case\n\nopt/sutazaiapp/jarvis/frontend/components/enhanced_ui.py:\n  - Variable 'tagName' should use snake_case\n\nopt/sutazaiapp/jarvis/frontend/components/enter_key_handler.py:\n  - Variable 'hasEnterKeyHandler' should use snake_case\n  - Variable 'submitEvent' should use snake_case\n  - Variable 'submitButton' should use snake_case\n  - Variable 'textInputs' should use snake_case\n  - Variable 'chatInput' should use snake_case\n  - Variable 'shouldReattach' should use snake_case\n  - Variable 'nodeType' should use snake_case\n  - Variable 'hasInputs' should use snake_case\n  - Variable 'shouldReattach' should use snake_case\n  - Variable 'readyState' should use snake_case\n\nopt/sutazaiapp/jarvis/deployment/monitoring/agent-monitor/monitor.py:\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'agentData' should use snake_case\n  - Variable 'agentStatus' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'systemData' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'alertData' should use snake_case\n  - Variable 'totalAlerts' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'totalAlerts' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n  - Variable 'textContent' should use snake_case\n\nopt/sutazaiapp/jarvis/agents/core/base_agent_v2.py:\n  - Class 'provides' should use PascalCase\n\nagents/core/base_agent_v2.py:\n  - Class 'provides' should use PascalCase\n------------------------------------------------------------\n\nNaming conventions:\n  - Files: kebab-case (e.g., my-script.py)\n  - Variables: snake_case (e.g., my_variable)\n  - Classes: PascalCase (e.g., MyClass)\n  - Constants: UPPER_SNAKE_CASE (e.g., MY_CONSTANT)\n",
      "stderr": "",
      "status": "fail"
    },
    {
      "name": "secrets",
      "cmd": "/opt/sutazai-venv/bin/python3 scripts/check_secrets.py",
      "returncode": 1,
      "stdout": "ests/test_coordinator_integration.py:390 - routing_key=\"task.assign\"\ntests/test_architecture_enhancements.py:131 - routing_key='test_queue',\nmonitoring/ollama_performance_monitor.py:454 - alert_key = \"system:cpu\"\nmonitoring/ollama_performance_monitor.py:462 - alert_key = \"system:memory\"\nmonitoring/ollama_performance_monitor.py:470 - alert_key = \"system:disk\"\nbackend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\nbackend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\nbackend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\nbackend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\ntests/security/test_security_comprehensive.py:35 - invalid_token = \"invalid.jwt.token\"\nopt/sutazaiapp/jarvis/scripts/complete-cleanup-and-prepare.py:664 - password = \"test123\"\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:454 - alert_key = \"system:cpu\"\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:462 - alert_key = \"system:memory\"\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:470 - alert_key = \"system:disk\"\nopt/sutazaiapp/jarvis/backend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\nopt/sutazaiapp/jarvis/backend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\nopt/sutazaiapp/jarvis/backend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\nopt/sutazaiapp/jarvis/backend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\nopt/sutazaiapp/jarvis/tests/security/test_security_comprehensive.py:35 - invalid_token = \"invalid.jwt.token\"\nagents/task_assignment_coordinator/app.py:51 - REDIS_QUEUE_KEY = \"task:queue\"\nagents/task_assignment_coordinator/app.py:52 - REDIS_PROCESSING_KEY = \"task:processing\"\nagents/core/rabbitmq_client.py:115 - routing_key=\"task.#\"\nagents/core/rabbitmq_client.py:120 - routing_key=\"resource.#\"\nagents/core/rabbitmq_client.py:125 - routing_key=\"system.#\"\nagents/core/messaging.py:292 - routing_key = \"resource.arbitrator.request\"\nagents/core/messaging.py:314 - routing_key = \"agent.all.error\"\nagents/resource_arbitration_agent/app.py:42 - REDIS_ALLOCATION_KEY = \"resource:allocations\"\nagents/resource_arbitration_agent/app.py:43 - REDIS_RESERVATION_KEY = \"resource:reservations\"\nagents/coordinator/app.py:414 - routing_key=\"assignment.failed\"\nreports/hygiene_suite_20250807_203400.json:17 - \"stdout\": \"ERROR: Hardcoded secrets detected!\\n------------------------------------------------------------\\nscripts/complete-cleanup-and-prepare.py:664 - password = \\\"test123\\\"\\ntests/test_coordinator_integration.py:80 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:96 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:129 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:192 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:252 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:301 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:323 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:368 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:390 - routing_key=\\\"task.assign\\\"\\ntests/test_architecture_enhancements.py:131 - routing_key='test_queue',\\nmonitoring/ollama_performance_monitor.py:454 - alert_key = \\\"system:cpu\\\"\\nmonitoring/ollama_performance_monitor.py:462 - alert_key = \\\"system:memory\\\"\\nmonitoring/ollama_performance_monitor.py:470 - alert_key = \\\"system:disk\\\"\\nbackend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\\nbackend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\\nbackend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\\nbackend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\\ntests/security/test_security_comprehensive.py:35 - invalid_token = \\\"invalid.jwt.token\\\"\\nopt/sutazaiapp/jarvis/scripts/complete-cleanup-and-prepare.py:664 - password = \\\"test123\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:454 - alert_key = \\\"system:cpu\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:462 - alert_key = \\\"system:memory\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:470 - alert_key = \\\"system:disk\\\"\\nopt/sutazaiapp/jarvis/backend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\\nopt/sutazaiapp/jarvis/backend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\\nopt/sutazaiapp/jarvis/backend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\\nopt/sutazaiapp/jarvis/backend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\\nopt/sutazaiapp/jarvis/tests/security/test_security_comprehensive.py:35 - invalid_token = \\\"invalid.jwt.token\\\"\\nagents/task_assignment_coordinator/app.py:51 - REDIS_QUEUE_KEY = \\\"task:queue\\\"\\nagents/task_assignment_coordinator/app.py:52 - REDIS_PROCESSING_KEY = \\\"task:processing\\\"\\nagents/core/rabbitmq_client.py:115 - routing_key=\\\"task.#\\\"\\nagents/core/rabbitmq_client.py:120 - routing_key=\\\"resource.#\\\"\\nagents/core/rabbitmq_client.py:125 - routing_key=\\\"system.#\\\"\\nagents/core/messaging.py:292 - routing_key = \\\"resource.arbitrator.request\\\"\\nagents/core/messaging.py:314 - routing_key = \\\"agent.all.error\\\"\\nagents/resource_arbitration_agent/app.py:42 - REDIS_ALLOCATION_KEY = \\\"resource:allocations\\\"\\nagents/resource_arbitration_agent/app.py:43 - REDIS_RESERVATION_KEY = \\\"resource:reservations\\\"\\nagents/coordinator/app.py:414 - routing_key=\\\"assignment.failed\\\"\\n------------------------------------------------------------\\nTotal violations: 38\\n\\nUse environment variables instead of hardcoded values.\\n\",\nreports/hygiene_suite_20250807_203400.json:17 - \"stdout\": \"ERROR: Hardcoded secrets detected!\\n------------------------------------------------------------\\nscripts/complete-cleanup-and-prepare.py:664 - password = \\\"test123\\\"\\ntests/test_coordinator_integration.py:80 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:96 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:129 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:192 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:252 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:301 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:323 - routing_key=\\\"task.assign\\\"\\ntests/test_coordinator_integration.py:368 - routing_key=\\\"agent.status\\\"\\ntests/test_coordinator_integration.py:390 - routing_key=\\\"task.assign\\\"\\ntests/test_architecture_enhancements.py:131 - routing_key='test_queue',\\nmonitoring/ollama_performance_monitor.py:454 - alert_key = \\\"system:cpu\\\"\\nmonitoring/ollama_performance_monitor.py:462 - alert_key = \\\"system:memory\\\"\\nmonitoring/ollama_performance_monitor.py:470 - alert_key = \\\"system:disk\\\"\\nbackend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\\nbackend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\\nbackend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\\nbackend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\\ntests/security/test_security_comprehensive.py:35 - invalid_token = \\\"invalid.jwt.token\\\"\\nopt/sutazaiapp/jarvis/scripts/complete-cleanup-and-prepare.py:664 - password = \\\"test123\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:454 - alert_key = \\\"system:cpu\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:462 - alert_key = \\\"system:memory\\\"\\nopt/sutazaiapp/jarvis/monitoring/ollama_performance_monitor.py:470 - alert_key = \\\"system:disk\\\"\\nopt/sutazaiapp/jarvis/backend/data_governance/quality_monitor.py:608 - composite_key = '|'.join(key_parts)\\nopt/sutazaiapp/jarvis/backend/tests/test_agent_hygiene_compliance.py:439 - issue_key = ' '.join(issue_type) if isinstance(issue_type, list) else issue_type\\nopt/sutazaiapp/jarvis/backend/tests/agent_compliance_fixer.py:500 - fix_key = ' '.join(fix_type) if isinstance(fix_type, list) else fix_type\\nopt/sutazaiapp/jarvis/backend/mlflow_system/database.py:53 - user, password = 'mlflow', 'mlflow_secure_pwd'\\nopt/sutazaiapp/jarvis/tests/security/test_security_comprehensive.py:35 - invalid_token = \\\"invalid.jwt.token\\\"\\nagents/task_assignment_coordinator/app.py:51 - REDIS_QUEUE_KEY = \\\"task:queue\\\"\\nagents/task_assignment_coordinator/app.py:52 - REDIS_PROCESSING_KEY = \\\"task:processing\\\"\\nagents/core/rabbitmq_client.py:115 - routing_key=\\\"task.#\\\"\\nagents/core/rabbitmq_client.py:120 - routing_key=\\\"resource.#\\\"\\nagents/core/rabbitmq_client.py:125 - routing_key=\\\"system.#\\\"\\nagents/core/messaging.py:292 - routing_key = \\\"resource.arbitrator.request\\\"\\nagents/core/messaging.py:314 - routing_key = \\\"agent.all.error\\\"\\nagents/resource_arbitration_agent/app.py:42 - REDIS_ALLOCATION_KEY = \\\"resource:allocations\\\"\\nagents/resource_arbitration_agent/app.py:43 - REDIS_RESERVATION_KEY = \\\"resource:reservations\\\"\\nagents/coordinator/app.py:414 - routing_key=\\\"assignment.failed\\\"\\n------------------------------------------------------------\\nTotal violations: 38\\n\\nUse environment variables instead of hardcoded values.\\n\",\n------------------------------------------------------------\nTotal violations: 40\n\nUse environment variables instead of hardcoded values.\n",
      "stderr": "",
      "status": "fail"
    },
    {
      "name": "compliance",
      "cmd": "/opt/sutazai-venv/bin/python3 scripts/validate-compliance.py",
      "returncode": 1,
      "stdout": "\n============================================================\nCOMPLIANCE VALIDATION REPORT\n============================================================\n\nRule 1: No Fantasy Elements: 0% \u274c FAIL\n  Issues found:\n    - detailed_import_analysis.py: contains 'wizard'\n    - import_audit.py: contains 'wizard'\n    - test_ollama_integration.py: contains 'quantum'\n    - scripts/compliance-monitor-core.py: contains 'wizard'\n    - scripts/validate_ports.py: contains 'agi'\n\nRule 2: Don't Break Existing: 80% \u26a0\ufe0f WARN\n  Issues found:\n    - Missing essential file: backend/main.py\n\nRule 3: Codebase Hygiene: 20% \u274c FAIL\n  Issues found:\n    - Too many docker-compose files: 4 (max 2)\n    - Too many scripts: 399 (max 50)\n    - Too many documentation files: 951 (max 50)\n    - Found 2 junk files\n\nRule 4: Reuse Before Creating: 55% \u274c FAIL\n  Issues found:\n    - Potential duplicates: 18 files matching deploy*.sh\n    - Potential duplicates: 8 files matching validate*.py\n    - Potential duplicates: 43 files matching requirements*.txt\n\nRule 5: Local LLMs Only: 0% \u274c FAIL\n  Issues found:\n    - scripts/create-container-requirements-map.py: references 'anthropic'\n    - scripts/pin_all_dependencies.py: references 'anthropic'\n    - scripts/emergency-compliance-fix.py: references 'OPENAI_API_KEY'\n    - scripts/validate-compliance.py: references 'OPENAI_API_KEY'\n    - scripts/pre-commit/check-llm-usage.py: references 'anthropic'\n\n============================================================\nOVERALL COMPLIANCE SCORE: 31%\nSTATUS: \u274c NON-COMPLIANT\n============================================================\n\nDetailed report saved to: /opt/sutazaiapp/compliance_validation_report.json\n",
      "stderr": "",
      "status": "fail"
    },
    {
      "name": "claude_rules",
      "cmd": "/opt/sutazai-venv/bin/python3 scripts/verify_claude_rules.py",
      "returncode": 0,
      "stdout": "Checking agent compliance with CLAUDE.md rules...\n============================================================\n============================================================\nSummary: 0 compliant, 0 non-compliant\n\nChecking Docker service configurations...\n============================================================\nRun: docker-compose -f docker-compose.yml -f docker-compose.claude-rules.yml config\nto verify CLAUDE.md is mounted in all services\n\n\u2705 All agents are configured to enforce CLAUDE.md rules!\n",
      "stderr": "",
      "status": "pass"
    }
  ]
}