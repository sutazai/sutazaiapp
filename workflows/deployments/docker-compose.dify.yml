# Dify Workflow System Docker Compose Extension
# Add these services to your main docker-compose.yml

services:
  # ===========================================
  # DIFY WORKFLOW ENGINE
  # ===========================================
  
  dify-api:
    container_name: sutazai-dify-api
    image: langgenius/dify-api:latest
    environment:
      <<: [*common-variables, *database-config]
      MODE: api
      LOG_LEVEL: INFO
      SECRET_KEY: ${SECRET_KEY:-sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U}
      CONSOLE_API_URL: http://localhost:8107
      CONSOLE_WEB_URL: http://localhost:8107
      SERVICE_API_URL: http://localhost:8107
      APP_WEB_URL: http://localhost:8107
      STORAGE_TYPE: local
      STORAGE_LOCAL_PATH: /app/storage
      # Dify workflow integration
      AGENT_REGISTRY_URL: http://agent-registry:8300
      MESSAGE_BUS_URL: http://agent-message-bus:8299
      BACKEND_API_URL: http://backend-agi:8000
      # Use lightweight models for initial deployment
      DEFAULT_MODEL_PROVIDER: ollama
      OLLAMA_BASE_URL: http://ollama:11434
      DEFAULT_MODEL: tinyllama:latest
    ports:
      - "8107:5001"
    volumes:
      - ./workflows:/app/workflows:ro
      - ./data/dify:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import socket; s=socket.socket(); s.settimeout(5); s.connect(('localhost', 5001)); s.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  dify-web:
    container_name: sutazai-dify-web
    image: langgenius/dify-web:latest
    environment:
      EDITION: SELF_HOSTED
      CONSOLE_API_URL: http://dify-api:5001
      APP_API_URL: http://dify-api:5001
    ports:
      - "8108:3000"
    depends_on:
      - dify-api
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/apps"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ===========================================
  # WORKFLOW AUTOMATION SERVICES
  # ===========================================
  
  workflow-manager:
    container_name: sutazai-workflow-manager
    build:
      context: ./workflows/deployments
      dockerfile: Dockerfile.workflow_manager
    environment:
      <<: [*common-variables, *database-config]
      AGENT_REGISTRY_URL: http://agent-registry:8300
      MESSAGE_BUS_URL: http://agent-message-bus:8299
      BACKEND_API_URL: http://backend-agi:8000
      DIFY_API_URL: http://dify-api:5001
      CONFIG_PATH: /app/config
      LOG_LEVEL: INFO
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
    ports:
      - "8109:8080"
    volumes:
      - ./workflows:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      dify-api:
        condition: service_started
      agent-registry:
        condition: service_started
      agent-message-bus:
        condition: service_started
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  workflow-task-router:
    container_name: sutazai-workflow-task-router
    build:
      context: ./workflows/deployments
      dockerfile: Dockerfile.task_router
    environment:
      <<: [*common-variables, *database-config]
      AGENT_REGISTRY_URL: http://agent-registry:8300
      MESSAGE_BUS_URL: http://agent-message-bus:8299
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/3
      CONFIG_PATH: /app/config
      LOG_LEVEL: INFO
      ROUTING_STRATEGY: capability_weighted
      MAX_CONCURRENT_ROUTES: 50
    volumes:
      - ./workflows:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      agent-registry:
        condition: service_started
      agent-message-bus:
        condition: service_started
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import redis; r=redis.Redis(host='redis', port=6379); r.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  workflow-self-healer:
    container_name: sutazai-workflow-self-healer
    build:
      context: ./workflows/deployments
      dockerfile: Dockerfile.self_healer
    environment:
      <<: [*common-variables, *database-config]
      MONITORING_INTERVAL: 30
      PROMETHEUS_URL: http://prometheus:9090
      GRAFANA_URL: http://grafana:3000
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/4
      CONFIG_PATH: /app/config
      LOG_LEVEL: INFO
      HEALING_MODE: proactive
      MAX_HEALING_ACTIONS_PER_MINUTE: 10
    volumes:
      - ./workflows:/app/config:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      prometheus:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import docker; docker.from_env().ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ===========================================
  # WORKFLOW MONITORING
  # ===========================================
  
  workflow-monitor:
    container_name: sutazai-workflow-monitor
    build:
      context: ./workflows/deployments
      dockerfile: Dockerfile.monitor
    environment:
      <<: *common-variables
      PROMETHEUS_URL: http://prometheus:9090
      GRAFANA_URL: http://grafana:3000
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/5
      METRICS_INTERVAL: 15
      DASHBOARD_REFRESH_INTERVAL: 30
    ports:
      - "8110:8080"
    volumes:
      - ./workflows:/app/config:ro
      - ./monitoring/grafana/dashboards:/app/dashboards
    depends_on:
      - prometheus
      - grafana
      - redis
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5' 
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

volumes:
  dify_data:
    driver: local
  workflow_data:
    driver: local