# ============================================================================
# HAProxy Configuration for Perfect Jarvis Blue/Green Deployment
# ============================================================================
#
# This configuration provides:
# - Blue/Green traffic routing with zero-downtime switching
# - Health checks for both environments
# - Session persistence and graceful failover
# - SSL termination and security headers
# - Monitoring and statistics interface
#
# Following CLAUDE.md Rule 16: Use local LLMs via Ollama with TinyLlama
# Following CLAUDE.md Rule 2: Don't break existing functionality
# ============================================================================

global
    # Daemon configuration
    daemon
    user haproxy
    group haproxy
    
    # Process and connection limits
    maxconn 4096
    nbproc 1
    nbthread 4
    
    # Logging configuration
    log stdout local0 info
    log-tag haproxy
    
    # SSL configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024
    
    # Stats socket for runtime configuration
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    # Mode and timeouts
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 3s
    
    # Retry configuration
    retries 3
    option redispatch
    
    # HTTP options
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option originalto
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/xml text/css text/javascript application/javascript application/json
    
    # Default error handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# ============================================================================
# STATISTICS AND MONITORING
# ============================================================================

frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-legends
    stats show-desc "Perfect Jarvis HAProxy Statistics"
    stats admin if TRUE
    
    # Security headers for stats page
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"

# ============================================================================
# FRONTEND CONFIGURATION
# ============================================================================

# Main HTTP frontend (redirects to HTTPS)
frontend http_frontend
    bind *:80
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Main HTTPS frontend
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/sutazai.pem
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting (basic DDoS protection)
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint (bypass routing)
    acl is_health_check path /health /healthz /_health
    use_backend health_check if is_health_check
    
    # API routing
    acl is_api path_beg /api
    use_backend api_backend if is_api
    
    # WebSocket routing for real-time features
    acl is_websocket hdr(Connection) -i upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    use_backend websocket_backend if is_websocket
    
    # Default to frontend application
    default_backend frontend_backend

# Blue/Green routing frontends
frontend blue_green_api
    bind *:20010
    
    # Health check endpoint
    acl is_health_check path /health /healthz /_health
    use_backend health_check if is_health_check
    
    # Route to active API backend
    default_backend api_backend

frontend blue_green_frontend
    bind *:20011
    
    # Health check endpoint
    acl is_health_check path /health /healthz /_health
    use_backend health_check if is_health_check
    
    # Route to active frontend backend
    default_backend frontend_backend

# Direct access frontends for testing
frontend blue_direct
    bind *:21010
    default_backend blue_api_backend
    
frontend green_direct
    bind *:21011
    default_backend green_api_backend

# ============================================================================
# BACKEND CONFIGURATION - BLUE/GREEN SWITCHING
# ============================================================================

# API Backend (Blue/Green switching)
backend api_backend
    # Load balancing algorithm
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health HTTP/1.1\r\nHost:\ api.sutazai.local
    http-check expect status 200
    
    # Session persistence (if needed)
    # cookie JSESSIONID prefix nocache
    
    # Blue/Green server definitions
    # Default: Blue is active, Green is backup
    server blue-api blue-backend:8000 check inter 10s rise 2 fall 3 weight 100
    server green-api green-backend:8000 check inter 10s rise 2 fall 3 weight 0 backup
    
    # Graceful shutdown handling
    option log-health-checks
    
    # Connection limits per server
    default-server maxconn 100
    
    # Request/response modifications
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-response set-header X-Backend-Server %s

# Frontend Backend (Blue/Green switching)
backend frontend_backend
    # Load balancing algorithm
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /health HTTP/1.1\r\nHost:\ app.sutazai.local
    http-check expect status 200
    
    # Blue/Green server definitions
    # Default: Blue is active, Green is backup
    server blue-frontend blue-frontend:8501 check inter 10s rise 2 fall 3 weight 100
    server green-frontend green-frontend:8501 check inter 10s rise 2 fall 3 weight 0 backup
    
    # Streamlit-specific configuration
    option log-health-checks
    
    # Connection limits per server
    default-server maxconn 50
    
    # Request/response modifications
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Host %[req.hdr(host)]
    http-response set-header X-Backend-Server %s

# WebSocket Backend (for real-time features)
backend websocket_backend
    # WebSocket-specific configuration
    balance source
    hash-type consistent
    
    # No health checks for WebSocket (they interfere with connections)
    # option httpchk GET /ws/health
    
    # Blue/Green server definitions
    server blue-ws blue-backend:8000 check inter 30s rise 2 fall 5 weight 100
    server green-ws green-backend:8000 check inter 30s rise 2 fall 5 weight 0 backup
    
    # WebSocket timeout configuration
    timeout tunnel 3600s
    
    # Connection limits
    default-server maxconn 200

# ============================================================================
# DIRECT ACCESS BACKENDS
# ============================================================================

# Blue Environment Direct Access
backend blue_api_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server blue-api blue-backend:8000 check inter 10s rise 2 fall 3
    
    # Blue-specific headers
    http-request set-header X-Environment "blue"
    http-response set-header X-Environment "blue"

# Green Environment Direct Access
backend green_api_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server green-api green-backend:8000 check inter 10s rise 2 fall 3
    
    # Green-specific headers
    http-request set-header X-Environment "green"
    http-response set-header X-Environment "green"

# ============================================================================
# LEGACY OLLAMA BACKEND (Preserve existing functionality)
# ============================================================================

# Ollama backend with intelligent routing (preserved from original)
backend ollama_backend
    balance leastconn
    option httpchk GET /api/tags
    
    # Retry policy
    retry-on all-retryable-errors
    retries 2
    
    # Connection reuse
    http-reuse safe
    
    # Queue management
    timeout queue 30s
    
    # Circuit breaker via health checks
    option redispatch
    
    # Direct connection to Ollama service
    server ollama-direct ollama:11434 check inter 10s fall 3 rise 2 weight 100

# ============================================================================
# HEALTH CHECK BACKEND
# ============================================================================

backend health_check
    # Simple health check response
    http-request return status 200 content-type "application/json" string '{"status":"healthy","timestamp":"$(date -Iseconds)","proxy":"haproxy"}'

# ============================================================================
# RUNTIME CONFIGURATION SUPPORT
# ============================================================================

# The following commands can be used via the stats socket to switch traffic:
#
# Switch to Green (make Green active, Blue backup):
# echo "set weight api_backend/blue-api 0" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight api_backend/green-api 100" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight frontend_backend/blue-frontend 0" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight frontend_backend/green-frontend 100" | socat stdio /var/run/haproxy/admin.sock
#
# Switch to Blue (make Blue active, Green backup):
# echo "set weight api_backend/blue-api 100" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight api_backend/green-api 0" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight frontend_backend/blue-frontend 100" | socat stdio /var/run/haproxy/admin.sock
# echo "set weight frontend_backend/green-frontend 0" | socat stdio /var/run/haproxy/admin.sock