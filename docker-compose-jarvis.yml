version: '3.8'

services:
  # JARVIS Core Service
  jarvis-core:
    build:
      context: .
      dockerfile: docker/jarvis/Dockerfile
    container_name: jarvis-core
    restart: unless-stopped
    ports:
      - "8888:8888"  # WebSocket port
      - "8889:8889"  # REST API port
    environment:
      - JARVIS_MODE=production
      - ENABLE_VOICE=true
      - ENABLE_WAKE_WORD=true
      - WAKE_WORD=jarvis
      - ASR_PROVIDER=auto
      - TTS_PROVIDER=auto
      - WHISPER_MODEL=base
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - ENABLE_LOCAL_MODELS=true
      - REDIS_URL=redis://jarvis-redis:6379
      - DATABASE_URL=postgresql+asyncpg://jarvis:${DB_PASSWORD}@jarvis-postgres:5432/jarvis
    volumes:
      - ./models:/app/models  # Model cache
      - ./voices:/app/voices  # Voice models
      - ./logs:/app/logs      # Logs
    devices:
      - /dev/snd:/dev/snd    # Audio device access
    networks:
      - jarvis-network
    depends_on:
      - jarvis-postgres
      - jarvis-redis
      - ollama

  # Ollama for Local LLMs
  ollama:
    image: ollama/ollama:latest
    container_name: jarvis-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_MODELS=/models
    networks:
      - jarvis-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # PostgreSQL for conversation history and user data
  jarvis-postgres:
    image: postgres:16-alpine
    container_name: jarvis-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=jarvis
      - POSTGRES_USER=jarvis
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - jarvis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  jarvis-redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - jarvis-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Voice Processing Service (separate for scalability)
  jarvis-voice:
    build:
      context: .
      dockerfile: docker/jarvis/Dockerfile.voice
    container_name: jarvis-voice
    restart: unless-stopped
    ports:
      - "8890:8890"  # Voice service port
    environment:
      - WHISPER_MODEL=base.en
      - VOSK_MODEL_PATH=/models/vosk
      - ENABLE_GPU=true
      - PORCUPINE_ACCESS_KEY=${PORCUPINE_ACCESS_KEY}
    volumes:
      - ./models/whisper:/models/whisper
      - ./models/vosk:/models/vosk
      - ./audio_cache:/app/audio_cache
    devices:
      - /dev/snd:/dev/snd
    networks:
      - jarvis-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # HuggingFace Model Server
  jarvis-huggingface:
    build:
      context: .
      dockerfile: docker/jarvis/Dockerfile.huggingface
    container_name: jarvis-huggingface
    restart: unless-stopped
    ports:
      - "8891:8891"
    environment:
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - MODEL_CACHE_DIR=/models
      - ENABLE_GPU=true
    volumes:
      - huggingface-cache:/models
    networks:
      - jarvis-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Nginx for WebSocket proxy and load balancing
  jarvis-nginx:
    image: nginx:alpine
    container_name: jarvis-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/jarvis.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - jarvis-network
    depends_on:
      - jarvis-core

  # Prometheus for monitoring
  jarvis-prometheus:
    image: prom/prometheus:latest
    container_name: jarvis-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - jarvis-network

  # Grafana for visualization
  jarvis-grafana:
    image: grafana/grafana:latest
    container_name: jarvis-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - jarvis-network
    depends_on:
      - jarvis-prometheus

networks:
  jarvis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres-data:
  redis-data:
  ollama-data:
  huggingface-cache:
  prometheus-data:
  grafana-data: