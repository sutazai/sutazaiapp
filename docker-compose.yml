networks:
  sutazai-network:
    # Ensure the network is created automatically with a stable name
    name: sutazai-network
services:
  # --------------------------------------------------------
  # Service Mesh: Kong Gateway (DB-less)
  # Proxy: http://localhost:10005  Admin: http://localhost:10015
  kong:
    image: kong:3.5
    container_name: sutazai-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong.yml"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_LOG_LEVEL: "notice"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/status"]
      interval: 30s
      timeout: 5s
      retries: 5
    networks:
    - sutazai-network
    ports:
    - 10005:8000
    - 10015:8001
    restart: unless-stopped
    volumes:
    - ./config/kong/kong.yml:/etc/kong/kong.yml:ro

  # --------------------------------------------------------
  # Service Mesh: Consul (single-node server, UI enabled)
  # UI/API: http://localhost:10006
  consul:
    image: hashicorp/consul:1.17
    container_name: sutazai-consul
    command: ["agent", "-server", "-bootstrap-expect=1", "-ui", "-client=0.0.0.0"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8500/v1/status/leader"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
    - sutazai-network
    ports:
    - 10006:8500
    restart: unless-stopped
    volumes:
    - ./config/consul/consul.hcl:/consul/config/consul.hcl:ro
    - consul_data:/consul/data

  # --------------------------------------------------------
  # Service Mesh: RabbitMQ (management enabled)
  # AMQP: localhost:10007  UI: http://localhost:10008
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: sutazai-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-sutazai}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-sutazai_rabbit}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:15672/api/health/checks/virtual-hosts"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
    - sutazai-network
    ports:
    - 10007:5672
    - 10008:15672
    restart: unless-stopped
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
  mesh-worker:
    build:
      context: .
      dockerfile: docker/mesh-worker/Dockerfile
    container_name: sutazai-mesh-worker
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: INFO
      # Defaults, override as needed
      MESH_TOPIC: nlp
      MESH_GROUP: nlp
      MESH_CONSUMER: worker-1
      MESH_RESULTS: nlp
    networks:
    - sutazai-network
    restart: unless-stopped
    profiles:
      - mesh
  mesh-worker-2:
    build:
      context: .
      dockerfile: docker/mesh-worker/Dockerfile
    container_name: sutazai-mesh-worker-2
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_URL: redis://redis:6379/0
      LOG_LEVEL: INFO
      MESH_TOPIC: nlp
      MESH_GROUP: nlp
      MESH_CONSUMER: worker-2
      MESH_RESULTS: nlp
    networks:
    - sutazai-network
    restart: unless-stopped
    profiles:
      - mesh
  agentgpt:
    build:
      context: ./docker/agentgpt
      dockerfile: Dockerfile
    container_name: sutazai-agentgpt
    depends_on:
    - postgres
    - ollama
    environment:
      CLAUDE_RULES_PATH: /app/CLAUDE.md
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      ENFORCE_CLAUDE_RULES: 'true'
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 11066:3000
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - /opt/sutazaiapp/CLAUDE.md:/app/CLAUDE.md:ro
  agentzero:
    build:
      context: ./docker/agentzero
      dockerfile: Dockerfile
    container_name: sutazai-agentzero
    environment:
      CLAUDE_RULES_PATH: /app/CLAUDE.md
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      ENFORCE_CLAUDE_RULES: 'true'
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 11067:8080
    restart: unless-stopped
    volumes:
    - /opt/sutazaiapp/CLAUDE.md:/app/CLAUDE.md:ro
  ai-metrics-exporter:
    build:
      context: ./docker/ai-metrics-exporter
      dockerfile: Dockerfile
    container_name: sutazai-ai-metrics-exporter
    depends_on:
      backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      BACKEND_URL: http://backend:8000
      COLLECTION_INTERVAL: 30
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      METRICS_PORT: 9200
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      OLLAMA_URL: http://ollama:10104
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test:
      - CMD
      - sh
      - -c
      - 'curl -f http://localhost:9200/metrics || exit 1'
      timeout: 30s
    networks:
    - sutazai-network
    ports:
    - 11068:9200
    restart: unless-stopped
  aider:
    build:
      context: ./docker/aider
      dockerfile: Dockerfile
    container_name: sutazai-aider
    depends_on:
    - ollama
    environment:
      AGENT_NAME: Aider
      MODEL: tinyllama:latest
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10301:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - ./backend:/app/backend:ro
    - ./frontend:/app/frontend:ro
  alertmanager:
    command:
    - --config.file=/etc/alertmanager/config.yml
    - --storage.path=/alertmanager
    - --web.external-url=http://localhost:9093
    container_name: sutazai-alertmanager
    environment:
    - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-}
    - SLACK_AI_WEBHOOK_URL=${SLACK_AI_WEBHOOK_URL:-}
    - SLACK_SECURITY_WEBHOOK_URL=${SLACK_SECURITY_WEBHOOK_URL:-}
    - PAGERDUTY_SERVICE_KEY=${PAGERDUTY_SERVICE_KEY:-}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/ready"]
      interval: 60s
      timeout: 30s
      retries: 5
    image: prom/alertmanager:latest
    networks:
    - sutazai-network
    ports:
    - 11108:9093
    restart: unless-stopped
    volumes:
    - ./monitoring/alertmanager:/etc/alertmanager
    - alertmanager_data:/alertmanager
  autogen:
    build:
      context: ./docker/autogen
      dockerfile: Dockerfile
    container_name: sutazai-autogen
    environment:
      AUTOGEN_USE_DOCKER: 'True'
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10405:8080
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  autogpt:
    build:
      context: ./docker/autogpt
      dockerfile: Dockerfile
    container_name: sutazai-autogpt
    depends_on:
    - backend
    - ollama
    environment:
      AGENT_NAME: AutoGPT
      BACKEND_URL: http://backend:8000
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
      WORKSPACE_PATH: /app/workspace
    networks:
    - sutazai-network
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - agent_outputs:/app/outputs
  awesome-code-ai:
    build:
      context: ./docker/awesome-code-ai
      dockerfile: Dockerfile
    container_name: sutazai-awesome-code-ai
    environment:
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10410:8080
    restart: unless-stopped
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    container_name: sutazai-backend
    depends_on:
      chromadb:
        condition: service_healthy
      neo4j:
        condition: service_started
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    environment:
      API_V1_STR: /api/v1
      BACKEND_CORS_ORIGINS: '["http://localhost:10011", "http://172.31.77.193:10011"]'
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      CHROMADB_URL: http://chromadb:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      FAISS_INDEX_PATH: /data/faiss
      GRAFANA_PASSWORD: ${GRAFANA_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      NEO4J_HOST: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_PORT: 7687
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_URL: http://qdrant:6333
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test: &id001
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(("localhost",
        8000))==0 else 1)
      timeout: 30s
    networks:
    - sutazai-network
    ports:
    - 10010:8000
    restart: unless-stopped
    volumes:
    - ./backend:/app
    - ./data:/data
    - ./logs:/logs
    - agent_workspaces:/app/agent_workspaces
  blackbox-exporter:
    command:
    - --config.file=/etc/blackbox_exporter/config.yml
    container_name: sutazai-blackbox-exporter
    healthcheck:
      interval: 60s
      retries: 5
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:9115/
      timeout: 30s
    image: prom/blackbox-exporter:latest
    networks:
    - sutazai-network
    ports:
    - 10204:9115
    restart: unless-stopped
    volumes:
    - ./monitoring/blackbox/config.yml:/etc/blackbox_exporter/config.yml
  browser-use:
    build:
      context: ./docker/browser-use
      dockerfile: Dockerfile
    container_name: sutazai-browser-use
    depends_on:
    - ollama
    environment:
      AGENT_NAME: BrowserUse
      DISPLAY: :99
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10304:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
  cadvisor:
    container_name: sutazai-cadvisor
    devices:
    - /dev/kmsg
    image: gcr.io/cadvisor/cadvisor:latest
    networks:
    - sutazai-network
    ports:
    - 10206:8080
    privileged: true
    restart: unless-stopped
    command:
      - '--housekeeping_interval=30s'
      - '--max_housekeeping_interval=35s'
      - '--allow_dynamic_housekeeping=true'
      - '--global_housekeeping_interval=1m'
      - '--disable_metrics=advtcp,cpu_topology,disk,hugetlb,memory_numa,percpu,referenced_memory,resctrl,tcp,udp'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 200M
        reservations:
          cpus: '0.1'
          memory: 50M
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:ro
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    - /dev/disk/:/dev/disk:ro
  chromadb:
    container_name: sutazai-chromadb
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
    - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthenticationServerProvider
    - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_API_KEY:-test-token}
    - CHROMA_SERVER_HOST=0.0.0.0
    - CHROMA_SERVER_HTTP_PORT=8000
    - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://localhost:8501", "http://backend:8000"]
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test:
      - CMD
      - sh
      - -c
      - 'curl -f http://localhost:8000/api/v1/heartbeat || exit 1'
      timeout: 30s
    image: chromadb/chroma:0.5.0
    networks:
    - sutazai-network
    ports:
    - 10100:8000
    restart: unless-stopped
    volumes:
    - chromadb_data:/chroma/chroma
  code-improver:
    build:
      context: ./docker/code-improver
      dockerfile: Dockerfile
    container_name: sutazai-code-improver
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      GIT_REPO_PATH: /opt/sutazaiapp
      IMPROVEMENT_SCHEDULE: 0 */6 * * *
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      REDIS_URL: redis://redis:6379/0
      REQUIRE_APPROVAL: 'true'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10408:8080
    restart: unless-stopped
    volumes:
    - ./:/opt/sutazaiapp
    - /var/run/docker.sock:/var/run/docker.sock
  context-framework:
    build:
      context: ./docker/context-framework
      dockerfile: Dockerfile
    container_name: sutazai-context-framework
    environment:
      CHROMADB_URL: http://chromadb:8000
      FAISS_INDEX_PATH: /data/faiss
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      QDRANT_URL: http://qdrant:6333
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10404:8080
    restart: unless-stopped
    volumes:
    - ./data/context:/data
  crewai:
    build:
      context: ./docker/crewai
      dockerfile: Dockerfile
    container_name: sutazai-crewai
    depends_on:
    - backend
    - ollama
    environment:
      AGENT_NAME: CrewAI
      BACKEND_URL: http://backend:8000
      CREW_SIZE: 5
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10300:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - agent_outputs:/app/outputs
  dify:
    container_name: sutazai-dify
    depends_on:
    - postgres
    - redis
    - ollama
    environment:
      APP_WEB_URL: http://localhost:10412
      CONSOLE_API_URL: http://localhost:10412
      CONSOLE_WEB_URL: http://localhost:10412
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      INIT_PASSWORD: admin
      LOG_LEVEL: INFO
      MODE: standalone
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      SERVICE_API_URL: http://localhost:10412
      STORAGE_LOCAL_PATH: /app/storage
      STORAGE_TYPE: local
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    image: langgenius/dify-api:latest
    networks:
    - sutazai-network
    ports:
    - 10412:5000
    restart: unless-stopped
    volumes:
    - ./data/dify:/app/storage
  documind:
    build:
      context: ./docker/documind
      dockerfile: Dockerfile
    container_name: sutazai-documind
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10308:8000
    restart: unless-stopped
    volumes:
    - ./data/documents:/app/documents
    - agent_outputs:/app/processed
  faiss:
    build:
      context: ./docker/faiss
      dockerfile: Dockerfile
    container_name: sutazai-faiss
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()
      timeout: 30s
    networks:
    - sutazai-network
    ports:
    - 10103:8000
    restart: unless-stopped
    volumes:
    - faiss_data:/data
  finrobot:
    build:
      context: ./docker/finrobot
      dockerfile: Dockerfile
    container_name: sutazai-finrobot
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10407:8080
    restart: unless-stopped
    volumes:
    - ./data/financial:/data
  flowise:
    container_name: sutazai-flowise
    environment:
      DATABASE_PATH: /opt/flowise/.flowise
      PORT: 3000
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 60s
      test:
      - CMD
      - wget
      - --spider
      - -q
      - http://localhost:3000/api/v1/ping
      timeout: 30s
    image: flowiseai/flowise:latest
    networks:
    - sutazai-network
    ports:
    - 10401:3000
    restart: unless-stopped
    volumes:
    - ./data/flowise:/opt/flowise/.flowise
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    container_name: sutazai-frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_PORT: 8501
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(("localhost",
        8501))==0 else 1)
      timeout: 30s
    networks:
    - sutazai-network
    ports:
    - 10011:8501
    restart: unless-stopped
    volumes:
    - ./frontend:/app
    - ./data:/data
  fsdp:
    build:
      context: ./docker/fsdp
      dockerfile: Dockerfile
    container_name: sutazai-fsdp
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
      ENABLE_FSDP: ${ENABLE_FSDP:-false}
    networks:
    - sutazai-network
    restart: unless-stopped
    volumes:
    - ./data/models:/models
    profiles:
    - fsdp
    - optional
  gpt-engineer:
    build:
      context: ./docker/gpt-engineer
      dockerfile: Dockerfile
    container_name: sutazai-gpt-engineer
    depends_on:
    - ollama
    environment:
      AGENT_NAME: GPT-Engineer
      MODEL: tinyllama:latest
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 11109:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - agent_outputs:/app/outputs
  grafana:
    container_name: sutazai-grafana
    depends_on:
    - prometheus
    - loki
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-sutazai_grafana}
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_INSTALL_PLUGINS=
    - GF_ANALYTICS_REPORTING_ENABLED=false
    - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/system-overview.json
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 60s
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit
        1
      timeout: 30s
    image: grafana/grafana:latest
    networks:
    - sutazai-network
    ports:
    - 10201:3000
    restart: unless-stopped
    volumes:
    - grafana_data:/var/lib/grafana
    - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
  hardware-resource-optimizer:
    build:
      context: ./agents/hardware-resource-optimizer
      dockerfile: Dockerfile
    container_name: sutazai-hardware-resource-optimizer
    depends_on:
      backend:
        condition: service_started
      ollama:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      AGENT_TYPE: hardware-resource-optimizer
      API_ENDPOINT: http://backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODEL: tinyllama:latest
      OLLAMA_ORIGINS: '*'
      PORT: 8080
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test: *id001
      timeout: 30s
    networks:
    - sutazai-network
    pid: host
    ports:
    - 11110:8080
    privileged: true
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp:/host/tmp
  jarvis-voice-interface:
    build:
      context: ./agents/jarvis-voice-interface
      dockerfile: Dockerfile
    container_name: sutazai-jarvis-voice-interface
    depends_on:
      backend:
        condition: service_started
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    environment:
      AGENT_TYPE: jarvis-voice-interface
      API_ENDPOINT: http://backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODEL: tinyllama:latest
      OLLAMA_ORIGINS: '*'
      PORT: 8080
      PORCUPINE_ACCESS_KEY: ${PORCUPINE_ACCESS_KEY:-demo}
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 180s
      test: *id001
      timeout: 30s
    networks:
    - sutazai-network
    ports:
    - 11150:8080
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
    - agent_workspaces:/app/workspace
    - /opt/sutazaiapp/CLAUDE.md:/app/CLAUDE.md:ro
  jarvis-knowledge-management:
    build:
      context: ./agents/jarvis-knowledge-management
      dockerfile: Dockerfile
    container_name: sutazai-jarvis-knowledge-management
    depends_on:
      backend:
        condition: service_started
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
      qdrant:
        condition: service_started
      faiss:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      AGENT_TYPE: jarvis-knowledge-management
      API_ENDPOINT: http://backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_MODEL: tinyllama:latest
      PORT: 8080
      REDIS_URL: redis://redis:6379/0
      CHROMADB_URL: http://chromadb:8000
      QDRANT_URL: http://qdrant:6333
      FAISS_URL: http://faiss-vector:8000
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    networks:
    - sutazai-network
    ports:
    - 11101:8080
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
  jarvis-automation-agent:
    build:
      context: ./agents/jarvis-automation-agent
      dockerfile: Dockerfile
    container_name: sutazai-jarvis-automation-agent
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      AGENT_TYPE: jarvis-automation-agent
      API_ENDPOINT: http://backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_BASE_URL: http://ollama:10104
      PORT: 8080
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    networks:
    - sutazai-network
    ports:
    - 11102:8080
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
    - /tmp:/tmp
    - /opt/sutazaiapp:/opt/sutazaiapp:ro
  jarvis-multimodal-ai:
    build:
      context: ./agents/jarvis-multimodal-ai
      dockerfile: Dockerfile
    container_name: sutazai-jarvis-multimodal-ai
    depends_on:
      backend:
        condition: service_started
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    environment:
      AGENT_TYPE: jarvis-multimodal-ai
      API_ENDPOINT: http://backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_MODEL: tinyllama:latest
      PORT: 8080
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    networks:
    - sutazai-network
    ports:
    - 11103:8080
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
    - ./temp:/app/temp
  jarvis-hardware-resource-optimizer:
    build:
      context: ./agents/jarvis-hardware-resource-optimizer
      dockerfile: Dockerfile
    container_name: sutazai-jarvis-hardware-resource-optimizer
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      AGENT_TYPE: jarvis-hardware-resource-optimizer
      API_ENDPOINT: http://backend:8000
      LOG_LEVEL: INFO
      PORT: 8080
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    networks:
    - sutazai-network
    pid: host
    ports:
    - 11104:8080
    privileged: true
    restart: unless-stopped
    volumes:
    - ./data:/app/data
    - ./configs:/app/configs
    - ./logs:/app/logs
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /var/run/docker.sock:/var/run/docker.sock
  health-monitor:
    build:
      context: ./docker/health-monitor
      dockerfile: Dockerfile
    container_name: sutazai-health-monitor
    environment:
      ALERT_WEBHOOK_URL: ${HEALTH_ALERT_WEBHOOK:-}
      MONITOR_INTERVAL: 30
      SERVICES_TO_CHECK: sutazai-backend,sutazai-frontend,sutazai-postgres,sutazai-redis,sutazai-neo4j,sutazai-chromadb,sutazai-qdrant,sutazai-ollama,sutazai-prometheus,sutazai-grafana,sutazai-langflow,sutazai-flowise,sutazai-dify,sutazai-n8n
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10210:8000
    restart: unless-stopped
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
  jax:
    build:
      context: ./docker/jax
      dockerfile: Dockerfile
    container_name: sutazai-jax
    deploy: &id002
      resources:
        limits:
          cpus: '20'
          memory: 16G
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10502:8080
    restart: unless-stopped
    profiles:
      - ml-heavy
    volumes:
    - models_data:/workspace/models
    - ./data/training:/workspace/data
  langflow:
    container_name: sutazai-langflow
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/langflow
      LANGFLOW_DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/langflow
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 120s
      test: *id001
      timeout: 30s
    image: langflowai/langflow:latest
    networks:
    - sutazai-network
    ports:
    - 10400:7860
    restart: unless-stopped
    volumes:
    - ./data/langflow:/app/data
  letta:
    build:
      context: ./docker/letta
      dockerfile: Dockerfile
    container_name: sutazai-letta
    depends_on:
    - postgres
    - backend
    - ollama
    environment:
      AGENT_NAME: Letta
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      MEMORY_BACKEND: postgres
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - postgres_data:/app/database
  llamaindex:
    build:
      context: ./docker/llamaindex
      dockerfile: Dockerfile
    container_name: sutazai-llamaindex
    depends_on:
    - chromadb
    - ollama
    environment:
      CHROMADB_URL: http://chromadb:8000
      FAISS_INDEX_PATH: /data/faiss
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      QDRANT_URL: http://qdrant:6333
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10402:8080
    restart: unless-stopped
    volumes:
    - ./data/documents:/app/documents
    - chromadb_data:/app/vector_store
  loki:
    command: -config.file=/etc/loki/local-config.yaml
    container_name: sutazai-loki
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 60s
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1
      timeout: 30s
    image: grafana/loki:2.9.0
    networks:
    - sutazai-network
    ports:
    - 10202:3100
    restart: unless-stopped
    volumes:
    - loki_data:/loki
    - ./monitoring/loki/config.yml:/etc/loki/local-config.yaml
  mcp-server:
    build:
      context: ./mcp_server
      dockerfile: Dockerfile
    container_name: sutazai-mcp-server
    depends_on:
      backend:
        condition: service_started
      ollama:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      BACKEND_API_URL: http://backend:8000
      CHROMADB_URL: http://chromadb:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      ENABLE_PERFORMANCE_METRICS: 'true'
      FAISS_INDEX_PATH: /data/faiss
      LOG_LEVEL: ${MCP_LOG_LEVEL:-INFO}
      MAX_CONCURRENT_TASKS: ${MCP_MAX_TASKS:-10}
      MCP_HTTP_PORT: 3030
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NODE_ENV: production
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      OLLAMA_URL: http://ollama:10104
      QDRANT_URL: http://qdrant:6333
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TASK_TIMEOUT_SECONDS: ${MCP_TASK_TIMEOUT:-300}
      TZ: ${TZ:-UTC}
    # MCP HTTP health port
    # merged into main environment block above
    # Use container-defined healthcheck
    networks:
    - sutazai-network
    ports:
    - 11190:3030
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data/mcp_server:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - mcp
  n8n:
    container_name: sutazai-n8n
    environment:
    - N8N_BASIC_AUTH_ACTIVE=true
    - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
    - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-sutazai_n8n}
    - WEBHOOK_URL=http://localhost:5678/
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 60s
      test:
      - CMD
      - wget
      - --spider
      - -q
      - http://localhost:5678/healthz
      timeout: 30s
    image: n8nio/n8n:latest
    networks:
    - sutazai-network
    ports:
    - 10403:5678
    restart: unless-stopped
    volumes:
    - ./data/n8n:/home/node/.n8n
  neo4j:
    container_name: sutazai-neo4j
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      # Optimized memory settings for Neo4j 5.x
      NEO4J_server_memory_heap_max__size: 512m
      NEO4J_server_memory_heap_initial__size: 256m
      NEO4J_server_memory_pagecache_size: 256m
      # JVM optimization for low memory usage
      NEO4J_server_jvm_additional: -XX:+UseG1GC -XX:G1HeapRegionSize=4m -XX:+DisableExplicitGC -XX:+ExitOnOutOfMemoryError
      # Database optimization - updated for Neo4j 5.x
      NEO4J_initial_dbms_default__database: sutazai
      NEO4J_db_checkpoint_interval_time: 30s
      NEO4J_db_transaction_timeout: 30s
      # Disable query logging to reduce I/O - updated for Neo4j 5.x
      NEO4J_db_logs_query_enabled: OFF
      # Disable strict validation to allow optimization
      NEO4J_server_config_strict__validation_enabled: false
      # Additional Neo4j 5.x specific settings for stability
      NEO4J_db_transaction_bookmark_ready_timeout: 5s
      NEO4J_dbms_cluster_discovery_type: SINGLE
    healthcheck:
      interval: 60s
      retries: 3
      start_period: 45s
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:7474/ || exit 1
      timeout: 15s
    image: neo4j:5.13-community
    networks:
    - sutazai-network
    ports:
    - 10002:7474
    - 10003:7687
    restart: unless-stopped
    volumes:
    - neo4j_data:/data
  node-exporter:
    command:
    - --path.procfs=/host/proc
    - --path.sysfs=/host/sys
    - --path.rootfs=/rootfs
    - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)
    container_name: sutazai-node-exporter
    image: prom/node-exporter:latest
    networks:
    - sutazai-network
    ports:
    - 10205:9100
    restart: unless-stopped
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    - /:/rootfs:ro
  ollama:
    container_name: sutazai-ollama
    deploy:
      resources:
        limits:
          cpus: '10'
          memory: 20G
        reservations:
          cpus: '4'
          memory: 8G
    environment:
      CLAUDE_RULES_PATH: /app/CLAUDE.md
      ENFORCE_CLAUDE_RULES: 'true'
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_DEBUG: false
      OLLAMA_FLASH_ATTENTION: 1
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_KEEP_ALIVE: 10m
      OLLAMA_MAX_LOADED_MODELS: 3
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_NUM_PARALLEL: 50
      OLLAMA_NUM_THREADS: 10
      OLLAMA_ORIGINS: '*'
      OLLAMA_RUNNERS_DIR: /tmp
      OLLAMA_TMPDIR: /tmp
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 60s
      test:
      - CMD-SHELL
      - ollama list > /dev/null || exit 1
      timeout: 30s
    image: ollama/ollama:latest
    networks:
    - sutazai-network
    ports:
    - 10104:11434
    restart: unless-stopped
    sysctls:
    - net.core.somaxconn=65535
    ulimits:
      nofile:
        hard: 65536
        soft: 65536
    volumes:
    - ollama_data:/root/.ollama
    - models_data:/models
    - /opt/sutazaiapp/CLAUDE.md:/app/CLAUDE.md:ro
    - /opt/sutazaiapp/config/ollama.yaml:/app/config/ollama.yaml:ro
  ollama-integration:
    build:
      context: ./agents/ollama_integration
      dockerfile: Dockerfile
    container_name: sutazai-ollama-integration
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      AGENT_TYPE: ollama-integration
      API_ENDPOINT: http://backend:8000
      LOG_LEVEL: INFO
      OLLAMA_BASE_URL: http://ollama:10104
      PORT: 8090
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
      MAX_RETRIES: 3
      BACKOFF_BASE: 2
      REQUEST_TIMEOUT: 30
      CONNECTION_POOL_SIZE: 10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
    - sutazai-network
    ports:
    - 8090:8090
    restart: unless-stopped
  opendevin:
    build:
      context: ./docker/opendevin
      dockerfile: Dockerfile
    container_name: sutazai-opendevin
    environment:
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
      WORKSPACE_DIR: /workspace
    networks:
    - sutazai-network
    ports:
    - 10406:3000
    restart: unless-stopped
    volumes:
    - ./workspace:/workspace
    - /var/run/docker.sock:/var/run/docker.sock
  pentestgpt:
    build:
      context: ./docker/pentestgpt
      dockerfile: Dockerfile
    container_name: sutazai-pentestgpt
    depends_on:
    - ollama
    environment:
      AGENT_NAME: PentestGPT
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TARGET_MODE: internal
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - agent_outputs:/app/reports
  postgres:
    container_name: sutazai-postgres
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 60s
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-sutazai}
      timeout: 5s
    image: postgres:16.3-alpine
    networks:
    - sutazai-network
    ports:
    - 10000:5432
    restart: unless-stopped
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
  postgres-exporter:
    container_name: sutazai-postgres-exporter
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}?sslmode=disable
    image: prometheuscommunity/postgres-exporter:latest
    networks:
    - sutazai-network
    ports:
    - 10207:9187
    restart: unless-stopped
  privategpt:
    build:
      context: ./docker/privategpt
      dockerfile: Dockerfile
    container_name: sutazai-privategpt
    depends_on:
    - ollama
    environment:
      AGENT_NAME: PrivateGPT
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10306:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
    - ./data/documents:/app/documents
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    - --web.enable-lifecycle
    - --storage.tsdb.retention.time=7d
    - --web.enable-admin-api
    - --storage.tsdb.max-block-duration=2h
    - --storage.tsdb.min-block-duration=2h
    - --storage.tsdb.retention.size=1GB
    container_name: sutazai-prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      interval: 60s
      retries: 5
      start_period: 90s
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:9090/-/healthy
      timeout: 30s
    image: prom/prometheus:latest
    networks:
    - sutazai-network
    ports:
    - 10200:9090
    restart: unless-stopped
    volumes:
    - ./monitoring/prometheus:/etc/prometheus
    - prometheus_data:/prometheus
  promtail:
    command: -config.file=/etc/promtail/config.yml
    container_name: sutazai-promtail
    depends_on:
    - loki
    image: grafana/promtail:2.9.0
    networks:
    - sutazai-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    volumes:
    - /var/log:/var/log:ro
    - /var/lib/docker/containers:/var/lib/docker/containers:ro
    - ./monitoring/promtail/config.yml:/etc/promtail/config.yml
    - ./logs:/app/logs:ro
  pytorch:
    build:
      context: ./docker/pytorch
      dockerfile: Dockerfile
    container_name: sutazai-pytorch
    deploy: *id002
    environment:
      JUPYTER_ENABLE_LAB: true
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10500:8888
    restart: unless-stopped
    profiles:
      - ml-heavy
    volumes:
    - models_data:/workspace/models
    - ./data/training:/workspace/data
  qdrant:
    container_name: sutazai-qdrant
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
    healthcheck:
      interval: 60s
      retries: 5
      test:
      - CMD
      - sh
      - -c
      - echo 'use IO::Socket::INET; my $$s = IO::Socket::INET->new(PeerAddr => q{localhost:6333},
        Proto => q{tcp}, Timeout => 2); if ($$s) { print $$s qq{GET / HTTP/1.0\r\n\r\n};
        while (<$$s>) { if (/200 OK/) { exit 0; } } } exit 1;' | perl
      timeout: 30s
    image: qdrant/qdrant:v1.9.2
    networks:
    - sutazai-network
    ports:
    - 10101:6333
    - 10102:6334
    restart: unless-stopped
    volumes:
    - qdrant_data:/qdrant/storage
  redis:
    command: redis-server --save "" --appendonly no --maxmemory 512mb --maxmemory-policy allkeys-lru
    container_name: sutazai-redis
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      interval: 10s
      retries: 5
      test:
      - CMD-SHELL
      - redis-cli ping
      timeout: 5s
    image: redis:7.2-alpine
    networks:
    - sutazai-network
    ports:
    - 10001:6379
    restart: unless-stopped
    volumes:
    - redis_data:/data
  redis-exporter:
    container_name: sutazai-redis-exporter
    depends_on:
      redis:
        condition: service_healthy
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    image: oliver006/redis_exporter:latest
    networks:
    - sutazai-network
    ports:
    - 10208:9121
    restart: unless-stopped
  semgrep:
    command:
    - semgrep
    - --config=auto
    - --output=/outputs/semgrep-report.json
    - --json
    - /src
    container_name: sutazai-semgrep
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    image: returntocorp/semgrep:latest
    networks:
    - sutazai-network
    restart: 'no'
    volumes:
    - ./backend:/src/backend:ro
    - ./frontend:/src/frontend:ro
    - agent_outputs:/outputs
  service-hub:
    build:
      context: ./docker/service-hub
      dockerfile: Dockerfile
    container_name: sutazai-service-hub
    depends_on:
    - redis
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10409:8080
    restart: unless-stopped
  shellgpt:
    build:
      context: ./docker/shellgpt
      dockerfile: Dockerfile
    container_name: sutazai-shellgpt
    depends_on:
    - ollama
    environment:
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      OPENAI_API_HOST: http://ollama:10104/v1
      OPENAI_API_KEY: not_needed
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10307:8080
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
  skyvern:
    build:
      context: ./docker/skyvern
      dockerfile: Dockerfile
    container_name: sutazai-skyvern
    depends_on:
    - ollama
    environment:
      AGENT_NAME: Skyvern
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    restart: unless-stopped
    volumes:
    - agent_workspaces:/app/workspace
  tabbyml:
    command:
    - serve
    - --model
    - TabbyML/StarCoder-1B
    - --device
    - cpu
    - --no-webserver
    container_name: sutazai-tabbyml
    environment:
      CUDA_VISIBLE_DEVICES: ''
      RUST_LOG: error
      TABBY_DISABLE_GPU: 'true'
      TABBY_DISABLE_USAGE_COLLECTION: 'true'
      ENABLE_TABBY: ${ENABLE_TABBY:-false}
    image: tabbyml/tabby:latest
    networks:
    - sutazai-network
    ports:
    - 10303:8080
    profiles:
    - tabby
    - optional
    restart: unless-stopped
    volumes:
    - ./data/tabby:/data
  tensorflow:
    build:
      context: ./docker/tensorflow
      dockerfile: Dockerfile
    container_name: sutazai-tensorflow
    deploy: *id002
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - sutazai-network
    ports:
    - 10501:8888
    restart: unless-stopped
    profiles:
      - ml-heavy
    volumes:
    - models_data:/workspace/models
    - ./data/training:/workspace/data
volumes:
  agent_outputs: null
  agent_workspaces: null
  alertmanager_data: null
  chromadb_data: null
  faiss_data: null
  grafana_data: null
  loki_data: null
  models_data: null
  consul_data: null
  rabbitmq_data: null
  neo4j_data: null
  ollama_data: null
  postgres_data: null
  prometheus_data: null
  qdrant_data: null
  redis_data: null
x-common-variables:
  SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
  TZ: ${TZ:-UTC}
x-database-config:
  DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
  REDIS_URL: redis://redis:6379/0
x-gpu-config:
  deploy: *id002
x-ollama-config:
  OLLAMA_API_KEY: local
  OLLAMA_BASE_URL: http://ollama:10104
  OLLAMA_HOST: 0.0.0.0
  OLLAMA_ORIGINS: '*'
x-vector-config:
  CHROMADB_URL: http://chromadb:8000
  FAISS_INDEX_PATH: /data/faiss
  NEO4J_PASSWORD: ${NEO4J_PASSWORD}
  NEO4J_URI: bolt://neo4j:7687
  NEO4J_USER: neo4j
  QDRANT_URL: http://qdrant:6333
