version: '3.9'

# ====================================================================================
# SutazAI AGI/ASI Autonomous System - Unified Master Orchestration File
# ====================================================================================
# This file is the single source of truth for the entire SutazAI architecture.
# It combines services from all previous docker-compose files and is designed
# to be managed by the ./manage.sh script.

networks:
  sutazai-net:
    driver: bridge
    name: sutazai-net

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  qdrant_data:
  ollama_data:
  neo4j_data:
  workspace_data:
  logs_data:
  prometheus_data:
  grafana_data:
  consul_data:
  vault_data:
  agent_data:
  elasticsearch_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  vault_token:
    file: ./secrets/vault_token.txt

x-common-env: &common-env
  TZ: UTC
  LOG_LEVEL: INFO
  VAULT_ADDR: http://vault:8200
  CONSUL_ADDR: http://consul:8500

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 60s

services:

  # ===================================
  # CORE INFRASTRUCTURE & SERVICE MESH
  # ===================================

  

  

  

  # ===================================
  # DATABASE, CACHING & STORAGE
  # ===================================

  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres
    environment:
      POSTGRES_DB: sutazai
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sutazai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-net
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-net
    restart: unless-stopped

  # ===================================
  # AI, VECTOR & MODEL SERVING
  # ===================================

  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - ANONYMIZED_TELEMETRY=false
    networks:
      - sutazai-net
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - sutazai-net
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    networks:
      - sutazai-net
    restart: unless-stopped
    

  

  

  # ===================================
  # CORE APPLICATION & AGENT ORCHESTRATOR
  # ===================================

  backend:
    container_name: sutazai-backend
    build:
      context: .
      dockerfile: ./docker/backend.Dockerfile
    ports:
      - "8000:8000"
    command: python -m uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir backend
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backend:/app/backend
      - workspace_data:/workspace
      - logs_data:/logs
    environment:
      DATABASE_URL: postgresql://sutazai@postgres:5432/sutazai
      REDIS_URL: redis://redis:6379
      CHROMADB_URL: http://chromadb:8000
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://ollama:11434
      PYTHONUNBUFFERED: 1
    secrets:
      - postgres_password
    
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      chromadb: { condition: service_started }
      qdrant: { condition: service_started }
      ollama: { condition: service_started }
    networks:
      - sutazai-net
    restart: unless-stopped

  frontend:
    container_name: sutazai-frontend
    build:
      context: .
      dockerfile: ./docker/streamlit.Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ./frontend:/app/frontend
      - ./frontend/enhanced_streamlit_app.py:/app/main.py
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
    depends_on:
      - backend
    networks:
      - sutazai-net
    restart: unless-stopped

  # ===================================
  # AUTONOMOUS AGENT SERVICES
  # ===================================

  aider:
    container_name: sutazai-aider
    build:
      context: .
      dockerfile: ./docker/aider.Dockerfile
    volumes:
      - workspace_data:/app/src
    networks:
      - sutazai-net
    restart: on-failure

  gpt-engineer:
    container_name: sutazai-gpt-engineer
    build:
      context: .
      dockerfile: ./docker/gpt-engineer.Dockerfile
    volumes:
      - workspace_data:/app/projects
    networks:
      - sutazai-net
    restart: on-failure

  

  autogpt:
    container_name: sutazai-autogpt
    build:
      context: .
      dockerfile: ./docker/autogpt.Dockerfile
    volumes:
      - workspace_data:/app/auto_gpt_workspace
    networks:
      - sutazai-net
    restart: on-failure

  crewai:
    container_name: sutazai-crewai
    build:
      context: .
      dockerfile: ./docker/crewai.Dockerfile
    volumes:
      - workspace_data:/app/crewai_workspace
    networks:
      - sutazai-net
    restart: on-failure

  # ===================================
  # MONITORING & OBSERVABILITY
  # ===================================

  

  


  