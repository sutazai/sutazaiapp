version: '3.8'

# SutazAI Production Deployment - Complete Multi-Agent System
# Optimized for CPU-only systems with optional GPU support

services:
  # ===== CORE INFRASTRUCTURE =====
  
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:16-alpine
    container_name: sutazai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: sutazai
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - sutazai-internal
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sutazai -d sutazai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis - Message Bus & Cache
  redis:
    image: redis:7-alpine
    container_name: sutazai-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass $$(cat /run/secrets/redis_password)
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - sutazai-internal
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "$$(cat /run/secrets/redis_password)", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Ollama - Local LLM Inference
  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
      - ./scripts:/scripts:ro
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=10m
      - OLLAMA_MAX_LOADED_MODELS=2
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_QUEUE=10
    ports:
      - "127.0.0.1:11434:11434"
    networks:
      - sutazai-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    security_opt:
      - no-new-privileges:true

  # ===== APPLICATION LAYER =====

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.backend-production
      args:
        - BUILD_VERSION=${BUILD_VERSION:-latest}
    container_name: sutazai-backend
    restart: unless-stopped
    volumes:
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - agent_workspaces:/app/agent_workspaces:rw
    environment:
      # Core Configuration
      - SECRET_KEY_FILE=/run/secrets/jwt_secret
      - API_V1_STR=/api/v1
      - BACKEND_CORS_ORIGINS=["http://localhost:8501","http://localhost:3000"]
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      
      # Database Configuration
      - DATABASE_URL=postgresql://sutazai:$$(cat /run/secrets/postgres_password)@postgres:5432/sutazai
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=sutazai
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=sutazai
      - DATABASE_POOL_SIZE=20
      - DATABASE_MAX_OVERFLOW=30
      
      # Redis Configuration
      - REDIS_URL=redis://:$$(cat /run/secrets/redis_password)@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      
      # Ollama Configuration
      - OLLAMA_BASE_URL=http://ollama:11434
      - MODEL_NAME=tinyllama:latest
      - USE_NATIVE_OLLAMA=true
      - OLLAMA_TIMEOUT=60
      
      # Performance Configuration
      - MAX_WORKERS=4
      - MAX_CONCURRENT_REQUESTS=50
      - WORKER_TIMEOUT=300
      - KEEP_ALIVE_TIMEOUT=65
    ports:
      - "8000:8000"
    networks:
      - sutazai-internal
      - sutazai-external
    secrets:
      - postgres_password
      - redis_password
      - jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '3.0'
          memory: 4G
        reservations:
          cpus: '1.5'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # ===== AI AGENT SERVICES =====

  # Senior AI Engineer Agent
  senior-ai-engineer:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.agent-base
    container_name: sutazai-senior-ai-engineer
    restart: unless-stopped
    volumes:
      - ./agents/configs/senior-ai-engineer-simple.json:/app/config.json:ro
      - ./agents/senior-ai-engineer:/app/agent:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    environment:
      - AGENT_NAME=senior-ai-engineer
      - AGENT_TYPE=senior-ai-engineer
      - LOG_LEVEL=INFO
      - OLLAMA_URL=http://ollama:11434
      - BACKEND_URL=http://backend:8000
      - MAX_CONCURRENT_TASKS=3
      - TASK_TIMEOUT=300
    networks:
      - sutazai-internal
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Infrastructure DevOps Manager
  infrastructure-devops-manager:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.agent-base
    container_name: sutazai-infrastructure-devops-manager
    restart: unless-stopped
    volumes:
      - ./agents/configs/infrastructure-devops-manager-simple.json:/app/config.json:ro
      - ./agents/infrastructure-devops-manager:/app/agent:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - AGENT_NAME=infrastructure-devops-manager
      - AGENT_TYPE=infrastructure-devops-manager
      - LOG_LEVEL=INFO
      - OLLAMA_URL=http://ollama:11434
      - BACKEND_URL=http://backend:8000
      - DOCKER_HOST=unix:///var/run/docker.sock
      - MAX_CONCURRENT_TASKS=2
    networks:
      - sutazai-internal
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Deployment Automation Master
  deployment-automation-master:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.agent-base
    container_name: sutazai-deployment-automation-master
    restart: unless-stopped
    volumes:
      - ./agents/configs/deployment-automation-master-simple.json:/app/config.json:ro
      - ./agents/deployment-automation-master:/app/agent:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - AGENT_NAME=deployment-automation-master
      - AGENT_TYPE=deployment-automation-master
      - LOG_LEVEL=INFO
      - OLLAMA_URL=http://ollama:11434
      - BACKEND_URL=http://backend:8000
      - MAX_CONCURRENT_TASKS=2
    networks:
      - sutazai-internal
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Testing QA Validator
  testing-qa-validator:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.agent-base
    container_name: sutazai-testing-qa-validator
    restart: unless-stopped
    volumes:
      - ./agents/configs/testing-qa-validator-simple.json:/app/config.json:ro
      - ./agents/testing-qa-validator:/app/agent:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    environment:
      - AGENT_NAME=testing-qa-validator
      - AGENT_TYPE=testing-qa-validator
      - LOG_LEVEL=INFO
      - OLLAMA_URL=http://ollama:11434
      - BACKEND_URL=http://backend:8000
      - MAX_CONCURRENT_TASKS=3
    networks:
      - sutazai-internal
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Ollama Integration Specialist
  ollama-integration-specialist:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.agent-base
    container_name: sutazai-ollama-integration-specialist
    restart: unless-stopped
    volumes:
      - ./agents/configs/ollama-integration-specialist-simple.json:/app/config.json:ro
      - ./agents/ollama-integration-specialist:/app/agent:ro
      - ./data:/app/data:rw
      - ./logs:/app/logs:rw
    environment:
      - AGENT_NAME=ollama-integration-specialist
      - AGENT_TYPE=ollama-integration-specialist
      - LOG_LEVEL=INFO
      - OLLAMA_URL=http://ollama:11434
      - BACKEND_URL=http://backend:8000
      - MAX_CONCURRENT_TASKS=2
    networks:
      - sutazai-internal
    depends_on:
      backend:
        condition: service_healthy
      ollama:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # ===== MONITORING & OBSERVABILITY =====

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: sutazai-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - sutazai-internal
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.0
    container_name: sutazai-grafana
    restart: unless-stopped
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - sutazai-internal
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: sutazai-loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki/config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - sutazai-internal
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # ===== INITIALIZATION SERVICES =====

  # Model Initialization
  init-models:
    image: ollama/ollama:latest
    container_name: sutazai-init-models
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
    networks:
      - sutazai-internal
    depends_on:
      ollama:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "echo 'Initializing models...' &&
      ollama pull tinyllama:latest &&
      ollama pull qwen2:0.5b &&
      echo 'Model initialization complete!'"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        max_attempts: 3

# ===== NETWORKS =====
networks:
  sutazai-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  sutazai-external:
    driver: bridge

# ===== VOLUMES =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  agent_workspaces:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ===== SECRETS =====
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  grafana_password:
    file: ./secrets/grafana_password.txt