# GitLab CI/CD Pipeline for SutazAI Production Deployment
stages:
  - build
  - test
  - security
  - deploy
  - monitor

variables:
  DOCKER_REGISTRY: "registry.gitlab.com/sutazai"
  KUBERNETES_NAMESPACE: "sutazai-core"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Build stage
build-brain-core:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/brain-core:$CI_COMMIT_SHA -f deployment/production/docker/Dockerfile.brain-optimized .
    - docker push $CI_REGISTRY_IMAGE/brain-core:$CI_COMMIT_SHA
  only:
    - main
    - production

build-agents:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/agent-base:$CI_COMMIT_SHA -f deployment/production/docker/Dockerfile.agent-base .
    - docker push $CI_REGISTRY_IMAGE/agent-base:$CI_COMMIT_SHA
  only:
    - main
    - production

# Test stage
unit-tests:
  stage: test
  image: python:3.11
  before_script:
    - pip install -r backend/requirements.txt
    - pip install pytest pytest-cov pytest-asyncio
  script:
    - pytest backend/tests/ --cov=backend --cov-report=xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

integration-tests:
  stage: test
  image: python:3.11
  services:
    - postgres:14
    - redis:7
  variables:
    POSTGRES_DB: sutazai_test
    POSTGRES_USER: sutazai
    POSTGRES_PASSWORD: testpass
    REDIS_HOST: redis
  script:
    - pip install -r backend/requirements.txt
    - python -m pytest backend/tests/integration/ -v

# Security stage
security-scan:
  stage: security
  image: aquasec/trivy:latest
  script:
    - trivy image --exit-code 1 --no-progress $CI_REGISTRY_IMAGE/brain-core:$CI_COMMIT_SHA
    - trivy image --exit-code 1 --no-progress $CI_REGISTRY_IMAGE/agent-base:$CI_COMMIT_SHA
  allow_failure: true

sast:
  stage: security
  image: python:3.11
  script:
    - pip install bandit safety
    - bandit -r backend/ -f json -o bandit-report.json
    - safety check --json > safety-report.json
  artifacts:
    reports:
      sast: 
        - bandit-report.json
        - safety-report.json

# Deploy stage
deploy-staging:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://staging.sutazai.com
  script:
    - kubectl config use-context $KUBE_CONTEXT_STAGING
    - kubectl apply -f deployment/production/kubernetes/namespaces.yaml
    - kubectl apply -f deployment/production/security/
    - kubectl apply -f deployment/production/kubernetes/core/
    - kubectl apply -f deployment/production/kubernetes/agents/
    - kubectl apply -f deployment/production/monitoring/
    - kubectl set image deployment/brain-core brain-core=$CI_REGISTRY_IMAGE/brain-core:$CI_COMMIT_SHA -n sutazai-core
    - kubectl rollout status deployment/brain-core -n sutazai-core
  only:
    - main
  when: manual

deploy-production:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://sutazai.com
  script:
    - kubectl config use-context $KUBE_CONTEXT_PRODUCTION
    - kubectl apply -f deployment/production/kubernetes/namespaces.yaml
    - kubectl apply -f deployment/production/security/
    - kubectl apply -f deployment/production/kubernetes/core/
    - kubectl apply -f deployment/production/kubernetes/agents/
    - kubectl apply -f deployment/production/monitoring/
    - kubectl set image deployment/brain-core brain-core=$CI_REGISTRY_IMAGE/brain-core:$CI_COMMIT_SHA -n sutazai-core
    - kubectl rollout status deployment/brain-core -n sutazai-core
  only:
    - production
  when: manual

# Monitor stage
health-check:
  stage: monitor
  image: curlimages/curl:latest
  script:
    - curl -f https://sutazai.com/health || exit 1
    - curl -f https://sutazai.com/api/v1/status || exit 1
  only:
    - production
  when: on_success

performance-test:
  stage: monitor
  image: grafana/k6:latest
  script:
    - k6 run deployment/production/tests/performance/load-test.js
  only:
    - production
  when: manual
  allow_failure: true