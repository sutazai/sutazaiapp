server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # SutazAI Backend Application Logs
  - job_name: sutazai-backend
    static_configs:
      - targets:
          - localhost
        labels:
          job: sutazai-backend
          service: backend
          __path__: /var/lib/docker/containers/sutazai-backend*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR|CRITICAL))'
          source: log
      - labels:
          level:
          stream:

  # AI Agents Logs - All 46+ agents
  - job_name: sutazai-agents
    static_configs:
      - targets:
          - localhost
        labels:
          job: sutazai-agents
          service: agents
          __path__: /var/lib/docker/containers/sutazai-*agent*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
            attrs: attrs
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: 'sutazai-(?P<agent_name>[^/]+)'
          source: filename
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR|CRITICAL))'
          source: log
      - regex:
          expression: 'task_id=(?P<task_id>[^\s]+)'
          source: log
      - regex:
          expression: 'agent_type=(?P<agent_type>[^\s]+)'
          source: log
      - labels:
          agent_name:
          level:
          task_id:
          agent_type:
          stream:

  # Orchestration System Logs
  - job_name: sutazai-orchestration
    static_configs:
      - targets:
          - localhost
        labels:
          job: sutazai-orchestration
          service: orchestration
          __path__: /var/lib/docker/containers/sutazai-*orchestr*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR|CRITICAL))'
          source: log
      - regex:
          expression: 'workflow_id=(?P<workflow_id>[^\s]+)'
          source: log
      - regex:
          expression: 'coordination_type=(?P<coordination_type>[^\s]+)'
          source: log
      - labels:
          level:
          workflow_id:
          coordination_type:
          stream:

  # Ollama Model Server Logs
  - job_name: ollama
    static_configs:
      - targets:
          - localhost
        labels:
          job: ollama
          service: model-server
          __path__: /var/lib/docker/containers/sutazai-ollama*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR))'
          source: log
      - regex:
          expression: 'model=(?P<model_name>[^\s]+)'
          source: log
      - labels:
          level:
          model_name:
          stream:

  # Database Logs
  - job_name: postgres
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgres
          service: database
          __path__: /var/lib/docker/containers/sutazai-postgres*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(LOG|INFO|WARNING|ERROR|FATAL|PANIC))'
          source: log
      - labels:
          level:
          stream:

  # Redis Cache Logs
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          service: cache
          __path__: /var/lib/docker/containers/sutazai-redis*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(DEBUG|VERBOSE|NOTICE|WARNING))'
          source: log
      - labels:
          level:
          stream:

  # Vector Database Logs
  - job_name: vector-db
    static_configs:
      - targets:
          - localhost
        labels:
          job: vector-db
          service: vector-storage
          __path__: /var/lib/docker/containers/sutazai-*db*/*.log
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: 'sutazai-(?P<db_type>(qdrant|chromadb|neo4j))'
          source: filename
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR))'
          source: log
      - labels:
          db_type:
          level:
          stream:

  # System Journal Logs
  - job_name: systemd-journal
    journal:
      max_age: 12h
      labels:
        job: systemd-journal
        service: system
    pipeline_stages:
      - regex:
          expression: '(?P<level>(debug|info|notice|warning|err|crit|alert|emerg))'
          source: priority
      - labels:
          level:

  # Docker Container Logs (General)
  - job_name: docker-containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.project=sutazai"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.+)'
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'stream'
    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          expression: '(?P<level>(DEBUG|INFO|WARNING|ERROR|CRITICAL|FATAL))'
          source: log
      - labels:
          level:
          stream: