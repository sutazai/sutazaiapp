# Nginx Ingress Controller configuration for SutazAI load balancing
# Provides SSL termination, load balancing, and health checks

---
# Nginx Ingress Controller Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: sutazai-infrastructure
  labels:
    app: nginx-ingress-controller
    component: load-balancer
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: nginx-ingress-controller
  template:
    metadata:
      labels:
        app: nginx-ingress-controller
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
      - name: nginx-ingress-controller
        image: nginx/nginx-ingress:3.4.0
        args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/nginx-configuration
        - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
        - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
        - --publish-service=$(POD_NAMESPACE)/nginx-ingress-service
        - --annotations-prefix=nginx.ingress.kubernetes.io
        - --enable-ssl-passthrough
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        - --watch-ingress-without-class=true
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - name: http
          containerPort: 80
        - name: https
          containerPort: 443
        - name: metrics
          containerPort: 10254
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
          runAsUser: 101

---
# Nginx Ingress Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-service
  namespace: sutazai-infrastructure
  labels:
    app: nginx-ingress-controller
    component: load-balancer
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  selector:
    app: nginx-ingress-controller

---
# ConfigMap for Nginx configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configuration
  namespace: sutazai-infrastructure
  labels:
    app: nginx-ingress-controller
    component: configuration
data:
  # Global Nginx settings
  use-gzip: "true"
  gzip-level: "6"
  gzip-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
  
  # Connection settings
  keep-alive: "75"
  keep-alive-requests: "100"
  upstream-keepalive-connections: "10"
  upstream-keepalive-timeout: "60"
  
  # Buffer settings for AI workloads
  proxy-buffer-size: "16k"
  proxy-buffers-number: "8"
  proxy-busy-buffers-size: "32k"
  
  # Timeout settings optimized for AI inference
  proxy-connect-timeout: "60"
  proxy-send-timeout: "300"
  proxy-read-timeout: "300"
  client-body-timeout: "60"
  client-header-timeout: "60"
  
  # Request size limits for AI data
  client-max-body-size: "100m"
  proxy-body-size: "100m"
  
  # Rate limiting
  rate-limit-enabled: "true"
  rate-limit: "100"
  rate-limit-window: "1m"
  
  # Health checks
  upstream-health-check-timeout: "5"
  upstream-health-check-interval: "30"
  upstream-health-check-passes: "2"
  upstream-health-check-fails: "3"
  
  # Load balancing algorithm
  load-balance: "ip_hash" # Sticky sessions for AI agents
  
  # SSL settings
  ssl-protocols: "TLSv1.2 TLSv1.3"
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
  ssl-prefer-server-ciphers: "true"
  ssl-session-cache: "shared:SSL:10m"
  ssl-session-timeout: "10m"

---
# TCP Services ConfigMap for non-HTTP services
apiVersion: v1
kind: ConfigMap
metadata:
  name: tcp-services
  namespace: sutazai-infrastructure
data:
  # PostgreSQL
  5432: "sutazai-infrastructure/sutazai-postgres:5432"
  # Redis
  6379: "sutazai-infrastructure/sutazai-redis:6379"
  # Neo4j
  7687: "sutazai-infrastructure/sutazai-neo4j:7687"
  # Qdrant gRPC
  6334: "sutazai-infrastructure/sutazai-qdrant:6334"

---
# UDP Services ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: udp-services
  namespace: sutazai-infrastructure
data: {}

---
# Default backend for 404 responses
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-http-backend
  namespace: sutazai-infrastructure
  labels:
    app: default-http-backend
    component: default-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      containers:
      - name: default-http-backend
        image: registry.k8s.io/defaultbackend-amd64:1.5
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 5

---
# Default backend service
apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  namespace: sutazai-infrastructure
  labels:
    app: default-http-backend
    component: default-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-http-backend

---
# ServiceAccount for Nginx Ingress
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: sutazai-infrastructure

---
# ClusterRole for Nginx Ingress
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
rules:
- apiGroups: [""]
  resources: ["configmaps", "endpoints", "nodes", "pods", "secrets", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses/status"]
  verbs: ["update"]

---
# ClusterRoleBinding for Nginx Ingress
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: sutazai-infrastructure

---
# Role for Nginx Ingress
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: sutazai-infrastructure
rules:
- apiGroups: [""]
  resources: ["configmaps", "pods", "secrets", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["ingress-controller-leader-nginx"]
  verbs: ["get", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["create", "get", "update"]

---
# RoleBinding for Nginx Ingress
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-binding
  namespace: sutazai-infrastructure
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
- kind: ServiceAccount
  name: nginx-ingress-serviceaccount
  namespace: sutazai-infrastructure