# Traefik v3 configuration for SutazAI load balancing
# Alternative to Nginx with automatic service discovery

---
# Traefik Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik-ingress-controller
  namespace: sutazai-infrastructure
  labels:
    app: traefik-ingress-controller
    component: load-balancer
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: traefik-ingress-controller
  template:
    metadata:
      labels:
        app: traefik-ingress-controller
    spec:
      serviceAccountName: traefik-ingress-serviceaccount
      containers:
      - name: traefik
        image: traefik:v3.0
        args:
        - --api.dashboard=true
        - --api.insecure=false
        - --entrypoints.web.address=:80
        - --entrypoints.websecure.address=:443
        - --entrypoints.traefik.address=:8080
        - --providers.kubernetescrd
        - --providers.kubernetescrd.allowCrossNamespace=true
        - --providers.kubernetesingress
        - --providers.kubernetesingress.allowCrossNamespace=true
        - --certificatesresolvers.letsencrypt.acme.email=admin@sutazai.local
        - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
        - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
        - --metrics.prometheus=true
        - --metrics.prometheus.addEntryPointsLabels=true
        - --metrics.prometheus.addServicesLabels=true
        - --log.level=INFO
        - --accesslog=true
        - --global.sendanonymoususage=false
        ports:
        - name: web
          containerPort: 80
        - name: websecure
          containerPort: 443
        - name: traefik
          containerPort: 8080
        - name: metrics
          containerPort: 8082
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2
            memory: 2Gi
        volumeMounts:
        - name: data
          mountPath: /data
        livenessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
      volumes:
      - name: data
        emptyDir: {}

---
# Traefik Service
apiVersion: v1
kind: Service
metadata:
  name: traefik-ingress-service
  namespace: sutazai-infrastructure
  labels:
    app: traefik-ingress-controller
    component: load-balancer
spec:
  type: LoadBalancer
  ports:
  - name: web
    port: 80
    targetPort: 80
  - name: websecure
    port: 443
    targetPort: 443
  - name: traefik
    port: 8080
    targetPort: 8080
  selector:
    app: traefik-ingress-controller

---
# Traefik Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard
  namespace: sutazai-infrastructure
  labels:
    app: traefik-ingress-controller
    component: dashboard
spec:
  ports:
  - name: traefik
    port: 8080
    targetPort: 8080
  selector:
    app: traefik-ingress-controller

---
# ServiceAccount for Traefik
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-serviceaccount
  namespace: sutazai-infrastructure

---
# ClusterRole for Traefik
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: traefik-ingress-clusterrole
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses", "ingressclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses/status"]
  verbs: ["update"]
- apiGroups: ["traefik.containo.us"]
  resources: ["*"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for Traefik
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: traefik-ingress-clusterrole-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-clusterrole
subjects:
- kind: ServiceAccount
  name: traefik-ingress-serviceaccount
  namespace: sutazai-infrastructure

---
# Traefik IngressRoute for SutazAI Backend
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: sutazai-backend-route
  namespace: sutazai-core
spec:
  entryPoints:
  - websecure
  routes:
  - match: Host(`api.sutazai.local`)
    kind: Rule
    services:
    - name: sutazai-backend
      port: 8000
      strategy: RoundRobin
      healthCheck:
        path: /health
        interval: 30s
        timeout: 5s
        scheme: http
    middlewares:
    - name: rate-limit-backend
    - name: compress
  tls:
    certResolver: letsencrypt

---
# Traefik IngressRoute for SutazAI Frontend
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: sutazai-frontend-route
  namespace: sutazai-core
spec:
  entryPoints:
  - websecure
  routes:
  - match: Host(`sutazai.local`) || Host(`frontend.sutazai.local`)
    kind: Rule
    services:
    - name: sutazai-frontend
      port: 8501
      strategy: RoundRobin
      healthCheck:
        path: /healthz
        interval: 30s
        timeout: 5s
        scheme: http
    middlewares:
    - name: rate-limit-frontend
    - name: compress
  tls:
    certResolver: letsencrypt

---
# Traefik IngressRoute for Ollama
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: sutazai-ollama-route
  namespace: sutazai-core
spec:
  entryPoints:
  - websecure
  routes:
  - match: Host(`ollama.sutazai.local`) || Host(`ai.sutazai.local`)
    kind: Rule
    services:
    - name: sutazai-ollama
      port: 11434
      strategy: RoundRobin
      healthCheck:
        path: /
        interval: 30s
        timeout: 10s
        scheme: http
    middlewares:
    - name: rate-limit-ai
    - name: timeout-ai
  tls:
    certResolver: letsencrypt

---
# Traefik Middleware - Rate Limiting for Backend
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit-backend
  namespace: sutazai-core
spec:
  rateLimit:
    average: 100
    period: 1m
    burst: 200

---
# Traefik Middleware - Rate Limiting for Frontend
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit-frontend
  namespace: sutazai-core
spec:
  rateLimit:
    average: 200
    period: 1m
    burst: 400

---
# Traefik Middleware - Rate Limiting for AI Services
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: rate-limit-ai
  namespace: sutazai-core
spec:
  rateLimit:
    average: 50
    period: 1m
    burst: 100

---
# Traefik Middleware - Compression
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: compress
  namespace: sutazai-core
spec:
  compress:
    excludedContentTypes:
    - text/event-stream

---
# Traefik Middleware - AI Service Timeouts
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: timeout-ai
  namespace: sutazai-core
spec:
  forwardAuth:
    responseHeaders:
    - X-Forwarded-Proto
  timeout:
    dial: 30s
    responseHeader: 60s
    idle: 300s

---
# Traefik Middleware - Circuit Breaker
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: circuit-breaker
  namespace: sutazai-core
spec:
  circuitBreaker:
    expression: NetworkErrorRatio() > 0.30 || ResponseCodeRatio(500, 600, 0, 600) > 0.30

---
# Traefik Middleware - Retry
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: retry
  namespace: sutazai-core
spec:
  retry:
    attempts: 3
    initialInterval: 100ms

---
# Traefik IngressRoute for Dashboard (with auth)
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-route
  namespace: sutazai-infrastructure
spec:
  entryPoints:
  - websecure
  routes:
  - match: Host(`traefik.sutazai.local`)
    kind: Rule
    services:
    - name: traefik-dashboard
      port: 8080
    middlewares:
    - name: dashboard-auth
  tls:
    certResolver: letsencrypt

---
# Traefik Middleware - Dashboard Authentication
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: dashboard-auth
  namespace: sutazai-infrastructure
spec:
  basicAuth:
    secret: traefik-dashboard-auth

---
# Secret for Dashboard Authentication
apiVersion: v1
kind: Secret
metadata:
  name: traefik-dashboard-auth
  namespace: sutazai-infrastructure
type: Opaque
data:
  # admin:admin (base64 encoded)
  users: YWRtaW46JGFwcjEkSDZweTR0Zm8kWnAuR0YvS2VVZG1taDVOb0kvOGhNMQo=