# SutazAI Production CI/CD Pipeline
# Comprehensive deployment automation with security scanning and testing

name: SutazAI Production Deployment

on:
  push:
    branches: [main, release/*]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: sutazai
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ===== CODE QUALITY & SECURITY =====
  code-quality:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install black flake8 mypy bandit safety pytest-cov

      - name: Code Formatting Check
        run: |
          black --check backend/ agents/
          flake8 backend/ agents/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type Checking
        run: |
          mypy backend/app --ignore-missing-imports

      - name: Security Scanning - Bandit
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          bandit -r backend/ -ll

      - name: Dependency Security Check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: SAST Scanning - Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/python
            p/docker
            p/security-audit
          generateSarif: "1"

      - name: Generate Version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.sarif

  # ===== BUILD & TEST =====
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [backend, agents]
        
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}

      - name: Build Docker Images
        run: |
          case "${{ matrix.service }}" in
            backend)
              docker buildx build \
                --cache-from=type=local,src=/tmp/.buildx-cache \
                --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
                --tag ${{ env.IMAGE_PREFIX }}-backend:${{ needs.code-quality.outputs.version }} \
                --file deployment/docker/Dockerfile.backend-production \
                --load .
              ;;
            agents)
              docker buildx build \
                --cache-from=type=local,src=/tmp/.buildx-cache \
                --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
                --tag ${{ env.IMAGE_PREFIX }}-agent-base:${{ needs.code-quality.outputs.version }} \
                --file deployment/docker/Dockerfile.agent-base \
                --load .
              ;;
          esac

      - name: Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.code-quality.outputs.version }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

      - name: Run Unit Tests
        if: matrix.service == 'backend'
        run: |
          docker run --rm \
            -v $(pwd)/backend:/app \
            -e TESTING=true \
            ${{ env.IMAGE_PREFIX }}-backend:${{ needs.code-quality.outputs.version }} \
            python -m pytest tests/ -v --cov=app --cov-report=xml

      - name: Move Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ===== INTEGRATION TESTS =====
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Test Environment
        run: |
          cp docker-compose.tinyllama.yml docker-compose.test.yml
          sed -i 's/5432:5432/5433:5432/' docker-compose.test.yml
          sed -i 's/6379:6379/6380:6379/' docker-compose.test.yml

      - name: Run Integration Tests
        run: |
          docker-compose -f docker-compose.test.yml up -d --build
          sleep 30
          
          # Test API endpoints
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/v1/agents/ || exit 1
          
          # Test agent communication
          python tests/integration/test_agent_communication.py
          
          # Test workflows
          python workflows/test_code_improvement.py

      - name: Collect Test Logs
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml logs > integration-test-logs.txt

      - name: Cleanup Test Environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            integration-test-logs.txt
            test-results/

  # ===== PERFORMANCE TESTS =====
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Performance Testing
        run: |
          docker run --rm -d -p 8000:8000 \
            --name sutazai-perf-test \
            ${{ env.IMAGE_PREFIX }}-backend:${{ needs.code-quality.outputs.version }}
          sleep 30

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run Load Tests
        run: |
          k6 run --out csv=results.csv tests/performance/load-test.js

      - name: Run Stress Tests
        run: |
          k6 run --out csv=stress-results.csv tests/performance/stress-test.js

      - name: Analyze Performance Results
        run: |
          python tests/performance/analyze_results.py results.csv stress-results.csv

      - name: Upload Performance Results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            results.csv
            stress-results.csv
            performance-report.html

  # ===== SECURITY COMPLIANCE =====
  security-compliance:
    name: Security Compliance Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: CIS Docker Benchmark
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/host \
            aquasec/docker-bench-security --json > cis-benchmark.json

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'SutazAI'
          path: '.'
          format: 'ALL'

      - name: Upload Compliance Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: compliance-reports
          path: |
            cis-benchmark.json
            reports/

  # ===== STAGING DEPLOYMENT =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, security-compliance]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Context
        run: |
          docker context create staging --docker "host=ssh://staging-server"
          docker context use staging

      - name: Deploy to Staging
        run: |
          export BUILD_VERSION=${{ needs.code-quality.outputs.version }}
          docker-compose -f deployment/docker-compose.production.yml \
            --env-file deployment/environments/staging.env \
            up -d --build

      - name: Health Check
        run: |
          sleep 60
          curl -f http://staging-server:8000/health
          curl -f http://staging-server:8000/api/v1/agents/

      - name: Run Smoke Tests
        run: |
          python tests/smoke/staging_smoke_tests.py

  # ===== PRODUCTION DEPLOYMENT =====  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Production Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: devops-team,security-team
          minimum-approvals: 2

      - name: Blue-Green Deployment
        run: |
          # Deploy to green environment
          export BUILD_VERSION=${{ needs.code-quality.outputs.version }}
          export DEPLOYMENT_COLOR=green
          
          docker-compose -f deployment/docker-compose.production.yml \
            --env-file deployment/environments/production.env \
            up -d --build

      - name: Production Health Check
        run: |
          sleep 120
          
          # Health checks
          for i in {1..10}; do
            if curl -f http://production-green:8000/health; then
              echo "Health check passed"
              break
            fi
            echo "Health check failed, attempt $i/10"
            sleep 30
          done

      - name: Switch Traffic
        run: |
          # Update load balancer to point to green
          ./scripts/switch-traffic.sh green
          
          # Verify traffic switch
          curl -f http://production.sutazai.com/health

      - name: Cleanup Old Deployment
        run: |
          # Remove blue environment after successful deployment
          docker-compose -f deployment/docker-compose.production.yml \
            --env-file deployment/environments/production.env \
            -p sutazai-blue down

  # ===== ROLLBACK CAPABILITY =====
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-production]
    environment: production
    
    steps:
      - name: Emergency Rollback
        run: |
          # Switch back to blue environment
          ./scripts/switch-traffic.sh blue
          
          # Verify rollback
          curl -f http://production.sutazai.com/health

      - name: Notify Team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed - emergency rollback executed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}