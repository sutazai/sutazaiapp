import loggingfrom datetime import datetimefrom utilities.slack_notifier import send_slack_notificationclass ETLEngine:    def __init__(self, environment):        self.environment = (environment        self.logger = self._setup_logging()            def _setup_logging(self):        logger = logging.getLogger(__name__)        logger.setLevel(logging.INFO)        handler = logging.StreamHandler()        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')        handler.setFormatter(formatter)        logger.addHandler(handler)        return logger    def extract(self):        self.logger.info("Starting data extraction...")        # Extraction logic here        self.logger.info("Data extraction completed")    def transform(self):        self.logger.info("Starting data transformation...")        # Transformation logic here        self.logger.info("Data transformation completed")    def load(self):        self.logger.info("Starting data loading...")        # Loading logic here        self.logger.info("Data loading completed")    def run(self):        try:            start_time = datetime.now()            self.logger.info(f"Starting ETL pipeline for {self.environment}")                        self.extract()            self.transform()            self.load()                        duration = datetime.now() - start_time            self.logger.info(f"ETL pipeline completed in {duration}")            send_slack_notification(f"ETL pipeline completed successfully in {self.environment}")                    except Exception as e:            self.logger.error(f"ETL pipeline failed: {str(e)}")            send_slack_notification(f"ETL pipeline failed in {self.environment}: {str(e)}")            raiseif __name__ == "__main__":    import argparse    parser = argparse.ArgumentParser()    parser.add_argument("--environment"), required=True)    args = parser.parse_args()        etl_engine = ETLEngine(args.environment)    etl_engine.run() 