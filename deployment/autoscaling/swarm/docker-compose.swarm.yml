# Docker Swarm configuration for SutazAI with auto-scaling
# Alternative to Kubernetes for simpler deployments with built-in load balancing

version: '3.8'

# Common configurations
x-common-variables: &common-variables
  TZ: ${TZ:-UTC}
  SUTAZAI_ENV: ${SUTAZAI_ENV:-production}

x-restart-policy: &restart-policy
  restart_policy:
    condition: on-failure
    delay: 10s
    max_attempts: 3
    window: 120s

x-update-config: &update-config
  update_config:
    parallelism: 1
    delay: 30s
    failure_action: rollback
    monitor: 60s
    max_failure_ratio: 0.3

x-rollback-config: &rollback-config
  rollback_config:
    parallelism: 1
    delay: 10s
    failure_action: pause
    monitor: 60s
    max_failure_ratio: 0.3

# Networks
networks:
  sutazai-overlay:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 10.20.0.0/16
  sutazai-backend:
    driver: overlay
    internal: true
  sutazai-monitoring:
    driver: overlay
    attachable: true

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  chromadb_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Services
services:
  # Infrastructure Services
  postgres:
    image: postgres:16.3-alpine
    environment:
      <<: *common-variables
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sutazai-backend
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7.2-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - sutazai-backend
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: host
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
      <<: *restart-policy
      <<: *update-config
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Databases
  chromadb:
    image: chromadb/chroma:0.5.0
    environment:
      <<: *common-variables
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - sutazai-overlay
      - sutazai-backend
    ports:
      - target: 8000
        published: 8001
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:v1.9.2
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - sutazai-overlay
      - sutazai-backend
    ports:
      - target: 6333
        published: 6333
        protocol: tcp
        mode: ingress
      - target: 6334
        published: 6334
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Infrastructure
  ollama:
    image: ollama/ollama:latest
    environment:
      <<: *common-variables
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      OLLAMA_NUM_PARALLEL: 2
      OLLAMA_MAX_LOADED_MODELS: 2
      OLLAMA_KEEP_ALIVE: 5m
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - sutazai-overlay
    ports:
      - target: 11434
        published: 11434
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 1
        preferences:
          - spread: node.labels.gpu
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '2'
          memory: 4G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    healthcheck:
      test: ["CMD-SHELL", "ollama list > /dev/null || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Core Application Services
  backend:
    image: sutazai/backend:${VERSION:-latest}
    environment:
      <<: *common-variables
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      CHROMADB_URL: http://chromadb:8000
      QDRANT_URL: http://qdrant:6333
    volumes:
      - ./logs:/logs
      - ./data:/data
    networks:
      - sutazai-overlay
      - sutazai-backend
    ports:
      - target: 8000
        published: 8000
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 3
      placement:
        max_replicas_per_node: 2
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    depends_on:
      - postgres
      - redis
      - ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    image: sutazai/frontend:${VERSION:-latest}
    environment:
      <<: *common-variables
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    networks:
      - sutazai-overlay
    ports:
      - target: 8501
        published: 8501
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Agent Services with Auto-scaling
  autogpt:
    image: sutazai/autogpt:${VERSION:-latest}
    environment:
      <<: *common-variables
      OLLAMA_BASE_URL: http://ollama:11434
      BACKEND_URL: http://backend:8000
      AGENT_NAME: AutoGPT
    volumes:
      - ./data/agent_workspaces:/app/workspace
    networks:
      - sutazai-overlay
    deploy:
      replicas: 2
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    depends_on:
      - backend
      - ollama

  crewai:
    image: sutazai/crewai:${VERSION:-latest}
    environment:
      <<: *common-variables
      OLLAMA_BASE_URL: http://ollama:11434
      BACKEND_URL: http://backend:8000
      AGENT_NAME: CrewAI
      CREW_SIZE: 5
    volumes:
      - ./data/agent_workspaces:/app/workspace
    networks:
      - sutazai-overlay
    ports:
      - target: 8080
        published: 8096
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      placement:
        max_replicas_per_node: 1
      resources:
        limits:
          cpus: '6'
          memory: 12G
        reservations:
          cpus: '2'
          memory: 4G
      <<: *restart-policy
      <<: *update-config
      <<: *rollback-config
    depends_on:
      - backend
      - ollama

  aider:
    image: sutazai/aider:${VERSION:-latest}
    environment:
      <<: *common-variables
      OLLAMA_BASE_URL: http://ollama:11434
      AGENT_NAME: Aider
      MODEL: deepseek-r1:8b
    volumes:
      - ./data/agent_workspaces:/app/workspace
    networks:
      - sutazai-overlay
    ports:
      - target: 8080
        published: 8095
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
      <<: *update-config
    depends_on:
      - ollama

  # Load Balancer (Nginx)
  nginx-lb:
    image: nginx:alpine
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: ingress
      - target: 443
        published: 443
        protocol: tcp
        mode: ingress
    networks:
      - sutazai-overlay
    configs:
      - source: nginx_config
        target: /etc/nginx/nginx.conf
      - source: nginx_upstream
        target: /etc/nginx/conf.d/upstream.conf
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      <<: *restart-policy
      <<: *update-config
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-admin-api'
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus:/etc/prometheus
    networks:
      - sutazai-monitoring
      - sutazai-overlay
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '1'
          memory: 2G
      <<: *restart-policy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-sutazai_grafana}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sutazai-monitoring
      - sutazai-overlay
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
      <<: *restart-policy
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auto-scaler Service
  swarm-autoscaler:
    image: sutazai/swarm-autoscaler:${VERSION:-latest}
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
      PROMETHEUS_URL: http://prometheus:9090
      SCALE_CHECK_INTERVAL: 30
      CPU_THRESHOLD_UP: 70
      CPU_THRESHOLD_DOWN: 30
      MEMORY_THRESHOLD_UP: 80
      MEMORY_THRESHOLD_DOWN: 50
      MIN_REPLICAS: 1
      MAX_REPLICAS: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - sutazai-monitoring
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      <<: *restart-policy

# Configs
configs:
  nginx_config:
    file: ./deployment/swarm/nginx.conf
  nginx_upstream:
    file: ./deployment/swarm/upstream.conf