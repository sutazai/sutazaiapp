apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sutazai-core-ingress
  namespace: sutazai
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "50"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type, Accept"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
      - api.sutazai.com
      - app.sutazai.com
      secretName: sutazai-tls
  rules:
    # Backend API
    - host: api.sutazai.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: sutazai-backend
              port:
                number: 8000
    
    # Frontend
    - host: app.sutazai.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: sutazai-frontend
              port:
                number: 3000
    
    # Default backend for root domain
    - http:
        paths:
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: sutazai-backend
              port:
                number: 8000
        - path: /
          pathType: Prefix
          backend:
            service:
              name: sutazai-frontend
              port:
                number: 3000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sutazai-ai-services-ingress
  namespace: sutazai
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "500m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/rate-limit: "20"
    nginx.ingress.kubernetes.io/websocket-services: "sutazai-ollama,sutazai-autogpt"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$binary_remote_addr"
spec:
  rules:
    # Ollama API
    - http:
        paths:
        - path: /ollama
          pathType: Prefix
          backend:
            service:
              name: sutazai-ollama
              port:
                number: 11434
    
    # AutoGPT
    - http:
        paths:
        - path: /autogpt
          pathType: Prefix
          backend:
            service:
              name: sutazai-autogpt
              port:
                number: 8100
    
    # CrewAI
    - http:
        paths:
        - path: /crewai
          pathType: Prefix
          backend:
            service:
              name: sutazai-crewai
              port:
                number: 8200
    
    # Flowise
    - http:
        paths:
        - path: /flowise
          pathType: Prefix
          backend:
            service:
              name: sutazai-flowise
              port:
                number: 3000
    
    # n8n
    - http:
        paths:
        - path: /n8n
          pathType: Prefix
          backend:
            service:
              name: sutazai-n8n
              port:
                number: 5678

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sutazai-monitoring-ingress
  namespace: sutazai
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Monitoring Access"
spec:
  rules:
    # Prometheus
    - http:
        paths:
        - path: /prometheus
          pathType: Prefix
          backend:
            service:
              name: prometheus
              port:
                number: 9090
    
    # Grafana
    - http:
        paths:
        - path: /grafana
          pathType: Prefix
          backend:
            service:
              name: grafana
              port:
                number: 3000
    
    # Alertmanager
    - http:
        paths:
        - path: /alertmanager
          pathType: Prefix
          backend:
            service:
              name: alertmanager
              port:
                number: 9093

---
# Traefik IngressRoute (if using Traefik instead)
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: sutazai-traefik-route
  namespace: sutazai
spec:
  entryPoints:
    - websecure
  routes:
    # Backend API with middlewares
    - match: Host(`api.sutazai.com`)
      kind: Rule
      services:
        - name: sutazai-backend
          port: 8000
      middlewares:
        - name: rate-limit
        - name: circuit-breaker
        - name: retry
        - name: headers
    
    # Frontend
    - match: Host(`app.sutazai.com`)
      kind: Rule
      services:
        - name: sutazai-frontend
          port: 3000
      middlewares:
        - name: headers
    
    # AI Services with special handling
    - match: Host(`ai.sutazai.com`) && PathPrefix(`/ollama`)
      kind: Rule
      services:
        - name: sutazai-ollama
          port: 11434
      middlewares:
        - name: circuit-breaker
        - name: retry
    
    - match: Host(`ai.sutazai.com`) && PathPrefix(`/autogpt`)
      kind: Rule
      services:
        - name: sutazai-autogpt
          port: 8100
      middlewares:
        - name: circuit-breaker
        - name: retry
  tls:
    certResolver: default
    domains:
      - main: sutazai.com
        sans:
          - "*.sutazai.com"