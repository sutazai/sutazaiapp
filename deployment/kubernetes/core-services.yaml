# Core SutazAI Services Kubernetes Deployment with Auto-scaling Support
# This file contains deployments for critical infrastructure components

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sutazai-postgres
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-postgres
    component: database
    tier: infrastructure
spec:
  serviceName: sutazai-postgres
  replicas: 1
  selector:
    matchLabels:
      app: sutazai-postgres
  template:
    metadata:
      labels:
        app: sutazai-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:16.3-alpine
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: sutazai-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sutazai-secrets
              key: postgres-password
        - name: POSTGRES_DB
          value: sutazai
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
          name: postgres
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 4
            memory: 8Gi
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init
          mountPath: /docker-entrypoint-initdb.d
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sutazai
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - sutazai
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-init
        configMap:
          name: postgres-init-sql
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-postgres
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-postgres
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres
  selector:
    app: sutazai-postgres

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sutazai-redis
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-redis
    component: cache
    tier: infrastructure
spec:
  serviceName: sutazai-redis
  replicas: 1
  selector:
    matchLabels:
      app: sutazai-redis
  template:
    metadata:
      labels:
        app: sutazai-redis
    spec:
      containers:
      - name: redis
        image: redis:7.2-alpine
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sutazai-secrets
              key: redis-password
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
        livenessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 20Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-redis
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-redis
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: sutazai-redis

---
# Ollama StatefulSet - AI Inference Engine
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sutazai-ollama
  namespace: sutazai-core
  labels:
    app: sutazai-ollama
    component: ai-inference
    tier: critical
spec:
  serviceName: sutazai-ollama
  replicas: 2
  selector:
    matchLabels:
      app: sutazai-ollama
  template:
    metadata:
      labels:
        app: sutazai-ollama
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "11434"
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        ports:
        - containerPort: 11434
          name: http
        env:
        - name: OLLAMA_HOST
          value: "0.0.0.0"
        - name: OLLAMA_ORIGINS
          value: "*"
        - name: OLLAMA_NUM_PARALLEL
          value: "2"
        - name: OLLAMA_MAX_LOADED_MODELS
          value: "2"
        - name: OLLAMA_KEEP_ALIVE
          value: "5m"
        resources:
          requests:
            cpu: 2
            memory: 4Gi
          limits:
            cpu: 8
            memory: 16Gi
        volumeMounts:
        - name: ollama-data
          mountPath: /root/.ollama
        - name: models-data
          mountPath: /models
        livenessProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 11434
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: models-data
        emptyDir:
          sizeLimit: 50Gi
  volumeClaimTemplates:
  - metadata:
      name: ollama-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: fast-ssd

---
# Ollama Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-ollama
  namespace: sutazai-core
  labels:
    app: sutazai-ollama
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "11434"
spec:
  type: ClusterIP
  ports:
  - port: 11434
    targetPort: 11434
    name: http
  selector:
    app: sutazai-ollama

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sutazai-backend
  namespace: sutazai-core
  labels:
    app: sutazai-backend
    component: api
    tier: critical
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sutazai-backend
  template:
    metadata:
      labels:
        app: sutazai-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: backend
        image: sutazai/backend:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: sutazai-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: sutazai-secrets
              key: redis-url
        - name: OLLAMA_BASE_URL
          value: "http://sutazai-ollama:11434"
        - name: CHROMADB_URL
          value: "http://sutazai-chromadb.sutazai-infrastructure:8000"
        - name: QDRANT_URL
          value: "http://sutazai-qdrant.sutazai-infrastructure:6333"
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 4
            memory: 8Gi
        volumeMounts:
        - name: backend-data
          mountPath: /data
        - name: logs
          mountPath: /logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          failureThreshold: 30
          periodSeconds: 10
      volumes:
      - name: backend-data
        emptyDir: {}
      - name: logs
        emptyDir: {}

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-backend
  namespace: sutazai-core
  labels:
    app: sutazai-backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: sutazai-backend

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sutazai-frontend
  namespace: sutazai-core
  labels:
    app: sutazai-frontend
    component: ui
    tier: standard
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sutazai-frontend
  template:
    metadata:
      labels:
        app: sutazai-frontend
    spec:
      containers:
      - name: frontend
        image: sutazai/frontend:latest
        ports:
        - containerPort: 8501
          name: http
        env:
        - name: BACKEND_URL
          value: "http://sutazai-backend:8000"
        - name: STREAMLIT_SERVER_PORT
          value: "8501"
        - name: STREAMLIT_SERVER_ADDRESS
          value: "0.0.0.0"
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8501
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8501
          initialDelaySeconds: 10
          periodSeconds: 10

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-frontend
  namespace: sutazai-core
  labels:
    app: sutazai-frontend
spec:
  type: ClusterIP
  ports:
  - port: 8501
    targetPort: 8501
    name: http
  selector:
    app: sutazai-frontend

---
# ChromaDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sutazai-chromadb
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-chromadb
    component: vector-db
    tier: data
spec:
  serviceName: sutazai-chromadb
  replicas: 1
  selector:
    matchLabels:
      app: sutazai-chromadb
  template:
    metadata:
      labels:
        app: sutazai-chromadb
    spec:
      containers:
      - name: chromadb
        image: chromadb/chroma:0.5.0
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: CHROMA_SERVER_HOST
          value: "0.0.0.0"
        - name: CHROMA_SERVER_HTTP_PORT
          value: "8000"
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 4
            memory: 8Gi
        volumeMounts:
        - name: chromadb-data
          mountPath: /chroma/chroma
        livenessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: chromadb-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# ChromaDB Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-chromadb
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-chromadb
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  selector:
    app: sutazai-chromadb

---
# Qdrant StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sutazai-qdrant
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-qdrant
    component: vector-db
    tier: data
spec:
  serviceName: sutazai-qdrant
  replicas: 1
  selector:
    matchLabels:
      app: sutazai-qdrant
  template:
    metadata:
      labels:
        app: sutazai-qdrant
    spec:
      containers:
      - name: qdrant
        image: qdrant/qdrant:v1.9.2
        ports:
        - containerPort: 6333
          name: http
        - containerPort: 6334
          name: grpc
        env:
        - name: QDRANT__SERVICE__HTTP_PORT
          value: "6333"
        - name: QDRANT__SERVICE__GRPC_PORT
          value: "6334"
        - name: QDRANT__LOG_LEVEL
          value: "INFO"
        resources:
          requests:
            cpu: 1
            memory: 2Gi
          limits:
            cpu: 4
            memory: 8Gi
        volumeMounts:
        - name: qdrant-data
          mountPath: /qdrant/storage
        livenessProbe:
          httpGet:
            path: /
            port: 6333
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 6333
          initialDelaySeconds: 10
          periodSeconds: 10
  volumeClaimTemplates:
  - metadata:
      name: qdrant-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 50Gi

---
# Qdrant Service
apiVersion: v1
kind: Service
metadata:
  name: sutazai-qdrant
  namespace: sutazai-infrastructure
  labels:
    app: sutazai-qdrant
spec:
  type: ClusterIP
  ports:
  - port: 6333
    targetPort: 6333
    name: http
  - port: 6334
    targetPort: 6334
    name: grpc
  selector:
    app: sutazai-qdrant