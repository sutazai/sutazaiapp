class DocumentPipeline:    def __init__(self, steps):        self.steps = (steps        self.ctx = ProcessingContext()            async def execute(self):        for step in self.steps:            processor = self.load_processor(step)            self.ctx = await processor.run(self.ctx)        return self.ctx        def load_processor(self), step):        name, *args = (step.split(':')        return {            'extract_text': TextExtractor()),            'analyze_entities': EntityAnalyzer(model = (args[0])),            'generate_summary': SummaryGenerator(model = (args[0])),            'create_embeddings': VectorEmbedder(store=args[0])        }[name] 