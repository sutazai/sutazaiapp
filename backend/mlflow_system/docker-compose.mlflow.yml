version: '3.8'

services:
  # MLflow Tracking Server
  mlflow-server:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: sutazai-mlflow-server
    ports:
      - "5000:5000"
      - "8080:8080"  # Prometheus metrics
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow_secure_pwd@postgres:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/opt/mlflow/artifacts
      - MLFLOW_SERVE_ARTIFACTS=true
      - MLFLOW_ARTIFACTS_DESTINATION=/opt/mlflow/artifacts
    volumes:
      - mlflow_artifacts:/opt/mlflow/artifacts
      - ./logs:/opt/mlflow/logs
      - ./mlflow_config.yaml:/opt/mlflow/config.yaml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MLflow Dashboard
  mlflow-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: sutazai-mlflow-dashboard
    ports:
      - "8501:8501"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow-server:5000
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
    depends_on:
      mlflow-server:
        condition: service_healthy
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sutazai-mlflow-postgres
    environment:
      POSTGRES_DB: mlflow_db
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_secure_pwd
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflow_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Messaging
  redis:
    image: redis:7-alpine
    container_name: sutazai-mlflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sutazai-mlflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-mlflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=sutazai_admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sutazai-mlflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - mlflow-server
      - mlflow-dashboard
      - grafana
    networks:
      - sutazai-mlflow
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  sutazai-mlflow:
    driver: bridge
    name: sutazai-mlflow-network

volumes:
  postgres_data:
    name: sutazai-mlflow-postgres-data
  redis_data:
    name: sutazai-mlflow-redis-data
  mlflow_artifacts:
    name: sutazai-mlflow-artifacts
  prometheus_data:
    name: sutazai-mlflow-prometheus-data
  grafana_data:
    name: sutazai-mlflow-grafana-data