# SutazAI Simplified Docker Compose - Only Working Services
# This file contains ONLY the services that actually work and are needed
# Use this instead of the bloated 1400+ line docker-compose.yml

version: '3.8'

networks:
  sutazai-network:
    driver: bridge
    name: sutazai-network

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  neo4j_data:
  prometheus_data:
  grafana_data:
  loki_data:

services:
  # ==========================================
  # CORE SERVICES (Required)
  # ==========================================
  
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
    ports:
      - "10000:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis
    command: redis-server
    ports:
      - "10001:6379"
    volumes:
      - redis_data:/data
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_KEEP_ALIVE: 10m
      OLLAMA_NUM_PARALLEL: 4
    ports:
      - "10104:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "ollama list > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sutazai-backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      BACKEND_CORS_ORIGINS: '["http://localhost:10011", "http://localhost:3000"]'
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      API_V1_STR: /api/v1
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
    ports:
      - "10010:8000"
    volumes:
      - ./backend:/app
      - ./data:/data
      - ./logs:/logs
    networks:
      - sutazai-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sutazai-frontend
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
    ports:
      - "10011:8501"
    volumes:
      - ./frontend:/app
      - ./data:/data
    networks:
      - sutazai-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # ==========================================
  # OPTIONAL SERVICES (Nice to have)
  # ==========================================

  neo4j:
    image: neo4j:5.13-community
    container_name: sutazai-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512M
    ports:
      - "10002:7474"  # Browser
      - "10003:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    networks:
      - sutazai-network
    restart: unless-stopped

  # ==========================================
  # MONITORING STACK (Optional)
  # ==========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: sutazai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "10200:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - sutazai-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "10201:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - sutazai-network
    depends_on:
      - prometheus
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.0
    container_name: sutazai-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "10202:3100"
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/config.yml:/etc/loki/local-config.yaml
    networks:
      - sutazai-network
    restart: unless-stopped

  # ==========================================
  # ONE EXAMPLE WORKING AGENT (if needed)
  # ==========================================
  
  # Uncomment if you want to test a basic agent
  # simple-agent:
  #   build:
  #     context: ./agents/simple-agent
  #     dockerfile: Dockerfile
  #   container_name: sutazai-simple-agent
  #   environment:
  #     OLLAMA_BASE_URL: http://ollama:11434
  #     BACKEND_URL: http://backend:8000
  #   ports:
  #     - "10300:8080"
  #   networks:
  #     - sutazai-network
  #   depends_on:
  #     - backend
  #     - ollama
  #   restart: unless-stopped

# ==========================================
# DEPLOYMENT INSTRUCTIONS
# ==========================================
# 
# 1. Create network (if not exists):
#    docker network create sutazai-network
#
# 2. Start core services:
#    docker-compose -f docker-compose.simple.yml up -d postgres redis ollama
#
# 3. Wait for them to be healthy:
#    docker-compose -f docker-compose.simple.yml ps
#
# 4. Start application:
#    docker-compose -f docker-compose.simple.yml up -d backend frontend
#
# 5. (Optional) Start monitoring:
#    docker-compose -f docker-compose.simple.yml up -d prometheus grafana loki
#
# 6. Download Ollama model:
#    docker exec sutazai-ollama ollama pull gpt-oss
#
# 7. Access the application:
#    - Frontend: http://localhost:10011
#    - Backend API: http://localhost:10010/docs
#    - Grafana: http://localhost:10201 (admin/admin)
#
# Total containers: 5-9 (depending on optional services)
# RAM requirement: 4-6GB
# Disk requirement: 5-10GB
#
# ==========================================