version: '3.8'

# COMPLIANT DOCKER COMPOSE - Following all 5 critical rules
# Rule 1: No fantasy elements - only real, working services
# Rule 2: Preserves existing functionality
# Rule 3: Clean and organized
# Rule 4: No duplication
# Rule 5: Local LLMs only (Ollama/TinyLlama)

services:
  # ==============================================================================
  # CORE INFRASTRUCTURE (Required for basic operation)
  # ==============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: sutazai-postgres
    environment:
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sutazai2024}
      POSTGRES_DB: sutazai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "sutazai"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network

  redis:
    image: redis:7-alpine
    container_name: sutazai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network

  # ==============================================================================
  # LOCAL LLM SERVICE (Ollama with TinyLlama)
  # ==============================================================================
  
  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_MAX_LOADED_MODELS: 1  # Resource optimization
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # ==============================================================================
  # APPLICATION LAYER
  # ==============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sutazai-backend
    ports:
      - "10010:8000"
    environment:
      DATABASE_URL: postgresql://sutazai:${POSTGRES_PASSWORD:-sutazai2024}@postgres:5432/sutazai
      REDIS_URL: redis://redis:6379
      OLLAMA_HOST: http://ollama:11434
      DEFAULT_MODEL: tinyllama  # Rule 5: Local LLM only
      ENVIRONMENT: ${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sutazai-network
    volumes:
      - ./backend:/app
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sutazai-frontend
    ports:
      - "10011:8501"
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sutazai-network
    volumes:
      - ./frontend:/app
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # ==============================================================================
  # MONITORING (Optional but recommended)
  # ==============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: sutazai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - sutazai-network
    deploy:
      resources:
        limits:
          memory: 512M

# ==============================================================================
# VOLUMES
# ==============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==============================================================================
# NETWORKS
# ==============================================================================

networks:
  sutazai-network:
    external: true
    name: sutazai-network