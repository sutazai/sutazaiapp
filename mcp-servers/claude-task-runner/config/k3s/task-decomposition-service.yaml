# Task Decomposition Service - K3s Manifest
# Service for intelligent task breakdown and delegation
# Port: 10030
---
apiVersion: v1
kind: Namespace
metadata:
  name: sutazai-mesh
  labels:
    name: sutazai-mesh
    monitoring: enabled
    mesh: sutazai
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: task-decomposition-config
  namespace: sutazai-mesh
data:
  service.yaml: |
    server:
      host: 0.0.0.0
      port: 8080
      workers: 4
      timeout: 300
    
    redis:
      host: sutazai-redis
      port: 6379
      db: 0
      pool_size: 10
      max_connections: 50
      decode_responses: true
      socket_keepalive: true
      socket_keepalive_options:
        TCP_KEEPIDLE: 120
        TCP_KEEPINTVL: 30
        TCP_KEEPCNT: 3
    
    postgres:
      host: sutazai-postgres
      port: 5432
      database: sutazai
      pool_size: 5
      max_overflow: 10
      pool_pre_ping: true
      pool_recycle: 3600
    
    mcp:
      endpoint: http://mcp-coordinator:8000
      timeout: 60
      retry_count: 3
      retry_delay: 5
    
    claude_flow:
      api_url: http://claude-flow:3000
      api_version: v1
      max_concurrent_tasks: 10
      task_timeout: 1800
    
    task_decomposition:
      max_depth: 5
      max_subtasks: 20
      min_task_complexity: 0.1
      parallel_threshold: 0.7
      auto_assign: true
      priority_levels:
        - critical
        - high
        - medium
        - low
      
    monitoring:
      metrics_port: 9090
      metrics_path: /metrics
      enable_tracing: true
      trace_sample_rate: 0.1
      log_level: INFO
---
apiVersion: v1
kind: Secret
metadata:
  name: task-decomposition-secrets
  namespace: sutazai-mesh
type: Opaque
stringData:
  postgres-password: "sutazai-secure-password"
  redis-password: ""
  mcp-api-key: "mcp-api-key-placeholder"
  claude-flow-token: "claude-flow-token-placeholder"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: task-artifacts-pvc
  namespace: sutazai-mesh
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-decomposition
  namespace: sutazai-mesh
  labels:
    app: task-decomposition
    version: v1.0.0
    tier: core-services
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: task-decomposition
  template:
    metadata:
      labels:
        app: task-decomposition
        version: v1.0.0
        tier: core-services
        mesh: sutazai
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: task-decomposition-sa
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - task-decomposition
              topologyKey: kubernetes.io/hostname
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis
                  - postgres
              topologyKey: kubernetes.io/hostname
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.36
        command: ['sh', '-c', 'until nc -z sutazai-postgres 5432; do echo waiting for postgres; sleep 2; done']
      - name: wait-for-redis
        image: busybox:1.36
        command: ['sh', '-c', 'until nc -z sutazai-redis 6379; do echo waiting for redis; sleep 2; done']
      containers:
      - name: task-decomposition
        image: sutazai/task-decomposition:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: SERVICE_NAME
          value: "task-decomposition"
        - name: SERVICE_VERSION
          value: "v1.0.0"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: REDIS_HOST
          value: "sutazai-redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-decomposition-secrets
              key: redis-password
        - name: POSTGRES_HOST
          value: "sutazai-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "sutazai"
        - name: POSTGRES_USER
          value: "sutazai"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: task-decomposition-secrets
              key: postgres-password
        - name: MCP_ENDPOINT
          value: "http://mcp-coordinator:8000"
        - name: MCP_API_KEY
          valueFrom:
            secretKeyRef:
              name: task-decomposition-secrets
              key: mcp-api-key
        - name: CLAUDE_FLOW_API
          value: "http://claude-flow:3000"
        - name: CLAUDE_FLOW_TOKEN
          valueFrom:
            secretKeyRef:
              name: task-decomposition-secrets
              key: claude-flow-token
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            httpHeaders:
            - name: X-Health-Check
              value: liveness
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            httpHeaders:
            - name: X-Health-Check
              value: readiness
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 30
        volumeMounts:
        - name: task-artifacts
          mountPath: /data/tasks
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: task-artifacts
        persistentVolumeClaim:
          claimName: task-artifacts-pvc
      - name: config
        configMap:
          name: task-decomposition-config
      - name: tmp
        emptyDir: {}
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
---
apiVersion: v1
kind: Service
metadata:
  name: task-decomposition-service
  namespace: sutazai-mesh
  labels:
    app: task-decomposition
    monitoring: prometheus
  annotations:
    metallb.universe.tf/address-pool: sutazai-pool
spec:
  type: LoadBalancer
  selector:
    app: task-decomposition
  ports:
  - port: 10030
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 19030
    targetPort: 9090
    protocol: TCP
    name: metrics
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: task-decomposition-sa
  namespace: sutazai-mesh
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: task-decomposition-role
  namespace: sutazai-mesh
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["create", "get", "list", "watch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: task-decomposition-rolebinding
  namespace: sutazai-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: task-decomposition-role
subjects:
- kind: ServiceAccount
  name: task-decomposition-sa
  namespace: sutazai-mesh
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-decomposition-hpa
  namespace: sutazai-mesh
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-decomposition
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 120
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: task-decomposition-pdb
  namespace: sutazai-mesh
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: task-decomposition
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: task-decomposition-netpol
  namespace: sutazai-mesh
spec:
  podSelector:
    matchLabels:
      app: task-decomposition
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: sutazai-mesh
    - podSelector:
        matchLabels:
          tier: gateway
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: sutazai-monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: sutazai-mesh
    ports:
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 8000  # MCP Coordinator
    - protocol: TCP
      port: 3000  # Claude Flow
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: task-decomposition-monitor
  namespace: sutazai-mesh
  labels:
    app: task-decomposition
    release: prometheus
spec:
  selector:
    matchLabels:
      app: task-decomposition
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
    honorLabels: true
    relabelings:
    - sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: node
    - sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace
    - sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - sourceLabels: [__meta_kubernetes_pod_container_name]
      targetLabel: container