{
  "config": {
    "configFile": "/opt/sutazaiapp/playwright.config.ts",
    "rootDir": "/opt/sutazaiapp/tests/e2e",
    "forbidOnly": false,
    "fullyParallel": false,
    "globalSetup": null,
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 6
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "html",
        null
      ],
      [
        "json",
        {
          "outputFile": "test-results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/opt/sutazaiapp/test-results",
        "repeatEach": 1,
        "retries": 2,
        "metadata": {
          "actualWorkers": 6
        },
        "id": "",
        "name": "",
        "testDir": "/opt/sutazaiapp/tests/e2e",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 30000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.54.2",
    "workers": 10,
    "webServer": null
  },
  "suites": [
    {
      "title": "integration/agent-endpoints.spec.ts",
      "file": "integration/agent-endpoints.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Agent Endpoints Integration Tests",
          "file": "integration/agent-endpoints.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "AI Agent Orchestrator health endpoint responds",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 30,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.748Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 6,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 27,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:19.518Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 10,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 26,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → GET http://localhost:8589/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:20.237Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-2dc6b8b081feafff2840",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 14,
              "column": 9
            },
            {
              "title": "AI Agent Orchestrator process endpoint exists",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 15,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 27,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.979Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 18,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:21.631Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 21,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 23,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:22.265Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-a56799e3ae5f37863a53",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Resource Arbitration Agent health endpoint responds",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 25,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 26,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:22.866Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 28,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:23.460Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 30,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 21,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → GET http://localhost:8588/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:23.970Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-5efe0f2407675a4286f4",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 14,
              "column": 9
            },
            {
              "title": "Resource Arbitration Agent process endpoint exists",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 32,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 19,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:24.493Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 34,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 22,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:24.986Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 36,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:25.582Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-6e97e54d310e139cc138",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Task Assignment Coordinator health endpoint responds",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 38,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:26.079Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 40,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 21,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:26.565Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 42,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 19,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → GET http://localhost:8551/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:28.241Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-af96ba2a54118a19a610",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 14,
              "column": 9
            },
            {
              "title": "Task Assignment Coordinator process endpoint exists",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 44,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 21,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:28.797Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 46,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:29.298Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 48,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 21,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:29.852Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-e44a421e79c9d45c6af8",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Hardware Resource Optimizer health endpoint responds",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 49,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:30.383Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 50,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 17,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:30.844Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 51,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → GET http://localhost:8002/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:31.301Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-1d2fb1a372936e0da533",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 14,
              "column": 9
            },
            {
              "title": "Hardware Resource Optimizer process endpoint exists",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 52,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:31.754Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 53,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:32.227Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 54,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 16,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:32.680Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-10541254150ffaa22f42",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Ollama Integration Specialist health endpoint responds",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 55,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 19,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:33.143Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 56,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 17,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:33.595Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    },
                    {
                      "workerIndex": 57,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 15
                        },
                        "snippet": "  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 15
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → GET http://localhost:11015/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  13 |   for (const agent of agentEndpoints) {\n  14 |     test(`${agent.name} health endpoint responds`, async ({ request }) => {\n> 15 |       const response = await request.get(`http://localhost:${agent.port}/health`);\n     |                                      ^\n  16 |       \n  17 |       if (response.ok()) {\n  18 |         const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:15:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:34.046Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 15
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-3586dae0b5fcd6704721",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 14,
              "column": 9
            },
            {
              "title": "Ollama Integration Specialist process endpoint exists",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 58,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:34.522Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 59,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:34.969Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    },
                    {
                      "workerIndex": 60,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 20,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 38,
                          "line": 30
                        },
                        "snippet": "  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 38,
                            "line": 30
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 37\u001b[22m\n\n\n  28 |\n  29 |     test(`${agent.name} process endpoint exists`, async ({ request }) => {\n> 30 |       const response = await request.post(`http://localhost:${agent.port}/process`, {\n     |                                      ^\n  31 |         data: {\n  32 |           message: 'test',\n  33 |           task_type: 'ping'\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:30:38"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:35.454Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 38,
                        "line": 30
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-01e0017c8a517389f4a1",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 29,
              "column": 9
            },
            {
              "title": "Agent orchestration communication",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 61,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 48,
                          "line": 52
                        },
                        "snippet": "  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 48,
                            "line": 52
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n\n  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:35.904Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 48,
                        "line": 52
                      }
                    },
                    {
                      "workerIndex": 62,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 48,
                          "line": 52
                        },
                        "snippet": "  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 48,
                            "line": 52
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n\n  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:36.337Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 48,
                        "line": 52
                      }
                    },
                    {
                      "workerIndex": 63,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 21,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 48,
                          "line": 52
                        },
                        "snippet": "  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 48,
                            "line": 52
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 112\u001b[22m\n\n\n  50 |   test('Agent orchestration communication', async ({ request }) => {\n  51 |     // Test if the AI Agent Orchestrator can coordinate with other agents\n> 52 |     const orchestratorResponse = await request.post('http://localhost:8589/process', {\n     |                                                ^\n  53 |       data: {\n  54 |         task: 'coordinate_agents',\n  55 |         agents: ['resource-arbitration', 'task-assignment'],\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:52:48"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:36.788Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 48,
                        "line": 52
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-02bb629bf5316b551e8e",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 50,
              "column": 7
            },
            {
              "title": "Resource arbitration functionality",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 64,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 73
                        },
                        "snippet": "  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 73
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n\n  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:37.255Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 73
                      }
                    },
                    {
                      "workerIndex": 65,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 17,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 73
                        },
                        "snippet": "  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 73
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n\n  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:37.668Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 73
                      }
                    },
                    {
                      "workerIndex": 66,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 16,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 73
                        },
                        "snippet": "  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 73
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8588\nCall log:\n\u001b[2m  - → POST http://localhost:8588/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 97\u001b[22m\n\n\n  71 |   test('Resource arbitration functionality', async ({ request }) => {\n  72 |     // Test resource arbitration agent\n> 73 |     const response = await request.post('http://localhost:8588/process', {\n     |                                    ^\n  74 |       data: {\n  75 |         action: 'allocate_resources',\n  76 |         requested_cpu: 2,\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:73:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:38.094Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 73
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-f2bca0c733758b736c75",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 71,
              "column": 7
            },
            {
              "title": "Task assignment coordination",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 67,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 94
                        },
                        "snippet": "  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 94
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n\n  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:38.600Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 94
                      }
                    },
                    {
                      "workerIndex": 68,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 17,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 94
                        },
                        "snippet": "  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 94
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n\n  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:39.066Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 94
                      }
                    },
                    {
                      "workerIndex": 69,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 19,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 94
                        },
                        "snippet": "  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 94
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8551\nCall log:\n\u001b[2m  - → POST http://localhost:8551/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 100\u001b[22m\n\n\n  92 |   test('Task assignment coordination', async ({ request }) => {\n  93 |     // Test task assignment coordinator\n> 94 |     const response = await request.post('http://localhost:8551/process', {\n     |                                    ^\n  95 |       data: {\n  96 |         action: 'assign_task',\n  97 |         task_id: 'test-task-001',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:94:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:39.491Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 94
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-8bd8224d94bf5aff71f6",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 92,
              "column": 7
            },
            {
              "title": "Hardware resource optimization",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 70,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 115
                        },
                        "snippet": "  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 115
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n\n  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:39.913Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 115
                      }
                    },
                    {
                      "workerIndex": 71,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 115
                        },
                        "snippet": "  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 115
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n\n  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:40.364Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 115
                      }
                    },
                    {
                      "workerIndex": 72,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 115
                        },
                        "snippet": "  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 115
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8002\nCall log:\n\u001b[2m  - → POST http://localhost:8002/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 85\u001b[22m\n\n\n  113 |   test('Hardware resource optimization', async ({ request }) => {\n  114 |     // Test hardware resource optimizer\n> 115 |     const response = await request.post('http://localhost:8002/process', {\n      |                                    ^\n  116 |       data: {\n  117 |         action: 'optimize_resources',\n  118 |         target: 'cpu_memory',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:115:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:40.791Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 115
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-423713aefc4882e32099",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 113,
              "column": 7
            },
            {
              "title": "Ollama integration specialist",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 73,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 135
                        },
                        "snippet": "  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 135
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n\n  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:41.233Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 135
                      }
                    },
                    {
                      "workerIndex": 74,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 135
                        },
                        "snippet": "  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 135
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n\n  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:41.688Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 135
                      }
                    },
                    {
                      "workerIndex": 75,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 19,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 135
                        },
                        "snippet": "  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 135
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:11015\nCall log:\n\u001b[2m  - → POST http://localhost:11015/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 92\u001b[22m\n\n\n  133 |   test('Ollama integration specialist', async ({ request }) => {\n  134 |     // Test Ollama integration specialist\n> 135 |     const response = await request.post('http://localhost:11015/process', {\n      |                                    ^\n  136 |       data: {\n  137 |         action: 'generate_text',\n  138 |         model: 'tinyllama',\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:135:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:42.168Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 135
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-116b9ab0765e6faa753a",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 133,
              "column": 7
            },
            {
              "title": "Agent error handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 76,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 156
                        },
                        "snippet": "  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 156
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n\n  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:42.634Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 156
                      }
                    },
                    {
                      "workerIndex": 77,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 156
                        },
                        "snippet": "  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 156
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n\n  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:43.088Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 156
                      }
                    },
                    {
                      "workerIndex": 78,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 18,
                      "error": {
                        "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n",
                        "stack": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                          "column": 36,
                          "line": 156
                        },
                        "snippet": "  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                            "column": 36,
                            "line": 156
                          },
                          "message": "Error: apiRequestContext.post: connect ECONNREFUSED 127.0.0.1:8589\nCall log:\n\u001b[2m  - → POST http://localhost:8589/process\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\u001b[2m    - content-type: application/json\u001b[22m\n\u001b[2m    - content-length: 57\u001b[22m\n\n\n  154 |   test('Agent error handling', async ({ request }) => {\n  155 |     // Test how agents handle malformed requests\n> 156 |     const response = await request.post('http://localhost:8589/process', {\n      |                                    ^\n  157 |       data: {\n  158 |         invalid_field: 'invalid_data',\n  159 |         malformed_request: true\n    at /opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts:156:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:43.540Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/agent-endpoints.spec.ts",
                        "column": 36,
                        "line": 156
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "b0b1534fcd99f0b3e5e4-e9e4933b067d5b454da7",
              "file": "integration/agent-endpoints.spec.ts",
              "line": 154,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "integration/backend-api.spec.ts",
      "file": "integration/backend-api.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Backend API Integration Tests",
          "file": "integration/backend-api.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "Backend health endpoint provides detailed information",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 48,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Service status details: {\n  \"redis\": \"healthy\",\n  \"database\": \"healthy\",\n  \"http_ollama\": \"configured\",\n  \"http_agents\": \"configured\",\n  \"http_external\": \"configured\"\n}\n"
                        },
                        {
                          "text": "Backend health check result: healthy\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.751Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-f43b903459c03ac25749",
              "file": "integration/backend-api.spec.ts",
              "line": 5,
              "column": 7
            },
            {
              "title": "Backend API root endpoint responds",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 24,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.808Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-0b47ad4e656d8e8db48c",
              "file": "integration/backend-api.spec.ts",
              "line": 25,
              "column": 7
            },
            {
              "title": "Backend docs endpoint is accessible",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 19,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.836Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-f998956937cf363e2565",
              "file": "integration/backend-api.spec.ts",
              "line": 34,
              "column": 7
            },
            {
              "title": "Backend API versioning works",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 21,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  API versioning not yet implemented\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.859Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-9b82abbb32b5abdb6fc5",
              "file": "integration/backend-api.spec.ts",
              "line": 43,
              "column": 7
            },
            {
              "title": "Backend can communicate with Ollama",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 31,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  Ollama connectivity status not reported in health check\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.885Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-98f4b44fd66e060ff087",
              "file": "integration/backend-api.spec.ts",
              "line": 56,
              "column": 7
            },
            {
              "title": "Backend database connectivity",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 36,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  postgres status not reported\n"
                        },
                        {
                          "text": "✅ redis connectivity: healthy\n"
                        },
                        {
                          "text": "⚠️  neo4j status not reported\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.923Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-e8cc611fdfeccdc61909",
              "file": "integration/backend-api.spec.ts",
              "line": 72,
              "column": 7
            },
            {
              "title": "Backend error handling",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 15,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts:95:31",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                          "column": 31,
                          "line": 95
                        },
                        "snippet": "  93 |     // Test non-existent endpoint\n  94 |     const response = await request.get('http://localhost:10010/api/nonexistent');\n> 95 |     expect(response.status()).toBe(404);\n     |                               ^\n  96 |     \n  97 |     const body = await response.json();\n  98 |     expect(body).toHaveProperty('detail');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                            "column": 31,
                            "line": 95
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m\n\n  93 |     // Test non-existent endpoint\n  94 |     const response = await request.get('http://localhost:10010/api/nonexistent');\n> 95 |     expect(response.status()).toBe(404);\n     |                               ^\n  96 |     \n  97 |     const body = await response.json();\n  98 |     expect(body).toHaveProperty('detail');\n    at /opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts:95:31"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.962Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                        "column": 31,
                        "line": 95
                      }
                    },
                    {
                      "workerIndex": 7,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 35,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts:95:31",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                          "column": 31,
                          "line": 95
                        },
                        "snippet": "  93 |     // Test non-existent endpoint\n  94 |     const response = await request.get('http://localhost:10010/api/nonexistent');\n> 95 |     expect(response.status()).toBe(404);\n     |                               ^\n  96 |     \n  97 |     const body = await response.json();\n  98 |     expect(body).toHaveProperty('detail');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                            "column": 31,
                            "line": 95
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m404\u001b[39m\nReceived: \u001b[31m429\u001b[39m\n\n  93 |     // Test non-existent endpoint\n  94 |     const response = await request.get('http://localhost:10010/api/nonexistent');\n> 95 |     expect(response.status()).toBe(404);\n     |                               ^\n  96 |     \n  97 |     const body = await response.json();\n  98 |     expect(body).toHaveProperty('detail');\n    at /opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts:95:31"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:19.640Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/backend-api.spec.ts",
                        "column": 31,
                        "line": 95
                      }
                    },
                    {
                      "workerIndex": 11,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 48,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Error handling works correctly for 404 endpoints\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:20.468Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "flaky"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-038de76232f9d7ef2a1f",
              "file": "integration/backend-api.spec.ts",
              "line": 92,
              "column": 7
            },
            {
              "title": "Backend CORS headers",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 18,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  CORS headers not configured (may be intentional)\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.528Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "95f56e8d0bb60f49a93d-7e0b4a5b9e3c34e5c299",
              "file": "integration/backend-api.spec.ts",
              "line": 102,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "integration/database-connection.spec.ts",
      "file": "integration/database-connection.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Database Connection Integration Tests",
          "file": "integration/database-connection.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "PostgreSQL database connectivity via backend",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 50,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  PostgreSQL status not explicitly reported in health check\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.768Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-cc52dcba242dc4745cda",
              "file": "integration/database-connection.spec.ts",
              "line": 5,
              "column": 7
            },
            {
              "title": "Redis cache connectivity via backend",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 26,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Redis connectivity confirmed via backend\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.829Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-952bd6d306d3ff4bd747",
              "file": "integration/database-connection.spec.ts",
              "line": 21,
              "column": 7
            },
            {
              "title": "Neo4j graph database web interface",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 32,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Neo4j browser interface accessible\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.862Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-8b1c6b99c19ff3ed047a",
              "file": "integration/database-connection.spec.ts",
              "line": 36,
              "column": 7
            },
            {
              "title": "Neo4j database connectivity via backend",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 22,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  Neo4j status not explicitly reported in health check\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.902Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-cfbaf1e4abd16ea6b298",
              "file": "integration/database-connection.spec.ts",
              "line": 47,
              "column": 7
            },
            {
              "title": "Vector database - Qdrant connectivity",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 27,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Qdrant vector database accessible\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.933Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-58a15c46a0feb5518674",
              "file": "integration/database-connection.spec.ts",
              "line": 62,
              "column": 7
            },
            {
              "title": "Vector database - Qdrant collections",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 22,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Qdrant collections endpoint accessible\n"
                        },
                        {
                          "text": "Available collections: \u001b[33m0\u001b[39m\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.969Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-21d940fe8842d2b82ff4",
              "file": "integration/database-connection.spec.ts",
              "line": 74,
              "column": 7
            },
            {
              "title": "Vector database - FAISS service",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 12,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 36,
                          "line": 89
                        },
                        "snippet": "  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 36,
                            "line": 89
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.996Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 36,
                        "line": 89
                      }
                    },
                    {
                      "workerIndex": 8,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 37,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 36,
                          "line": 89
                        },
                        "snippet": "  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 36,
                            "line": 89
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:19.673Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 36,
                        "line": 89
                      }
                    },
                    {
                      "workerIndex": 12,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 35,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 36,
                          "line": 89
                        },
                        "snippet": "  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 36,
                            "line": 89
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  87 |   test('Vector database - FAISS service', async ({ request }) => {\n  88 |     // Test FAISS health endpoint\n> 89 |     const response = await request.get('http://localhost:10103/health');\n     |                                    ^\n  90 |     \n  91 |     if (response.ok()) {\n  92 |       const body = await response.json();\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:89:36"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:20.446Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 36,
                        "line": 89
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "15f618886f4fa030d169-d4bfc5eb62c6268d488e",
              "file": "integration/database-connection.spec.ts",
              "line": 87,
              "column": 7
            },
            {
              "title": "Database schema validation via backend",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 38,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  Database schema validation endpoint not implemented\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:21.138Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-8c3e73891c5fdd213659",
              "file": "integration/database-connection.spec.ts",
              "line": 100,
              "column": 7
            },
            {
              "title": "Database migration status",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 10,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  Database migrations status endpoint not implemented\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:21.187Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-77c4ed6b38f530ab82b1",
              "file": "integration/database-connection.spec.ts",
              "line": 113,
              "column": 7
            },
            {
              "title": "Data persistence test",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 2,
                      "status": "passed",
                      "duration": 13,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  Data persistence test endpoints not available (expected in current implementation)\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:21.201Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "15f618886f4fa030d169-e78f89f5e6c676aed319",
              "file": "integration/database-connection.spec.ts",
              "line": 125,
              "column": 7
            },
            {
              "title": "Connection pooling and concurrent access",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 29,
                          "line": 168
                        },
                        "snippet": "  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 29,
                            "line": 168
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:21.222Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 29,
                        "line": 168
                      }
                    },
                    {
                      "workerIndex": 19,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 61,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 29,
                          "line": 168
                        },
                        "snippet": "  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 29,
                            "line": 168
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:21.842Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 29,
                        "line": 168
                      }
                    },
                    {
                      "workerIndex": 22,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 43,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                          "column": 29,
                          "line": 168
                        },
                        "snippet": "  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                            "column": 29,
                            "line": 168
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  166 |     // All requests should succeed\n  167 |     for (const response of responses) {\n> 168 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  169 |     }\n  170 |     \n  171 |     console.log('✅ Database handles concurrent connections properly');\n    at /opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts:168:29"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:22.492Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/integration/database-connection.spec.ts",
                        "column": 29,
                        "line": 168
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "15f618886f4fa030d169-0279e0b32ec762316d7e",
              "file": "integration/database-connection.spec.ts",
              "line": 158,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "regression/full-system.spec.ts",
      "file": "regression/full-system.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Full System Regression Tests",
          "file": "regression/full-system.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "Complete system startup validation",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 3,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 237,
                      "error": {
                        "message": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:18:66",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 66,
                          "line": 18
                        },
                        "snippet": "  16 |     for (const service of criticalServices) {\n  17 |       const response = await request.get(service.url);\n> 18 |       expect(response.ok(), `${service.name} should be healthy`).toBeTruthy();\n     |                                                                  ^\n  19 |       console.log(`✅ ${service.name}: Operational`);\n  20 |     }\n  21 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 66,
                            "line": 18
                          },
                          "message": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  16 |     for (const service of criticalServices) {\n  17 |       const response = await request.get(service.url);\n> 18 |       expect(response.ok(), `${service.name} should be healthy`).toBeTruthy();\n     |                                                                  ^\n  19 |       console.log(`✅ ${service.name}: Operational`);\n  20 |     }\n  21 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:18:66"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.754Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 66,
                        "line": 18
                      }
                    },
                    {
                      "workerIndex": 9,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 138,
                      "error": {
                        "message": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:18:66",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 66,
                          "line": 18
                        },
                        "snippet": "  16 |     for (const service of criticalServices) {\n  17 |       const response = await request.get(service.url);\n> 18 |       expect(response.ok(), `${service.name} should be healthy`).toBeTruthy();\n     |                                                                  ^\n  19 |       console.log(`✅ ${service.name}: Operational`);\n  20 |     }\n  21 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 66,
                            "line": 18
                          },
                          "message": "Error: Backend API should be healthy\n\n\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  16 |     for (const service of criticalServices) {\n  17 |       const response = await request.get(service.url);\n> 18 |       expect(response.ok(), `${service.name} should be healthy`).toBeTruthy();\n     |                                                                  ^\n  19 |       console.log(`✅ ${service.name}: Operational`);\n  20 |     }\n  21 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:18:66"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:19.765Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 66,
                        "line": 18
                      }
                    },
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "passed",
                      "duration": 1159,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Backend API: Operational\n"
                        },
                        {
                          "text": "✅ Ollama Service: Operational\n"
                        },
                        {
                          "text": "✅ Prometheus: Operational\n"
                        },
                        {
                          "text": "✅ Grafana: Operational\n"
                        },
                        {
                          "text": "✅ Qdrant: Operational\n"
                        },
                        {
                          "text": "✅ Neo4j: Operational\n"
                        },
                        {
                          "text": "✅ Frontend: Loads correctly\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:20.710Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "flaky"
                }
              ],
              "id": "4e2fe7d8be3084a35670-4f0bb6ab96c12028a983",
              "file": "regression/full-system.spec.ts",
              "line": 5,
              "column": 7
            },
            {
              "title": "End-to-end workflow simulation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 16,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 33,
                          "line": 33
                        },
                        "snippet": "  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 33,
                            "line": 33
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔄 Starting end-to-end workflow simulation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:21.945Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 33,
                        "line": 33
                      }
                    },
                    {
                      "workerIndex": 23,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 34,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 33,
                          "line": 33
                        },
                        "snippet": "  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 33,
                            "line": 33
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔄 Starting end-to-end workflow simulation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:22.563Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 33,
                        "line": 33
                      }
                    },
                    {
                      "workerIndex": 26,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 29,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 33,
                          "line": 33
                        },
                        "snippet": "  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 33,
                            "line": 33
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  31 |     // Step 1: Check system health\n  32 |     const healthResponse = await request.get('http://localhost:10010/health');\n> 33 |     expect(healthResponse.ok()).toBeTruthy();\n     |                                 ^\n  34 |     const healthData = await healthResponse.json();\n  35 |     console.log('✅ Step 1: System health verified');\n  36 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:33:33"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔄 Starting end-to-end workflow simulation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:23.200Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 33,
                        "line": 33
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-cd2dfc88200027d3b8c9",
              "file": "regression/full-system.spec.ts",
              "line": 28,
              "column": 7
            },
            {
              "title": "System resilience and error recovery",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 29,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 33,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 98
                        },
                        "snippet": "   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 98
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n\n   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🛡️  Testing system resilience...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:23.729Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 98
                      }
                    },
                    {
                      "workerIndex": 31,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 30,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 98
                        },
                        "snippet": "   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 98
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n\n   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🛡️  Testing system resilience...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:24.235Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 98
                      }
                    },
                    {
                      "workerIndex": 33,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 98
                        },
                        "snippet": "   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 98
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected value: \u001b[32m403\u001b[39m\nReceived array: \u001b[31m[404]\u001b[39m\n\n   96 |       const response = await request.get(req.url);\n   97 |       const expectedCodes = Array.isArray(req.expected) ? req.expected : [req.expected];\n>  98 |       expect(expectedCodes).toContain(response.status());\n      |                             ^\n   99 |       console.log(`✅ Proper error handling for ${req.url}: ${response.status()}`);\n  100 |     }\n  101 |\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:98:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🛡️  Testing system resilience...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:24.736Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 98
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-895a5277a23adfa02546",
              "file": "regression/full-system.spec.ts",
              "line": 85,
              "column": 7
            },
            {
              "title": "Data consistency across services",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 35,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 29,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 32,
                          "line": 126
                        },
                        "snippet": "  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 32,
                            "line": 126
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔍 Testing data consistency...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:25.276Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 32,
                        "line": 126
                      }
                    },
                    {
                      "workerIndex": 37,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 32,
                          "line": 126
                        },
                        "snippet": "  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 32,
                            "line": 126
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔍 Testing data consistency...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:25.801Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 32,
                        "line": 126
                      }
                    },
                    {
                      "workerIndex": 39,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 23,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 32,
                          "line": 126
                        },
                        "snippet": "  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 32,
                            "line": 126
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  124 |     // Test 1: Health status consistency\n  125 |     const backendHealth = await request.get('http://localhost:10010/health');\n> 126 |     expect(backendHealth.ok()).toBeTruthy();\n      |                                ^\n  127 |     const backendData = await backendHealth.json();\n  128 |\n  129 |     // Test 2: Service discovery consistency\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:126:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔍 Testing data consistency...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:26.297Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 32,
                        "line": 126
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-9549a6dfac38584ee6c1",
              "file": "regression/full-system.spec.ts",
              "line": 121,
              "column": 7
            },
            {
              "title": "Security and access control",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 41,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 33,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "🔐 Testing security measures...\n"
                        },
                        {
                          "text": "✅ Internal service at http://localhost:5432 is properly protected\n"
                        },
                        {
                          "text": "✅ Internal service at http://localhost:6379 is properly protected\n"
                        },
                        {
                          "text": "✅ Internal service at http://localhost:9090 is properly protected\n"
                        },
                        {
                          "text": "⚠️  Security header x-content-type-options not present\n"
                        },
                        {
                          "text": "⚠️  Security header x-frame-options not present\n"
                        },
                        {
                          "text": "⚠️  Security header x-xss-protection not present\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:27.918Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-c7d8016bbbc0c6356cd9",
              "file": "regression/full-system.spec.ts",
              "line": 147,
              "column": 7
            },
            {
              "title": "Performance and response time validation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 41,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 13,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 197
                        },
                        "snippet": "  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 197
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "⚡ Testing system performance...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:27.963Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 197
                      }
                    },
                    {
                      "workerIndex": 43,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 32,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 197
                        },
                        "snippet": "  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 197
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "⚡ Testing system performance...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:28.511Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 197
                      }
                    },
                    {
                      "workerIndex": 45,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                          "column": 29,
                          "line": 197
                        },
                        "snippet": "  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                            "column": 29,
                            "line": 197
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  195 |       const responseTime = Date.now() - startTime;\n  196 |       \n> 197 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  198 |       expect(responseTime).toBeLessThan(test.maxTime);\n  199 |       \n  200 |       console.log(`✅ ${test.name}: ${responseTime}ms (under ${test.maxTime}ms limit)`);\n    at /opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts:197:29"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "⚡ Testing system performance...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:29.051Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/regression/full-system.spec.ts",
                        "column": 29,
                        "line": 197
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-4c5fbdb0c48f4a46653c",
              "file": "regression/full-system.spec.ts",
              "line": 182,
              "column": 7
            },
            {
              "title": "System configuration validation",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 47,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 74,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚙️  Validating system configuration...\n"
                        },
                        {
                          "text": "⚠️  Port 10010: Not accessible (may be expected for some services)\n"
                        },
                        {
                          "text": "✅ Port 10011: Accessible\n"
                        },
                        {
                          "text": "✅ Port 10104: Accessible\n"
                        },
                        {
                          "text": "✅ Port 10200: Accessible\n"
                        },
                        {
                          "text": "✅ Port 10201: Accessible\n"
                        },
                        {
                          "text": "⚠️  Port 8589: Not accessible (may be expected for some services)\n"
                        },
                        {
                          "text": "⚠️  Port 8588: Not accessible (may be expected for some services)\n"
                        },
                        {
                          "text": "⚠️  Port 8551: Not accessible (may be expected for some services)\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:29.555Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-1223a1f718c07eacea7d",
              "file": "regression/full-system.spec.ts",
              "line": 204,
              "column": 7
            },
            {
              "title": "Logging and observability validation",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 47,
                      "parallelIndex": 1,
                      "status": "passed",
                      "duration": 24,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "📊 Validating logging and observability...\n"
                        },
                        {
                          "text": "✅ Prometheus: 1472 metrics available\n"
                        },
                        {
                          "text": "✅ Grafana: Health endpoint accessible\n"
                        },
                        {
                          "text": "✅ Observability stack validation completed\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:29.637Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "4e2fe7d8be3084a35670-6518f0a86967e8c9630d",
              "file": "regression/full-system.spec.ts",
              "line": 246,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "smoke/container-status.spec.ts",
      "file": "smoke/container-status.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "Container Status Validation - Smoke Tests",
          "file": "smoke/container-status.spec.ts",
          "line": 4,
          "column": 6,
          "specs": [
            {
              "title": "All critical containers are running and healthy",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 334,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ sutazai-backend: Up 6 minutes (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-frontend: Up 2 hours (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-postgres: Up 2 days\nUp 2 hours (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-redis: Up 2 hours\n"
                        },
                        {
                          "text": "✅ sutazai-ollama: Up 2 hours (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-neo4j: Up 2 hours (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-prometheus: Up 2 days (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-grafana: Up 3 days\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.729Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "abc615b73bb39e51d4db-60188f09d8d69052a6b4",
              "file": "smoke/container-status.spec.ts",
              "line": 6,
              "column": 7
            },
            {
              "title": "Agent containers are running",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 88,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "⚠️  sutazai-ai-agent-orchestrator: May not be running (this is acceptable for agent stubs)\n"
                        },
                        {
                          "text": "⚠️  sutazai-resource-arbitration-agent: May not be running (this is acceptable for agent stubs)\n"
                        },
                        {
                          "text": "⚠️  sutazai-task-assignment-coordinator: May not be running (this is acceptable for agent stubs)\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:19.076Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "abc615b73bb39e51d4db-0c68292263fa3d03ccdf",
              "file": "smoke/container-status.spec.ts",
              "line": 35,
              "column": 7
            },
            {
              "title": "Monitoring containers are operational",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 103,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ sutazai-prometheus: Up 2 days (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-grafana: Up 3 days\n"
                        },
                        {
                          "text": "✅ sutazai-cadvisor: Up 2 days (healthy)\n"
                        },
                        {
                          "text": "✅ sutazai-node-exporter: Up 2 days\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:19.168Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "abc615b73bb39e51d4db-9d732e75e0e5e1d16e1e",
              "file": "smoke/container-status.spec.ts",
              "line": 57,
              "column": 7
            },
            {
              "title": "No containers are in restart loop",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 31,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ No containers in restart loops detected\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:19.275Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "abc615b73bb39e51d4db-6e2ae015177bcf1db8bb",
              "file": "smoke/container-status.spec.ts",
              "line": 80,
              "column": 7
            },
            {
              "title": "Docker network connectivity",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "passed",
                      "duration": 23,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "✅ Docker network is properly configured\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:19.309Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "abc615b73bb39e51d4db-f3e24493997090c7db7b",
              "file": "smoke/container-status.spec.ts",
              "line": 100,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "smoke/health-check.spec.ts",
      "file": "smoke/health-check.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "System Health Checks - Smoke Tests",
          "file": "smoke/health-check.spec.ts",
          "line": 3,
          "column": 6,
          "specs": [
            {
              "title": "Backend API health endpoint responds correctly",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 51,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Backend health status: healthy\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.742Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "02ce5a823126566df587-d9213c4d21bc2eff3588",
              "file": "smoke/health-check.spec.ts",
              "line": 5,
              "column": 7
            },
            {
              "title": "Frontend Streamlit application loads",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 1134,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:18.805Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "02ce5a823126566df587-e27379eb5b8735f769df",
              "file": "smoke/health-check.spec.ts",
              "line": 17,
              "column": 7
            },
            {
              "title": "Ollama service is running and has models",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 15,
                      "errors": [],
                      "stdout": [
                        {
                          "text": "Available Ollama models: [ \u001b[32m'tinyllama:latest'\u001b[39m ]\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.047Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "02ce5a823126566df587-7c680fc5f2420499531e",
              "file": "smoke/health-check.spec.ts",
              "line": 28,
              "column": 7
            },
            {
              "title": "Database services are accessible",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 36,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.068Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "02ce5a823126566df587-b5fb7b711bdf850e9c5f",
              "file": "smoke/health-check.spec.ts",
              "line": 40,
              "column": 7
            },
            {
              "title": "Monitoring stack is operational",
              "ok": true,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "passed",
                      "duration": 14,
                      "errors": [],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.109Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "expected"
                }
              ],
              "id": "02ce5a823126566df587-a7146aab5a11b0ce70de",
              "file": "smoke/health-check.spec.ts",
              "line": 54,
              "column": 7
            },
            {
              "title": "Vector databases are running",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 22,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 41,
                          "line": 70
                        },
                        "snippet": "  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 41,
                            "line": 70
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:20.127Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 41,
                        "line": 70
                      }
                    },
                    {
                      "workerIndex": 14,
                      "parallelIndex": 4,
                      "status": "failed",
                      "duration": 50,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 41,
                          "line": 70
                        },
                        "snippet": "  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 41,
                            "line": 70
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:20.861Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 41,
                        "line": 70
                      }
                    },
                    {
                      "workerIndex": 17,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 49,
                      "error": {
                        "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n",
                        "stack": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 41,
                          "line": 70
                        },
                        "snippet": "  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 41,
                            "line": 70
                          },
                          "message": "Error: apiRequestContext.get: connect ECONNREFUSED 127.0.0.1:10103\nCall log:\n\u001b[2m  - → GET http://localhost:10103/health\u001b[22m\n\u001b[2m    - user-agent: Playwright/1.54.2 (x64; ubuntu 24.04) node/22.18\u001b[22m\n\u001b[2m    - accept: */*\u001b[22m\n\u001b[2m    - accept-encoding: gzip,deflate,br\u001b[22m\n\n\n  68 |     \n  69 |     // Test FAISS\n> 70 |     const faissResponse = await request.get('http://localhost:10103/health');\n     |                                         ^\n  71 |     expect(faissResponse.ok()).toBeTruthy();\n  72 |   });\n  73 |\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:70:41"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:21.505Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 41,
                        "line": 70
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "02ce5a823126566df587-cc8dbce01c2f5ed70083",
              "file": "smoke/health-check.spec.ts",
              "line": 64,
              "column": 7
            },
            {
              "title": "Service mesh components are healthy",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 30000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "",
                  "projectName": "",
                  "results": [
                    {
                      "workerIndex": 20,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 31,
                          "line": 77
                        },
                        "snippet": "  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 31,
                            "line": 77
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-08-18T12:53:22.156Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 31,
                        "line": 77
                      }
                    },
                    {
                      "workerIndex": 24,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 31,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 31,
                          "line": 77
                        },
                        "snippet": "  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 31,
                            "line": 77
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 1,
                      "startTime": "2025-08-18T12:53:22.768Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 31,
                        "line": 77
                      }
                    },
                    {
                      "workerIndex": 27,
                      "parallelIndex": 1,
                      "status": "failed",
                      "duration": 27,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31",
                        "location": {
                          "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                          "column": 31,
                          "line": 77
                        },
                        "snippet": "  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                            "column": 31,
                            "line": 77
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  75 |     // Test Kong Gateway\n  76 |     const kongResponse = await request.get('http://localhost:10005/');\n> 77 |     expect(kongResponse.ok()).toBeTruthy();\n     |                               ^\n  78 |     \n  79 |     // Test Consul\n  80 |     const consulResponse = await request.get('http://localhost:10006/v1/status/leader');\n    at /opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts:77:31"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 2,
                      "startTime": "2025-08-18T12:53:23.375Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/opt/sutazaiapp/tests/e2e/smoke/health-check.spec.ts",
                        "column": 31,
                        "line": 77
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "02ce5a823126566df587-87d0b2cd264c46beb6eb",
              "file": "smoke/health-check.spec.ts",
              "line": 74,
              "column": 7
            }
          ]
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-08-18T12:53:18.116Z",
    "duration": 24338.984,
    "expected": 29,
    "skipped": 0,
    "unexpected": 24,
    "flaky": 2
  }
}