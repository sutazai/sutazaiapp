#!/usr/bin/env python3
"""
import logging

logger = logging.getLogger(__name__)
Simple test to verify the JWT vulnerability fix in auth/jwt-service/main.py
Tests that verify=False has been removed and signature verification is enforced
"""

import sys
import os

def check_jwt_service_file():
    """Check that jwt-service/main.py no longer has verify=False"""
    jwt_service_path = "/opt/sutazaiapp/auth/jwt-service/main.py"
    
    logger.info("Checking JWT Service for security vulnerabilities...")
    logger.info(f"File: {jwt_service_path}")
    logger.info("-" * 60)
    
    with open(jwt_service_path, 'r') as f:
        content = f.read()
        lines = content.split('\n')
    
    vulnerabilities_found = []
    
    # Check for verify=False
    for line_num, line in enumerate(lines, 1):
        if 'jwt.decode' in line and 'verify=False' in line:
            vulnerabilities_found.append({
                'line': line_num,
                'issue': 'JWT decode with verify=False (signature bypass)',
                'code': line.strip()
            })
    
    # Check for verify_signature=False (another variant)
    for line_num, line in enumerate(lines, 1):
        if 'jwt.decode' in line and 'verify_signature=False' in line:
            vulnerabilities_found.append({
                'line': line_num,
                'issue': 'JWT decode with verify_signature=False (signature bypass)',
                'code': line.strip()
            })
    
    # Check that JWT_SECRET is loaded from environment
    jwt_secret_check = False
    for line in lines:
        if "JWT_SECRET = os.getenv('JWT_SECRET')" in line:
            jwt_secret_check = True
            break
    
    # Check for hardcoded secrets
    hardcoded_secrets = []
    for line_num, line in enumerate(lines, 1):
        if 'JWT_SECRET = ' in line and 'os.getenv' not in line and 'os.environ' not in line:
            if not line.strip().startswith('#'):
                hardcoded_secrets.append({
                    'line': line_num,
                    'issue': 'Hardcoded JWT secret',
                    'code': line.strip()
                })
    
    # Report results
    if vulnerabilities_found:
        logger.error("‚ùå CRITICAL VULNERABILITIES FOUND:")
        for vuln in vulnerabilities_found:
            logger.info(f"   Line {vuln['line']}: {vuln['issue']}")
            logger.info(f"   Code: {vuln['code']}")
        return False
    else:
        logger.info("‚úÖ No jwt.decode with verify=False found")
    
    if not jwt_secret_check:
        logger.info("‚ö†Ô∏è  JWT_SECRET not loaded from environment variables")
        return False
    else:
        logger.info("‚úÖ JWT_SECRET properly loaded from environment")
    
    if hardcoded_secrets:
        logger.info("‚ùå HARDCODED SECRETS FOUND:")
        for secret in hardcoded_secrets:
            logger.info(f"   Line {secret['line']}: {secret['issue']}")
            logger.info(f"   Code: {secret['code']}")
        return False
    else:
        logger.info("‚úÖ No hardcoded JWT secrets found")
    
    # Check that proper error handling exists
    has_expired_handling = 'jwt.ExpiredSignatureError' in content
    has_invalid_handling = 'jwt.InvalidTokenError' in content
    
    if has_expired_handling and has_invalid_handling:
        logger.error("‚úÖ Proper JWT error handling implemented")
    else:
        logger.error("‚ö†Ô∏è  Missing complete JWT error handling")
    
    return True

def check_all_jwt_decode_usage():
    """Check all jwt.decode usage across the codebase"""
    logger.info("\n" + "=" * 60)
    logger.info("Scanning entire codebase for jwt.decode usage...")
    logger.info("-" * 60)
    
    import subprocess
    
    # Find all Python files with jwt.decode
    result = subprocess.run(
        ['grep', '-r', '--include=*.py', 'jwt.decode', '/opt/sutazaiapp'],
        capture_output=True,
        text=True
    )
    
    lines = result.stdout.strip().split('\n') if result.stdout else []
    
    vulnerable_files = []
    for line in lines:
        if 'verify=False' in line or 'verify_signature=False' in line:
            if not line.startswith('#') and 'test' not in line.lower():
                vulnerable_files.append(line)
    
    if vulnerable_files:
        logger.info("‚ùå VULNERABLE JWT DECODE FOUND IN:")
        for file_line in vulnerable_files:
            logger.info(f"   {file_line}")
        return False
    else:
        logger.info(f"‚úÖ Checked {len(lines)} jwt.decode instances - no verify=False found")
        return True

def main():
    """Run all checks"""
    logger.info("=" * 60)
    logger.info("JWT SECURITY VULNERABILITY CHECK")
    logger.info("=" * 60)
    
    checks_passed = []
    
    # Check 1: JWT Service File
    check1 = check_jwt_service_file()
    checks_passed.append(("JWT Service Security", check1))
    
    # Check 2: Entire Codebase
    check2 = check_all_jwt_decode_usage()
    checks_passed.append(("Codebase JWT Usage", check2))
    
    # Summary
    logger.info("\n" + "=" * 60)
    logger.info("SECURITY CHECK SUMMARY")
    logger.info("=" * 60)
    
    all_passed = True
    for check_name, passed in checks_passed:
        status = "‚úÖ PASSED" if passed else "‚ùå FAILED"
        logger.info(f"{check_name}: {status}")
        if not passed:
            all_passed = False
    
    logger.info("-" * 60)
    
    if all_passed:
        logger.info("üîí JWT VULNERABILITY HAS BEEN FIXED!")
        logger.info("   - No jwt.decode with verify=False found")
        logger.info("   - JWT_SECRET loaded from environment")
        logger.error("   - Proper error handling in place")
        return 0
    else:
        logger.info("‚ö†Ô∏è  JWT SECURITY ISSUES REMAIN!")
        logger.info("   Please review and fix the issues above")
        return 1

if __name__ == "__main__":
    sys.exit(main())