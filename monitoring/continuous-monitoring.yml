# SutazAI Continuous Monitoring Configuration
# Prometheus configuration for comprehensive system monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'sutazai-monitoring'
    environment: 'production'

# Alerting configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - localhost:10203

# Rule files for alerts
rule_files:
  - '/etc/prometheus/rules/*.yml'

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:10200']
        labels:
          service: 'prometheus'

  # Backend API monitoring
  - job_name: 'backend-api'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:10010']
        labels:
          service: 'backend'
          tier: 'api'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'backend-primary'

  # Frontend monitoring
  - job_name: 'frontend'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:10011']
        labels:
          service: 'frontend'
          tier: 'ui'

  # Hardware Resource Optimizer
  - job_name: 'hardware-optimizer'
    metrics_path: '/metrics'
    scrape_interval: 10s  # More frequent for hardware metrics
    static_configs:
      - targets: ['localhost:11110']
        labels:
          service: 'hardware-optimizer'
          tier: 'optimization'
          critical: 'true'

  # AI Agent Orchestrator
  - job_name: 'ai-orchestrator'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:8589']
        labels:
          service: 'ai-orchestrator'
          tier: 'orchestration'

  # Ollama Integration
  - job_name: 'ollama-integration'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:8090']
        labels:
          service: 'ollama'
          tier: 'ai-inference'

  # Database monitoring - PostgreSQL
  - job_name: 'postgresql'
    static_configs:
      - targets: ['localhost:10219']
        labels:
          service: 'postgresql'
          tier: 'database'
          database_type: 'relational'

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['localhost:10218']
        labels:
          service: 'redis'
          tier: 'cache'
          database_type: 'key-value'

  # Neo4j monitoring
  - job_name: 'neo4j'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:10002']
        labels:
          service: 'neo4j'
          tier: 'database'
          database_type: 'graph'

  # Vector databases
  - job_name: 'vector-databases'
    static_configs:
      - targets: 
          - 'localhost:10101'  # Qdrant
          - 'localhost:10100'  # ChromaDB
          - 'localhost:10103'  # FAISS
        labels:
          tier: 'database'
          database_type: 'vector'

  # RabbitMQ monitoring
  - job_name: 'rabbitmq'
    metrics_path: '/metrics'
    static_configs:
      - targets: ['localhost:10007']
        labels:
          service: 'rabbitmq'
          tier: 'messaging'

  # Node Exporter for system metrics
  - job_name: 'node'
    static_configs:
      - targets: ['localhost:10220']
        labels:
          service: 'node-exporter'
          tier: 'infrastructure'

  # cAdvisor for container metrics
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['localhost:10221']
        labels:
          service: 'cadvisor'
          tier: 'infrastructure'

  # Blackbox exporter for endpoint monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - http://localhost:10010/health
          - http://localhost:10011
          - http://localhost:11110/health
          - http://localhost:8589/health
          - http://localhost:8090/health
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: localhost:10223

  # Service discovery for Docker containers
  - job_name: 'docker-containers'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 30s
    relabel_configs:
      # Only keep containers with prometheus labels
      - source_labels: [__meta_docker_container_label_prometheus_scrape]
        regex: 'true'
        action: keep
      # Use container name as instance
      - source_labels: [__meta_docker_container_name]
        target_label: instance
      # Extract service name from label
      - source_labels: [__meta_docker_container_label_service]
        target_label: service
      # Extract tier from label
      - source_labels: [__meta_docker_container_label_tier]
        target_label: tier

  # Kubernetes service discovery (if deployed to K8s)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      # Only scrape pods with annotation
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Use annotation for metrics path
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # Use annotation for scrape port
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add namespace label
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      # Add pod name label
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

# Remote write for long-term storage
remote_write:
  - url: "http://localhost:9090/api/v1/write"
    remote_timeout: 30s
    queue_config:
      capacity: 10000
      max_shards: 100
      min_shards: 1
      max_samples_per_send: 1000
      batch_send_deadline: 10s
      min_backoff: 30ms
      max_backoff: 100ms

# Remote read for historical data
remote_read:
  - url: "http://localhost:9090/api/v1/read"
    read_recent: true