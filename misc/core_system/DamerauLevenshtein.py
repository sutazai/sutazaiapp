# SPDX-License-Identifier: MIT
# Copyright (C) 2025 Max Bachmann
# This file is generated by tools/generate_python.py
from __future__ import annotations

import importlib
import os
import warnings


def safe_import(module_name, fallback_func=None):
    """
    Safely import a module with optional fallback function

    Args:
        module_name (str): Name of the module to import
        fallback_func (callable, optional): Function to use if import fails

    Returns:
        module or fallback function
    """
    try:
        return importlib.import_module(module_name)
    except ImportError:
        warnings.warn(f"Could not import {module_name}. Using fallback.")
        return fallback_func


# Attempt to import RapidFuzz components
try:
    from rapidfuzz._feature_detector import AVX2, SSE2, supports
except ImportError:
    warnings.warn("RapidFuzz feature detection not available")
    AVX2, SSE2, supports = None, None, lambda x: False


# Define fallback distance calculation functions
def fallback_distance(s1, s2):
    """Simple Damerau-Levenshtein distance calculation as fallback"""
    return sum(c1 != c2 for c1, c2 in zip(s1, s2)) + abs(len(s1) - len(s2))


def fallback_normalized_distance(s1, s2):
    """Simple normalized Damerau-Levenshtein distance calculation"""
    max_len = max(len(s1), len(s2))
    return fallback_distance(s1, s2) / max_len if max_len > 0 else 0.0


# Attempt to import optimized implementations
_impl = os.environ.get("RAPIDFUZZ_IMPLEMENTATION", "py")


def get_distance_implementation():
    """
    Get the most appropriate Damerau-Levenshtein distance implementation

    Returns:
        dict of distance calculation functions
    """
    implementations = {
        "py": {
            "distance": fallback_distance,
            "normalized_distance": fallback_normalized_distance,
            "similarity": lambda s1, s2: 1
            - fallback_normalized_distance(s1, s2),
            "normalized_similarity": lambda s1, s2: 1
            - fallback_normalized_distance(s1, s2),
        }
    }

    # Try to add optimized implementations if available
    if supports and supports(AVX2):
        try:
            from rapidfuzz.distance.metrics_cpp_avx2 import (
                damerau_levenshtein_distance,
                damerau_levenshtein_normalized_distance,
                damerau_levenshtein_normalized_similarity,
                damerau_levenshtein_similarity,
            )

            implementations["cpp_avx2"] = {
                "distance": damerau_levenshtein_distance,
                "normalized_distance": damerau_levenshtein_normalized_distance,
                "similarity": damerau_levenshtein_similarity,
                "normalized_similarity": damerau_levenshtein_normalized_similarity,
            }
        except ImportError:
            warnings.warn("AVX2 optimized implementation not available")

    if supports and supports(SSE2):
        try:
            from rapidfuzz.distance.metrics_cpp_sse2 import (
                damerau_levenshtein_distance,
                damerau_levenshtein_normalized_distance,
                damerau_levenshtein_normalized_similarity,
                damerau_levenshtein_similarity,
            )

            implementations["cpp_sse2"] = {
                "distance": damerau_levenshtein_distance,
                "normalized_distance": damerau_levenshtein_normalized_distance,
                "similarity": damerau_levenshtein_similarity,
                "normalized_similarity": damerau_levenshtein_normalized_similarity,
            }
        except ImportError:
            warnings.warn("SSE2 optimized implementation not available")

    return implementations.get(_impl, implementations["py"])


# Select the most appropriate implementation
_distance_impl = get_distance_implementation()

# Export standard interface
distance = _distance_impl["distance"]
normalized_distance = _distance_impl["normalized_distance"]
similarity = _distance_impl["similarity"]
normalized_similarity = _distance_impl["normalized_similarity"]

__all__ = [
    "distance",
    "normalized_distance",
    "normalized_similarity",
    "similarity",
]
