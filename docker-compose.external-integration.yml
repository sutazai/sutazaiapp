version: '3.8'

services:
  # Service Discovery Hub
  sutazai-service-discovery:
    build:
      context: .
      dockerfile: docker/Dockerfile.service-discovery
    container_name: sutazai-service-discovery
    ports:
      - "10000:8080"
    environment:
      - DISCOVERY_MODE=auto
      - SCAN_INTERVAL=300
      - LOG_LEVEL=INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/discovered-services:/app/discovered
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway for External Services
  sutazai-api-gateway:
    image: kong:3.4-alpine
    container_name: sutazai-api-gateway
    ports:
      - "10001:8000"  # HTTP proxy
      - "10002:8443"  # HTTPS proxy
      - "10003:8001"  # Admin API
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
    volumes:
      - ./configs/kong:/kong/declarative
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Universal Metrics Aggregator
  sutazai-metrics-aggregator:
    image: prom/prometheus:latest
    container_name: sutazai-metrics-aggregator
    ports:
      - "10010:9090"
    volumes:
      - ./configs/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Unified Logging Collector
  sutazai-log-collector:
    image: grafana/loki:2.9.0
    container_name: sutazai-log-collector
    ports:
      - "10020:3100"
    volumes:
      - ./configs/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Mesh Proxy (for advanced integration)
  sutazai-service-mesh:
    image: envoyproxy/envoy:v1.28-latest
    container_name: sutazai-service-mesh
    ports:
      - "10030:10000"  # Proxy port
      - "10031:9901"   # Admin port
    volumes:
      - ./configs/envoy/envoy.yaml:/etc/envoy/envoy.yaml
    command: /usr/local/bin/envoy -c /etc/envoy/envoy.yaml
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9901/clusters"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Example PostgreSQL Adapter (Template for other services)
  sutazai-postgres-adapter:
    build:
      context: ./docker/adapters/postgres
      dockerfile: Dockerfile
    container_name: sutazai-postgres-adapter
    ports:
      - "10100:8080"
    environment:
      - TARGET_HOST=${POSTGRES_HOST:-postgres}
      - TARGET_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - sutazai-metrics-aggregator

  # Example Redis Adapter
  sutazai-redis-adapter:
    build:
      context: ./docker/adapters
      dockerfile: Dockerfile.service-adapter
    container_name: sutazai-redis-adapter
    ports:
      - "10110:8080"
    environment:
      - TARGET_HOST=${REDIS_HOST:-redis}
      - TARGET_PORT=${REDIS_PORT:-6379}
      - SERVICE_TYPE=redis
      - LOG_LEVEL=INFO
      - METRICS_ENABLED=true
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "./health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Central Configuration Service
  sutazai-config-service:
    image: consul:1.16
    container_name: sutazai-config-service
    ports:
      - "10040:8500"  # HTTP API
      - "10041:8600"  # DNS
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    volumes:
      - consul_data:/consul/data
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    networks:
      - sutazai-integration
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Integration Dashboard
  sutazai-integration-dashboard:
    image: grafana/grafana:latest
    container_name: sutazai-integration-dashboard
    ports:
      - "10050:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:10050
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - sutazai-integration
    depends_on:
      - sutazai-metrics-aggregator
      - sutazai-log-collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  sutazai-integration:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  prometheus_data:
  loki_data:
  consul_data:
  grafana_data: