version: '3.8'

networks:
  sutazai-network:
    external: true

volumes:
  keycloak_data:
  kong_data:
  vault_data:

services:
  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: sutazai-keycloak
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER:-sutazai}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 10050
      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-sutazai_auth_admin}
      KC_LOG_LEVEL: INFO
      KC_PROXY: edge
      KC_PROXY_ADDRESS_FORWARDING: true
      TZ: ${TZ:-UTC}
    ports:
      - 10050:8080
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./auth/keycloak/themes:/opt/keycloak/themes
      - ./auth/keycloak/providers:/opt/keycloak/providers
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sutazai-network
    command: start --optimized
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Kong API Gateway with Authentication
  kong:
    image: kong:3.6-alpine
    container_name: sutazai-kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_LOG_LEVEL: info
      KONG_PLUGINS: bundled,oidc,oauth2,jwt,rate-limiting,cors,prometheus
      TZ: ${TZ:-UTC}
    ports:
      - 10051:8000  # Kong proxy
      - 10052:8001  # Kong admin
    volumes:
      - kong_data:/usr/local/kong/declarative
      - ./auth/kong/kong.yml:/kong/declarative/kong.yml:ro
      - ./auth/kong/plugins:/kong/plugins:ro
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 256M

  # HashiCorp Vault for Secret Management
  vault:
    image: hashicorp/vault:1.15.4
    container_name: sutazai-vault
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-sutazai_vault_root}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {
            "file": {
              "path": "/vault/data"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": true
            }
          },
          "ui": true,
          "api_addr": "http://127.0.0.1:8200",
          "cluster_addr": "http://127.0.0.1:8201"
        }
      TZ: ${TZ:-UTC}
    ports:
      - 10053:8200
    volumes:
      - vault_data:/vault/data
      - ./auth/vault/policies:/vault/policies:ro
    cap_add:
      - IPC_LOCK
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # JWT Token Service
  jwt-service:
    build:
      context: ./auth/jwt-service
      dockerfile: Dockerfile
    container_name: sutazai-jwt-service
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: sutazai-auth
      JWT_AUDIENCE: sutazai-api
      JWT_EXPIRY: 3600
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: sutazai
      KEYCLOAK_CLIENT_ID: sutazai-backend
      KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-sutazai_vault_root}
      TZ: ${TZ:-UTC}
      LOG_LEVEL: INFO
    ports:
      - 10054:8080
    volumes:
      - ./auth/jwt-service/keys:/app/keys
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Service Account Manager
  service-account-manager:
    build:
      context: ./auth/service-account-manager
      dockerfile: Dockerfile
    container_name: sutazai-service-account-manager
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: sutazai
      KEYCLOAK_ADMIN_CLIENT_ID: admin-cli
      KEYCLOAK_ADMIN_USERNAME: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-sutazai_auth_admin}
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-sutazai_vault_root}
      TZ: ${TZ:-UTC}
      LOG_LEVEL: INFO
    ports:
      - 11015:8080
    volumes:
      - ./auth/service-accounts:/app/service-accounts
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      vault:
        condition: service_healthy
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # RBAC Policy Engine
  rbac-policy-engine:
    build:
      context: ./auth/rbac-engine
      dockerfile: Dockerfile
    container_name: sutazai-rbac-engine
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      REDIS_URL: redis://redis:6379/0
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: sutazai
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: ${VAULT_ROOT_TOKEN:-sutazai_vault_root}
      TZ: ${TZ:-UTC}
      LOG_LEVEL: INFO
    ports:
      - 10056:8080
    volumes:
      - ./auth/rbac/policies:/app/policies
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M