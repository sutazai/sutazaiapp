# ============================================================================
# SUTAZAI MASTER TEMPLATE: Node.js Service Base
# ============================================================================
# Purpose: Production-ready Node.js service base template
# Security: Non-root user, minimal attack surface
# Performance: Optimized for Node.js applications with npm caching
# Compatibility: Node.js LTS with TypeScript support
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

# Use official Node.js LTS Alpine image for minimal size
FROM node:20-alpine as base

# ============================================================================
# SYSTEM CONFIGURATION & SECURITY HARDENING
# ============================================================================

# Install essential system packages
RUN apk add --no-cache \
        curl \
        git \
        ca-certificates \
        dumb-init \
        && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1000 -S appuser && \
    adduser -u 1000 -S appuser -G appuser

# ============================================================================
# APPLICATION DIRECTORY SETUP
# ============================================================================

# Create application directory with proper ownership
RUN mkdir -p /app /app/logs /app/temp && \
    chown -R appuser:appuser /app

# Set working directory
WORKDIR /app

# ============================================================================
# NODE.JS DEPENDENCIES INSTALLATION
# ============================================================================

# Copy package files for dependency installation
COPY --chown=appuser:appuser package*.json ./

# Install dependencies as root for system-level packages
RUN npm config set fund false && \
    npm config set audit-level moderate && \
    npm ci --only=production --no-optional && \
    npm cache clean --force

# ============================================================================
# APPLICATION CODE SETUP
# ============================================================================

# Copy application code and set ownership
COPY --chown=appuser:appuser . /app/

# Switch to non-root user for all subsequent operations
USER appuser

# Create essential directories for service operation
RUN mkdir -p /app/logs /app/temp /app/uploads /app/cache

# ============================================================================
# HEALTH CHECK & MONITORING
# ============================================================================

# Add health check endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# ============================================================================
# RUNTIME CONFIGURATION
# ============================================================================

# Expose default Node.js service port
EXPOSE 3000

# Set Node.js environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    HOST=0.0.0.0 \
    LOG_LEVEL=info

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Default command for Node.js services
CMD ["node", "server.js"]

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
# 1. FROM sutazai/nodejs-service-base:latest
# 2. Copy your package.json and package-lock.json
# 3. Override CMD if needed: CMD ["node", "your-app.js"]
# 4. Build: docker build -t your-service -f Dockerfile.nodejs-service-base .
#
# Required Files:
# - package.json with dependencies
# - server.js or main application file
# - Optional: .dockerignore with node_modules
#
# Security Features:
# - Runs as non-root user (uid/gid 1000)
# - Alpine Linux base for minimal attack surface
# - No development dependencies in production
# - Proper signal handling with dumb-init
#
# Performance Features:
# - npm ci for faster, reliable installs
# - Layer optimization for Docker builds
# - Cache cleanup to reduce image size
# - Production-only dependencies
# ============================================================================