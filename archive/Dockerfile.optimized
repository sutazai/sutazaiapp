# Multi-stage optimized Dockerfile for SutazAI Backend

# Build stage with compilation dependencies
FROM python:3.11-slim AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    curl \
    git \
    libpq-dev \
    libhdf5-dev \
    libssl-dev \
    libffi-dev \
    libblas-dev \
    liblapack-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements-optimized.txt .

# Create wheels for faster installation
RUN pip install --upgrade pip wheel setuptools && \
    pip wheel --no-cache-dir --no-deps --wheel-dir /app/wheels -r requirements-optimized.txt

# Runtime stage - minimal image
FROM python:3.11-slim AS runtime

WORKDIR /app

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    libpq5 \
    curl \
    libhdf5-103 \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* && \
    # Create non-root user
    groupadd -r sutazai && \
    useradd -r -g sutazai -d /app -s /sbin/nologin sutazai

# Copy wheels from builder
COPY --from=builder /app/wheels /app/wheels
COPY requirements-optimized.txt .

# Install from wheels (much faster)
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --no-index --find-links /app/wheels -r requirements-optimized.txt && \
    rm -rf /app/wheels

# Copy application code
COPY --chown=sutazai:sutazai . .

# Create necessary directories
RUN mkdir -p /app/logs /app/uploads /app/data /app/cache && \
    chown -R sutazai:sutazai /app

# Performance optimizations
ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PYTHONDONTWRITEBYTECODE=1 \
    # Async optimizations
    PYTHONASYNCIODEBUG=0 \
    # Uvloop for faster async
    UVLOOP_USE_LIBUV=1 \
    # NumPy optimizations
    OMP_NUM_THREADS=4 \
    OPENBLAS_NUM_THREADS=4 \
    MKL_NUM_THREADS=4 \
    # Garbage collection tuning
    PYTHONGC="100,10,10"

# Switch to non-root user
USER sutazai

# Expose port
EXPOSE 8000

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Production server with optimizations
CMD ["uvicorn", "app.main_optimized:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--loop", "uvloop", \
     "--lifespan", "on", \
     "--access-log", \
     "--use-colors", \
     "--proxy-headers", \
     "--forwarded-allow-ips", "*"]

# Development stage
FROM runtime AS development

USER root

# Install development tools
RUN pip install --no-cache-dir \
    ipython \
    ipdb \
    pytest \
    pytest-asyncio \
    pytest-cov \
    pytest-benchmark \
    ruff \
    black \
    mypy

USER sutazai

# Enable hot reload for development
CMD ["uvicorn", "app.main_optimized:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--reload", \
     "--loop", "uvloop"]

# Test stage
FROM runtime AS test

USER root

# Install test dependencies
COPY requirements-test.txt .
RUN pip install --no-cache-dir -r requirements-test.txt || echo "No test requirements"

# Create test directories
RUN mkdir -p /app/test-results /app/htmlcov && \
    chown -R sutazai:sutazai /app/test-results /app/htmlcov

USER sutazai

# Run tests with coverage
CMD ["pytest", "-v", \
     "--cov=app", \
     "--cov-report=term-missing", \
     "--cov-report=html:/app/htmlcov", \
     "--cov-report=xml:/app/test-results/coverage.xml", \
     "--benchmark-only"]

# Profiling stage
FROM runtime AS profiling

USER root

# Install profiling tools
RUN pip install --no-cache-dir \
    py-spy \
    memory-profiler \
    line-profiler \
    scalene

USER sutazai

# Run with profiling
CMD ["py-spy", "record", "-o", "/app/logs/profile.svg", "--", \
     "uvicorn", "app.main_optimized:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "1"]