#!/bin/bash

# JWT Security Vulnerability Check Script
# Prevents jwt.decode with verify=False from being introduced
# Should be run in CI/CD pipeline before deployment

set -e


# Signal handlers for graceful shutdown
cleanup_and_exit() {
    local exit_code="${1:-0}"
    echo "Script interrupted, cleaning up..." >&2
    # Clean up any background processes
    jobs -p | xargs -r kill 2>/dev/null || true
    exit "$exit_code"
}

trap 'cleanup_and_exit 130' INT
trap 'cleanup_and_exit 143' TERM
trap 'cleanup_and_exit 1' ERR

echo "======================================"
echo "JWT SECURITY VULNERABILITY CHECK"
echo "======================================"
echo "Scanning for jwt.decode with verify=False..."
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Counter for vulnerabilities
VULNERABILITIES=0

# Search for jwt.decode with verify=False (excluding test files that check for it)
echo "Checking Python files for insecure JWT verification..."
RESULTS=$(grep -r "jwt\.decode.*verify\s*=\s*False" --include="*.py" /opt/sutazaiapp 2>/dev/null | grep -v "test.*vulnerability\|check.*jwt\|security.*test" | grep -v "if.*verify=False.*in" || true)

if [ ! -z "$RESULTS" ]; then
    echo -e "${RED}❌ CRITICAL: JWT signature bypass vulnerability found!${NC}"
    echo ""
    echo "Vulnerable code locations:"
    echo "$RESULTS" | while IFS= read -r line; do
        echo -e "${RED}  - $line${NC}"
        ((VULNERABILITIES++))
    done
    echo ""
fi

# Also check for verify_signature=False variant (excluding test files)
RESULTS2=$(grep -r "jwt\.decode.*verify_signature\s*=\s*False" --include="*.py" /opt/sutazaiapp 2>/dev/null | grep -v "test.*vulnerability\|check.*jwt\|security.*test" | grep -v "if.*verify_signature=False.*in" || true)

if [ ! -z "$RESULTS2" ]; then
    echo -e "${RED}❌ CRITICAL: JWT signature bypass vulnerability found (verify_signature variant)!${NC}"
    echo ""
    echo "Vulnerable code locations:"
    echo "$RESULTS2" | while IFS= read -r line; do
        echo -e "${RED}  - $line${NC}"
        ((VULNERABILITIES++))
    done
    echo ""
fi

# Check for options={"verify_signature": False} pattern
RESULTS3=$(grep -r 'options\s*=.*verify_signature.*False' --include="*.py" /opt/sutazaiapp 2>/dev/null || true)

if [ ! -z "$RESULTS3" ]; then
    echo -e "${YELLOW}⚠️  WARNING: Potential JWT verification bypass found (options variant)${NC}"
    echo ""
    echo "Please review these locations:"
    echo "$RESULTS3" | while IFS= read -r line; do
        echo -e "${YELLOW}  - $line${NC}"
    done
    echo ""
    echo "Note: options={'verify_exp': False} is acceptable for expired token handling"
    echo ""
fi

# Check for hardcoded JWT secrets
echo "Checking for hardcoded JWT secrets..."
HARDCODED=$(grep -r "JWT_SECRET\s*=\s*['\"]" --include="*.py" /opt/sutazaiapp 2>/dev/null | grep -v "os.getenv\|os.environ\|test\|example" || true)

if [ ! -z "$HARDCODED" ]; then
    echo -e "${RED}❌ SECURITY ISSUE: Hardcoded JWT secrets found!${NC}"
    echo ""
    echo "Hardcoded secrets in:"
    echo "$HARDCODED" | while IFS= read -r line; do
        echo -e "${RED}  - $line${NC}"
        ((VULNERABILITIES++))
    done
    echo ""
fi

# Summary
echo "======================================"
echo "SECURITY CHECK SUMMARY"
echo "======================================"

if [ "$VULNERABILITIES" -gt 0 ] || [ ! -z "$RESULTS" ] || [ ! -z "$RESULTS2" ] || [ ! -z "$HARDCODED" ]; then
    echo -e "${RED}❌ FAILED: Security vulnerabilities detected!${NC}"
    echo ""
    echo "Actions required:"
    echo "1. Remove all jwt.decode calls with verify=False"
    echo "2. Ensure JWT_SECRET is loaded from environment variables"
    echo "3. Implement proper error handling for invalid tokens"
    echo ""
    echo "Example secure code:"
    echo "  payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])"
    echo ""
    exit 1
else
    echo -e "${GREEN}✅ PASSED: No JWT security vulnerabilities found${NC}"
    echo ""
    echo "Security checks passed:"
    echo "  ✅ No jwt.decode with verify=False"
    echo "  ✅ No hardcoded JWT secrets"
    echo "  ✅ Signature verification enforced"
    echo ""
    exit 0
fi