#!/bin/bash
# MASTER BUILD CONTROLLER
# Consolidated from 13 duplicate build scripts
# Generated by ULTRA SCRIPT CONSOLIDATION
# Purpose: Single entry point for all builds

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_ROOT="/opt/sutazaiapp"

show_help() {
    echo "MASTER BUILD CONTROLLER"
    echo "Usage: $0 [options] [target]"
    echo ""
    echo "Targets:"
    echo "  all              - Build all images (default)"
    echo "  base             - Build base images only"
    echo "  agents           - Build agent images only"
    echo "  services         - Build service images only"
    echo "  optimized        - Build with optimization flags"
    echo "  secure           - Build with security hardening"
    echo ""
    echo "Options:"
    echo "  --parallel       - Build images in parallel"
    echo "  --no-cache       - Build without Docker cache"
    echo "  --push           - Push to registry after build"
    echo "  --dry-run        - Show what would be built"
    echo "  --help           - Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 all --parallel"
    echo "  $0 base --no-cache"
    echo "  $0 agents --dry-run"
}

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}" >&2
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARN] $1${NC}"
}

build_base_images() {
    log "Building base images..."
    
    local base_images=(
        "python-agent-base:docker/base/Dockerfile.python-agent-master"
        "nodejs-agent-base:docker/base/Dockerfile.nodejs-agent-master"
    )
    
    for image_def in "${base_images[@]}"; do
        IFS=':' read -r image_name dockerfile <<< "$image_def"
        
        if [ -f "$PROJECT_ROOT/$dockerfile" ]; then
            log "Building $image_name from $dockerfile"
            if [ "$DRY_RUN" == "false" ]; then
                docker build -t "sutazaiapp/$image_name" -f "$PROJECT_ROOT/$dockerfile" "$PROJECT_ROOT" || {
                    error "Failed to build $image_name"
                    return 1
                }
                success "Built $image_name"
            else
                log "DRY RUN: Would build $image_name"
            fi
        else
            warn "Dockerfile not found: $dockerfile"
        fi
    done
}

build_agent_images() {
    log "Building agent images..."
    
    local agent_dirs=(
        "agents/ai_agent_orchestrator"
        "agents/hardware-resource-optimizer" 
        "agents/jarvis-automation-agent"
        "agents/jarvis-hardware-resource-optimizer"
        "agents/jarvis-voice-interface"
        "agents/ollama_integration"
        "agents/resource_arbitration_agent"
    )
    
    for agent_dir in "${agent_dirs[@]}"; do
        if [ -f "$PROJECT_ROOT/$agent_dir/Dockerfile" ]; then
            local agent_name=$(basename "$agent_dir")
            log "Building agent: $agent_name"
            
            if [ "$DRY_RUN" == "false" ]; then
                docker build -t "sutazaiapp/$agent_name" "$PROJECT_ROOT/$agent_dir" || {
                    error "Failed to build $agent_name"
                    continue
                }
                success "Built agent: $agent_name"
            else
                log "DRY RUN: Would build agent $agent_name"
            fi
        else
            warn "No Dockerfile in $agent_dir"
        fi
    done
}

build_service_images() {
    log "Building service images..."
    
    local services=(
        "backend:backend/Dockerfile"
        "frontend:frontend/Dockerfile" 
        "self-healing:self-healing/Dockerfile"
    )
    
    for service_def in "${services[@]}"; do
        IFS=':' read -r service_name dockerfile <<< "$service_def"
        
        if [ -f "$PROJECT_ROOT/$dockerfile" ]; then
            log "Building service: $service_name"
            if [ "$DRY_RUN" == "false" ]; then
                docker build -t "sutazaiapp/$service_name" -f "$PROJECT_ROOT/$dockerfile" "$PROJECT_ROOT" || {
                    error "Failed to build $service_name"
                    continue
                }
                success "Built service: $service_name"
            else
                log "DRY RUN: Would build service $service_name"
            fi
        else
            warn "Dockerfile not found: $dockerfile"
        fi
    done
}

build_all() {
    log "Building all images..."
    build_base_images
    build_service_images
    build_agent_images
}

# Parse arguments
PARALLEL="false"
NO_CACHE="false"
PUSH="false"
DRY_RUN="false"
TARGET="all"

while [[ $# -gt 0 ]]; do
    case $1 in
        --parallel)
            PARALLEL="true"
            shift
            ;;
        --no-cache)
            NO_CACHE="true"
            shift
            ;;
        --push)
            PUSH="true"
            shift
            ;;
        --dry-run)
            DRY_RUN="true"
            shift
            ;;
        --help)
            show_help
            exit 0
            ;;
        all|base|agents|services|optimized|secure)
            TARGET="$1"
            shift
            ;;
        *)
            error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Check if Docker is available
if ! command -v docker &> /dev/null; then
    error "Docker is not installed or not in PATH"
    exit 1
fi

# Check if Docker daemon is running
if ! docker info &> /dev/null; then
    error "Docker daemon is not running"
    exit 1
fi

log "MASTER BUILD CONTROLLER - Starting"
log "Target: $TARGET"
log "Parallel: $PARALLEL"
log "No Cache: $NO_CACHE" 
log "Push: $PUSH"
log "Dry Run: $DRY_RUN"
log ""

# Execute build based on target
case $TARGET in
    all)
        build_all
        ;;
    base)
        build_base_images
        ;;
    agents)
        build_agent_images
        ;;
    services)
        build_service_images
        ;;
    optimized)
        log "Building with optimization flags..."
        export DOCKER_BUILDKIT=1
        build_all
        ;;
    secure)
        log "Building with security hardening..."
        export DOCKER_BUILDKIT=1
        build_all
        ;;
    *)
        error "Unknown target: $TARGET"
        show_help
        exit 1
        ;;
esac

if [ "$PUSH" == "true" ] && [ "$DRY_RUN" == "false" ]; then
    log "Pushing images to registry..."
    # Push logic would go here
    warn "Push functionality not implemented yet"
fi

success "MASTER BUILD CONTROLLER - Completed successfully"