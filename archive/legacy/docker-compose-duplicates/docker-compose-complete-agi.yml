version: '3.9'

x-common-variables: &common-variables
  TZ: ${TZ:-UTC}
  SUTAZAI_ENV: production

x-ollama-config: &ollama-config
  OLLAMA_BASE_URL: http://ollama:11434
  OLLAMA_API_KEY: local

x-vector-config: &vector-config
  CHROMADB_URL: http://chromadb:8000
  QDRANT_URL: http://qdrant:6333
  REDIS_URL: redis://redis:6379

networks:
  sutazai-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  qdrant_data:
  ollama_data:
  neo4j_data:
  prometheus_data:
  grafana_data:

services:
  # Core Infrastructure
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sutazai_password}
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network

  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network

  # Knowledge Graph Database
  neo4j:
    image: neo4j:5.13-community
    container_name: sutazai-neo4j
    restart: unless-stopped
    environment:
      NEO4J_AUTH: neo4j/sutazai_neo4j_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - sutazai-network

  # Vector Databases
  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    restart: unless-stopped
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthenticationServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_API_KEY:-test-token}
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["*"]
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sutazai-network

  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__LOG_LEVEL: INFO
    ports:
      - "6333:6333"
      - "6334:6334"
    healthcheck:
      test: ["CMD-SHELL", "echo 'Qdrant running' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - sutazai-network

  # Model Serving
  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
      - ./models:/models
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS="*"
    networks:
      - sutazai-network
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Enhanced Backend with AGI Brain
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.agi
    container_name: sutazai-backend
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./data:/data
      - ./logs:/logs
    environment:
      <<: [*common-variables, *ollama-config, *vector-config]
      DATABASE_URL: postgresql://sutazai:sutazai_password@postgres:5432/sutazai
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: sutazai_neo4j_password
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - sutazai-network
    command: uvicorn app.main_agi:app --host 0.0.0.0 --port 8000 --reload

  # Enhanced Frontend
  frontend-agi:
    build:
      context: ./frontend
      dockerfile: Dockerfile.enhanced
    container_name: sutazai-frontend-agi
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - ./data:/data
    environment:
      <<: *common-variables
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - sutazai-network
    command: streamlit run app_enhanced.py --server.port 8501 --server.address 0.0.0.0

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: sutazai-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - sutazai-network

  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=sutazai_grafana
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3003:3000"
    depends_on:
      - prometheus
    networks:
      - sutazai-network