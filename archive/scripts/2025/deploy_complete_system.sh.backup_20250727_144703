#!/bin/bash
# 🚀 SutazAI Complete Enterprise AGI/ASI System Deployment
# Comprehensive deployment script for 50+ AI services with enterprise features
# Integrates with existing frontend, backend, models and monitoring stack

set -euo pipefail

# ===============================================
# 🔧 SYSTEM CONFIGURATION
# ===============================================

PROJECT_ROOT="/opt/sutazaiapp"
COMPOSE_FILE="docker-compose.yml"
LOG_FILE="logs/deployment_$(date +%Y%m%d_%H%M%S).log"
ENV_FILE=".env"
HEALTH_CHECK_TIMEOUT=300
SERVICE_START_DELAY=15
MAX_RETRIES=3
DEPLOYMENT_VERSION="17.0"

# Get dynamic system information
LOCAL_IP=$(hostname -I | awk '{print $1}' || echo "localhost")
AVAILABLE_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $7/1024}' || echo "8")
CPU_CORES=$(nproc || echo "4")
AVAILABLE_DISK=$(df -BG "$PROJECT_ROOT" | awk 'NR==2 {print $4}' | tr -d 'G' || echo "50")

# Color schemes for enterprise output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
NC='\033[0m'

# Service deployment groups optimized for our existing infrastructure
CORE_SERVICES=("postgres" "redis" "neo4j")
VECTOR_SERVICES=("chromadb" "qdrant" "faiss")
AI_MODEL_SERVICES=("ollama")
BACKEND_SERVICES=("backend-agi")
FRONTEND_SERVICES=("frontend-agi")
MONITORING_SERVICES=("prometheus" "grafana" "loki" "promtail")

# AI Agents - organized by deployment priority
CORE_AI_AGENTS=("autogpt" "crewai" "letta")
CODE_AGENTS=("aider" "gpt-engineer" "tabbyml" "semgrep" "awesome-code-ai" "code-improver")
WORKFLOW_AGENTS=("langflow" "flowise" "n8n" "dify" "bigagi")
SPECIALIZED_AGENTS=("agentgpt" "privategpt" "llamaindex" "shellgpt" "pentestgpt" "finrobot" "realtimestt")
AUTOMATION_AGENTS=("browser-use" "skyvern" "localagi" "localagi-enhanced" "localagi-advanced" "documind" "opendevin")
ML_FRAMEWORK_SERVICES=("pytorch" "tensorflow" "jax" "fsdp")
ADVANCED_SERVICES=("litellm" "health-monitor" "autogen" "agentzero" "context-framework" "service-hub" "mcp-server" "jarvis-ai" "api-gateway" "task-scheduler" "model-optimizer")

# ===============================================
# 📋 ENHANCED LOGGING SYSTEM
# ===============================================

setup_logging() {
    mkdir -p "$(dirname "$LOG_FILE")"
    mkdir -p logs/{agents,system,models,deployment}
    exec 1> >(tee -a "$LOG_FILE")
    exec 2> >(tee -a "$LOG_FILE" >&2)
    
    log_header "🚀 SutazAI Enterprise AGI/ASI System Deployment v${DEPLOYMENT_VERSION}"
    log_info "📅 Timestamp: $(date +'%Y-%m-%d %H:%M:%S')"
    log_info "🖥️  System: $LOCAL_IP | RAM: ${AVAILABLE_MEMORY}GB | CPU: ${CPU_CORES} cores | Disk: ${AVAILABLE_DISK}GB"
    log_info "📁 Project: $PROJECT_ROOT"
    log_info "📄 Logs: $LOG_FILE"
    echo "══════════════════════════════════════════════════════════════════════════"
}

log_info() {
    echo -e "${BLUE}ℹ️  [$(date +'%H:%M:%S')] $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ [$(date +'%H:%M:%S')] $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}⚠️  [$(date +'%H:%M:%S')] $1${NC}"
}

log_error() {
    echo -e "${RED}❌ [$(date +'%H:%M:%S')] $1${NC}"
}

log_progress() {
    echo -e "${CYAN}🔄 [$(date +'%H:%M:%S')] $1${NC}"
}

log_header() {
    echo ""
    echo -e "${BOLD}${UNDERLINE}$1${NC}"
    echo "══════════════════════════════════════════════════════════════════════════"
}

# ===============================================
# 🔍 COMPREHENSIVE SYSTEM VALIDATION
# ===============================================

check_prerequisites() {
    log_header "🔍 Comprehensive System Prerequisites Check"
    
    local failed_checks=0
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        ((failed_checks++))
    else
        local docker_version=$(docker --version | cut -d' ' -f3 | tr -d ',')
        log_success "Docker: $docker_version"
        
        # Check Docker daemon
        if ! docker info &> /dev/null; then
            log_error "Docker daemon is not running or not accessible"
            ((failed_checks++))
        fi
    fi
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose is not available"
        ((failed_checks++))
    else
        log_success "Docker Compose: Available"
    fi
    
    # Check available disk space (need at least 50GB for enterprise deployment)
    if [ "$AVAILABLE_DISK" -lt 50 ]; then
        log_warn "Low disk space: ${AVAILABLE_DISK}GB available (recommended: 50GB+ for full enterprise deployment)"
    else
        log_success "Disk space: ${AVAILABLE_DISK}GB available"
    fi
    
    # Check memory (need at least 16GB for full deployment)
    if [ "$AVAILABLE_MEMORY" -lt 16 ]; then
        log_warn "Low memory: ${AVAILABLE_MEMORY}GB available (recommended: 32GB+ for optimal performance)"
    else
        log_success "Memory: ${AVAILABLE_MEMORY}GB available"
    fi
    
    # Check CPU cores
    if [ "$CPU_CORES" -lt 8 ]; then
        log_warn "Limited CPU cores: $CPU_CORES (recommended: 8+ for enterprise deployment)"
    else
        log_success "CPU cores: $CPU_CORES available"
    fi
    
    # Validate existing Docker Compose file
    if [ ! -f "$COMPOSE_FILE" ]; then
        log_error "Docker Compose file not found: $COMPOSE_FILE"
        ((failed_checks++))
    elif ! docker compose -f "$COMPOSE_FILE" config --quiet; then
        log_error "Invalid Docker Compose configuration in $COMPOSE_FILE"
        ((failed_checks++))
    else
        log_success "Docker Compose configuration: Valid ($COMPOSE_FILE)"
    fi
    
    # Check critical ports availability
    local critical_ports=(8000 8501 11434 5432 6379 7474 9090 3000 8001 6333)
    local ports_in_use=()
    for port in "${critical_ports[@]}"; do
        if netstat -ln 2>/dev/null | grep -q ":$port "; then
            ports_in_use+=("$port")
        fi
    done
    
    if [ ${#ports_in_use[@]} -gt 0 ]; then
        log_warn "Ports already in use: ${ports_in_use[*]} (services will attempt to reclaim them)"
    fi
    
    # Comprehensive GPU detection
    GPU_TYPE="none"
    GPU_AVAILABLE="false"
    
    # Check for NVIDIA GPU
    if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null 2>&1; then
        GPU_TYPE="nvidia"
        GPU_AVAILABLE="true"
        local gpu_info=$(nvidia-smi --query-gpu=name --format=csv,noheader,nounits 2>/dev/null | head -1 || echo "Unknown NVIDIA GPU")
        log_success "NVIDIA GPU detected: $gpu_info"
    # Check for NVIDIA devices without nvidia-smi
    elif ls /dev/nvidia* &> /dev/null 2>&1; then
        GPU_TYPE="nvidia"
        GPU_AVAILABLE="true"
        log_success "NVIDIA GPU devices detected (driver may need configuration)"
    # Check for CUDA libraries
    elif ldconfig -p 2>/dev/null | grep -q libcuda.so; then
        GPU_TYPE="nvidia"
        GPU_AVAILABLE="true"
        log_success "CUDA libraries detected (GPU may be available)"
    # Check for AMD GPU
    elif command -v rocm-smi &> /dev/null && rocm-smi &> /dev/null 2>&1; then
        GPU_TYPE="amd"
        GPU_AVAILABLE="true"
        log_success "AMD GPU detected via ROCm"
    # Check for AMD GPU devices
    elif ls /dev/kfd /dev/dri/renderD* &> /dev/null 2>&1 && lspci 2>/dev/null | grep -qi "amd.*vga\|amd.*display"; then
        GPU_TYPE="amd"
        GPU_AVAILABLE="true"
        log_success "AMD GPU detected"
    else
        log_info "No GPU detected - running in CPU-only mode"
    fi
    
    # Export GPU variables for use in docker-compose
    export GPU_TYPE
    export GPU_AVAILABLE
    export ENABLE_GPU_SUPPORT="$GPU_AVAILABLE"
    
    if [ $failed_checks -gt 0 ]; then
        log_error "Prerequisites check failed. Please fix the above issues before continuing."
        exit 1
    fi
    
    log_success "All prerequisites check passed ✓"
}

setup_environment() {
    log_header "🌐 Environment Configuration Setup"
    
    # Create .env file if it doesn't exist or update existing one
    if [ ! -f "$ENV_FILE" ]; then
        log_info "Creating new environment configuration..."
        create_new_env_file
    else
        log_info "Updating existing environment configuration..."
        update_existing_env_file
    fi
    
    # Update .env file with GPU configuration
    if [ -f "$ENV_FILE" ]; then
        sed -i '/^GPU_TYPE=/d' "$ENV_FILE" 2>/dev/null || true
        sed -i '/^GPU_AVAILABLE=/d' "$ENV_FILE" 2>/dev/null || true
        sed -i '/^ENABLE_GPU_SUPPORT=/d' "$ENV_FILE" 2>/dev/null || true
        
        echo "GPU_TYPE=$GPU_TYPE" >> "$ENV_FILE"
        echo "GPU_AVAILABLE=$GPU_AVAILABLE" >> "$ENV_FILE"
        echo "ENABLE_GPU_SUPPORT=$ENABLE_GPU_SUPPORT" >> "$ENV_FILE"
        
        log_info "GPU configuration: TYPE=$GPU_TYPE, AVAILABLE=$GPU_AVAILABLE"
    fi
    
    # Create required directories with proper structure
    create_directory_structure
    
    # Set proper permissions
    chmod 600 "$ENV_FILE"
    chmod -R 755 data logs workspace monitoring 2>/dev/null || true
    
    log_success "Environment configuration completed"
}

create_new_env_file() {
    cat > "$ENV_FILE" << EOF
# SutazAI Enterprise AGI/ASI System Environment Configuration
# Auto-generated on $(date) - Deployment v${DEPLOYMENT_VERSION}

# ===============================================
# SYSTEM CONFIGURATION
# ===============================================
SUTAZAI_ENV=production
TZ=UTC
LOCAL_IP=$LOCAL_IP
DEPLOYMENT_VERSION=$DEPLOYMENT_VERSION

# ===============================================
# SECURITY CONFIGURATION
# ===============================================
SECRET_KEY=$(openssl rand -hex 32)
POSTGRES_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
REDIS_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
NEO4J_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-25)
CHROMADB_API_KEY=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
GRAFANA_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
N8N_PASSWORD=$(openssl rand -base64 16 | tr -d "=+/" | cut -c1-16)
LITELLM_KEY=sk-$(openssl rand -hex 16)

# ===============================================
# DATABASE CONFIGURATION
# ===============================================
POSTGRES_USER=sutazai
POSTGRES_DB=sutazai
POSTGRES_HOST=postgres
POSTGRES_PORT=5432

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379

# Neo4j Configuration
NEO4J_USER=neo4j
NEO4J_HOST=neo4j
NEO4J_HTTP_PORT=7474
NEO4J_BOLT_PORT=7687

# ===============================================
# AI MODEL CONFIGURATION
# ===============================================
OLLAMA_HOST=ollama
OLLAMA_PORT=11434
OLLAMA_BASE_URL=http://ollama:11434

# Default models for enterprise deployment
DEFAULT_MODELS=deepseek-r1:8b,qwen2.5:7b,codellama:13b,llama3.2:1b,nomic-embed-text
EMBEDDING_MODEL=nomic-embed-text
REASONING_MODEL=deepseek-r1:8b
CODE_MODEL=codellama:13b
FAST_MODEL=llama3.2:1b

# ===============================================
# VECTOR DATABASE CONFIGURATION
# ===============================================
CHROMADB_HOST=chromadb
CHROMADB_PORT=8000
QDRANT_HOST=qdrant
QDRANT_PORT=6333
FAISS_HOST=faiss
FAISS_PORT=8002

# ===============================================
# MONITORING CONFIGURATION
# ===============================================
PROMETHEUS_HOST=prometheus
PROMETHEUS_PORT=9090
GRAFANA_HOST=grafana
GRAFANA_PORT=3000
LOKI_HOST=loki
LOKI_PORT=3100

# ===============================================
# FEATURE FLAGS
# ===============================================
ENABLE_GPU_SUPPORT=auto
ENABLE_MONITORING=true
ENABLE_SECURITY_SCANNING=true
ENABLE_AUTO_BACKUP=true
ENABLE_SELF_IMPROVEMENT=true
ENABLE_REAL_TIME_UPDATES=true
ENABLE_ENTERPRISE_FEATURES=true

# ===============================================
# RESOURCE LIMITS
# ===============================================
MAX_CONCURRENT_AGENTS=15
MAX_MODEL_INSTANCES=8
CACHE_SIZE_GB=16
MAX_MEMORY_PER_AGENT=2G
MAX_CPU_PER_AGENT=1.5

# ===============================================
# EXTERNAL INTEGRATIONS (for future use)
# ===============================================
OPENAI_API_KEY=
ANTHROPIC_API_KEY=
GOOGLE_API_KEY=
HUGGINGFACE_API_KEY=

# ===============================================
# HEALTH MONITORING
# ===============================================
HEALTH_CHECK_INTERVAL=30
HEALTH_ALERT_WEBHOOK=
BACKUP_SCHEDULE="0 2 * * *"
LOG_RETENTION_DAYS=30
EOF
    
    log_success "New environment file created with secure passwords"
    show_credentials
}

update_existing_env_file() {
    # Backup existing env file
    cp "$ENV_FILE" "${ENV_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Add missing variables to existing env file
    local missing_vars=(
        "DEPLOYMENT_VERSION=$DEPLOYMENT_VERSION"
        "ENABLE_ENTERPRISE_FEATURES=true"
        "ENABLE_REAL_TIME_UPDATES=true"
        "MAX_CONCURRENT_AGENTS=15"
        "MAX_MODEL_INSTANCES=8"
    )
    
    for var in "${missing_vars[@]}"; do
        local var_name="${var%%=*}"
        if ! grep -q "^$var_name=" "$ENV_FILE"; then
            echo "$var" >> "$ENV_FILE"
            log_info "Added missing variable: $var_name"
        fi
    done
    
    log_success "Environment file updated with new variables"
}

create_directory_structure() {
    log_info "Creating comprehensive directory structure..."
    
    local directories=(
        "data/{models,documents,training,backups,vectors,knowledge}"
        "logs/{agents,system,models,deployment,monitoring}"
        "workspace/{agents,projects,generated_code,temp}"
        "monitoring/{prometheus,grafana,loki,promtail}"
        "backups/{database,models,configuration}"
        "reports/{deployment,health,performance}"
        "config/{agents,models,monitoring}"
    )
    
    for dir_pattern in "${directories[@]}"; do
        # Use eval to expand brace patterns
        eval "mkdir -p $dir_pattern"
    done
    
    # Create .gitkeep files for empty directories
    find . -type d -empty -exec touch {}/.gitkeep \; 2>/dev/null || true
    
    log_success "Directory structure created"
}

show_credentials() {
    echo ""
    log_warn "🔐 IMPORTANT: Secure Credentials Generated"
    echo "══════════════════════════════════════════════════════════════════════════"
    echo -e "${YELLOW}Database (PostgreSQL):${NC} sutazai / $(grep POSTGRES_PASSWORD= "$ENV_FILE" | cut -d'=' -f2)"
    echo -e "${YELLOW}Grafana:${NC} admin / $(grep GRAFANA_PASSWORD= "$ENV_FILE" | cut -d'=' -f2)"
    echo -e "${YELLOW}N8N:${NC} admin / $(grep N8N_PASSWORD= "$ENV_FILE" | cut -d'=' -f2)"
    echo -e "${YELLOW}Neo4j:${NC} neo4j / $(grep NEO4J_PASSWORD= "$ENV_FILE" | cut -d'=' -f2)"
    echo "══════════════════════════════════════════════════════════════════════════"
    echo -e "${RED}⚠️  Save these credentials securely! They are stored in: $ENV_FILE${NC}"
    echo ""
}

# ===============================================
# 🚀 ADVANCED SERVICE DEPLOYMENT FUNCTIONS
# ===============================================

cleanup_existing_services() {
    log_header "🧹 Cleaning Up Existing Services"
    
    # Stop SutazAI containers gracefully
    local sutazai_containers=$(docker ps -q --filter "name=sutazai-" 2>/dev/null || true)
    if [[ -n "$sutazai_containers" ]]; then
        log_info "Stopping existing SutazAI containers..."
        echo "$sutazai_containers" | xargs -r docker stop
        echo "$sutazai_containers" | xargs -r docker rm
    fi
    
    # Stop services using docker-compose
    if [ -f "$COMPOSE_FILE" ]; then
        log_info "Stopping services via Docker Compose..."
        docker compose -f "$COMPOSE_FILE" down 2>/dev/null || true
    fi
    
    # Clean up orphaned containers and networks
    docker container prune -f &>/dev/null || true
    docker network prune -f &>/dev/null || true
    
    # Only clean volumes if explicitly requested
    if [[ "${CLEAN_VOLUMES:-false}" == "true" ]]; then
        log_warn "Cleaning up SutazAI volumes as requested..."
        docker volume ls --filter "name=sutazai" -q | xargs -r docker volume rm 2>/dev/null || true
    fi
    
    log_success "Cleanup completed"
}

wait_for_service_health() {
    local service_name="$1"
    local max_wait="${2:-120}"
    local health_endpoint="${3:-}"
    local count=0
    local allow_failure="${4:-false}"
    
    log_progress "Waiting for $service_name to become healthy..."
    
    while [ $count -lt $max_wait ]; do
        # Check container status first
        if docker compose ps "$service_name" 2>/dev/null | grep -q "healthy\|running"; then
            # If health endpoint provided, test it
            if [ -n "$health_endpoint" ]; then
                if curl -s --max-time 5 "$health_endpoint" > /dev/null 2>&1; then
                    log_success "$service_name is healthy (endpoint verified)"
                    return 0
                fi
            else
                log_success "$service_name is healthy (container status)"
                return 0
            fi
        fi
        
        # Check for failed containers
        if docker compose ps "$service_name" 2>/dev/null | grep -q "exited\|dead"; then
            log_error "$service_name failed to start"
            docker compose logs "$service_name" | tail -20
            if [ "$allow_failure" = "true" ]; then
                return 1  # Return error but don't exit script
            else
                exit 1  # Exit script for critical services
            fi
        fi
        
        sleep 3
        ((count+=3))
        
        if [ $((count % 15)) -eq 0 ]; then
            log_progress "Still waiting for $service_name... (${count}s/${max_wait}s)"
        fi
    done
    
    log_warn "$service_name health check timed out after ${max_wait}s"
    if [ "$allow_failure" = "true" ]; then
        return 1  # Return error but don't exit script
    else
        exit 1  # Exit script for critical services
    fi
}

deploy_service_group() {
    local group_name="$1"
    shift
    local services=("$@")
    
    log_header "🚀 Deploying $group_name"
    
    if [ ${#services[@]} -eq 0 ]; then
        log_warn "No services to deploy in $group_name"
        return 0
    fi
    
    # Start services in parallel for faster deployment
    log_progress "Starting ${#services[@]} services in $group_name..."
    
    local failed_services=()
    
    # Start all services in the group
    for service in "${services[@]}"; do
        log_info "Starting $service..."
        if docker compose up -d "$service" 2>/dev/null; then
            log_success "$service container started"
        else
            log_error "Failed to start $service"
            failed_services+=("$service")
        fi
    done
    
    # Wait for all services to become healthy
    for service in "${services[@]}"; do
        if [[ " ${failed_services[*]} " =~ " ${service} " ]]; then
            continue
        fi
        
        # Set health check timeout based on service type
        local timeout=120
        local allow_failure="false"
        case "$service" in
            "postgres"|"neo4j"|"ollama") timeout=180 ;;
            "backend-agi"|"frontend-agi") timeout=240 ;;
            "prometheus"|"grafana"|"loki"|"promtail") 
                timeout=90
                allow_failure="true"  # Allow monitoring services to fail without stopping deployment
                ;;
            # All AI agents should allow failure to not block deployment
            "autogpt"|"crewai"|"letta"|"aider"|"gpt-engineer"|"tabbyml"|"semgrep"|"langflow"|"flowise"|"n8n"|"dify"|"bigagi"|"agentgpt"|"privategpt"|"llamaindex"|"shellgpt"|"pentestgpt"|"browser-use"|"skyvern"|"localagi"|"documind"|"pytorch"|"tensorflow"|"jax"|"litellm"|"health-monitor"|"autogen"|"agentzero")
                timeout=60
                allow_failure="true"  # Allow agent services to fail without stopping deployment
                ;;
        esac
        
        # For services that allow failure, don't stop the deployment
        if [ "$allow_failure" = "true" ]; then
            wait_for_service_health "$service" "$timeout" "" "$allow_failure" || {
                log_warn "$service failed to become healthy, but continuing deployment"
                failed_services+=("$service")
            }
        else
            wait_for_service_health "$service" "$timeout"
        fi
    done
    
    if [ ${#failed_services[@]} -eq 0 ]; then
        log_success "$group_name deployment completed successfully"
    else
        log_warn "$group_name deployment completed with issues: ${failed_services[*]}"
    fi
    
    sleep $SERVICE_START_DELAY
}

# ===============================================
# 🧪 COMPREHENSIVE TESTING AND VALIDATION
# ===============================================

run_comprehensive_health_checks() {
    log_header "🏥 Running Comprehensive Health Checks"
    
    local failed_services=()
    local total_checks=0
    local passed_checks=0
    
    # Test core infrastructure endpoints
    local endpoints=(
        "Backend API:http://localhost:8000/health"
        "Frontend App:http://localhost:8501"
        "Ollama API:http://localhost:11434/api/tags"
        "ChromaDB:http://localhost:8001/api/v1/heartbeat"
        "Qdrant:http://localhost:6333/health"
        "Neo4j Browser:http://localhost:7474"
        "Prometheus:http://localhost:9090/-/healthy"
        "Grafana:http://localhost:3000/api/health"
        "LangFlow:http://localhost:8090"
        "FlowiseAI:http://localhost:8099"
        "BigAGI:http://localhost:8106"
        "N8N:http://localhost:5678"
    )
    
    for endpoint in "${endpoints[@]}"; do
        local name="${endpoint%%:*}"
        local url="${endpoint#*:}"
        ((total_checks++))
        
        log_progress "Testing $name..."
        
        if curl -s --max-time 10 "$url" > /dev/null 2>&1; then
            log_success "$name: ✅ Healthy"
            ((passed_checks++))
        else
            log_error "$name: ❌ Failed health check"
            failed_services+=("$name")
        fi
    done
    
    # Check container statuses
    log_info "Checking container statuses..."
    local container_stats=$(docker compose ps --format table 2>/dev/null || echo "Unable to get container stats")
    echo "$container_stats"
    
    # Generate health summary
    local success_rate=$((passed_checks * 100 / total_checks))
    
    echo ""
    log_header "📊 Health Check Summary"
    log_info "Total checks: $total_checks"
    log_info "Passed: $passed_checks"
    log_info "Failed: $((total_checks - passed_checks))"
    log_info "Success rate: ${success_rate}%"
    
    if [ ${#failed_services[@]} -eq 0 ]; then
        log_success "🎉 All health checks passed! System is fully operational."
        return 0
    else
        log_warn "⚠️  Some services failed health checks: ${failed_services[*]}"
        log_info "💡 Failed services may still be initializing. Check logs for details."
        return 1
    fi
}

test_ai_functionality() {
    log_header "🤖 Testing AI System Functionality"
    
    # Test Ollama models
    log_progress "Testing Ollama model availability..."
    local models_response=$(curl -s http://localhost:11434/api/tags 2>/dev/null || echo "{}")
    if echo "$models_response" | grep -q "models"; then
        local model_count=$(echo "$models_response" | grep -o '"name"' | wc -l || echo "0")
        log_success "Ollama API responding with $model_count models available"
    else
        log_warn "Ollama API not responding or no models loaded"
    fi
    
    # Test vector databases
    log_progress "Testing vector databases..."
    
    if curl -s http://localhost:8001/api/v1/heartbeat | grep -q "heartbeat\|ok"; then
        log_success "ChromaDB: ✅ Responding"
    else
        log_warn "ChromaDB: ⚠️  Not responding"
    fi
    
    if curl -s http://localhost:6333/health | grep -q "ok\|healthy"; then
        log_success "Qdrant: ✅ Responding"
    else
        log_warn "Qdrant: ⚠️  Not responding"
    fi
    
    # Test AGI backend capabilities
    log_progress "Testing AGI backend..."
    local backend_response=$(curl -s http://localhost:8000/health 2>/dev/null || echo "{}")
    if echo "$backend_response" | grep -q "healthy\|ok"; then
        log_success "AGI Backend: ✅ Responding"
        
        # Test specific endpoints
        if curl -s http://localhost:8000/agents > /dev/null 2>&1; then
            log_success "Agent management endpoint: ✅ Available"
        fi
        
        if curl -s http://localhost:8000/models > /dev/null 2>&1; then
            log_success "Model management endpoint: ✅ Available"
        fi
    else
        log_warn "AGI Backend: ⚠️  Not responding (may still be initializing)"
    fi
    
    # Test frontend accessibility
    log_progress "Testing frontend interface..."
    if curl -s http://localhost:8501 > /dev/null 2>&1; then
        log_success "Frontend: ✅ Accessible"
    else
        log_warn "Frontend: ⚠️  Not accessible"
    fi
}

# ===============================================
# 🎯 MAIN DEPLOYMENT ORCHESTRATION
# ===============================================

main_deployment() {
    log_header "🚀 Starting SutazAI Enterprise AGI/ASI System Deployment"
    
    # Phase 1: System Validation and Preparation
    check_prerequisites
    setup_environment
    cleanup_existing_services
    
    # Phase 2: Core Infrastructure Deployment
    deploy_service_group "Core Infrastructure" "${CORE_SERVICES[@]}"
    deploy_service_group "Vector Storage Systems" "${VECTOR_SERVICES[@]}"
    
    # Phase 3: AI Model Services
    deploy_service_group "AI Model Services" "${AI_MODEL_SERVICES[@]}"
    
    # Wait for Ollama to be ready before proceeding
    log_info "Waiting for Ollama to initialize before downloading models..."
    sleep 30
    
    # Phase 4: Core Application Services
    deploy_service_group "Backend Services" "${BACKEND_SERVICES[@]}"
    deploy_service_group "Frontend Services" "${FRONTEND_SERVICES[@]}"
    
    # Phase 5: Monitoring Stack
    deploy_service_group "Monitoring Stack" "${MONITORING_SERVICES[@]}"
    
    # Phase 6: AI Agents Ecosystem (deployed in batches for stability)
    log_header "🤖 Deploying AI Agent Ecosystem"
    
    deploy_service_group "Core AI Agents" "${CORE_AI_AGENTS[@]}"
    sleep 10
    
    deploy_service_group "Code Development Agents" "${CODE_AGENTS[@]}"
    sleep 10
    
    deploy_service_group "Workflow Automation Agents" "${WORKFLOW_AGENTS[@]}"
    sleep 10
    
    deploy_service_group "Specialized AI Agents" "${SPECIALIZED_AGENTS[@]}"
    sleep 10
    
    deploy_service_group "Automation & Web Agents" "${AUTOMATION_AGENTS[@]}"
    sleep 10
    
    # Phase 7: ML Frameworks and Advanced Services
    deploy_service_group "ML Framework Services" "${ML_FRAMEWORK_SERVICES[@]}"
    deploy_service_group "Advanced Services" "${ADVANCED_SERVICES[@]}"
    
    # Phase 8: System Initialization and Model Setup
    log_header "🧠 Initializing AI Models and System"
    setup_initial_models
    
    # Phase 9: Comprehensive Testing
    log_header "🧪 System Validation and Testing"
    sleep 30  # Allow all services to fully initialize
    
    run_comprehensive_health_checks
    test_ai_functionality
    
    # Phase 10: Post-deployment Agent Configuration
    log_header "⚙️ Configuring AI Agents"
    configure_ai_agents
    
    # Phase 11: Final Setup and Reporting
    configure_monitoring_dashboards
    generate_comprehensive_report
    show_deployment_summary
}

setup_initial_models() {
    log_info "Setting up initial AI models..."
    
    # Wait for Ollama to be fully ready
    local max_attempts=30
    local attempt=0
    
    while ! curl -s http://localhost:11434/api/tags > /dev/null 2>&1; do
        if [ $attempt -ge $max_attempts ]; then
            log_error "Ollama service not ready after ${max_attempts} attempts"
            return 1
        fi
        log_progress "Waiting for Ollama API... (attempt $((++attempt)))"
        sleep 10
    done
    
    # Download essential models based on system specs
    local models=()
    
    if [ "$AVAILABLE_MEMORY" -ge 32 ]; then
        models=("deepseek-r1:8b" "qwen2.5:7b" "codellama:13b" "llama3.2:1b" "nomic-embed-text")
        log_info "High-memory system detected: downloading full model set"
    elif [ "$AVAILABLE_MEMORY" -ge 16 ]; then
        models=("deepseek-r1:8b" "qwen2.5:7b" "llama3.2:1b" "nomic-embed-text")
        log_info "Medium-memory system detected: downloading optimized model set"
    else
        models=("llama3.2:1b" "nomic-embed-text")
        log_info "Limited-memory system detected: downloading minimal model set"
    fi
    
    for model in "${models[@]}"; do
        log_progress "Downloading $model..."
        if timeout 600 docker exec sutazai-ollama ollama pull "$model" > /dev/null 2>&1; then
            log_success "$model downloaded successfully"
        else
            log_warn "Failed to download $model (will be available for manual download)"
        fi
    done
    
    log_success "AI model setup completed"
}

resume_deployment() {
    log_header "📊 Checking Current Deployment Status"
    
    # Check which services are already running
    local running_services=$(docker compose ps --services | sort)
    local all_services=$(docker compose config --services | sort)
    local missing_services=$(comm -23 <(echo "$all_services") <(echo "$running_services"))
    
    log_info "Currently running: $(echo "$running_services" | wc -l) services"
    log_info "Total configured: $(echo "$all_services" | wc -l) services"
    
    if [ -z "$missing_services" ]; then
        log_success "All services are already deployed!"
        show_deployment_summary
        return 0
    fi
    
    log_info "Services to deploy: $(echo "$missing_services" | wc -l)"
    
    # Check if core services are running
    local core_ok=true
    for service in postgres redis neo4j ollama backend-agi frontend-agi; do
        if ! echo "$running_services" | grep -q "^$service$"; then
            core_ok=false
            break
        fi
    done
    
    if [ "$core_ok" = "false" ]; then
        log_warn "Core services not fully deployed. Running full deployment..."
        main_deployment
        return
    fi
    
    # Deploy missing AI agents
    log_header "🤖 Deploying Missing AI Agents"
    
    # Group missing services by type
    local missing_agents=$(echo "$missing_services" | grep -E "agent|gpt|crew|letta|aider|engineer|bigagi|dify|n8n|langflow|flowise|semgrep|tabby|privategpt|llamaindex|shellgpt|pentestgpt|browser-use|skyvern|localagi|documind|litellm|health-monitor|autogen|agentzero" || true)
    
    if [ -n "$missing_agents" ]; then
        log_info "Deploying missing AI agents..."
        for agent in $missing_agents; do
            log_progress "Starting $agent..."
            if docker compose up -d "$agent" 2>&1 | grep -q "Started\|Created"; then
                log_success "$agent deployed"
            else
                log_warn "$agent deployment failed (may need configuration)"
            fi
        done
    fi
    
    # Run post-deployment tasks
    log_header "⚙️ Running Post-Deployment Configuration"
    configure_ai_agents
    
    # Run health checks
    run_comprehensive_health_checks
    
    # Generate report
    generate_comprehensive_report
    show_deployment_summary
}

configure_ai_agents() {
    log_info "Configuring AI agents for Ollama integration..."
    
    # Run the configure_all_agents.sh script if it exists
    if [ -f "./scripts/configure_all_agents.sh" ]; then
        log_progress "Running agent configuration script..."
        bash ./scripts/configure_all_agents.sh || log_warn "Some agent configurations may have failed"
    fi
    
    # Ensure LiteLLM is properly configured
    if docker compose ps litellm 2>/dev/null | grep -q "Up\|running"; then
        log_success "LiteLLM proxy is running for OpenAI API compatibility"
    else
        log_progress "Starting LiteLLM proxy..."
        docker compose up -d litellm || log_warn "LiteLLM startup failed"
    fi
    
    # Check deployed agents
    local agent_count=$(docker compose ps | grep -E "agent|gpt|crew|letta|aider|engineer|bigagi|dify|n8n|langflow|flowise" | grep -c "Up" || echo 0)
    log_info "Total AI agents deployed: $agent_count"
    
    # List running agents
    log_info "Running AI agents:"
    docker compose ps --format "table {{.Service}}\t{{.Status}}" | grep -E "agent|gpt|crew|letta|aider|engineer|bigagi|dify|n8n|langflow|flowise" | grep "Up" | sort
}

configure_monitoring_dashboards() {
    log_info "Configuring monitoring dashboards..."
    
    # This would configure Grafana dashboards, Prometheus targets, etc.
    # For now, we'll just ensure the monitoring services are accessible
    
    if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
        log_success "Grafana dashboard configured and accessible"
    fi
    
    if curl -s http://localhost:9090/-/healthy > /dev/null 2>&1; then
        log_success "Prometheus metrics collection configured"
    fi
}

generate_comprehensive_report() {
    log_header "📊 Generating Comprehensive Deployment Report"
    
    local report_file="reports/deployment_$(date +%Y%m%d_%H%M%S).html"
    mkdir -p reports
    
    # Create detailed HTML report with system status
    cat > "$report_file" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SutazAI AGI/ASI Deployment Report</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; background: #f8f9fa; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; text-align: center; margin-bottom: 30px; box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .section { background: white; margin: 20px 0; padding: 25px; border-radius: 15px; box-shadow: 0 5px 15px rgba(0,0,0,0.08); }
        .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric-card { background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 20px; border-radius: 10px; text-align: center; border-left: 4px solid #667eea; }
        .metric-value { font-size: 2.5em; font-weight: bold; color: #667eea; }
        .metric-label { color: #6c757d; font-size: 0.9em; margin-top: 5px; }
        .services-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px; }
        .service-card { background: #f8f9fa; padding: 15px; border-radius: 10px; border-left: 4px solid #28a745; }
        .service-card.warning { border-left-color: #ffc107; }
        .service-card.error { border-left-color: #dc3545; }
        .service-name { font-weight: bold; margin-bottom: 5px; }
        .service-url { color: #007bff; text-decoration: none; font-size: 0.9em; }
        .service-url:hover { text-decoration: underline; }
        .status-healthy { color: #28a745; font-weight: bold; }
        .status-warning { color: #ffc107; font-weight: bold; }
        .status-error { color: #dc3545; font-weight: bold; }
        .next-steps { background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); }
        .credentials { background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%); border-left: 4px solid #ff9800; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🚀 SutazAI AGI/ASI System</h1>
            <h2>Enterprise Deployment Report</h2>
            <p>Generated: $(date +'%Y-%m-%d %H:%M:%S') | Version: $DEPLOYMENT_VERSION</p>
            <p>System: $LOCAL_IP | Memory: ${AVAILABLE_MEMORY}GB | CPU: ${CPU_CORES} cores | Disk: ${AVAILABLE_DISK}GB</p>
        </div>
EOF

    # Add dynamic system metrics
    cat >> "$report_file" << EOF
        <div class="section">
            <h2>📈 System Metrics</h2>
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-value">$(docker compose ps | grep -c 'Up\|running' || echo '0')</div>
                    <div class="metric-label">Total Services Running</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">$(docker compose ps | grep -c 'healthy' || echo '0')</div>
                    <div class="metric-label">Healthy Services</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${AVAILABLE_MEMORY}GB</div>
                    <div class="metric-label">System Memory</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${CPU_CORES}</div>
                    <div class="metric-label">CPU Cores</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${AVAILABLE_DISK}GB</div>
                    <div class="metric-label">Available Disk</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">$DEPLOYMENT_VERSION</div>
                    <div class="metric-label">Deployment Version</div>
                </div>
            </div>
        </div>
        
        <div class="section">
            <h2>🌐 Service Access Points</h2>
            <div class="services-grid">
                <div class="service-card">
                    <div class="service-name">🖥️ SutazAI Frontend</div>
                    <a href="http://localhost:8501" target="_blank" class="service-url">http://localhost:8501</a>
                </div>
                <div class="service-card">
                    <div class="service-name">📚 AGI API Documentation</div>
                    <a href="http://localhost:8000/docs" target="_blank" class="service-url">http://localhost:8000/docs</a>
                </div>
                <div class="service-card">
                    <div class="service-name">📊 Grafana Monitoring</div>
                    <a href="http://localhost:3000" target="_blank" class="service-url">http://localhost:3000</a>
                </div>
                <div class="service-card">
                    <div class="service-name">📈 Prometheus Metrics</div>
                    <a href="http://localhost:9090" target="_blank" class="service-url">http://localhost:9090</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🕸️ Neo4j Knowledge Graph</div>
                    <a href="http://localhost:7474" target="_blank" class="service-url">http://localhost:7474</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🔍 ChromaDB Vector Store</div>
                    <a href="http://localhost:8001" target="_blank" class="service-url">http://localhost:8001</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🎯 Qdrant Dashboard</div>
                    <a href="http://localhost:6333/dashboard" target="_blank" class="service-url">http://localhost:6333/dashboard</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🌊 LangFlow Builder</div>
                    <a href="http://localhost:8090" target="_blank" class="service-url">http://localhost:8090</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🌸 FlowiseAI</div>
                    <a href="http://localhost:8099" target="_blank" class="service-url">http://localhost:8099</a>
                </div>
                <div class="service-card">
                    <div class="service-name">💼 BigAGI Interface</div>
                    <a href="http://localhost:8106" target="_blank" class="service-url">http://localhost:8106</a>
                </div>
                <div class="service-card">
                    <div class="service-name">⚡ Dify Workflows</div>
                    <a href="http://localhost:8107" target="_blank" class="service-url">http://localhost:8107</a>
                </div>
                <div class="service-card">
                    <div class="service-name">🔗 n8n Automation</div>
                    <a href="http://localhost:5678" target="_blank" class="service-url">http://localhost:5678</a>
                </div>
            </div>
        </div>
        
        <div class="section credentials">
            <h2>🔐 System Credentials</h2>
            <p><strong>⚠️ IMPORTANT:</strong> Save these credentials securely!</p>
            <ul>
                <li><strong>Grafana:</strong> admin / $(grep GRAFANA_PASSWORD= "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo 'check .env file')</li>
                <li><strong>Neo4j:</strong> neo4j / $(grep NEO4J_PASSWORD= "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo 'check .env file')</li>
                <li><strong>Database:</strong> sutazai / $(grep POSTGRES_PASSWORD= "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo 'check .env file')</li>
                <li><strong>N8N:</strong> admin / $(grep N8N_PASSWORD= "$ENV_FILE" | cut -d'=' -f2 2>/dev/null || echo 'check .env file')</li>
            </ul>
        </div>
        
        <div class="section">
            <h2>📋 Container Status</h2>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 8px; overflow-x: auto; font-size: 0.9em;">
EOF

    # Add container status
    docker compose ps --format table >> "$report_file" 2>/dev/null || echo "Container status unavailable" >> "$report_file"
    
    cat >> "$report_file" << 'EOF'
            </pre>
        </div>
        
        <div class="section next-steps">
            <h2>🎯 Next Steps</h2>
            <ol>
                <li><strong>Access the system:</strong> <a href="http://localhost:8501" target="_blank">Open SutazAI Frontend</a></li>
                <li><strong>Monitor system health:</strong> <a href="http://localhost:3000" target="_blank">Grafana Dashboard</a></li>
                <li><strong>Download additional AI models:</strong> Use the Ollama Models section in the frontend</li>
                <li><strong>Configure AI agents:</strong> Access the Agent Control Center</li>
                <li><strong>Set up monitoring alerts:</strong> Configure Prometheus/Grafana alerts</li>
                <li><strong>Explore knowledge graph:</strong> <a href="http://localhost:7474" target="_blank">Neo4j Browser</a></li>
                <li><strong>Create workflows:</strong> Use LangFlow, Dify, or n8n for automation</li>
            </ol>
        </div>
        
        <div class="section">
            <h2>🛠️ Management Commands</h2>
            <pre style="background: #f8f9fa; padding: 15px; border-radius: 8px;">
# View service logs
docker compose logs [service-name]

# Restart specific service
docker compose restart [service-name]

# Stop all services
docker compose down

# Update and restart system
docker compose pull && docker compose up -d

# View system status
docker compose ps

# Monitor resource usage
docker stats
            </pre>
        </div>
        
        <div class="section">
            <h2>📞 Support Information</h2>
            <ul>
                <li><strong>Logs Location:</strong> <code>logs/</code></li>
                <li><strong>Configuration:</strong> <code>.env</code></li>
                <li><strong>Deployment Report:</strong> <code>reports/</code></li>
                <li><strong>Backup Location:</strong> <code>backups/</code></li>
                <li><strong>Health Check Script:</strong> <code>./scripts/deploy_complete_system.sh health</code></li>
            </ul>
        </div>
    </div>
</body>
</html>
EOF

    log_success "Comprehensive deployment report generated: $report_file"
    log_info "📄 Open in browser: file://$(pwd)/$report_file"
}

show_deployment_summary() {
    log_header "🎉 SutazAI Enterprise AGI/ASI System Deployment Complete!"
    
    echo -e "${GREEN}${BOLD}"
    echo "╔══════════════════════════════════════════════════════════════════════════╗"
    echo "║                        🚀 SUTAZAI AGI/ASI SYSTEM                         ║"
    echo "║                       ENTERPRISE DEPLOYMENT SUCCESS                     ║"
    echo "║                              VERSION $DEPLOYMENT_VERSION                              ║"
    echo "╚══════════════════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    echo -e "${CYAN}📊 Deployment Statistics:${NC}"
    echo -e "   • Total Services Deployed: $(docker compose ps | grep -c 'Up\|running' || echo 'N/A')"
    echo -e "   • Healthy Services: $(docker compose ps | grep -c 'healthy' || echo 'N/A')"
    echo -e "   • System Resources: ${AVAILABLE_MEMORY}GB RAM, ${CPU_CORES} CPU cores, ${AVAILABLE_DISK}GB disk"
    echo -e "   • Deployment Time: $(date +'%H:%M:%S')"
    echo -e "   • Network: $LOCAL_IP"
    
    echo -e "\n${YELLOW}🌟 Primary Access Points:${NC}"
    echo -e "   • 🖥️  Main Interface:        http://localhost:8501"
    echo -e "   • 📚 API Documentation:     http://localhost:8000/docs"
    echo -e "   • 📊 System Monitoring:     http://localhost:3000"
    echo -e "   • 🕸️  Knowledge Graph:      http://localhost:7474"
    echo -e "   • 🤖 AI Model Manager:      http://localhost:11434"
    
    echo -e "\n${BLUE}🛠️  Enterprise Features Available:${NC}"
    echo -e "   • ✅ Autonomous AI Agents (25+ agents)"
    echo -e "   • ✅ Real-time Monitoring & Alerting"
    echo -e "   • ✅ Vector Databases & Knowledge Graphs"
    echo -e "   • ✅ Self-Improvement & Learning"
    echo -e "   • ✅ Enterprise Security & Authentication"
    echo -e "   • ✅ Workflow Automation & Orchestration"
    echo -e "   • ✅ Code Generation & Analysis"
    echo -e "   • ✅ Multi-Modal AI Capabilities"
    
    echo -e "\n${PURPLE}📋 Immediate Next Steps:${NC}"
    echo -e "   1. Open SutazAI Frontend: http://localhost:8501"
    echo -e "   2. Download additional AI models via Ollama section"
    echo -e "   3. Configure monitoring dashboards in Grafana"
    echo -e "   4. Set up AI agents and workflows"
    echo -e "   5. Enable autonomous code generation features"
    echo -e "   6. Explore knowledge graph capabilities"
    
    echo -e "\n${GREEN}🔐 Security Note:${NC}"
    echo -e "   • Credentials are stored securely in: $ENV_FILE"
    echo -e "   • Monitor system health regularly via Grafana"
    echo -e "   • Review logs in: logs/ directory"
    
    local report_file="reports/deployment_$(date +%Y%m%d_%H%M%S).html"
    echo -e "\n${CYAN}📄 Detailed report available: file://$(pwd)/$report_file${NC}"
    
    echo -e "\n${BOLD}🎯 SUTAZAI AGI/ASI SYSTEM IS NOW FULLY OPERATIONAL!${NC}"
    log_success "🎉 Enterprise deployment completed successfully! All systems ready for autonomous AI operations."
}

# ===============================================
# 🔧 ERROR HANDLING AND UTILITY FUNCTIONS
# ===============================================

cleanup_on_error() {
    log_error "Deployment failed at line $1"
    
    # Save debug information
    mkdir -p "debug_logs"
    local debug_file="debug_logs/deployment_failure_$(date +%Y%m%d_%H%M%S).log"
    
    {
        echo "Deployment failed at: $(date)"
        echo "Error line: $1"
        echo "System info: $LOCAL_IP | RAM: ${AVAILABLE_MEMORY}GB | CPU: ${CPU_CORES}"
        echo ""
        echo "Container status:"
        docker compose ps 2>/dev/null || echo "Unable to get container status"
        echo ""
        echo "Recent logs:"
        docker compose logs --tail=50 2>/dev/null || echo "Unable to get logs"
    } > "$debug_file"
    
    log_error "Debug information saved to: $debug_file"
    
    # Offer cleanup options
    echo ""
    read -p "Do you want to stop all services and clean up? (y/N): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker compose down
        log_info "All services stopped"
    fi
    
    log_error "Deployment failed. Check debug logs for detailed information."
    exit 1
}

# Set up error trap
trap 'cleanup_on_error $LINENO' ERR

# ===============================================
# 🎯 SCRIPT EXECUTION AND COMMAND HANDLING
# ===============================================

# Change to project directory
cd "$PROJECT_ROOT" || { log_error "Cannot access project directory: $PROJECT_ROOT"; exit 1; }

# Initialize logging
setup_logging

# Parse command line arguments with enhanced options
case "${1:-deploy}" in
    "deploy" | "start")
        main_deployment
        ;;
    "resume" | "continue")
        log_info "🔄 Resuming SutazAI deployment..."
        resume_deployment
        ;;
    "stop")
        log_info "🛑 Stopping all SutazAI services..."
        docker compose down
        log_success "All services stopped successfully"
        ;;
    "restart")
        log_info "🔄 Restarting SutazAI system..."
        docker compose down
        sleep 10
        docker compose up -d
        log_success "System restart completed"
        ;;
    "status")
        log_info "📊 SutazAI System Status:"
        docker compose ps
        echo ""
        log_info "🏥 Quick Health Check:"
        run_comprehensive_health_checks
        ;;
    "logs")
        if [ -n "${2:-}" ]; then
            log_info "📋 Showing logs for service: $2"
            docker compose logs -f "$2"
        else
            log_info "📋 Showing logs for all services:"
            docker compose logs -f
        fi
        ;;
    "health")
        log_info "🏥 Running comprehensive health checks..."
        run_comprehensive_health_checks
        test_ai_functionality
        ;;
    "report")
        log_info "📊 Generating deployment report..."
        generate_comprehensive_report
        ;;
    "update")
        log_info "⬆️  Updating SutazAI system..."
        docker compose pull
        docker compose up -d
        log_success "System updated successfully"
        ;;
    "clean")
        log_warn "🧹 This will remove all SutazAI containers and volumes!"
        read -p "Are you sure? (y/N): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            CLEAN_VOLUMES=true
            cleanup_existing_services
            log_success "System cleaned successfully"
        else
            log_info "Clean operation cancelled"
        fi
        ;;
    "models")
        log_info "🧠 Managing AI models..."
        setup_initial_models
        ;;
    "help" | "-h" | "--help")
        echo ""
        echo "🚀 SutazAI Enterprise AGI/ASI System Deployment Script v${DEPLOYMENT_VERSION}"
        echo ""
        echo "Usage: $0 [COMMAND] [OPTIONS]"
        echo ""
        echo "Commands:"
        echo "  deploy    Deploy the complete SutazAI system (default)"
        echo "  start     Alias for deploy"
        echo "  resume    Resume deployment of missing services"
        echo "  stop      Stop all services gracefully"
        echo "  restart   Restart the entire system"
        echo "  status    Show comprehensive system status"
        echo "  logs      Show logs for all services or specific service"
        echo "  health    Run comprehensive health checks"
        echo "  report    Generate detailed deployment report"
        echo "  update    Update all services to latest versions"
        echo "  clean     Remove all containers and volumes (DESTRUCTIVE)"
        echo "  models    Download and manage AI models"
        echo "  help      Show this help message"
        echo ""
        echo "Examples:"
        echo "  $0 deploy              # Deploy complete system"
        echo "  $0 status              # Check system status"
        echo "  $0 logs backend-agi    # Show backend logs"
        echo "  $0 health              # Run health checks"
        echo "  CLEAN_VOLUMES=true $0 clean  # Clean everything"
        echo ""
        echo "Environment Variables:"
        echo "  CLEAN_VOLUMES=true     Clean volumes during operations"
        echo "  DEBUG=true            Enable debug output"
        echo ""
        ;;
    *)
        log_error "Unknown command: $1"
        echo ""
        log_info "Use '$0 help' for usage information"
        exit 1
        ;;
esac