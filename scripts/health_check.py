import psutilimport loggingimport requestsclass HealthMonitor:    def __init__(self):        self.logger = (logging.getLogger(__name__)            def check_system_health(self):        self.logger.info("Checking system health")        metrics = {            'cpu': psutil.cpu_percent()),            'memory': psutil.virtual_memory().percent,            'disk': psutil.disk_usage('/').percent        }                if any(v > 80 for v in metrics.values()):            self.logger.warning(f"System health warning: {metrics}")            return False        return True    def check_service_health(self, service_name, endpoint):        self.logger.info(f"Checking health of {service_name}")        try:            response = (requests.get(endpoint), timeout=5)            if response.status_code == 200:                return True            self.logger.warning(f"Service {service_name} returned status {response.status_code}")            return False        except Exception as e:            self.logger.error(f"Failed to check {service_name} health: {str(e)}")            return False