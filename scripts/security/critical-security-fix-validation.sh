#!/bin/bash

# Strict error handling
set -euo pipefail


# CRITICAL SECURITY FIX VALIDATION SCRIPT
# Validates removal of Docker socket mount vulnerability (CVSS 9.8)
# Generated by Security Specialist - August 10, 2025


# Signal handlers for graceful shutdown
cleanup_and_exit() {
    local exit_code="${1:-0}"
    echo "Script interrupted, cleaning up..." >&2
    # Clean up any background processes
    jobs -p | xargs -r kill 2>/dev/null || true
    exit "$exit_code"
}

trap 'cleanup_and_exit 130' INT
trap 'cleanup_and_exit 143' TERM
trap 'cleanup_and_exit 1' ERR

echo "üîê CRITICAL SECURITY FIX VALIDATION REPORT"
echo "==========================================="
echo "Date: $(date)"
echo "Vulnerability: Docker socket mount + privileged containers"
echo "Risk Level: CRITICAL (CVSS 9.8 - Container Escape)"
echo ""

# Check for dangerous Docker socket mounts
echo "üö® CHECKING FOR DOCKER SOCKET MOUNTS..."
DOCKER_SOCKET_COUNT=$(grep -c "docker\.sock" /opt/sutazaiapp/docker-compose.yml)
DOCKER_SOCKET_ACTIVE=$(grep "docker\.sock" /opt/sutazaiapp/docker-compose.yml | grep -v "# " | wc -l)

echo "   Total docker.sock references: $DOCKER_SOCKET_COUNT"
echo "   Active (non-commented) mounts: $DOCKER_SOCKET_ACTIVE"

if [ "$DOCKER_SOCKET_ACTIVE" -eq 0 ]; then
    echo "   ‚úÖ SECURE: All Docker socket mounts removed or commented out"
else
    echo "   ‚ùå CRITICAL: Active Docker socket mounts found!"
    grep -n "docker\.sock" /opt/sutazaiapp/docker-compose.yml | grep -v "# "
fi

# Check for privileged containers (excluding legitimate monitoring tools)
echo ""
echo "üîì CHECKING FOR PRIVILEGED CONTAINERS..."
PRIVILEGED_TOTAL=$(grep -c "privileged: true" /opt/sutazaiapp/docker-compose.yml)
echo "   Total privileged containers: $PRIVILEGED_TOTAL"

# List all privileged services
echo "   Privileged services found:"
grep -B 10 "privileged: true" /opt/sutazaiapp/docker-compose.yml | grep "container_name:" | sed 's/.*container_name: /     - /'

# Check for pid: host configurations
echo ""
echo "üñ•Ô∏è  CHECKING FOR HOST PID NAMESPACE ACCESS..."
PID_HOST_ACTIVE=$(grep "pid: host" /opt/sutazaiapp/docker-compose.yml | grep -v "# " | wc -l)
echo "   Active pid: host configurations: $PID_HOST_ACTIVE"

if [ "$PID_HOST_ACTIVE" -eq 0 ]; then
    echo "   ‚úÖ SECURE: All pid: host configurations removed"
else
    echo "   ‚ùå CRITICAL: Active pid: host configurations found!"
    grep -n "pid: host" /opt/sutazaiapp/docker-compose.yml | grep -v "# "
fi

# Check security hardening implementations
echo ""
echo "üõ°Ô∏è  CHECKING SECURITY HARDENING..."
SECURITY_OPT_COUNT=$(grep -c "no-new-privileges:true" /opt/sutazaiapp/docker-compose.yml)
CAP_DROP_ALL_COUNT=$(grep -c "ALL" /opt/sutazaiapp/docker-compose.yml | head -1)
USER_NONROOT_COUNT=$(grep -c "1001:1001" /opt/sutazaiapp/docker-compose.yml)

echo "   Security options applied: $SECURITY_OPT_COUNT services"
echo "   Capabilities dropped: $CAP_DROP_ALL_COUNT services"
echo "   Non-root users: $USER_NONROOT_COUNT services"

# Validate specific services that were fixed
echo ""
echo "üéØ VALIDATING FIXED SERVICES..."

# Check jarvis-hardware-resource-optimizer
echo "   jarvis-hardware-resource-optimizer:"
if grep -A 30 "jarvis-hardware-resource-optimizer:" /opt/sutazaiapp/docker-compose.yml | grep -q "privileged: false"; then
    echo "     ‚úÖ privileged: false"
else
    echo "     ‚ùå Still privileged!"
fi

if ! grep -A 30 "jarvis-hardware-resource-optimizer:" /opt/sutazaiapp/docker-compose.yml | grep -q "pid: host" | grep -v "#"; then
    echo "     ‚úÖ pid: host removed"
else
    echo "     ‚ùå pid: host still active!"
fi

if ! grep -A 30 "jarvis-hardware-resource-optimizer:" /opt/sutazaiapp/docker-compose.yml | grep -q "docker\.sock" | grep -v "#"; then
    echo "     ‚úÖ Docker socket removed"
else
    echo "     ‚ùå Docker socket still mounted!"
fi

# Check resource-arbitration-agent
echo "   resource-arbitration-agent:"
if grep -A 30 "resource-arbitration-agent:" /opt/sutazaiapp/docker-compose.yml | grep -q "privileged: false"; then
    echo "     ‚úÖ privileged: false"
else
    echo "     ‚ùå Still privileged!"
fi

# Overall security assessment
echo ""
echo "üìä SECURITY ASSESSMENT SUMMARY"
echo "=============================="

TOTAL_CRITICAL_ISSUES=0
if [ "$DOCKER_SOCKET_ACTIVE" -gt 0 ]; then
    ((TOTAL_CRITICAL_ISSUES++))
fi
if [ "$PID_HOST_ACTIVE" -gt 0 ]; then
    ((TOTAL_CRITICAL_ISSUES++))
fi

# Count legitimate vs illegitimate privileged containers
CADVISOR_PRIVILEGED=$(grep -A 10 -B 10 "privileged: true" /opt/sutazaiapp/docker-compose.yml | grep -c "cadvisor")
ILLEGITIMATE_PRIVILEGED=$((PRIVILEGED_TOTAL - CADVISOR_PRIVILEGED))

if [ "$ILLEGITIMATE_PRIVILEGED" -gt 0 ]; then
    ((TOTAL_CRITICAL_ISSUES++))
fi

echo "Critical vulnerabilities remaining: $TOTAL_CRITICAL_ISSUES"

if [ "$TOTAL_CRITICAL_ISSUES" -eq 0 ]; then
    echo "üéâ SECURITY STATUS: CRITICAL VULNERABILITIES ELIMINATED"
    echo "   All CVSS 9.8 container escape vulnerabilities have been fixed"
    echo "   System is secure from Docker socket exploitation"
    echo "   Host namespace isolation is properly enforced"
    echo ""
    echo "   Remaining privileged containers are legitimate monitoring tools:"
    echo "   - cAdvisor: Required for container metrics collection"
    echo ""
    echo "‚úÖ SECURITY FIX SUCCESSFUL - VULNERABILITIES PATCHED"
else
    echo "‚ùå SECURITY WARNING: $TOTAL_CRITICAL_ISSUES CRITICAL ISSUES REMAIN"
    echo "   System still vulnerable to container escape attacks"
    echo "   Immediate remediation required"
fi

echo ""
echo "Report generated: $(date)"
echo "Next recommended action: Test service functionality with new security constraints"