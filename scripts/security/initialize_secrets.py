#!/usr/bin/env python3
"""
Initialize secure secrets for the SutazAI platform
Compliant with Professional Project Standards
"""

import os
import sys
import secrets
import string
from pathlib import Path
import json
from cryptography.fernet import Fernet

# Add backend to path
sys.path.insert(0, '/opt/sutazaiapp/backend')

def generate_secure_password(length=24):
    """Generate cryptographically secure password"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def initialize_secrets():
    """Initialize all required secrets with secure values"""
    
    secrets_dir = Path("/opt/sutazaiapp/.secrets")
    secrets_dir.mkdir(exist_ok=True, mode=0o700)
    
    # Generate master key if not exists
    master_key_file = secrets_dir / "master.key"
    if not master_key_file.exists():
        master_key = Fernet.generate_key()
        master_key_file.write_bytes(master_key)
        master_key_file.chmod(0o600)
        print(f"‚úÖ Generated master encryption key")
        print(f"‚ö†Ô∏è  IMPORTANT: Back up this key securely: {master_key.decode()}")
    else:
        master_key = master_key_file.read_bytes()
        print("‚úÖ Using existing master key")
    
    cipher = Fernet(master_key)
    
    # Define secrets to generate
    secrets_to_create = {
        "POSTGRES_PASSWORD": generate_secure_password(32),
        "REDIS_PASSWORD": generate_secure_password(32),
        "NEO4J_PASSWORD": generate_secure_password(32),
        "RABBITMQ_PASSWORD": generate_secure_password(32),
        "CHROMADB_TOKEN": generate_secure_password(40),
        "JWT_SECRET_KEY": secrets.token_urlsafe(64),
        "API_KEY": secrets.token_urlsafe(32),
        "ENCRYPTION_KEY": Fernet.generate_key().decode(),
    }
    
    # Load existing secrets if any
    secrets_file = secrets_dir / "secrets.enc"
    existing_secrets = {}
    
    if secrets_file.exists():
        try:
            encrypted_data = secrets_file.read_bytes()
            decrypted = cipher.decrypt(encrypted_data)
            existing_secrets = json.loads(decrypted.decode())
            print("‚úÖ Loaded existing secrets")
        except Exception as e:
            print(f"‚ö†Ô∏è  Could not load existing secrets: {e}")
    
    # Only create secrets that don't exist
    updated = False
    for key, value in secrets_to_create.items():
        if key not in existing_secrets:
            existing_secrets[key] = value
            print(f"‚úÖ Generated secret: {key}")
            updated = True
        else:
            print(f"‚ÑπÔ∏è  Secret already exists: {key}")
    
    if updated:
        # Encrypt and save
        encrypted = cipher.encrypt(json.dumps(existing_secrets).encode())
        secrets_file.write_bytes(encrypted)
        secrets_file.chmod(0o600)
        print("\n‚úÖ Secrets initialized successfully")
        
        # Create .env.secure for reference (not for production use)
        env_file = secrets_dir / ".env.secure"
        with open(env_file, 'w') as f:
            f.write("# SECURE ENVIRONMENT VARIABLES\n")
            f.write("# DO NOT COMMIT THIS FILE\n")
            f.write("# Generated by initialize_secrets.py\n\n")
            
            for key, value in existing_secrets.items():
                f.write(f"{key}={value}\n")
        
        env_file.chmod(0o600)
        print(f"üìù Reference file created: {env_file}")
        print("‚ö†Ô∏è  This file is for reference only. Production should use the secrets manager.")
    else:
        print("\n‚úÖ All secrets already initialized")
    
    # Validate secrets
    from app.core.secrets_manager import get_secrets_manager
    
    manager = get_secrets_manager()
    validation = manager.validate_secrets()
    
    print("\nüîç Secrets Validation:")
    all_valid = True
    for secret, is_valid in validation.items():
        status = "‚úÖ" if is_valid else "‚ùå"
        print(f"  {status} {secret}")
        if not is_valid:
            all_valid = False
    
    if all_valid:
        print("\n‚úÖ All required secrets are properly configured")
    else:
        print("\n‚ùå Some secrets are missing. Please configure them.")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(initialize_secrets())