#!/bin/bash
"""
Setup script for Functionality Preservation Validator

Purpose: Installs and configures the functionality preservation validator
Usage: ./setup-functionality-validator.sh [--install-hooks] [--configure-ci]
Requirements: Git repository, Python 3.8+
"""

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VALIDATOR_SCRIPT="$SCRIPT_DIR/functionality-preservation-validator.py"
CONFIG_FILE="$SCRIPT_DIR/functionality-preservation-config.yaml"
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || echo ".")"

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_requirements() {
    log_info "Checking requirements..."
    
    # Check if we're in a git repository
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        log_error "Not in a git repository. Please run this script from within a git repository."
        exit 1
    fi
    
    # Check Python version
    if ! python3 -c "import sys; exit(0 if sys.version_info >= (3, 8) else 1)" 2>/dev/null; then
        log_error "Python 3.8+ is required"
        exit 1
    fi
    
    # Check if validator script exists
    if [[ ! -f "$VALIDATOR_SCRIPT" ]]; then
        log_error "Validator script not found at: $VALIDATOR_SCRIPT"
        exit 1
    fi
    
    # Make validator executable
    chmod +x "$VALIDATOR_SCRIPT"
    
    log_success "Requirements check passed"
}

install_python_dependencies() {
    log_info "Installing Python dependencies..."
    
    # Try to install required packages
    local packages=("ast" "json" "pathlib" "dataclasses" "subprocess")
    local missing_packages=()
    
    for package in "${packages[@]}"; do
        if ! python3 -c "import $package" 2>/dev/null; then
            missing_packages+=("$package")
        fi
    done
    
    if [[ ${#missing_packages[@]} -gt 0 ]]; then
        log_warning "Some packages might need to be installed: ${missing_packages[*]}"
        log_info "Most of these are built-in Python modules. If you see import errors, install them manually."
    fi
    
    # Try to install pytest if not available (optional but recommended)
    if ! python3 -c "import pytest" 2>/dev/null; then
        log_info "Installing pytest for test validation..."
        pip3 install pytest pytest-json-report 2>/dev/null || log_warning "Could not install pytest automatically"
    fi
    
    log_success "Python dependencies handled"
}

install_git_hooks() {
    log_info "Installing git hooks..."
    
    local hooks_dir="${REPO_ROOT}/.git/hooks"
    local pre_commit_hook="${hooks_dir}/pre-commit"
    
    # Create hooks directory if it doesn't exist
    mkdir -p "$hooks_dir"
    
    # Backup existing pre-commit hook if it exists
    if [[ -f "$pre_commit_hook" ]]; then
        log_warning "Existing pre-commit hook found. Backing up to pre-commit.backup"
        cp "$pre_commit_hook" "${pre_commit_hook}.backup"
    fi
    
    # Create the pre-commit hook
    cat > "$pre_commit_hook" << 'EOF'
#!/bin/bash
# Functionality Preservation Validator Git Hook
# Auto-generated by setup-functionality-validator.sh

set -e

echo "üîç Running functionality preservation validation..."

# Find the validator script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel)"
VALIDATOR_SCRIPT="$REPO_ROOT/scripts/agents/functionality-preservation-validator.py"

if [[ ! -f "$VALIDATOR_SCRIPT" ]]; then
    echo "‚ùå Validator script not found at: $VALIDATOR_SCRIPT"
    echo "Please run scripts/agents/setup-functionality-validator.sh to reinstall"
    exit 1
fi

# Run validation with summary format for quick feedback
python3 "$VALIDATOR_SCRIPT" validate --format=summary

validation_result=$?

if [[ $validation_result -ne 0 ]]; then
    echo ""
    echo "‚ùå Functionality preservation validation failed!"
    echo "üîç Run for detailed analysis:"
    echo "    python3 scripts/agents/functionality-preservation-validator.py validate --format=detailed"
    echo ""
    echo "üö´ Commit blocked due to breaking changes."
    echo "üí° To bypass this check (NOT RECOMMENDED), use: git commit --no-verify"
    exit 1
fi

echo "‚úÖ Functionality preservation validation passed. Proceeding with commit."
EOF
    
    # Make the hook executable
    chmod +x "$pre_commit_hook"
    
    log_success "Git pre-commit hook installed at: $pre_commit_hook"
}

create_ci_config() {
    log_info "Creating CI/CD configuration examples..."
    
    local ci_dir="${REPO_ROOT}/.github/workflows"
    mkdir -p "$ci_dir"
    
    # GitHub Actions workflow
    cat > "${ci_dir}/functionality-validation.yml" << 'EOF'
name: Functionality Preservation Validation

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  validate-functionality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Need full history for comparison
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-json-report
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run functionality preservation validation
      run: |
        python scripts/agents/functionality-preservation-validator.py validate --format=json > validation-report.json
        echo "Validation completed. Checking results..."
        
        # Check if validation passed
        if ! python scripts/agents/functionality-preservation-validator.py validate --format=summary; then
          echo "‚ùå Breaking changes detected!"
          echo "üìä Full report:"
          cat validation-report.json
          exit 1
        fi
    
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: functionality-validation-report
        path: validation-report.json
    
    - name: Comment PR with results
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('validation-report.json')) {
            const report = JSON.parse(fs.readFileSync('validation-report.json', 'utf8'));
            const summary = report.summary;
            
            const comment = `## üîç Functionality Preservation Validation Results
            
            **Summary:**
            - Total checks: ${summary.total_checks}
            - Passed: ‚úÖ ${summary.passed}
            - Warnings: ‚ö†Ô∏è ${summary.warnings}
            - Failures: ‚ùå ${summary.failures}
            - Breaking changes: üö´ ${summary.breaking_changes}
            
            ${summary.breaking_changes > 0 ? '‚ùå **BREAKING CHANGES DETECTED** - Review required before merge' : '‚úÖ No breaking changes detected'}
            
            <details>
            <summary>View detailed results</summary>
            
            \`\`\`json
            ${JSON.stringify(report.results.slice(0, 10), null, 2)}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
EOF
    
    log_success "GitHub Actions workflow created at: ${ci_dir}/functionality-validation.yml"
    
    # GitLab CI configuration
    cat > "${REPO_ROOT}/.gitlab-ci-functionality.yml" << 'EOF'
# GitLab CI configuration for Functionality Preservation Validation
# Include this in your main .gitlab-ci.yml file

functionality-validation:
  stage: test
  image: python:3.9
  
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  
  cache:
    paths:
      - .cache/pip/
  
  before_script:
    - python -m pip install --upgrade pip
    - pip install pytest pytest-json-report
    - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  
  script:
    - echo "üîç Running functionality preservation validation..."
    - python scripts/agents/functionality-preservation-validator.py validate --format=json > validation-report.json
    - python scripts/agents/functionality-preservation-validator.py validate --format=summary
  
  artifacts:
    when: always
    reports:
      junit: validation-report.json
    paths:
      - validation-report.json
    expire_in: 1 week
  
  only:
    - merge_requests
    - main
    - develop
EOF
    
    log_success "GitLab CI configuration created at: ${REPO_ROOT}/.gitlab-ci-functionality.yml"
}

test_installation() {
    log_info "Testing installation..."
    
    # Test basic functionality
    log_info "Running basic validation test..."
    if python3 "$VALIDATOR_SCRIPT" validate --format=summary --repo-path="$REPO_ROOT" >/dev/null 2>&1; then
        log_success "Basic validation test passed"
    else
        log_warning "Basic validation test had issues, but this might be expected if there are actual changes to review"
    fi
    
    # Test configuration loading
    if [[ -f "$CONFIG_FILE" ]]; then
        log_info "Configuration file found: $CONFIG_FILE"
        log_success "Configuration validation passed"
    else
        log_warning "No configuration file found. Using default settings."
    fi
    
    log_success "Installation test completed"
}

show_usage() {
    cat << EOF
üõ°Ô∏è  Functionality Preservation Validator Setup

Usage: $0 [OPTIONS]

OPTIONS:
  --install-hooks    Install git pre-commit hooks (default: yes)
  --configure-ci     Create CI/CD configuration files (default: yes)
  --test-only       Only run tests, don't install anything
  --help, -h        Show this help message

EXAMPLES:
  $0                              # Full installation
  $0 --install-hooks              # Install only git hooks
  $0 --configure-ci               # Create only CI configs
  $0 --test-only                  # Test existing installation

The validator enforces Rule 2: Do Not Break Existing Functionality by:
‚úÖ Analyzing code changes for breaking modifications
‚úÖ Running test comparisons to detect regressions
‚úÖ Checking API compatibility and schema changes
‚úÖ Providing detailed reports with actionable suggestions
‚úÖ Integrating with git hooks to prevent breaking commits

After installation:
‚Ä¢ Commits will be automatically validated
‚Ä¢ Breaking changes will block commits
‚Ä¢ Detailed reports available via: python scripts/agents/functionality-preservation-validator.py validate

EOF
}

main() {
    local install_hooks=true
    local configure_ci=true
    local test_only=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --install-hooks)
                install_hooks=true
                configure_ci=false
                shift
                ;;
            --configure-ci)
                configure_ci=true
                install_hooks=false
                shift
                ;;
            --test-only)
                test_only=true
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    echo "üõ°Ô∏è  Functionality Preservation Validator Setup"
    echo "============================================="
    echo
    
    if [[ "$test_only" == "true" ]]; then
        test_installation
        exit 0
    fi
    
    # Run setup steps
    check_requirements
    install_python_dependencies
    
    if [[ "$install_hooks" == "true" ]]; then
        install_git_hooks
    fi
    
    if [[ "$configure_ci" == "true" ]]; then
        create_ci_config
    fi
    
    test_installation
    
    echo
    log_success "üéâ Functionality Preservation Validator setup completed!"
    echo
    echo "Next steps:"
    echo "1. üìñ Read the documentation: scripts/agents/README-functionality-validator.md"
    echo "2. üß™ Test the validator: python scripts/agents/functionality-preservation-validator.py validate"
    echo "3. ‚öôÔ∏è  Customize settings: scripts/agents/functionality-preservation-config.yaml"
    echo "4. üîç Make a test commit to see the validator in action"
    echo
    echo "The validator will now:"
    echo "‚Ä¢ ‚úÖ Block commits with breaking changes"  
    echo "‚Ä¢ ‚ö†Ô∏è  Warn about potentially risky modifications"
    echo "‚Ä¢ üìä Provide detailed impact analysis reports"
    echo "‚Ä¢ üß™ Compare test results before and after changes"
    echo
    log_info "Rule 2 enforcement is now active! üõ°Ô∏è"
}

# Run main function with all arguments
main "$@"