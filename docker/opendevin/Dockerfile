FROM python:3.11-slim

WORKDIR /app

# Install system dependencies including Node.js
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    nodejs \
    npm \
    docker.io \
    && rm -rf /var/lib/apt/lists/* && rm -rf /var/lib/apt/lists/* && rm -rf /var/lib/apt/lists/*

# Clone OpenDevin repository
RUN git clone https://github.com/OpenDevin/OpenDevin.git . || mkdir -p /app

# Install Python dependencies
RUN pip install --no-cache-dir \
    fastapi \
    uvicorn \
    httpx \
    websockets \
    docker \
    gitpython

# If repo exists, install its dependencies
RUN if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi

# Create a simple OpenDevin service wrapper
RUN echo 'from fastapi import FastAPI, HTTPException\n\
from pydantic import BaseModel\n\
from typing import List, Dict, Any\n\
import subprocess\n\
import os\n\
import docker\n\
import git\n\
\n\
app = FastAPI(title="OpenDevin - AI Software Engineer")\n\
\n\
class CodeRequest(BaseModel):\n\
    task: str\n\
    language: str = "python"\n\
    framework: str = ""\n\
    requirements: List[str] = []\n\
    workspace: str = "/workspace"\n\
\n\
class CodeResponse(BaseModel):\n\
    status: str\n\
    files_created: List[str]\n\
    code: Dict[str, str]\n\
    logs: List[str]\n\
\n\
@app.post("/generate", response_model=CodeResponse)\n\
async def generate_code(request: CodeRequest):\n\
    """Generate code for a given task"""\n\
    workspace = request.workspace\n\
    os.makedirs(workspace, exist_ok=True)\n\
    \n\
    # Simple code generation logic\n\
    files_created = []\n\
    code = {}\n\
    logs = []\n\
    \n\
    if request.language == "python":\n\
        # Generate Python project structure\n\
        main_file = os.path.join(workspace, "main.py")\n\
        code["main.py"] = f"""# {request.task}\n\
# Generated by OpenDevin\n\
\n\
def main():\n\
    \"\"\"Main function for {request.task}\"\"\"\n\
    print("Implementing: {request.task}")\n\
    # TODO: Implement the task\n\
    pass\n\
\n\
if __name__ == "__main__":\n\
    main()\n\
"""\n\
        with open(main_file, "w") as f:\n\
            f.write(code["main.py"])\n\
        files_created.append(main_file)\n\
        \n\
        # Generate requirements.txt\n\
        if request.requirements:\n\
            req_file = os.path.join(workspace, "requirements.txt")\n\
            code["requirements.txt"] = "\\n".join(request.requirements)\n\
            with open(req_file, "w") as f:\n\
                f.write(code["requirements.txt"])\n\
            files_created.append(req_file)\n\
        \n\
        logs.append(f"Generated Python project for: {request.task}")\n\
    \n\
    return CodeResponse(\n\
        status="completed",\n\
        files_created=files_created,\n\
        code=code,\n\
        logs=logs\n\
    )\n\
\n\
@app.post("/improve")\n\
async def improve_code(file_path: str, instruction: str):\n\
    """Improve existing code"""\n\
    if not os.path.exists(file_path):\n\
        raise HTTPException(status_code=404, detail="File not found")\n\
    \n\
    with open(file_path, "r") as f:\n\
        original_code = f.read()\n\
    \n\
    # Simple improvement logic - in production, use LLM\n\
    improved_code = f"""# Improved by OpenDevin\n\
# Instruction: {instruction}\n\
\n\
{original_code}\n\
"""\n\
    \n\
    # Save improved version\n\
    improved_path = file_path.replace(".py", "_improved.py")\n\
    with open(improved_path, "w") as f:\n\
        f.write(improved_code)\n\
    \n\
    return {\n\
        "original_file": file_path,\n\
        "improved_file": improved_path,\n\
        "instruction": instruction,\n\
        "status": "completed"\n\
    }\n\
\n\
@app.post("/execute")\n\
async def execute_task(task: str):\n\
    """Execute a development task autonomously"""\n\
    # Simplified autonomous execution\n\
    steps = [\n\
        f"Understanding task: {task}",\n\
        "Planning implementation approach",\n\
        "Generating code structure",\n\
        "Implementing core functionality",\n\
        "Adding tests",\n\
        "Documenting code"\n\
    ]\n\
    \n\
    results = []\n\
    for step in steps:\n\
        results.append({"step": step, "status": "completed"})\n\
    \n\
    return {\n\
        "task": task,\n\
        "steps": results,\n\
        "status": "completed"\n\
    }\n\
\n\
@app.get("/health")\n\
async def health():\n\
    return {"status": "healthy", "service": "opendevin"}\n\
\n\
@app.get("/")\n\
async def root():\n\
    return {\n\
        "service": "OpenDevin - AI Software Engineer",\n\
        "endpoints": [\n\
            "/generate - Generate code for a task",\n\
            "/improve - Improve existing code",\n\
            "/execute - Execute development task",\n\
            "/health - Health check"\n\
        ]\n\
    }\n' > main.py

EXPOSE 3000


# Run as non-root user
USER nobody

# Run as non-root user
USER nobody
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "3000"]