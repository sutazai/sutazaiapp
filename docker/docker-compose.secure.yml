# Rule 11 Compliant Docker Compose Configuration
# All services use pinned versions, non-root users, health checks, and resource limits
# Last Updated: 2025-01-15

version: '3.8'

networks:
  sutazai-network:
    external: true
    name: sutazai-network

services:
  postgres:
    image: postgres:16.3-alpine3.20
    container_name: sutazai-postgres
    user: "999:999"  # postgres user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10000:5432"
    restart: unless-stopped

  redis:
    image: redis:7.2.5-alpine3.20
    container_name: sutazai-redis
    user: "999:999"  # redis user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command: redis-server /usr/local/etc/redis/redis.conf --appendonly no
    volumes:
      - redis_data:/data
      - ./config/redis-optimized.conf:/usr/local/etc/redis/redis.conf:ro
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network
    ports:
      - "10001:6379"
    restart: unless-stopped

  neo4j:
    image: neo4j:5.15.0-community
    container_name: sutazai-neo4j
    user: "7474:7474"  # neo4j user
    security_opt:
      - no-new-privileges:true
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_server_memory_heap_max__size: 512m
      NEO4J_server_memory_heap_initial__size: 256m
      NEO4J_server_memory_pagecache_size: 256m
      NEO4J_server_jvm_additional: "-XX:+UseG1GC -XX:G1HeapRegionSize=4m -XX:+DisableExplicitGC -XX:+ExitOnOutOfMemoryError"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/ || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    volumes:
      - neo4j_data:/data
    networks:
      - sutazai-network
    ports:
      - "10002:7474"
      - "10003:7687"
    restart: unless-stopped

  ollama:
    image: ollama/ollama:0.3.13
    container_name: sutazai-ollama
    security_opt:
      - no-new-privileges:true
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_KEEP_ALIVE: 5m
      OLLAMA_MAX_LOADED_MODELS: '1'
      OLLAMA_NUM_PARALLEL: '1'
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ollama_data:/home/ollama/.ollama
      - models_data:/models
    networks:
      - sutazai-network
    ports:
      - "10104:11434"
    restart: unless-stopped
    sysctls:
      - net.core.somaxconn=65535
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    security_opt:
      - no-new-privileges:true
    environment:
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthenticationServerProvider
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_API_KEY}
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - sutazai-network
    ports:
      - "10100:8000"
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:v1.9.7
    container_name: sutazai-qdrant
    security_opt:
      - no-new-privileges:true
    environment:
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 60s
      timeout: 30s
      retries: 5
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - sutazai-network
    ports:
      - "10101:6333"
      - "10102:6334"
    restart: unless-stopped

  faiss:
    build:
      context: ./faiss
      dockerfile: Dockerfile
    image: sutazaiapp-faiss:v1.0.0
    container_name: sutazai-faiss
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 60s
      timeout: 30s
      retries: 5
    volumes:
      - faiss_data:/data
    networks:
      - sutazai-network
    ports:
      - "10103:8000"
    restart: unless-stopped

  kong:
    image: kong:3.5.0-alpine
    container_name: sutazai-kong
    security_opt:
      - no-new-privileges:true
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong-optimized.yml
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_LOG_LEVEL: error
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - ./config/kong/kong-optimized.yml:/etc/kong/kong-optimized.yml:ro
    networks:
      - sutazai-network
    ports:
      - "10005:8000"
      - "10015:8001"
    restart: unless-stopped

  consul:
    image: hashicorp/consul:1.17.1
    container_name: sutazai-consul
    security_opt:
      - no-new-privileges:true
    command:
      - agent
      - -server
      - -bootstrap-expect=1
      - -ui
      - -client=0.0.0.0
      - -data-dir=/consul/data
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 10s
    volumes:
      - ./config/consul/consul.hcl:/consul/config/consul.hcl:ro
      - consul_data:/consul/data
    networks:
      - sutazai-network
    ports:
      - "10006:8500"
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.12.14-management-alpine
    container_name: sutazai-rabbitmq
    security_opt:
      - no-new-privileges:true
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-sutazai}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 20s
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - sutazai-network
    ports:
      - "10007:5672"
      - "10008:15672"
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: sutazaiapp-backend:v1.0.0
    container_name: sutazai-backend
    security_opt:
      - no-new-privileges:true
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_started
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    environment:
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      NEO4J_HOST: neo4j
      OLLAMA_HOST: ollama
      CHROMADB_HOST: chromadb
      QDRANT_HOST: qdrant
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    volumes:
      - ./backend:/app:ro
    networks:
      - sutazai-network
    ports:
      - "10010:8000"
    restart: unless-stopped

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    image: sutazaiapp-frontend:v1.0.0
    container_name: sutazai-frontend
    security_opt:
      - no-new-privileges:true
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/"]
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    volumes:
      - ./frontend:/app:ro
    networks:
      - sutazai-network
    ports:
      - "10011:8501"
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  ollama_data:
  models_data:
  chromadb_data:
  qdrant_data:
  faiss_data:
  consul_data:
  rabbitmq_data: