# Security Hardened Docker Compose Configuration
# Purpose: Rule 11 compliant production deployment with maximum security
# Usage: docker-compose -f docker-compose.security.yml up -d

version: '3.8'

networks:
  sutazai-network:
    external: true
    name: sutazai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  chromadb_data:
    driver: local
  qdrant_data:
    driver: local
  ollama_data:
    driver: local
  consul_data:
    driver: local
  rabbitmq_data:
    driver: local

services:
  # PostgreSQL Database - Security Hardened
  postgres:
    image: postgres:16.3-alpine3.20
    container_name: sutazai-postgres
    user: "999:999"  # postgres user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /run
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sutazai}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10000:5432"
    restart: unless-stopped

  # Redis Cache - Security Hardened
  redis:
    image: redis:7.2.5-alpine3.20
    container_name: sutazai-redis
    user: "999:999"  # redis user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command: redis-server /usr/local/etc/redis/redis.conf --user default off --user sutazai on >${REDIS_PASSWORD} ~* +@all
    volumes:
      - redis_data:/data
      - ./config/redis-secure.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "redis-cli --user sutazai --pass ${REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-network
    ports:
      - "10001:6379"
    restart: unless-stopped

  # Neo4j Graph Database - Security Hardened
  neo4j:
    image: neo4j:5.15.0-community
    container_name: sutazai-neo4j
    user: "7474:7474"  # neo4j user
    security_opt:
      - no-new-privileges:true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_server_memory_heap_max__size: 512m
      NEO4J_server_memory_heap_initial__size: 256m
      NEO4J_server_memory_pagecache_size: 256m
      NEO4J_initial_dbms_default__database: sutazai
      NEO4J_db_checkpoint_interval_time: 30s
      NEO4J_db_transaction_timeout: 30s
      NEO4J_db_logs_query_enabled: 'OFF'
      NEO4J_server_config_strict__validation_enabled: 'true'
      NEO4J_dbms_security_procedures_unrestricted: 'gds.*'
      NEO4J_dbms_security_auth_enabled: 'true'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474/ || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    networks:
      - sutazai-network
    ports:
      - "10002:7474"
      - "10003:7687"
    restart: unless-stopped

  # ChromaDB Vector Database - Security Hardened
  chromadb:
    image: chromadb/chroma:0.5.5
    container_name: sutazai-chromadb
    user: "1000:1000"  # chroma user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_API_KEY}
      - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthenticationServerProvider
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10100:8000"
    restart: unless-stopped

  # Qdrant Vector Search - Security Hardened
  qdrant:
    image: qdrant/qdrant:v1.11.3
    container_name: sutazai-qdrant
    user: "1000:1000"  # qdrant user
    security_opt:
      - no-new-privileges:true
    volumes:
      - qdrant_data:/qdrant/storage
      - ./config/qdrant-config.yaml:/qdrant/config/production.yaml:ro
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__SERVICE__ENABLE_CORS=false
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10101:6333"
      - "10102:6334"
    restart: unless-stopped

  # Ollama LLM Server - Security Hardened
  ollama:
    image: ollama/ollama:0.3.6
    container_name: sutazai-ollama
    user: "1000:1000"  # ollama user
    security_opt:
      - no-new-privileges:true
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=http://localhost:*,http://127.0.0.1:*,http://sutazai-*
      - OLLAMA_MAX_LOADED_MODELS=3
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10104:11434"
    restart: unless-stopped

  # Kong API Gateway - Security Hardened
  kong:
    image: kong:3.7.1-alpine
    container_name: sutazai-kong
    user: "100:101"  # kong user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /kong_prefix
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_LISTEN=0.0.0.0:8002
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_LOG_LEVEL=notice
      - KONG_PLUGINS=bundled,rate-limiting,cors,key-auth,jwt,oauth2
    volumes:
      - ./config/kong/kong.yml:/kong/declarative/kong.yml:ro
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10005:8000"
      - "10015:8001"
    restart: unless-stopped

  # Consul Service Discovery - Security Hardened
  consul:
    image: consul:1.19.1
    container_name: sutazai-consul
    user: "100:1000"  # consul user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /consul/data
    command: consul agent -server -ui -bootstrap-expect=1 -client=0.0.0.0 -bind=0.0.0.0 -datacenter=sutazai
    volumes:
      - consul_data:/consul/data
      - ./config/consul/consul.hcl:/consul/config/consul.hcl:ro
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10006:8500"
    restart: unless-stopped

  # RabbitMQ Message Queue - Security Hardened
  rabbitmq:
    image: rabbitmq:3.13.6-management-alpine
    container_name: sutazai-rabbitmq
    user: "999:999"  # rabbitmq user
    security_opt:
      - no-new-privileges:true
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    environment:
      - RABBITMQ_DEFAULT_USER=sutazai
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=sutazai
      - RABBITMQ_MANAGEMENT_PATH_PREFIX=/rabbitmq
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10007:5672"
      - "10008:15672"
    restart: unless-stopped

  # Backend API - Security Hardened
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: production
    image: sutazai-backend:latest
    container_name: sutazai-backend
    user: "1000:1000"  # app user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=warning
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      - REDIS_URL=redis://sutazai:${REDIS_PASSWORD}@redis:6379/0
      - NEO4J_URL=neo4j://neo4j:${NEO4J_PASSWORD}@neo4j:7687
      - CHROMADB_URL=http://chromadb:8000
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10010:8000"
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - neo4j

  # Frontend UI - Security Hardened
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile.secure
      target: production
    image: sutazai-frontend:latest
    container_name: sutazai-frontend
    user: "1000:1000"  # app user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    environment:
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - BACKEND_URL=http://backend:8000
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10011:8501"
    restart: unless-stopped
    depends_on:
      - backend