# Security configuration for Docker containers
version: '3.8'

# Security-enhanced service configurations
x-security-defaults: &security-defaults
  # User namespace remapping
  userns_mode: "host"
  # Read-only root filesystem
  read_only: true
  # No new privileges
  security_opt:
    - no-new-privileges:true
    - apparmor:docker-default
  # Drop all capabilities and add only required ones
  cap_drop:
    - ALL
  # Resource limits
  deploy:
    resources:
      limits:
        cpus: '2'
        memory: 2G
      reservations:
        cpus: '0.5'
        memory: 512M

services:
  # Secure backend configuration
  backend-secure:
    <<: *security-defaults
    build:
      context: ../../backend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: sutazai-backend:secure
    container_name: sutazai-backend-secure
    environment:
      # Security environment variables
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-generate-a-secure-key}
      - ENCRYPTION_KEY_FILE=/keys/master.key
      - SSL_CERT_FILE=/certs/server.crt
      - SSL_KEY_FILE=/certs/server.key
      - ENABLE_SECURITY_HEADERS=true
      - ENABLE_RATE_LIMITING=true
      - MAX_REQUEST_SIZE=10485760  # 10MB
    volumes:
      # Mount as read-only where possible
      - ./keys:/keys:ro
      - ./certs:/certs:ro
      - /tmp:/tmp:rw  # Writable temp directory
    tmpfs:
      - /run
      - /var/cache
    cap_add:
      - NET_BIND_SERVICE  # Only if binding to privileged ports
    networks:
      - secure-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Secure database configuration
  postgres-secure:
    <<: *security-defaults
    image: postgres:15-alpine
    container_name: sutazai-postgres-secure
    read_only: false  # Database needs write access
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_USER=sutazai
      - POSTGRES_DB=sutazai
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    secrets:
      - db_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-ssl:/var/lib/postgresql/ssl:ro
    tmpfs:
      - /run
      - /tmp
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    networks:
      - secure-network
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/ssl/server.crt
      -c ssl_key_file=/var/lib/postgresql/ssl/server.key
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_connections=on
      -c log_disconnections=on

  # Secure Redis configuration
  redis-secure:
    <<: *security-defaults
    image: redis:7-alpine
    container_name: sutazai-redis-secure
    read_only: false
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --protected-mode yes
      --bind 0.0.0.0
      --port 6379
      --timeout 300
      --tcp-keepalive 60
      --tcp-backlog 511
      --loglevel warning
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-generate-a-secure-password}
    volumes:
      - redis-data:/data
    tmpfs:
      - /tmp
    networks:
      - secure-network

  # Secure Nginx reverse proxy
  nginx-secure:
    <<: *security-defaults
    image: nginx:alpine
    container_name: sutazai-nginx-secure
    read_only: true
    volumes:
      - ./nginx/nginx-secure.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-run:/var/run
    tmpfs:
      - /tmp
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
    ports:
      - "443:443"
      - "80:80"
    networks:
      - secure-network
    depends_on:
      - backend-secure

  # Security monitoring with Falco
  falco:
    image: falcosecurity/falco:latest
    container_name: sutazai-falco
    privileged: true
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./falco/rules:/etc/falco/rules.d:ro
    networks:
      - secure-network

  # Vulnerability scanner
  trivy:
    image: aquasec/trivy:latest
    container_name: sutazai-trivy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache
    networks:
      - secure-network
    command: image --severity CRITICAL,HIGH,MEDIUM --no-progress

# Secure networks
networks:
  secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-secure
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
          gateway: 172.28.0.1

# Secure volumes
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: /secure/data/postgres
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: /secure/data/redis
      o: bind
  nginx-cache:
    driver: local
  nginx-run:
    driver: local
  trivy-cache:
    driver: local

# Secrets
secrets:
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  ssl_cert:
    file: ./certs/server.crt
  ssl_key:
    file: ./certs/server.key