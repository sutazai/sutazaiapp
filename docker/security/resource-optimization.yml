# Docker Resource Optimization Configuration
# Rule 11 Compliance: Container resource efficiency and limits
# Generated: 2025-08-15 UTC

version: '3.8'

# Resource optimization templates
x-resource-templates:
  # Micro services (< 100MB RAM, 0.1 CPU)
  x-micro-resources: &micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Small services (< 500MB RAM, 0.5 CPU)
  x-small-resources: &small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Medium services (< 2GB RAM, 1 CPU)
  x-medium-resources: &medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s

  # Large services (< 4GB RAM, 2 CPU)
  x-large-resources: &large-resources
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
    healthcheck:
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 60s

  # XL services (< 8GB RAM, 4 CPU)
  x-xl-resources: &xl-resources
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 3
        window: 180s
    healthcheck:
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 90s

services:
  # Database services - Large resources
  postgres:
    <<: *large-resources
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints:
          - node.role == manager
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
      - /dev/shm:/dev/shm:rw  # Shared memory for performance
    shm_size: 256m
    ulimits:
      nofile:
        soft: 2048
        hard: 4096
      memlock:
        soft: -1
        hard: -1

  redis:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    ulimits:
      nofile:
        soft: 10240
        hard: 20480
    sysctls:
      - net.core.somaxconn=65535
      - vm.overcommit_memory=1

  neo4j:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    ulimits:
      nofile:
        soft: 4096
        hard: 8192

  # Vector databases - Medium resources
  chromadb:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  qdrant:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M

  faiss:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # AI Services - XL resources for model inference
  ollama:
    <<: *xl-resources
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 2G
      placement:
        constraints:
          - node.role == manager
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 8192
        hard: 16384
    shm_size: 2g

  # Application services - Medium resources
  backend:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    ulimits:
      nofile:
        soft: 1024
        hard: 2048

  frontend:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
      replicas: 1

  # Agent services - Small resources
  ai-agent-orchestrator:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  hardware-resource-optimizer:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  jarvis-automation-agent:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  jarvis-hardware-optimizer:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  ollama-integration:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  resource-arbitration-agent:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  task-assignment-coordinator:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring services - Small to medium resources
  prometheus:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
      placement:
        constraints:
          - node.role == manager

  grafana:
    <<: *small-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  loki:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  cadvisor:
    <<: *micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 200M
        reservations:
          cpus: '0.05'
          memory: 50M
      mode: global

  node-exporter:
    <<: *micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.02'
          memory: 16M
      mode: global

  blackbox-exporter:
    <<: *micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.02'
          memory: 16M

  redis-exporter:
    <<: *micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.02'
          memory: 16M

  postgres-exporter:
    <<: *micro-resources
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.02'
          memory: 16M

  # Message queue services
  rabbitmq:
    <<: *medium-resources
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    ulimits:
      nofile:
        soft: 2048
        hard: 4096

# Global resource optimization settings
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    compress: "true"

# Apply logging to all services
logging: *default-logging