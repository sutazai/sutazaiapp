# ============================================================================
# SUTAZAI MASTER TEMPLATE: Documentation Base
# ============================================================================
# Purpose: Production-ready documentation generation service
# Security: Non-root user, secure documentation environment
# Performance: Optimized for docs generation and serving
# Compatibility: Sphinx, MkDocs, GitBook, OpenAPI docs
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

FROM python:3.12.8-slim-bookworm as base

# ============================================================================
# DOCUMENTATION ENVIRONMENT CONFIGURATION
# ============================================================================

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    DEBIAN_FRONTEND=noninteractive

# Install documentation system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        git \
        build-essential \
        nodejs \
        npm \
        && rm -rf /var/lib/apt/lists/*

# Create documentation user
RUN groupadd --gid 1000 docsuser && \
    useradd --uid 1000 --gid 1000 --create-home --shell /bin/bash docsuser

# ============================================================================
# DOCUMENTATION TOOLS INSTALLATION
# ============================================================================

WORKDIR /app

# Install Python documentation tools
RUN pip install --upgrade pip setuptools wheel

RUN pip install --no-cache-dir \
        sphinx>=7.2.6 \
        sphinx-rtd-theme>=1.3.0 \
        sphinx-autodoc-typehints>=1.25.0 \
        sphinx-copybutton>=0.5.2 \
        myst-parser>=2.0.0 \
        mkdocs>=1.5.3 \
        mkdocs-material>=9.4.0 \
        mkdocs-mermaid2-plugin>=1.1.0 \
        mkdocs-git-revision-date-localized-plugin>=1.2.0 \
        mkdocstrings[python]>=0.24.0 \
        pydantic>=2.5.1 \
        fastapi>=0.104.1 \
        uvicorn>=0.24.0 \
        jinja2>=3.1.2 \
        markdown>=3.5.0 \
        pyyaml>=6.0.1 \
        watchdog>=3.0.0

# Install Node.js documentation tools
RUN npm install -g \
        gitbook-cli@latest \
        docsify-cli@latest \
        vuepress@latest \
        @redocly/cli@latest

# ============================================================================
# DOCUMENTATION FRAMEWORK SETUP
# ============================================================================

# Create Sphinx documentation template
RUN mkdir -p /app/sphinx_docs && cat > /app/sphinx_docs/conf.py << 'EOF'
# Sphinx Configuration for SutazAI Documentation
import os
import sys
sys.path.insert(0, os.path.abspath('../'))

# Project information
project = 'SutazAI'
copyright = '2025, SutazAI Team'
author = 'SutazAI Team'
version = '1.0.0'
release = '1.0.0'

# Extensions
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    'sphinx_rtd_theme',
    'sphinx_copybutton',
    'myst_parser'
]

# Templates and themes
templates_path = ['_templates']
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
html_theme = 'sphinx_rtd_theme'
html_static_path = ['_static']

# HTML theme options
html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    'style_nav_header_background': '#2980B9',
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}

# Autodoc settings
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
    'special-members': '__init__',
    'undoc-members': True,
    'exclude-members': '__weakref__'
}

# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False

# MyST parser settings
myst_enable_extensions = [
    "colon_fence",
    "deflist",
    "html_admonition",
    "html_image",
    "linkify",
    "replacements",
    "smartquotes",
    "substitution",
    "tasklist"
]
EOF

# Create MkDocs configuration
RUN cat > /app/mkdocs.yml << 'EOF'
site_name: SutazAI Documentation
site_description: Comprehensive documentation for SutazAI platform
site_author: SutazAI Team
site_url: https://docs.sutazai.com

# Repository
repo_name: sutazai/sutazaiapp
repo_url: https://github.com/sutazai/sutazaiapp
edit_uri: edit/main/docs/

# Theme
theme:
  name: material
  palette:
    - scheme: default
      primary: blue
      accent: blue
      toggle:
        icon: material/weather-night
        name: Switch to dark mode
    - scheme: slate
      primary: blue
      accent: blue
      toggle:
        icon: material/weather-sunny
        name: Switch to light mode
  features:
    - navigation.tabs
    - navigation.sections
    - navigation.expand
    - navigation.instant
    - navigation.tracking
    - search.highlight
    - search.share
    - content.code.copy
    - content.code.annotate

# Plugins
plugins:
  - search
  - git-revision-date-localized:
      enable_creation_date: true
  - mermaid2
  - mkdocstrings:
      handlers:
        python:
          options:
            docstring_style: google
            show_source: true

# Extensions
markdown_extensions:
  - admonition
  - pymdownx.details
  - pymdownx.superfences:
      custom_fences:
        - name: mermaid
          class: mermaid
          format: !!python/name:pymdownx.superfences.fence_code_format
  - pymdownx.tabbed:
      alternate_style: true
  - pymdownx.highlight:
      anchor_linenums: true
  - pymdownx.inlinehilite
  - pymdownx.snippets
  - attr_list
  - def_list
  - footnotes
  - md_in_html
  - toc:
      permalink: true

# Navigation
nav:
  - Home: index.md
  - Getting Started:
    - Installation: getting-started/installation.md
    - Quick Start: getting-started/quickstart.md
    - Configuration: getting-started/configuration.md
  - API Reference:
    - Overview: api/overview.md
    - Endpoints: api/endpoints.md
    - Authentication: api/authentication.md
  - Deployment:
    - Docker: deployment/docker.md
    - Kubernetes: deployment/kubernetes.md
    - Monitoring: deployment/monitoring.md
  - Development:
    - Contributing: development/contributing.md
    - Testing: development/testing.md
    - Architecture: development/architecture.md
EOF

# Create documentation API service
RUN cat > /app/docs_api.py << 'EOF'
"""Documentation API Service"""
from fastapi import FastAPI, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel
import subprocess
import os
import time
import shutil
from pathlib import Path
from typing import List, Dict, Any

app = FastAPI(
    title="SutazAI Documentation API",
    version="1.0.0",
    description="Documentation generation and serving API"
)

class BuildRequest(BaseModel):
    docs_type: str  # sphinx, mkdocs, gitbook
    source_path: str = "/app/source"
    output_path: str = "/app/build"
    config_overrides: Dict[str, Any] = {}

class BuildStatus(BaseModel):
    status: str
    build_time: float
    output_path: str
    errors: List[str] = []

# Build status tracking
build_status = {}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "documentation",
        "tools_available": {
            "sphinx": shutil.which("sphinx-build") is not None,
            "mkdocs": shutil.which("mkdocs") is not None,
            "gitbook": shutil.which("gitbook") is not None
        },
        "timestamp": time.time()
    }

@app.post("/build", response_model=BuildStatus)
async def build_documentation(request: BuildRequest):
    """Build documentation"""
    build_id = f"{request.docs_type}_{int(time.time())}"
    start_time = time.time()
    
    try:
        source_path = Path(request.source_path)
        output_path = Path(request.output_path)
        
        if not source_path.exists():
            raise HTTPException(status_code=400, detail="Source path does not exist")
        
        # Create output directory
        output_path.mkdir(parents=True, exist_ok=True)
        
        # Build based on documentation type
        if request.docs_type == "sphinx":
            cmd = [
                "sphinx-build",
                "-b", "html",
                str(source_path),
                str(output_path / "html")
            ]
        elif request.docs_type == "mkdocs":
            cmd = ["mkdocs", "build", "-d", str(output_path / "site")]
            # Change to source directory for mkdocs
            os.chdir(source_path)
        elif request.docs_type == "gitbook":
            cmd = ["gitbook", "build", str(source_path), str(output_path / "book")]
        else:
            raise HTTPException(status_code=400, detail="Unsupported documentation type")
        
        # Execute build command
        result = subprocess.run(
            cmd, capture_output=True, text=True, timeout=300
        )
        
        build_time = time.time() - start_time
        
        if result.returncode == 0:
            status = BuildStatus(
                status="success",
                build_time=build_time,
                output_path=str(output_path),
                errors=[]
            )
        else:
            status = BuildStatus(
                status="failed",
                build_time=build_time,
                output_path=str(output_path),
                errors=[result.stderr] if result.stderr else ["Build failed"]
            )
        
        build_status[build_id] = status
        return status
        
    except subprocess.TimeoutExpired:
        return BuildStatus(
            status="timeout",
            build_time=time.time() - start_time,
            output_path=str(request.output_path),
            errors=["Build timeout after 5 minutes"]
        )
    except Exception as e:
        return BuildStatus(
            status="error",
            build_time=time.time() - start_time,
            output_path=str(request.output_path),
            errors=[str(e)]
        )

@app.get("/serve/{docs_type}/{path:path}")
async def serve_documentation(docs_type: str, path: str = ""):
    """Serve built documentation"""
    if docs_type == "sphinx":
        base_path = Path("/app/build/html")
    elif docs_type == "mkdocs":
        base_path = Path("/app/build/site")
    elif docs_type == "gitbook":
        base_path = Path("/app/build/book")
    else:
        raise HTTPException(status_code=400, detail="Unsupported documentation type")
    
    if not path:
        path = "index.html"
    
    file_path = base_path / path
    
    if not file_path.exists() or not file_path.is_file():
        raise HTTPException(status_code=404, detail="File not found")
    
    return FileResponse(file_path)

@app.get("/builds")
async def list_builds():
    """List all builds"""
    return {"builds": build_status}

@app.get("/generate-api-docs")
async def generate_api_docs():
    """Generate API documentation from OpenAPI spec"""
    try:
        # Generate OpenAPI JSON
        openapi_spec = app.openapi()
        
        # Write to file
        with open("/app/openapi.json", "w") as f:
            import json
            json.dump(openapi_spec, f, indent=2)
        
        return {
            "status": "success",
            "message": "OpenAPI documentation generated",
            "file": "/app/openapi.json"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

# Create documentation build script
RUN cat > /app/build_docs.sh << 'EOF'
#!/bin/bash
# Documentation Build Script
set -e

DOCS_TYPE=${DOCS_TYPE:-mkdocs}
SOURCE_DIR=${SOURCE_DIR:-/app/source}
OUTPUT_DIR=${OUTPUT_DIR:-/app/build}

echo "Building $DOCS_TYPE documentation..."
echo "Source: $SOURCE_DIR"
echo "Output: $OUTPUT_DIR"

# Create directories
mkdir -p "$SOURCE_DIR" "$OUTPUT_DIR"

case "$DOCS_TYPE" in
    sphinx)
        echo "Building with Sphinx..."
        sphinx-build -b html "$SOURCE_DIR" "$OUTPUT_DIR/html"
        echo "Sphinx build completed: $OUTPUT_DIR/html/index.html"
        ;;
    mkdocs)
        echo "Building with MkDocs..."
        cd "$SOURCE_DIR"
        mkdocs build -d "$OUTPUT_DIR/site"
        echo "MkDocs build completed: $OUTPUT_DIR/site/index.html"
        ;;
    gitbook)
        echo "Building with GitBook..."
        gitbook build "$SOURCE_DIR" "$OUTPUT_DIR/book"
        echo "GitBook build completed: $OUTPUT_DIR/book/index.html"
        ;;
    api)
        echo "Generating API documentation..."
        python -c "from docs_api import app; import json; json.dump(app.openapi(), open('$OUTPUT_DIR/openapi.json', 'w'), indent=2)"
        redoc-cli build "$OUTPUT_DIR/openapi.json" --output "$OUTPUT_DIR/api-docs.html"
        echo "API documentation generated: $OUTPUT_DIR/api-docs.html"
        ;;
    *)
        echo "Unknown documentation type: $DOCS_TYPE"
        echo "Supported types: sphinx, mkdocs, gitbook, api"
        exit 1
        ;;
esac

echo "Documentation build completed successfully!"
EOF

RUN chmod +x /app/build_docs.sh

# ============================================================================
# APPLICATION SETUP
# ============================================================================

# Create directories and set permissions
RUN mkdir -p /app/source /app/build /app/templates && \
    chown -R docsuser:docsuser /app

# Copy application code
COPY --chown=docsuser:docsuser . /app/

# Switch to documentation user
USER docsuser

# Create sample documentation
RUN mkdir -p /app/source/docs && cat > /app/source/docs/index.md << 'EOF'
# SutazAI Documentation

Welcome to the SutazAI platform documentation.

## Quick Start

Get started with SutazAI in minutes:

1. Install the platform
2. Configure your services
3. Deploy your first application

## Features

- **AI Agent Orchestration**: Manage multiple AI agents
- **Distributed Computing**: Scale across multiple nodes
- **Real-time Monitoring**: Monitor your services in real-time
- **Security First**: Built with security in mind

## API Reference

Explore our comprehensive API documentation.

## Support

Get help from our community and support team.
EOF

# ============================================================================
# HEALTH CHECK & MONITORING
# ============================================================================

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# ============================================================================
# RUNTIME CONFIGURATION
# ============================================================================

EXPOSE 8000

ENV DOCS_TYPE=mkdocs \
    SOURCE_DIR=/app/source \
    OUTPUT_DIR=/app/build \
    AUTO_REBUILD=true

VOLUME ["/app/source", "/app/build"]

# Default command
CMD ["uvicorn", "docs_api:app", "--host", "0.0.0.0", "--port", "8000"]

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
#
# Basic documentation service:
# docker build -t docs-service .
# docker run -p 8000:8000 -v $(pwd)/docs:/app/source docs-service
#
# Build Sphinx documentation:
# docker run -e DOCS_TYPE=sphinx docs-service /app/build_docs.sh
#
# Build MkDocs documentation:
# docker run -e DOCS_TYPE=mkdocs docs-service /app/build_docs.sh
#
# Serve documentation:
# docker run -p 8000:8000 -v docs-source:/app/source -v docs-build:/app/build docs-service
#
# Features:
# - Multi-format documentation support (Sphinx, MkDocs, GitBook)
# - API documentation generation from OpenAPI specs
# - Real-time documentation serving
# - Automated builds via API
# - Hot reload during development
# - Theme customization
# - Search functionality
# - Version control integration
#
# API Endpoints:
# - POST /build - Build documentation
# - GET /serve/{docs_type}/{path} - Serve documentation
# - GET /builds - List all builds
# - GET /generate-api-docs - Generate API docs
# - GET /health - Health check
#
# Supported Formats:
# - Sphinx (reStructuredText, Markdown)
# - MkDocs (Markdown with Material theme)
# - GitBook (Markdown)
# - OpenAPI/Swagger (API documentation)
#
# Directory Structure:
# /app/source/ - Source documentation files
# /app/build/ - Built documentation output
# /app/templates/ - Custom templates
# ============================================================================