version: '3.8'

x-common-env: &common-env
  TZ: ${TZ:-UTC}
  SUTAZAI_ENV: production
  LOG_LEVEL: info

x-restart-policy: &restart-policy
  restart: always

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

networks:
  sutazai-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  chromadb_data:
    driver: local
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_certs:
    driver: local

services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sutazai-nginx
    <<: *restart-policy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_certs:/etc/nginx/ssl:ro
    depends_on:
      backend-agi:
        condition: service_healthy
      frontend-agi:
        condition: service_healthy
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "nginx", "-t"]

  # PostgreSQL Database
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres
    <<: *restart-policy
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - sutazai-net
    command: 
      - postgres
      - -c
      - shared_buffers=256MB
      - -c
      - max_connections=200
      - -c
      - effective_cache_size=1GB
      - -c
      - wal_level=replica
      - -c
      - max_wal_senders=3
      - -c
      - max_replication_slots=3
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis
    <<: *restart-policy
    command: 
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD}
      - --maxmemory
      - 2gb
      - --maxmemory-policy
      - allkeys-lru
      - --appendonly
      - "yes"
    volumes:
      - redis_data:/data
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Ollama AI Model Server
  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    <<: *restart-policy
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_NUM_PARALLEL: 2
      OLLAMA_MAX_LOADED_MODELS: 2
      OLLAMA_KEEP_ALIVE: 5m
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "ollama", "list"]
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Backend API
  backend-agi:
    image: sutazai/backend:${VERSION:-latest}
    container_name: sutazai-backend
    <<: *restart-policy
    environment:
      <<: *common-env
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      CHROMADB_URL: http://chromadb:8000
      QDRANT_URL: http://qdrant:6333
      NEO4J_URI: bolt://neo4j:7687
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
    networks:
      - sutazai-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Frontend UI
  frontend-agi:
    image: sutazai/frontend:${VERSION:-latest}
    container_name: sutazai-frontend
    <<: *restart-policy
    environment:
      <<: *common-env
      BACKEND_URL: http://backend-agi:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
    networks:
      - sutazai-net
    depends_on:
      backend-agi:
        condition: service_healthy
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # ChromaDB Vector Store
  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    <<: *restart-policy
    environment:
      CHROMA_SERVER_AUTH_PROVIDER: chromadb.auth.token.TokenAuthenticationServerProvider
      CHROMA_SERVER_AUTH_CREDENTIALS: ${CHROMADB_API_KEY}
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-qdrant
    <<: *restart-policy
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:6333/"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.13-community
    container_name: sutazai-neo4j
    <<: *restart-policy
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "neo4j", "status"]
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sutazai-prometheus
    <<: *restart-policy
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-grafana
    <<: *restart-policy
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: redis-datasource,vertamedia-clickhouse-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - sutazai-net
    depends_on:
      - prometheus
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/health"]

  # Node Exporter for metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sutazai-node-exporter
    <<: *restart-policy
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - sutazai-net

  # Postgres Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sutazai-postgres-exporter
    <<: *restart-policy
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
    networks:
      - sutazai-net
    depends_on:
      - postgres

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sutazai-redis-exporter
    <<: *restart-policy
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - sutazai-net
    depends_on:
      - redis

  # Loki for logs
  loki:
    image: grafana/loki:2.9.0
    container_name: sutazai-loki
    <<: *restart-policy
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml:ro
      - ./data/loki:/loki
    networks:
      - sutazai-net
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3100/ready"]

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: sutazai-promtail
    <<: *restart-policy
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - sutazai-net
    depends_on:
      - loki