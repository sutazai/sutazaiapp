version: '3.8'

x-common-variables: &common-variables
  TZ: ${TZ:-UTC}
  SUTAZAI_ENV: production

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service"

networks:
  sutazai-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  ollama_data:
  prometheus_data:
  grafana_data:

services:
  # Production Database with replication ready
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    ports:
      - "127.0.0.1:5432:5432"
    command: 
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - checkpoint_completion_target=0.9
      - -c
      - wal_buffers=16MB
      - -c
      - default_statistics_target=100
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200
      - -c
      - work_mem=4MB
      - -c
      - min_wal_size=1GB
      - -c
      - max_wal_size=4GB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-prod
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis with persistence
  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis-prod
    restart: always
    command: 
      - redis-server
      - --requirepass
      - ${REDIS_PASSWORD}
      - --appendonly
      - "yes"
      - --appendfsync
      - everysec
      - --maxmemory
      - 1gb
      - --maxmemory-policy
      - allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sutazai-prod
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Backend API
  backend:
    build:
      context: ../..
      dockerfile: docker/production/backend.Dockerfile
    image: sutazai/backend:${VERSION:-latest}
    container_name: sutazai-backend-prod
    restart: always
    environment:
      <<: *common-variables
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      CHROMADB_URL: http://chromadb:8000
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS}
    ports:
      - "127.0.0.1:8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sutazai-prod
    logging: *default-logging
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Frontend
  frontend:
    build:
      context: ../..
      dockerfile: docker/production/frontend.Dockerfile
    image: sutazai/frontend:${VERSION:-latest}
    container_name: sutazai-frontend-prod
    restart: always
    environment:
      <<: *common-variables
      BACKEND_URL: http://backend:8000
    ports:
      - "127.0.0.1:8501:8501"
    depends_on:
      - backend
    networks:
      - sutazai-prod
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sutazai-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend
    networks:
      - sutazai-prod
    logging: *default-logging
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3