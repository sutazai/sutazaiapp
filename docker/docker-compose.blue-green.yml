version: '3.8'
networks:
  sutazai-network:
    external: true
  blue-network:
    name: sutazai-blue-network
    driver: bridge
    ipam:
      config:
      - subnet: 172.20.0.0/24
  green-network:
    name: sutazai-green-network
    driver: bridge
    ipam:
      config:
      - subnet: 172.21.0.0/24
  shared-network:
    name: sutazai-shared-network
    driver: bridge
    ipam:
      config:
      - subnet: 172.22.0.0/24
volumes:
  postgres_data:
    name: sutazai-postgres-data
  redis_data:
    name: sutazai-redis-data
  neo4j_data:
    name: sutazai-neo4j-data
  ollama_data:
    name: sutazai-ollama-data
  chromadb_data:
    name: sutazai-chromadb-data
  qdrant_data:
    name: sutazai-qdrant-data
  faiss_data:
    name: sutazai-faiss-data
  grafana_data:
    name: sutazai-grafana-data
  prometheus_data:
    name: sutazai-prometheus-data
  loki_data:
    name: sutazai-loki-data
  agent_workspaces:
    name: sutazai-agent-workspaces
  agent_outputs:
    name: sutazai-agent-outputs
  blue_app_state:
    name: sutazai-blue-app-state
  green_app_state:
    name: sutazai-green-app-state
services:
  postgres:
    image: postgres:16.3-alpine
    container_name: sutazai-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
    - shared-network
    ports:
    - 10000:5432
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ../scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ${POSTGRES_USER:-sutazai}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
  redis:
    image: redis:7.2-alpine
    container_name: sutazai-redis
    command: redis-server --save "" --appendonly no --maxmemory 512mb --maxmemory-policy
      allkeys-lru
    networks:
    - shared-network
    ports:
    - 10001:6379
    volumes:
    - redis_data:/data
    healthcheck:
      test:
      - CMD-SHELL
      - redis-cli ping
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped
  neo4j:
    image: neo4j:5.13-community
    container_name: sutazai-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD}
      NEO4J_server_memory_heap_max__size: 512m
      NEO4J_server_memory_heap_initial__size: 256m
      NEO4J_server_memory_pagecache_size: 256m
      NEO4J_server_jvm_additional: -XX:+UseG1GC -XX:G1HeapRegionSize=4m -XX:+DisableExplicitGC
        -XX:+ExitOnOutOfMemoryError
      NEO4J_initial_dbms_default__database: sutazai
      NEO4J_db_checkpoint_interval_time: 30s
      NEO4J_db_transaction_timeout: 30s
      NEO4J_db_logs_query_enabled: false
      NEO4J_server_config_strict__validation_enabled: false
      NEO4J_db_transaction_bookmark_ready_timeout: 5s
      NEO4J_dbms_cluster_discovery_type: SINGLE
    networks:
    - shared-network
    ports:
    - 10002:7474
    - 10003:7687
    volumes:
    - neo4j_data:/data
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:7474/ || exit 1
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
  ollama:
    image: ollama/ollama:0.3.13
    container_name: sutazai-ollama
    environment:
      CLAUDE_RULES_PATH: /app/CLAUDE.md
      ENFORCE_CLAUDE_RULES: 'true'
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_DEBUG: false
      OLLAMA_FLASH_ATTENTION: 1
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_KEEP_ALIVE: 10m
      OLLAMA_MAX_LOADED_MODELS: 3
      OLLAMA_MODELS: /root/.ollama/models
      OLLAMA_NUM_PARALLEL: 50
      OLLAMA_NUM_THREADS: 10
      OLLAMA_ORIGINS: '*'
      OLLAMA_RUNNERS_DIR: /tmp
      OLLAMA_TMPDIR: /tmp
    networks:
    - shared-network
    ports:
    - 10104:11434
    volumes:
    - ollama_data:/root/.ollama
    - ../CLAUDE.md:/app/CLAUDE.md:ro
    - ../config/ollama.yaml:/app/config/ollama.yaml:ro
    healthcheck:
      test:
      - CMD-SHELL
      - ollama list > /dev/null || exit 1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '10'
          memory: 20G
        reservations:
          cpus: '4'
          memory: 8G
    sysctls:
    - net.core.somaxconn=65535
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    restart: unless-stopped
  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    environment:
    - CHROMA_SERVER_AUTH_PROVIDER=chromadb.auth.token.TokenAuthenticationServerProvider
    - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMADB_API_KEY:-test-token}
    - CHROMA_SERVER_HOST=0.0.0.0
    - CHROMA_SERVER_HTTP_PORT=8000
    - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://localhost:8501", "http://backend:8000"]
    networks:
    - shared-network
    ports:
    - 10100:8000
    volumes:
    - chromadb_data:/chroma/chroma
    healthcheck:
      test:
      - CMD
      - sh
      - -c
      - curl -f http://localhost:8000/api/v1/heartbeat || exit 1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-qdrant
    environment:
      QDRANT__LOG_LEVEL: INFO
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__HTTP_PORT: 6333
    networks:
    - shared-network
    ports:
    - 10101:6333
    - 10102:6334
    volumes:
    - qdrant_data:/qdrant/storage
    healthcheck:
      test:
      - CMD
      - sh
      - -c
      - "echo 'use IO::Socket::INET; my $$s = IO::Socket::INET->new(PeerAddr => q{localhost:6333},\
        \ Proto => q{tcp}, Timeout => 2); if ($$s) { print $$s qq{GET / HTTP/1.0\r\
        \n\r\n}; while (<$$s>) { if (/200 OK/) { exit 0; } } } exit 1;' | perl"
      interval: 60s
      timeout: 30s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped
  faiss:
    build:
      context: ../docker/faiss
      dockerfile: Dockerfile
    container_name: sutazai-faiss
    environment:
      SUTAZAI_ENV: ${SUTAZAI_ENV:-production}
      TZ: ${TZ:-UTC}
    networks:
    - shared-network
    ports:
    - 10103:8000
    volumes:
    - faiss_data:/data
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()
      interval: 60s
      timeout: 30s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: sutazai-prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/usr/share/prometheus/console_libraries
    - --web.console.templates=/usr/share/prometheus/consoles
    - --web.enable-lifecycle
    - --storage.tsdb.retention.time=7d
    - --web.enable-admin-api
    - --storage.tsdb.max-block-duration=2h
    - --storage.tsdb.min-block-duration=2h
    - --storage.tsdb.retention.size=1GB
    networks:
    - shared-network
    ports:
    - 10200:9090
    volumes:
    - ../monitoring/prometheus:/etc/prometheus
    - prometheus_data:/prometheus
    healthcheck:
      test:
      - CMD
      - wget
      - --no-verbose
      - --tries=1
      - --spider
      - http://localhost:9090/-/healthy
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    restart: unless-stopped
  grafana:
    image: grafana/grafana:10.2.3
    container_name: sutazai-grafana
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-sutazai_grafana}
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_INSTALL_PLUGINS=
    - GF_ANALYTICS_REPORTING_ENABLED=false
    - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/system-overview.json
    networks:
    - shared-network
    ports:
    - 10201:3000
    volumes:
    - grafana_data:/var/lib/grafana
    - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
    - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit
        1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    depends_on:
    - prometheus
    restart: unless-stopped
  loki:
    image: grafana/loki:2.9.0
    container_name: sutazai-loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
    - shared-network
    ports:
    - 10202:3100
    volumes:
    - loki_data:/loki
    - ../monitoring/loki/config.yml:/etc/loki/local-config.yaml
    healthcheck:
      test:
      - CMD-SHELL
      - wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    restart: unless-stopped
  haproxy:
    image: haproxy:2.8-alpine
    container_name: sutazai-haproxy
    ports:
    - 80:80
    - 443:443
    - 9999:8404
    - 20010:20010
    - 20011:20011
    volumes:
    - ../config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    - ../config/haproxy/certs:/etc/ssl/certs:ro
    networks:
    - sutazai-network
    - blue-network
    - green-network
    - shared-network
    healthcheck:
      test:
      - CMD
      - wget
      - --spider
      - -q
      - http://localhost:8404/stats
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
    - blue-backend
    - blue-frontend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
  blue-backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: sutazai-blue-backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      API_V1_STR: /api/v1
      BACKEND_CORS_ORIGINS: '["http://localhost:20011", "http://localhost:10011"]'
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      CHROMADB_URL: http://chromadb:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      FAISS_INDEX_PATH: /data/faiss
      GRAFANA_PASSWORD: ${GRAFANA_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      NEO4J_HOST: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_PORT: 7687
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_URL: http://qdrant:6333
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      SUTAZAI_ENV: blue
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: blue
    networks:
    - blue-network
    - shared-network
    expose:
    - '8000'
    volumes:
    - ../../backend:/app
    - ../../data:/data
    - ../../logs:/logs
    - agent_workspaces:/app/agent_workspaces
    - blue_app_state:/app/state
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8000))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - traefik.enable=true
    - traefik.http.routers.blue-backend.rule=Host(`api-blue.sutazai.local`)
    - traefik.http.services.blue-backend.loadbalancer.server.port=8000
    - deployment.color=blue
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
  blue-frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: sutazai-blue-frontend
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    environment:
      BACKEND_URL: http://blue-backend:8000
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_PORT: 8501
      SUTAZAI_ENV: blue
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: blue
    networks:
    - blue-network
    - shared-network
    expose:
    - '8501'
    volumes:
    - ../../frontend:/app
    - ../../data:/data
    - blue_app_state:/app/state
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8501))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    depends_on:
      blue-backend:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - traefik.enable=true
    - traefik.http.routers.blue-frontend.rule=Host(`app-blue.sutazai.local`)
    - traefik.http.services.blue-frontend.loadbalancer.server.port=8501
    - deployment.color=blue
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
  blue-jarvis-voice-interface:
    build:
      context: ../../agents/jarvis-voice-interface
      dockerfile: Dockerfile
    container_name: sutazai-blue-jarvis-voice-interface
    environment:
      AGENT_TYPE: jarvis-voice-interface
      API_ENDPOINT: http://blue-backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODEL: tinyllama:1.1b-q4_0
      OLLAMA_ORIGINS: '*'
      PORT: 8080
      PORCUPINE_ACCESS_KEY: ${PORCUPINE_ACCESS_KEY:-demo}
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: blue
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: blue
    networks:
    - blue-network
    - shared-network
    expose:
    - '8080'
    volumes:
    - ../../data:/app/data
    - ../../configs:/app/configs
    - ../../logs:/app/logs
    - agent_workspaces:/app/workspace
    - ../../CLAUDE.md:/app/CLAUDE.md:ro
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8080))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    depends_on:
      blue-backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - deployment.color=blue
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
  green-backend:
    build:
      context: ../backend
      dockerfile: ../docker/backend/Dockerfile
    container_name: sutazai-green-backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      API_V1_STR: /api/v1
      BACKEND_CORS_ORIGINS: '["http://localhost:20011", "http://localhost:10011"]'
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      CHROMADB_URL: http://chromadb:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      FAISS_INDEX_PATH: /data/faiss
      GRAFANA_PASSWORD: ${GRAFANA_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      NEO4J_HOST: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      NEO4J_PORT: 7687
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: '*'
      POSTGRES_DB: ${POSTGRES_DB:-sutazai}
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-sutazai}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      QDRANT_URL: http://qdrant:6333
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      SUTAZAI_ENV: green
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: green
    networks:
    - green-network
    - shared-network
    expose:
    - '8000'
    volumes:
    - ../../backend:/app
    - ../../data:/data
    - ../../logs:/logs
    - agent_workspaces:/app/agent_workspaces
    - green_app_state:/app/state
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8000))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - traefik.enable=true
    - traefik.http.routers.green-backend.rule=Host(`api-green.sutazai.local`)
    - traefik.http.services.green-backend.loadbalancer.server.port=8000
    - deployment.color=green
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
  green-frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/frontend/Dockerfile
    container_name: sutazai-green-frontend
    command: streamlit run app.py --server.port 8501 --server.address 0.0.0.0
    environment:
      BACKEND_URL: http://green-backend:8000
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_PORT: 8501
      SUTAZAI_ENV: green
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: green
    networks:
    - green-network
    - shared-network
    expose:
    - '8501'
    volumes:
    - ../../frontend:/app
    - ../../data:/data
    - green_app_state:/app/state
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8501))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 120s
    depends_on:
      green-backend:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - traefik.enable=true
    - traefik.http.routers.green-frontend.rule=Host(`app-green.sutazai.local`)
    - traefik.http.services.green-frontend.loadbalancer.server.port=8501
    - deployment.color=green
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
  green-jarvis-voice-interface:
    build:
      context: ../../agents/jarvis-voice-interface
      dockerfile: Dockerfile
    container_name: sutazai-green-jarvis-voice-interface
    environment:
      AGENT_TYPE: jarvis-voice-interface
      API_ENDPOINT: http://green-backend:8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}
      LOG_LEVEL: INFO
      OLLAMA_API_KEY: local
      OLLAMA_BASE_URL: http://ollama:10104
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_MODEL: tinyllama:1.1b-q4_0
      OLLAMA_ORIGINS: '*'
      PORT: 8080
      PORCUPINE_ACCESS_KEY: ${PORCUPINE_ACCESS_KEY:-demo}
      REDIS_URL: redis://redis:6379/0
      SUTAZAI_ENV: green
      TZ: ${TZ:-UTC}
      DEPLOYMENT_COLOR: green
    networks:
    - green-network
    - shared-network
    expose:
    - '8080'
    volumes:
    - ../../data:/app/data
    - ../../configs:/app/configs
    - ../../logs:/app/logs
    - agent_workspaces:/app/workspace
    - ../../CLAUDE.md:/app/CLAUDE.md:ro
    healthcheck:
      test:
      - CMD
      - python3
      - -c
      - import socket; s=socket.socket(); s.settimeout(5); exit(0 if s.connect_ex(('localhost',
        8080))==0 else 1)
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 512M
    depends_on:
      green-backend:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    labels:
    - deployment.color=green
    - deployment.version=${DEPLOYMENT_VERSION:-1.0.0}
x-blue-services:
- blue-backend
- blue-frontend
- blue-jarvis-voice-interface
x-green-services:
- green-backend
- green-frontend
- green-jarvis-voice-interface
x-shared-services:
- postgres
- redis
- neo4j
- ollama
- chromadb
- qdrant
- faiss
- prometheus
- grafana
- loki
