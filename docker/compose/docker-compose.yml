# SutazAI Production Docker Compose Configuration
# Docker Excellence compliant production setup
version: '3.8'

networks:
  sutazai-network:
    name: sutazai-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # Core Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: sutazai-postgres
    environment:
      POSTGRES_DB: sutazai
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - sutazai-network
    restart: unless-stopped
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sutazai -d sutazai"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: sutazai-redis
    command: redis-server --appendonly yes --requirepass $REDIS_PASSWORD
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    volumes:
      - redis_data:/data
    networks:
      - sutazai-network
    restart: unless-stopped
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # AI Infrastructure
  ollama:
    build:
      context: ../services/infrastructure/ollama
      dockerfile: Dockerfile
    container_name: sutazai-ollama
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
      OLLAMA_MODELS: /app/models
      OLLAMA_NUM_PARALLEL: 1
      OLLAMA_MAX_LOADED_MODELS: 1
    volumes:
      - ollama_models:/app/models
    networks:
      - sutazai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Backend Service
  backend:
    build:
      context: ../../backend
      dockerfile: ../docker/services/backend/Dockerfile
    container_name: sutazai-backend
    environment:
      DATABASE_URL: postgresql://sutazai:${POSTGRES_PASSWORD}@postgres:5432/sutazai
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      OLLAMA_URL: http://ollama:11434
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      LOG_LEVEL: INFO
      ENVIRONMENT: production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - sutazai-network
    restart: unless-stopped
    secrets:
      - jwt_secret
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Frontend Service
  frontend:
    build:
      context: ../../frontend
      dockerfile: ../docker/services/frontend/Dockerfile
    container_name: sutazai-frontend
    environment:
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      ENVIRONMENT: production
    volumes:
      - ./data:/app/data:ro
    networks:
      - sutazai-network
    ports:
      - "8501:8501"
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Monitoring Services
  prometheus:
    build:
      context: ../services/monitoring/prometheus
      dockerfile: Dockerfile
    container_name: sutazai-prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - sutazai-network
    ports:
      - "9090:9090"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    container_name: sutazai-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sutazai-network
    ports:
      - "3000:3000"
    restart: unless-stopped
    secrets:
      - grafana_password
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

secrets:
  postgres_password:
    file: ../../secrets/postgres_password.txt
  redis_password:
    file: ../../secrets/redis_password.txt
  jwt_secret:
    file: ../../secrets/jwt_secret.txt
  grafana_password:
    file: ../../secrets/grafana_password.txt