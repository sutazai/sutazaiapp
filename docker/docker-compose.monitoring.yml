# Complete Monitoring Stack Docker Compose Configuration
# Purpose: Full observability infrastructure for production monitoring
# Usage: docker-compose -f docker-compose.monitoring.yml up -d

version: '3.8'

networks:
  sutazai-network:
    external: true
    name: sutazai-network

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local
  jaeger_data:
    driver: local

services:
  # Metrics Collection
  prometheus:
    image: prom/prometheus:v2.53.2
    container_name: sutazai-prometheus
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=10GB'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10200:9090"
    restart: unless-stopped

  # Visualization Dashboards
  grafana:
    image: grafana/grafana:11.1.5
    container_name: sutazai-grafana
    user: "472:472"  # grafana user
    security_opt:
      - no-new-privileges:true
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app,prometheus
      - GF_PROMETHEUS_DATASOURCE_URL=http://prometheus:9090
      - GF_LOKI_DATASOURCE_URL=http://loki:3100
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10201:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  # Log Aggregation
  loki:
    image: grafana/loki:3.1.1
    container_name: sutazai-loki
    user: "10001:10001"  # loki user
    security_opt:
      - no-new-privileges:true
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sutazai-network
    ports:
      - "10202:3100"
    restart: unless-stopped

  # Log Shipping
  promtail:
    image: grafana/promtail:3.1.1
    container_name: sutazai-promtail
    user: "0:0"  # root for docker socket access
    security_opt:
      - no-new-privileges:true
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail/config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - sutazai-network
    restart: unless-stopped
    depends_on:
      - loki

  # Alert Management
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: sutazai-alertmanager
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10203:9093"
    restart: unless-stopped
    depends_on:
      - prometheus

  # Uptime Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.25.0
    container_name: sutazai-blackbox-exporter
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    read_only: true
    volumes:
      - ./monitoring/blackbox/config.yml:/etc/blackbox_exporter/config.yml:ro
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9115/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10204:9115"
    restart: unless-stopped

  # System Metrics
  node-exporter:
    image: prom/node-exporter:v1.8.2
    container_name: sutazai-node-exporter
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    networks:
      - sutazai-network
    ports:
      - "10205:9100"
    restart: unless-stopped

  # Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: sutazai-cadvisor
    security_opt:
      - no-new-privileges:true
    privileged: false
    devices:
      - /dev/kmsg:/dev/kmsg:ro
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - sutazai-network
    ports:
      - "10206:8080"
    restart: unless-stopped

  # Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: sutazai-postgres-exporter
    user: "65534:65534"  # nobody user
    security_opt:
      - no-new-privileges:true
    read_only: true
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-sutazai}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sutazai}?sslmode=disable
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    networks:
      - sutazai-network
    ports:
      - "10207:9187"
    restart: unless-stopped

  # Cache Metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    container_name: sutazai-redis-exporter
    user: "59000:59000"  # redis_exporter user
    security_opt:
      - no-new-privileges:true
    read_only: true
    environment:
      - REDIS_ADDR=redis://redis:6379
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    networks:
      - sutazai-network
    ports:
      - "10208:9121"
    restart: unless-stopped

  # Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.60.0
    container_name: sutazai-jaeger
    user: "10001:10001"  # jaeger user
    security_opt:
      - no-new-privileges:true
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=memory
      - MEMORY_MAX_TRACES=100000
    volumes:
      - jaeger_data:/tmp
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10210:16686"  # Jaeger UI
      - "10211:14268"  # Jaeger collector HTTP
      - "10212:14250"  # Jaeger collector gRPC
      - "10213:9411"   # Zipkin
      - "10214:4317"   # OTLP gRPC
      - "10215:4318"   # OTLP HTTP
    restart: unless-stopped

  # MCP Monitoring Integration
  mcp-monitoring-server:
    build:
      context: .
      dockerfile: ./monitoring/mcp-monitoring.Dockerfile
    container_name: sutazai-mcp-monitoring
    environment:
      - PROMETHEUS_PUSHGATEWAY=http://prometheus:9090/metrics
      - GRAFANA_URL=http://grafana:3000
      - LOKI_URL=http://loki:3100
      - MONITORING_PORT=10220
    volumes:
      - ./logs:/app/logs:ro
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10220/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - sutazai-network
    ports:
      - "10220:10220"
    restart: unless-stopped
    depends_on:
      - prometheus
      - grafana
      - loki
      - alertmanager