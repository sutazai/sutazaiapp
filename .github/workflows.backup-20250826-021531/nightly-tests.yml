name: Nightly Comprehensive Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - performance
        - security
        - load
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - local

env:
  PYTHON_VERSION: '3.12'
  POETRY_VERSION: '1.7.1'

jobs:
  # Job 1: Extended Performance Testing
  extended-performance:
    name: Extended Performance Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == 'performance' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        load_scenario: ['light', 'medium', 'heavy', 'spike', 'endurance']
        users: [10, 50, 100, 200]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
        pip install locust
    
    - name: Start application stack
      run: |
        # Start services
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run performance tests - ${{ matrix.load_scenario }}
      run: |
        cd tests/load
        python load_test_runner.py \
          --host http://localhost:8000 \
          --users ${{ matrix.users }} \
          --spawn-rate $((${{ matrix.users }} / 10)) \
          --run-time 600s \
          --scenario ${{ matrix.load_scenario }}
    
    - name: Analyze performance results
      run: |
        python scripts/analyze_performance.py \
          --results-dir tests/load/load_test_results \
          --threshold-file performance_thresholds.json
    
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results-${{ matrix.load_scenario }}-${{ matrix.users }}
        path: |
          tests/load/load_test_results/
          performance_analysis.json

  # Job 2: Comprehensive Security Testing
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == 'security' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install security tools
      run: |
        poetry install --with security
        # Install additional security tools
        pip install semgrep
        docker pull owasp/zap2docker-stable
    
    - name: Run static security analysis (Semgrep)
      run: |
        semgrep --config=auto --json --output=semgrep-results.json backend/ frontend/
    
    - name: Run dependency vulnerability scan
      run: |
        poetry run safety check --json --output safety-results.json
        poetry run pip-audit --format=json --output=pip-audit-results.json
    
    - name: Start application for dynamic testing
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Run comprehensive security tests
      run: |
        poetry run python scripts/test_runner.py --type security
    
    - name: Run OWASP ZAP baseline scan
      run: |
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable zap-baseline.py \
          -t http://host.docker.internal:8000 \
          -J zap-baseline-report.json \
          -r zap-baseline-report.html
    
    - name: Run OWASP ZAP full scan
      run: |
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable zap-full-scan.py \
          -t http://host.docker.internal:8000 \
          -J zap-full-report.json \
          -r zap-full-report.html
    
    - name: Generate security report
      run: |
        python scripts/generate_security_report.py \
          --semgrep semgrep-results.json \
          --safety safety-results.json \
          --zap-baseline zap-baseline-report.json \
          --zap-full zap-full-report.json \
          --output security-audit-report.json
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-results
        path: |
          *-results.json
          *-report.html
          *-report.json
          security-audit-report.json

  # Job 3: Load Testing with Real Traffic Patterns
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event.inputs.test_scope == 'load' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        test_duration: ['5m', '15m', '30m', '60m']
        ramp_pattern: ['linear', 'step', 'spike']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        poetry install
        pip install locust k6
    
    - name: Start monitoring
      run: |
        # Start Prometheus and Grafana for monitoring
        docker-compose -f docker-compose.monitoring.yml up -d
        sleep 10
    
    - name: Start application with monitoring
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
    
    - name: Generate realistic load patterns
      run: |
        python scripts/generate_load_patterns.py \
          --pattern ${{ matrix.ramp_pattern }} \
          --duration ${{ matrix.test_duration }} \
          --output load-pattern.json
    
    - name: Run load test with K6
      run: |
        k6 run \
          --out json=k6-results.json \
          --duration ${{ matrix.test_duration }} \
          tests/load/k6-load-test.js
    
    - name: Run concurrent Locust test
      run: |
        cd tests/load
        python load_test_runner.py \
          --suite \
          --run-time ${{ matrix.test_duration }}
    
    - name: Collect system metrics
      run: |
        python scripts/collect_metrics.py \
          --prometheus http://localhost:9090 \
          --duration ${{ matrix.test_duration }} \
          --output system-metrics.json
    
    - name: Analyze load test results
      run: |
        python scripts/analyze_load_results.py \
          --k6-results k6-results.json \
          --locust-results tests/load/load_test_results/ \
          --system-metrics system-metrics.json \
          --output load-analysis-${{ matrix.ramp_pattern }}-${{ matrix.test_duration }}.json
    
    - name: Upload load test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-${{ matrix.ramp_pattern }}-${{ matrix.test_duration }}
        path: |
          k6-results.json
          system-metrics.json
          load-analysis-*.json
          tests/load/load_test_results/

  # Job 4: Chaos Engineering Tests
  chaos-testing:
    name: Chaos Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install chaos engineering tools
      run: |
        poetry install
        pip install chaostoolkit chaostoolkit-kubernetes
    
    - name: Start application cluster
      run: |
        docker-compose -f docker-compose.cluster.yml up -d
        sleep 60
    
    - name: Run chaos experiments
      run: |
        # Network latency injection
        chaos run tests/chaos/network-latency.json
        
        # Memory pressure
        chaos run tests/chaos/memory-pressure.json
        
        # Database connection failures
        chaos run tests/chaos/database-failures.json
        
        # Service restarts
        chaos run tests/chaos/service-restarts.json
    
    - name: Collect chaos test results
      run: |
        python scripts/analyze_chaos_results.py \
          --results-dir chaos-results/ \
          --output chaos-analysis.json
    
    - name: Upload chaos artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: chaos-test-results
        path: |
          chaos-results/
          chaos-analysis.json

  # Job 5: Memory Leak and Resource Testing
  resource-testing:
    name: Resource Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install memory profiling tools
      run: |
        poetry install
        pip install memory-profiler pympler objgraph
    
    - name: Start application with profiling
      run: |
        # Start with memory profiling enabled
        PYTHONPATH=. mprof run --python python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run long-duration memory test
      run: |
        python tests/resource/memory_leak_test.py \
          --duration 3600 \
          --requests-per-second 10 \
          --memory-threshold 500MB
    
    - name: Profile memory usage
      run: |
        mprof plot -o memory-profile.png
        python scripts/analyze_memory_profile.py \
          --profile mprofile_*.dat \
          --output memory-analysis.json
    
    - name: Test resource limits
      run: |
        python tests/resource/resource_limits_test.py \
          --max-memory 1GB \
          --max-cpu 200% \
          --max-connections 1000
    
    - name: Upload resource test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: resource-test-results
        path: |
          memory-profile.png
          memory-analysis.json
          mprofile_*.dat
          resource-test-results.json

  # Job 6: Multi-Platform Compatibility
  compatibility-testing:
    name: Platform Compatibility
    runs-on: ${{ matrix.os }}
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Run platform-specific tests
      run: |
        poetry run python scripts/test_runner.py \
          --type unit \
          --platform-specific
    
    - name: Test Docker compatibility
      if: matrix.os != 'windows-latest'
      run: |
        docker build -t sutazai-test .
        docker run --rm sutazai-test python -c "import backend; print('Import successful')"
    
    - name: Upload compatibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: compatibility-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          test-results.xml
          compatibility-report.json

  # Job 7: Database Migration and Backup Testing
  database-testing:
    name: Database Testing
    runs-on: ubuntu-latest
    if: github.event.inputs.test_scope == 'full' || github.event_name == 'schedule'
    
    services:
      postgres-old:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sutazai_old
        ports:
          - 5433:5432
      
      postgres-new:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sutazai_new
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Test database migrations
      run: |
        # Test migration from old to new version
        python scripts/test_database_migration.py \
          --old-db postgresql://test_user:test_password@localhost:5433/sutazai_old \
          --new-db postgresql://test_user:test_password@localhost:5432/sutazai_new
    
    - name: Test backup and restore
      run: |
        python scripts/test_backup_restore.py \
          --database postgresql://test_user:test_password@localhost:5432/sutazai_new
    
    - name: Test database performance
      run: |
        python tests/database/performance_test.py \
          --database postgresql://test_user:test_password@localhost:5432/sutazai_new \
          --duration 300
    
    - name: Upload database test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: database-test-results
        path: |
          migration-test-results.json
          backup-test-results.json
          database-performance-results.json

  # Job 8: Generate Nightly Report
  nightly-report:
    name: Generate Nightly Report
    runs-on: ubuntu-latest
    needs: [extended-performance, security-audit, load-testing, chaos-testing, resource-testing, compatibility-testing, database-testing]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: nightly-artifacts/
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install reporting tools
      run: |
        pip install jinja2 matplotlib seaborn pandas
    
    - name: Generate comprehensive nightly report
      run: |
        python scripts/generate_nightly_report.py \
          --artifacts-dir nightly-artifacts/ \
          --output nightly-report-$(date +%Y%m%d).html \
          --json-output nightly-report-$(date +%Y%m%d).json
    
    - name: Send report notifications
      run: |
        python scripts/send_test_notifications.py \
          --report nightly-report-$(date +%Y%m%d).json \
          --channels slack,email
    
    - name: Upload nightly report
      uses: actions/upload-artifact@v3
      with:
        name: nightly-report-$(date +%Y%m%d)
        path: |
          nightly-report-*.html
          nightly-report-*.json
    
    - name: Update test metrics dashboard
      run: |
        python scripts/update_metrics_dashboard.py \
          --report nightly-report-$(date +%Y%m%d).json \
          --dashboard-url ${{ secrets.DASHBOARD_URL }}

  # Job 9: Cleanup
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [nightly-report]
    if: always()
    
    steps:
    - name: Cleanup Docker resources
      run: |
        docker system prune -af
        docker volume prune -f
    
    - name: Archive old test results
      run: |
        # Archive results older than 30 days
        find . -name "*test-results*" -mtime +30 -delete
        find . -name "*report*" -mtime +30 -delete