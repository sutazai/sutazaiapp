name: Security Audit

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - '**/requirements*.txt'
      - '**/package*.json'
      - '**/Dockerfile*'
      - '**/*.py'
      - '**/*.js'
      - '**/*.ts'

jobs:
  # Dependency Security Audit
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Python audit with pip-audit
      run: |
        pip install pip-audit
        cd backend
        pip-audit -r requirements-optimized.txt --format json > python-audit.json
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --json > npm-audit.json || true
    
    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audits
        path: |
          backend/python-audit.json
          frontend/npm-audit.json

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Hadolint for Dockerfiles
      uses: hadolint/hadolint-action@v3.1.0
      with:
        recursive: true
        ignore: DL3008,DL3009
    
    - name: Build test images
      run: |
        docker build -t sutazai-backend:test ./backend
        docker build -t sutazai-frontend:test ./frontend
    
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'sutazai-backend:test'
        format: 'sarif'
        output: 'backend-container-scan.sarif'
    
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'backend-container-scan.sarif'

  # SAST - Static Application Security Testing
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
    
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/javascript
          p/typescript
          p/docker
          p/owasp-top-ten
    
    - name: Run GitGuardian scan
      uses: GitGuardian/ggshield-action@master
      env:
        GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
        GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
        GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
    
    - name: Detect secrets with detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline

  # License Compliance
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check Python licenses
      run: |
        pip install pip-licenses
        cd backend
        pip-licenses --format=json --output-file=python-licenses.json
    
    - name: Check npm licenses
      run: |
        cd frontend
        npx license-checker --json > npm-licenses.json
    
    - name: Validate licenses
      run: |
        python scripts/validate_licenses.py

  # Infrastructure Security
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Terraform security scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true
    
    - name: Kubernetes security scan
      run: |
        curl -sSX POST --data-binary @k8s/production/deployment.yaml \
          https://kubesec.io/scan | jq .

  # Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, container-scan, sast, secret-scan, license-check]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate consolidated report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Repository: ${{ github.repository }}" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        # Add scan results
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Audit: Complete" >> security-report.md
        echo "- Container Scan: Complete" >> security-report.md
        echo "- SAST: Complete" >> security-report.md
        echo "- Secret Scan: Complete" >> security-report.md
        echo "- License Check: Complete" >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });