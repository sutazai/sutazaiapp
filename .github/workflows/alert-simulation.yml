name: Alert Simulation Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  alert-simulation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install aiohttp prometheus-client || true
          
      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start
          
      - name: Verify agent health
        run: |
          echo "=== Checking Agent Health ==="
          curl -f http://localhost:8090/health || echo "Ollama integration unhealthy"
          curl -f http://localhost:8551/health || echo "Task assignment unhealthy"
          curl -f http://localhost:8588/health || echo "Resource arbitration unhealthy"
          curl -f http://localhost:8589/health || echo "AI orchestrator unhealthy"
          
      - name: Verify metrics endpoints
        run: |
          echo "=== Checking Metrics Endpoints ==="
          curl -s http://localhost:8090/metrics | grep "agent_health_status"
          
      - name: Run normal load test
        run: |
          echo "=== Running Normal Load Test ==="
          python scripts/synthetic-load-test.py \
            --duration 30 \
            --rate 5 \
            --error-rate 0.02
            
      - name: Simulate high error rate (should trigger alert)
        run: |
          echo "=== Simulating High Error Rate ==="
          python scripts/synthetic-load-test.py \
            --duration 30 \
            --rate 10 \
            --error-rate 0.15 \
            --agent ollama-integration
            
      - name: Check Prometheus alerts
        run: |
          echo "=== Checking Prometheus Alerts ==="
          curl -s http://localhost:10200/api/v1/alerts | python -m json.tool
          
          # Check if high error rate alert is firing
          ALERT_COUNT=$(curl -s http://localhost:10200/api/v1/alerts | \
            python -c "import sys, json; data = json.load(sys.stdin); \
            alerts = [a for a in data.get('data', {}).get('alerts', []) \
            if a['labels']['alertname'] == 'AgentHighErrorRate']; \
            print(len(alerts))")
            
          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "✅ High error rate alert is firing as expected"
          else
            echo "⚠️  High error rate alert did not fire"
          fi
          
      - name: Simulate high latency (should trigger alert)
        run: |
          echo "=== Simulating High Latency ==="
          # This would require modifying the agent to add artificial delay
          # For now, we'll just check that the alert rule exists
          curl -s http://localhost:10200/api/v1/rules | \
            grep -q "AgentHighLatency" && \
            echo "✅ High latency alert rule is configured" || \
            echo "❌ High latency alert rule not found"
            
      - name: Generate test report
        if: always()
        run: |
          echo "=== Test Report ==="
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "Services Status:"
          docker ps --format "table {{.Names}}\t{{.Status}}" | grep -E "agent|prometheus|grafana"
          echo ""
          echo "Metrics Collection:"
          curl -s http://localhost:10200/api/v1/targets | \
            python -c "import sys, json; data = json.load(sys.stdin); \
            agents = [t for t in data.get('data', {}).get('activeTargets', []) \
            if t.get('labels', {}).get('job') == 'agents']; \
            print(f'Active agent targets: {len(agents)}')"
            
      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Collecting Debug Logs ==="
          docker logs sutazai-ollama-integration --tail 50
          docker logs sutazai-prometheus --tail 50
          
      - name: Stop services
        if: always()
        run: |
          docker-compose down