name: Dependency Verification

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'requirements.txt'
      - 'setup.py'
      - '.github/workflows/dependency-verification.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'requirements.txt'
      - 'setup.py'
  workflow_dispatch:

jobs:
  verify-dependencies:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -r requirements.txt
        python -m pip install safety

    - name: Verify dependency compatibility
      run: |
        echo "Checking compatibility with Python ${{ matrix.python-version }}"
        pip check

    - name: Run security check
      run: |
        safety check --full-report --ignore=51668 || true
        
    - name: Check package versions
      run: |
        python -c "
import pkg_resources
import sys

min_versions = {
    'numpy': '1.26.0',
    'pandas': '2.2.0',
    'scipy': '1.10.0',
    'sqlalchemy': '2.0.27',
    'pydantic': '2.10.6'
}

for package, min_version in min_versions.items():
    try:
        version = pkg_resources.get_distribution(package).version
        if pkg_resources.parse_version(version) < pkg_resources.parse_version(min_version):
            print(f'WARNING: {package} version {version} is lower than minimum required {min_version}')
        else:
            print(f'OK: {package} version {version} meets minimum requirement {min_version}')
    except pkg_resources.DistributionNotFound:
        print(f'SKIPPED: {package} is not installed')
" 