name: Quality Gates - Comprehensive QA Validation

# Automated quality gates deployment - Final phase of major cleanup mission
# Enforces all 20 Fundamental Rules + Zero-tolerance quality standards
# Version: SutazAI v93 - Professional QA Excellence Framework

on:
  push:
    branches: [ main, dev, v* ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      validation_level:
        description: 'Validation Level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - quick
        - comprehensive
        - production-ready

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_DB: sutazai_test
  POSTGRES_USER: sutazai
  POSTGRES_PASSWORD: sutazai_test_pass
  REDIS_URL: redis://localhost:6379
  OLLAMA_URL: http://localhost:10104
  QUALITY_THRESHOLD: 95
  COVERAGE_THRESHOLD: 80
  PERFORMANCE_THRESHOLD: 100ms

jobs:
  # Phase 1: Rule Compliance Validation (Mandatory)
  rule-compliance:
    name: "Rule Compliance Validation"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      compliance-score: ${{ steps.validate.outputs.score }}
      violations: ${{ steps.validate.outputs.violations }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip || true
          pip install -r requirements/base.txt || pip install pytest bandit safety mypy black isort flake8 || true

      - name: Load Enforcement Rules
        run: |
          echo "Loading critical Enforcement Rules document..."
          if [ ! -f "IMPORTANT/Enforcement_Rules" ]; then
            echo "‚ùå CRITICAL: Enforcement Rules document missing!"
            exit 1
          fi
          echo "‚úÖ Enforcement Rules loaded successfully"

      - name: Validate All 20 Fundamental Rules
        id: validate
        run: |
          echo "üîß Executing comprehensive rule validation..."
          python3 scripts/enforcement/rule_validator_simple.py --output-json > rule_compliance.json
          
          # Extract compliance metrics
          SCORE=$(python3 -c "import json; data=json.load(open('rule_compliance.json')); print(data.get('compliance_score', 0))")
          VIOLATIONS=$(python3 -c "import json; data=json.load(open('rule_compliance.json')); print(len(data.get('violations', [])))")
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "violations=$VIOLATIONS" >> $GITHUB_OUTPUT
          
          if [ "$VIOLATIONS" -gt 0 ]; then
            echo "‚ùå RULE VIOLATIONS DETECTED: $VIOLATIONS violations found"
            cat rule_compliance.json
            exit 1
          fi
          
          echo "‚úÖ Rule compliance validation passed: $SCORE% compliance"

      - name: Upload Rule Compliance Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: rule-compliance-report
          path: rule_compliance.json

  # Phase 2: Code Quality Automation
  code-quality:
    name: "Code Quality Automation"
    runs-on: ubuntu-latest
    needs: rule-compliance
    timeout-minutes: 20
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Quality Tools
        run: |
          pip install --upgrade pip || true
          pip install black isort flake8 mypy bandit safety || true
          pip install -r requirements/base.txt || true

      - name: Code Formatting Validation (Black)
        run: |
          echo "üé® Validating code formatting..."
          black --check --diff backend/ agents/ tests/ scripts/ || {
            echo "‚ùå Code formatting violations detected"
            echo "Run: make format to fix formatting issues"
            exit 1
          }
          echo "‚úÖ Code formatting validation passed"

      - name: Import Sorting Validation (isort)
        run: |
          echo "üì¶ Validating import sorting..."
          isort --check-only --diff backend/ agents/ tests/ scripts/ || {
            echo "‚ùå Import sorting violations detected"
            echo "Run: make format to fix import issues"
            exit 1
          }
          echo "‚úÖ Import sorting validation passed"

      - name: Code Style Validation (flake8)
        run: |
          echo "üîç Running code style validation..."
          flake8 backend/ agents/ tests/ scripts/ || {
            echo "‚ùå Code style violations detected"
            exit 1
          }
          echo "‚úÖ Code style validation passed"

      - name: Type Checking (mypy)
        run: |
          echo "üîç Running type checking..."
          mypy backend/ --ignore-missing-imports || {
            echo "‚ö†Ô∏è Type checking issues detected (non-blocking)"
          }
          echo "‚úÖ Type checking completed"

  # Phase 3: Security Scanning
  security-scanning:
    name: "Security Scanning"
    runs-on: ubuntu-latest
    needs: rule-compliance
    timeout-minutes: 15
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Security Tools
        run: |
          pip install --upgrade pip || true
          pip install bandit safety || true
          pip install -r requirements/base.txt || true

      - name: Security Code Analysis (Bandit)
        run: |
          echo "üõ°Ô∏è Running security code analysis..."
          mkdir -p tests/reports/security
          bandit -r backend/ agents/ -f json -o tests/reports/security/bandit.json || {
            echo "‚ö†Ô∏è Security issues detected in code analysis"
            cat tests/reports/security/bandit.json
          }
          echo "‚úÖ Security code analysis completed"

      - name: Dependency Vulnerability Scan (Safety)
        run: |
          echo "üîí Running dependency vulnerability scan..."
          safety check --json --output tests/reports/security/safety.json || {
            echo "‚ö†Ô∏è Vulnerable dependencies detected"
            cat tests/reports/security/safety.json
          }
          echo "‚úÖ Dependency scan completed"

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: tests/reports/security/

  # Phase 4: Comprehensive Testing
  comprehensive-testing:
    name: "Comprehensive Testing Suite"
    runs-on: ubuntu-latest
    needs: [rule-compliance, code-quality]
    timeout-minutes: 45
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip || true
          pip install -r requirements/base.txt || true
          pip install pytest pytest-asyncio pytest-cov pytest-xdist pytest-timeout pytest-html || true
          pip install httpx selenium requests psutil || true

      - name: Setup Test Environment
        run: |
          mkdir -p tests/reports/{junit,coverage,performance,security}
          echo "‚úÖ Test environment ready"

      - name: Run Unit Tests with Coverage
        run: |
          echo "üß™ Running unit tests with coverage..."
          pytest tests/unit/ \
            --cov=backend --cov=agents \
            --cov-report=html:tests/reports/coverage/html \
            --cov-report=xml:tests/reports/coverage/coverage.xml \
            --cov-report=term-missing \
            --junit-xml=tests/reports/junit/unit.xml \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} || {
            echo "‚ùå Unit tests failed or coverage below threshold (${{ env.COVERAGE_THRESHOLD }}%)"
            exit 1
          }
          echo "‚úÖ Unit tests passed with adequate coverage"

      - name: Run Integration Tests
        run: |
          echo "üîó Running integration tests..."
          pytest tests/integration/ \
            --junit-xml=tests/reports/junit/integration.xml \
            --tb=short || {
            echo "‚ùå Integration tests failed"
            exit 1
          }
          echo "‚úÖ Integration tests passed"

      - name: Run Security Tests
        run: |
          echo "üõ°Ô∏è Running security tests..."
          pytest tests/security/ \
            --junit-xml=tests/reports/junit/security.xml \
            --tb=short || {
            echo "‚ö†Ô∏è Security tests completed with issues"
          }
          echo "‚úÖ Security tests completed"

      - name: Performance Smoke Tests
        run: |
          echo "‚ö° Running performance smoke tests..."
          pytest tests/performance/load/ -m "not slow" \
            --junit-xml=tests/reports/junit/performance.xml \
            --tb=short || {
            echo "‚ö†Ô∏è Performance tests completed with issues"
          }
          echo "‚úÖ Performance tests completed"

      - name: Upload Test Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: tests/reports/

  # Phase 5: Infrastructure Protection Validation
  infrastructure-protection:
    name: "Infrastructure Protection Gates"
    runs-on: ubuntu-latest
    needs: rule-compliance
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: MCP Server Protection Validation
        run: |
          echo "üîí Validating MCP server protection..."
          
          # Check .mcp.json integrity
          if [ ! -f ".mcp.json" ]; then
            echo "‚ùå CRITICAL: .mcp.json file missing!"
            exit 1
          fi
          
          # Verify no unauthorized modifications
          EXPECTED_CHECKSUM="c1ada43007a0715d577c10fad975517a82506c07"
          ACTUAL_CHECKSUM=$(sha1sum .mcp.json | cut -d' ' -f1)
          
          if [ "$ACTUAL_CHECKSUM" != "$EXPECTED_CHECKSUM" ]; then
            echo "‚ö†Ô∏è WARNING: .mcp.json checksum changed"
            echo "Expected: $EXPECTED_CHECKSUM"
            echo "Actual: $ACTUAL_CHECKSUM"
            echo "This may indicate unauthorized modifications"
          else
            echo "‚úÖ MCP configuration integrity verified"
          fi

      - name: Ollama/TinyLlama Protection Validation
        run: |
          echo "ü§ñ Validating AI model protection..."
          
          # Check for unauthorized model modifications
          if [ -d "models/" ]; then
            echo "‚úÖ Model directory structure protected"
          fi
          
          # Verify port allocation compliance
          if grep -q "10104" docker-compose.yml; then
            echo "‚úÖ Ollama port allocation (10104) protected"
          else
            echo "‚ö†Ô∏è WARNING: Ollama port allocation may have changed"
          fi

      - name: Database Protection Validation
        run: |
          echo "üóÑÔ∏è Validating database protection..."
          
          # Check PostgreSQL configuration
          if grep -q "postgres" docker-compose.yml; then
            echo "‚úÖ PostgreSQL configuration present"
          fi
          
          # Check Redis configuration
          if grep -q "redis" docker-compose.yml; then
            echo "‚úÖ Redis configuration present"
          fi
          
          echo "‚úÖ Database protection validation completed"

  # Phase 6: Documentation Quality Gates
  documentation-quality:
    name: "Documentation Quality Gates"
    runs-on: ubuntu-latest
    needs: rule-compliance
    timeout-minutes: 10
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: CHANGELOG.md Validation
        run: |
          echo "üìã Validating CHANGELOG.md compliance..."
          
          # Check root CHANGELOG.md
          if [ ! -f "CHANGELOG.md" ]; then
            echo "‚ùå CRITICAL: Root CHANGELOG.md missing!"
            exit 1
          fi
          
          # Validate CHANGELOG format
          if grep -q "Keep a Changelog" CHANGELOG.md; then
            echo "‚úÖ CHANGELOG.md follows standard format"
          else
            echo "‚ö†Ô∏è WARNING: CHANGELOG.md format may not comply with standards"
          fi
          
          # Check for required directories
          MISSING_CHANGELOGS=()
          for dir in tests backend frontend scripts monitoring agents; do
            if [ -d "$dir" ] && [ ! -f "$dir/CHANGELOG.md" ]; then
              MISSING_CHANGELOGS+=("$dir")
            fi
          done
          
          if [ ${#MISSING_CHANGELOGS[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è WARNING: Missing CHANGELOG.md in: ${MISSING_CHANGELOGS[*]}"
          else
            echo "‚úÖ All directories have CHANGELOG.md files"
          fi

      - name: Documentation Completeness Check
        run: |
          echo "üìö Checking documentation completeness..."
          
          # Check critical documentation files
          CRITICAL_DOCS=("README.md" "CLAUDE.md" "IMPORTANT/Enforcement_Rules")
          for doc in "${CRITICAL_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "‚ùå CRITICAL: $doc missing!"
              exit 1
            else
              echo "‚úÖ $doc present"
            fi
          done
          
          echo "‚úÖ Documentation completeness validation passed"

  # Phase 7: Quality Gate Summary
  quality-gate-summary:
    name: "Quality Gate Summary"
    runs-on: ubuntu-latest
    needs: [rule-compliance, code-quality, security-scanning, comprehensive-testing, infrastructure-protection, documentation-quality]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: qa-reports

      - name: Generate Quality Gate Summary
        run: |
          echo "üìä QUALITY GATE SUMMARY REPORT"
          echo "=============================="
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Commit: $GITHUB_SHA"
          echo "Branch: $GITHUB_REF_NAME"
          echo ""
          
          # Parse job results
          RULE_COMPLIANCE="${{ needs.rule-compliance.result }}"
          CODE_QUALITY="${{ needs.code-quality.result }}"
          SECURITY_SCANNING="${{ needs.security-scanning.result }}"
          TESTING="${{ needs.comprehensive-testing.result }}"
          INFRASTRUCTURE="${{ needs.infrastructure-protection.result }}"
          DOCUMENTATION="${{ needs.documentation-quality.result }}"
          
          echo "üîß Rule Compliance: $RULE_COMPLIANCE"
          echo "üé® Code Quality: $CODE_QUALITY"
          echo "üõ°Ô∏è Security Scanning: $SECURITY_SCANNING"
          echo "üß™ Comprehensive Testing: $TESTING"
          echo "üîí Infrastructure Protection: $INFRASTRUCTURE"
          echo "üìö Documentation Quality: $DOCUMENTATION"
          echo ""
          
          # Calculate overall status
          FAILED_GATES=0
          [ "$RULE_COMPLIANCE" != "success" ] && ((FAILED_GATES++))
          [ "$CODE_QUALITY" != "success" ] && ((FAILED_GATES++))
          [ "$SECURITY_SCANNING" != "success" ] && ((FAILED_GATES++))
          [ "$TESTING" != "success" ] && ((FAILED_GATES++))
          [ "$INFRASTRUCTURE" != "success" ] && ((FAILED_GATES++))
          [ "$DOCUMENTATION" != "success" ] && ((FAILED_GATES++))
          
          if [ $FAILED_GATES -eq 0 ]; then
            echo "‚úÖ ALL QUALITY GATES PASSED"
            echo "üèÜ Code is ready for deployment"
            echo "üìà Quality Score: 100%"
          else
            echo "‚ùå $FAILED_GATES QUALITY GATE(S) FAILED"
            echo "üö´ Code is NOT ready for deployment"
            echo "üìâ Quality Score: $(( (6 - FAILED_GATES) * 100 / 6 ))%"
            exit 1
          fi

      - name: Post Quality Gate Status
        if: always()
        run: |
          echo "Quality gate validation completed."
          echo "See job summary for detailed results."