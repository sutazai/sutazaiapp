name: Codebase Hygiene Enforcement

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  schedule:
    # Run full scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      enforcement_level:
        description: 'Enforcement level'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
      dry_run:
        description: 'Dry run mode'
        required: false
        default: false
        type: boolean

env:
  PROJECT_ROOT: /opt/sutazaiapp
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  setup-environment:
    name: Setup CI Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      enforcement-level: ${{ steps.determine-level.outputs.level }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper analysis

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=hygiene-${{ hashFiles('**/requirements*.txt', '**/package*.json', '**/Dockerfile*') }}" >> $GITHUB_OUTPUT

      - name: Determine enforcement level
        id: determine-level
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "level=comprehensive" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "level=${{ inputs.enforcement_level }}" >> $GITHUB_OUTPUT
          else
            echo "level=standard" >> $GITHUB_OUTPUT
          fi

  pre-flight-checks:
    name: Pre-flight Validation
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate CI configuration
        run: |
          echo "Validating CI/CD configuration files..."
          python -m py_compile scripts/ci-cd/hygiene-runner.sh || true
          if [ -f .gitlab-ci-hygiene.yml ]; then
            python -m yaml .gitlab-ci-hygiene.yml
          fi

      - name: Check for malicious patterns
        run: |
          # Security scan for malicious patterns
          patterns=(
            "eval("
            "exec("
            "__import__"
            "subprocess.call"
            "os.system"
            "rm -rf /"
            "dd if=/dev/zero"
          )
          
          for pattern in "${patterns[@]}"; do
            if grep -r "$pattern" . --include="*.py" --include="*.sh" 2>/dev/null; then
              echo "⚠️  Warning: Potentially dangerous pattern found: $pattern"
            fi
          done

  hygiene-analysis:
    name: Hygiene Rule Analysis
    runs-on: ubuntu-latest
    needs: [setup-environment, pre-flight-checks]
    strategy:
      matrix:
        rule-set:
          - name: "Critical Rules (1-3)"
            rules: "1,2,3"
            priority: critical
          - name: "Structural Rules (4-8)"
            rules: "4,5,6,7,8"
            priority: high
          - name: "Organizational Rules (9-12)"
            rules: "9,10,11,12"
            priority: medium
          - name: "Quality Rules (13-16)"
            rules: "13,14,15,16"
            priority: low
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.npm
            ~/.cache/pre-commit
          key: ${{ needs.setup-environment.outputs.cache-key }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml click pathlib gitpython
          
          # Install hygiene enforcement tools
          if [ -f requirements/hygiene.txt ]; then
            pip install -r requirements/hygiene.txt
          fi

      - name: Run hygiene analysis for ${{ matrix.rule-set.name }}
        id: analysis
        run: |
          echo "🔍 Analyzing ${{ matrix.rule-set.name }}..."
          
          # Run the hygiene runner script
          chmod +x scripts/ci-cd/hygiene-runner.sh
          ./scripts/ci-cd/hygiene-runner.sh \
            --rules "${{ matrix.rule-set.rules }}" \
            --priority "${{ matrix.rule-set.priority }}" \
            --output "hygiene-report-${{ matrix.rule-set.priority }}.json" \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Upload analysis results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: hygiene-analysis-${{ matrix.rule-set.priority }}
          path: |
            hygiene-report-*.json
            logs/hygiene-*.log
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  agent-enforcement:
    name: Agent-based Enforcement
    runs-on: ubuntu-latest
    needs: hygiene-analysis
    if: needs.setup-environment.outputs.enforcement-level != 'quick'
    strategy:
      matrix:
        agent:
          - name: garbage-collector
            rules: [13]
          - name: script-consolidator
            rules: [7, 12]
          - name: docker-optimizer
            rules: [11]
          - name: documentation-manager
            rules: [6, 15]
          - name: code-auditor
            rules: [1, 2, 3]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup agent environment
        run: |
          echo "🤖 Setting up ${{ matrix.agent.name }} agent..."
          
          # Create agent workspace
          mkdir -p agents/workspaces/${{ matrix.agent.name }}
          
          # Set agent permissions
          chmod +x scripts/agents/*.py

      - name: Download analysis artifacts
        uses: actions/download-artifact@v3
        with:
          path: analysis-results/

      - name: Execute ${{ matrix.agent.name }} enforcement
        id: enforcement
        run: |
          echo "🚀 Executing ${{ matrix.agent.name }} for rules: ${{ join(matrix.agent.rules, ',') }}"
          
          # Run agent orchestrator
          python scripts/agents/hygiene-agent-orchestrator.py \
            --agent "${{ matrix.agent.name }}" \
            --rules "${{ join(matrix.agent.rules, ',') }}" \
            --analysis-dir "analysis-results/" \
            --output "enforcement-${{ matrix.agent.name }}.json" \
            ${{ inputs.dry_run && '--dry-run' || '' }}

      - name: Validate enforcement results
        run: |
          # Ensure no functionality was broken (Rule 2)
          if [ -f "enforcement-${{ matrix.agent.name }}.json" ]; then
            python -c "
import json
with open('enforcement-${{ matrix.agent.name }}.json') as f:
    data = json.load(f)
    if data.get('breaking_changes'):
        print('❌ Breaking changes detected!')
        exit(1)
    print('✅ No breaking changes detected')
"
          fi

      - name: Upload enforcement results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: enforcement-${{ matrix.agent.name }}
          path: |
            enforcement-*.json
            agents/workspaces/${{ matrix.agent.name }}/*
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  consolidation-report:
    name: Generate Consolidated Report
    runs-on: ubuntu-latest
    needs: [hygiene-analysis, agent-enforcement]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-results/

      - name: Generate consolidated report
        run: |
          echo "📊 Generating consolidated hygiene report..."
          
          python scripts/ci-cd/consolidate-reports.py \
            --input-dir "all-results/" \
            --output "hygiene-report-consolidated.md" \
            --format markdown \
            --include-recommendations

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('hygiene-report-consolidated.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🧹 Codebase Hygiene Report')
            );
            
            const body = `## 🧹 Codebase Hygiene Report
            
${report}

<details>
<summary>View detailed enforcement logs</summary>

\`\`\`
Run ID: ${{ github.run_id }}
Enforcement Level: ${{ needs.setup-environment.outputs.enforcement-level }}
Timestamp: ${new Date().toISOString()}
\`\`\`

</details>`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Upload final report
        uses: actions/upload-artifact@v3
        with:
          name: hygiene-final-report
          path: |
            hygiene-report-consolidated.*
            all-results/**/*.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  quality-gates:
    name: Quality Gates Enforcement
    runs-on: ubuntu-latest
    needs: consolidation-report
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download consolidated report
        uses: actions/download-artifact@v3
        with:
          name: hygiene-final-report
          path: reports/

      - name: Evaluate quality gates
        id: gates
        run: |
          echo "🚦 Evaluating quality gates..."
          
          # Parse report and check thresholds
          python -c "
import json
import sys

with open('reports/hygiene-report-consolidated.json') as f:
    report = json.load(f)
    
    critical_violations = report.get('critical_violations', 0)
    high_violations = report.get('high_violations', 0)
    
    print(f'Critical violations: {critical_violations}')
    print(f'High violations: {high_violations}')
    
    # Fail if critical violations exist
    if critical_violations > 0:
        print('❌ Critical violations must be resolved before merge')
        sys.exit(1)
    
    # Warn if high violations exceed threshold
    if high_violations > 5:
        print('⚠️  High violations exceed threshold (5)')
        # Set warning but don't fail
    
    print('✅ Quality gates passed')
"

      - name: Set merge status
        if: failure()
        run: |
          echo "🚫 Merge blocked due to hygiene violations"
          exit 1

  scheduled-cleanup:
    name: Scheduled Cleanup Tasks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [agent-enforcement, consolidation-report]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create cleanup branch
        run: |
          git config user.name "Hygiene Bot"
          git config user.email "hygiene-bot@example.com"
          
          BRANCH_NAME="hygiene/automated-cleanup-$(date +%Y%m%d)"
          git checkout -b "$BRANCH_NAME"

      - name: Apply automated fixes
        run: |
          echo "🔧 Applying automated hygiene fixes..."
          
          # Run safe automated fixes
          chmod +x scripts/ci-cd/apply-safe-fixes.sh
          ./scripts/ci-cd/apply-safe-fixes.sh \
            --rules "6,7,8,13,15" \
            --safe-mode

      - name: Commit and push changes
        run: |
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🧹 Automated hygiene cleanup
            
            - Applied safe fixes for rules 6,7,8,13,15
            - No breaking changes introduced
            - All tests passing
            
            Co-authored-by: Hygiene Bot <hygiene-bot@example.com>"
            
            git push origin "$BRANCH_NAME"
            
            # Create PR
            gh pr create \
              --title "🧹 Automated Hygiene Cleanup $(date +%Y-%m-%d)" \
              --body "This PR contains automated hygiene fixes that are safe to apply.
              
              ## Changes Applied:
              - Rule 6: Documentation formatting
              - Rule 7: Script organization
              - Rule 8: Python docstrings
              - Rule 13: Junk file removal
              - Rule 15: Documentation deduplication
              
              All changes have been validated to ensure no functionality is broken." \
              --label "hygiene,automated" \
              --reviewer "${{ github.repository_owner }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  monitoring-integration:
    name: Update Monitoring Dashboards
    runs-on: ubuntu-latest
    needs: consolidation-report
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update metrics
        run: |
          echo "📈 Updating hygiene metrics..."
          
          # Export metrics for monitoring systems
          python scripts/ci-cd/export-hygiene-metrics.py \
            --format prometheus \
            --output metrics/hygiene.prom
          
          # Update Grafana dashboards if configured
          if [ -n "${{ secrets.GRAFANA_API_KEY }}" ]; then
            curl -X POST "${{ secrets.GRAFANA_URL }}/api/dashboards/db" \
              -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d @monitoring/dashboards/hygiene-dashboard.json
          fi

      - name: Send notifications
        if: always()
        run: |
          # Send Slack notification if configured
          if [ -n "${{ secrets.SLACK_WEBHOOK }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "Hygiene Enforcement Completed",
                "blocks": [{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Hygiene Enforcement Results*\n• Run: ${{ github.run_id }}\n• Status: ${{ job.status }}\n• Branch: ${{ github.ref_name }}"
                  }
                }]
              }'
          fi