name: SutazAI Test Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.7.1'

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: |
        poetry install --with dev,security
    
    - name: Run code formatting check (Black)
      run: |
        poetry run black --check --diff backend/ frontend/ tests/ scripts/
    
    - name: Run import sorting check (isort)
      run: |
        poetry run isort --check-only --diff backend/ frontend/ tests/ scripts/
    
    - name: Run linting (flake8)
      run: |
        poetry run flake8 backend/ frontend/ tests/ scripts/
    
    - name: Run type checking (mypy)
      run: |
        poetry run mypy backend/ --ignore-missing-imports
    
    - name: Run security scan (Bandit)
      run: |
        poetry run bandit -r backend/ frontend/ -f json -o bandit-report.json
    
    - name: Run dependency security check (Safety)
      run: |
        poetry run safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        test-group: ['backend', 'frontend']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Run unit tests
      run: |
        poetry run python scripts/test_runner.py --type unit --pattern ${{ matrix.test-group }}
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-${{ matrix.python-version }}-${{ matrix.test-group }}
        path: |
          unit-test-results.xml
          htmlcov/

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sutazai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Wait for services
      run: |
        sleep 10
        pg_isready -h localhost -p 5432 -U test_user
        redis-cli -h localhost -p 6379 ping
    
    - name: Run database migrations
      run: |
        # Add migration commands if applicable
        echo "Running database setup..."
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sutazai_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        poetry run python scripts/test_runner.py --type integration --services postgres,redis
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-results.xml
          test-report.html

  # Job 4: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install Python dependencies
      run: |
        poetry install
    
    - name: Install Playwright
      run: |
        poetry run playwright install --with-deps chromium
    
    - name: Start application services
      run: |
        # Start backend
        poetry run python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        # Start frontend
        poetry run streamlit run frontend/app.py --server.port 8501 &
        sleep 30  # Wait for services to start
    
    - name: Run E2E tests
      run: |
        poetry run python scripts/test_runner.py --type e2e --browser chrome
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          e2e-test-results.xml
          e2e-screenshots/

  # Job 5: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
        pip install locust
    
    - name: Start application for performance testing
      run: |
        poetry run python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Run performance tests
      run: |
        cd tests/load
        python load_test_runner.py --host http://localhost:8000 --users 50 --spawn-rate 5 --run-time 300s
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          tests/load/load_test_results/

  # Job 6: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-test]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Start application for security testing
      run: |
        poetry run python -m uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        poetry run streamlit run frontend/app.py --server.port 8501 &
        sleep 15
    
    - name: Run security tests
      run: |
        poetry run python scripts/test_runner.py --type security
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          security-test-results.xml

  # Job 7: Docker Tests
  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Build Docker images
      run: |
        docker build -t sutazai-backend:test -f backend/Dockerfile .
        docker build -t sutazai-frontend:test -f frontend/Dockerfile .
    
    - name: Run Docker tests
      run: |
        poetry run python scripts/test_runner.py --type docker
    
    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-test-results
        path: |
          docker-test-results.xml

  # Job 8: Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: sutazai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: Run comprehensive coverage analysis
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sutazai_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        poetry run bash scripts/script-discovery-bootstrap.sh exec_script coverage_reporter.py --test-type all --threshold 80
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage_reports/
          coverage.xml
          coverage.json
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: sutazai-coverage
        fail_ci_if_error: false

  # Job 9: Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, coverage-report]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: all-artifacts/
    
    - name: Generate test summary
      run: |
        echo "# 🧠 SutazAI Test Pipeline Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check job results
        if [ "${{ needs.code-quality.result }}" = "success" ]; then
          echo "✅ Code Quality & Security: PASSED" >> test-summary.md
        else
          echo "❌ Code Quality & Security: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.unit-tests.result }}" = "success" ]; then
          echo "✅ Unit Tests: PASSED" >> test-summary.md
        else
          echo "❌ Unit Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.integration-tests.result }}" = "success" ]; then
          echo "✅ Integration Tests: PASSED" >> test-summary.md
        else
          echo "❌ Integration Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.e2e-tests.result }}" = "success" ]; then
          echo "✅ End-to-End Tests: PASSED" >> test-summary.md
        else
          echo "❌ End-to-End Tests: FAILED" >> test-summary.md
        fi
        
        if [ "${{ needs.coverage-report.result }}" = "success" ]; then
          echo "✅ Coverage Report: PASSED" >> test-summary.md
        else
          echo "❌ Coverage Report: FAILED" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Artifacts" >> test-summary.md
        echo "- 📊 Coverage Reports" >> test-summary.md
        echo "- 🔍 Security Scan Results" >> test-summary.md
        echo "- 📋 Test Result XMLs" >> test-summary.md
        echo "- 🖼️ E2E Screenshots (if failed)" >> test-summary.md
        
        cat test-summary.md
    
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Job 10: Deployment (only on main branch success)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.test-summary.result == 'success'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add actual deployment commands here
        echo "Deployment would happen here"
    
    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment smoke tests..."
        # Add smoke tests for deployed environment
        echo "Smoke tests would run here"

# Workflow dispatch for manual testing
  manual-test:
    name: Manual Test Trigger
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Manual test execution
      run: |
        echo "Manual test execution triggered"
        echo "Test type: ${{ github.event.inputs.test_type || 'all' }}"