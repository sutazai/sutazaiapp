name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: SutazAI ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # Build Release Artifacts
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - component: backend
            artifact: sutazai-backend
          - component: frontend
            artifact: sutazai-frontend
          - component: ollama
            artifact: sutazai-ollama
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ${{ matrix.artifact }}:${{ needs.create-release.outputs.version }} \
          -f ./${{ matrix.component }}/Dockerfile.optimized \
          ./${{ matrix.component }}
    
    - name: Save Docker image
      run: |
        docker save ${{ matrix.artifact }}:${{ needs.create-release.outputs.version }} | \
          gzip > ${{ matrix.artifact }}-${{ needs.create-release.outputs.version }}.tar.gz
    
    - name: Upload artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_url }}
        asset_path: ./${{ matrix.artifact }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: ${{ matrix.artifact }}-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # Build Binaries
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: amd64
          - os: macos-latest
            platform: darwin
            arch: amd64
          - os: windows-latest
            platform: windows
            arch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build CLI binary
      run: |
        pip install pyinstaller
        cd cli
        pyinstaller --onefile --name sutazai-cli-${{ matrix.platform }}-${{ matrix.arch }} sutazai.py
    
    - name: Upload CLI binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_url }}
        asset_path: ./cli/dist/sutazai-cli-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.platform == 'windows' && '.exe' || '' }}
        asset_name: sutazai-cli-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.platform == 'windows' && '.exe' || '' }}
        asset_content_type: application/octet-stream

  # Generate Documentation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        pip install pydoc-markdown
    
    - name: Generate API documentation
      run: |
        cd backend
        pydoc-markdown -I app -o ../docs/api/
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Create documentation archive
      run: |
        tar -czf sutazai-docs-${{ needs.create-release.outputs.version }}.tar.gz site/
    
    - name: Upload documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.release_url }}
        asset_path: ./sutazai-docs-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: sutazai-docs-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  # Publish to Package Registries
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Build Python package
      run: |
        cd backend
        pip install build
        python -m build
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: backend/dist/
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push Docker images
      run: |
        docker tag sutazai-backend:${{ needs.create-release.outputs.version }} \
          ${{ secrets.DOCKERHUB_USERNAME }}/sutazai-backend:${{ needs.create-release.outputs.version }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/sutazai-backend:${{ needs.create-release.outputs.version }}

  # Deploy Release
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-artifacts, publish-packages]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.create-release.outputs.version }} to production"
        # kubectl set image deployment/sutazai-backend \
        #   backend=${{ secrets.DOCKERHUB_USERNAME }}/sutazai-backend:${{ needs.create-release.outputs.version }}
    
    - name: Update Helm chart
      run: |
        # helm upgrade sutazai ./helm/sutazai \
        #   --set image.tag=${{ needs.create-release.outputs.version }} \
        #   --wait
        echo "Helm deployment completed"
    
    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification"
        # python scripts/verify_deployment.py --version ${{ needs.create-release.outputs.version }}

  # Announce Release
  announce-release:
    name: Announce Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    
    steps:
    - name: Send Discord notification
      run: |
        curl -X POST ${{ secrets.DISCORD_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{
            "content": "ðŸš€ **SutazAI '${{ needs.create-release.outputs.version }}' Released!**\n\nCheck out the release notes: https://github.com/${{ github.repository }}/releases/tag/'${{ needs.create-release.outputs.version }}'"
          }'
    
    - name: Tweet release
      uses: ethomson/send-tweet-action@v1
      with:
        status: |
          ðŸŽ‰ SutazAI ${{ needs.create-release.outputs.version }} is now available!
          
          ðŸš€ AI-powered autonomous system
          ðŸ§  Advanced AGI capabilities
          ðŸ”’ Enterprise-grade security
          
          Get it now: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}
          
          #AI #OpenSource #AGI
        consumer-key: ${{ secrets.TWITTER_CONSUMER_KEY }}
        consumer-secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}