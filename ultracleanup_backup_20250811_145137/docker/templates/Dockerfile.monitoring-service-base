# ============================================================================
# SUTAZAI MASTER TEMPLATE: Monitoring Service Base
# ============================================================================
# Purpose: Production-ready monitoring service with Prometheus/Grafana
# Security: Non-root user, hardened monitoring environment
# Performance: Optimized for metrics collection and alerting
# Compatibility: Prometheus, Grafana, AlertManager, exporters
# Author: ULTRA DEPLOYMENT ENGINEER
# Date: August 10, 2025
# Version: v1.0.0
# ============================================================================

# Multi-stage build for different monitoring components
FROM alpine:3.19 as base

# ============================================================================
# SYSTEM CONFIGURATION & SECURITY HARDENING
# ============================================================================

# Install essential packages
RUN apk add --no-cache \
        curl \
        wget \
        ca-certificates \
        tzdata \
        bash \
        && rm -rf /var/cache/apk/*

# Create monitoring user for security
RUN addgroup -g 1000 -S monitoring && \
    adduser -u 1000 -S monitoring -G monitoring

# ============================================================================
# PROMETHEUS STAGE
# ============================================================================
FROM base as prometheus

# Install Prometheus
ARG PROMETHEUS_VERSION=2.48.1
RUN wget https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz && \
    tar xzf prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz && \
    mv prometheus-${PROMETHEUS_VERSION}.linux-amd64/prometheus /usr/local/bin/ && \
    mv prometheus-${PROMETHEUS_VERSION}.linux-amd64/promtool /usr/local/bin/ && \
    rm -rf prometheus-*

# Create Prometheus directories
RUN mkdir -p /etc/prometheus \
             /var/lib/prometheus \
             /var/lib/prometheus/data \
             && chown -R monitoring:monitoring /etc/prometheus /var/lib/prometheus

# Prometheus configuration
RUN cat > /etc/prometheus/prometheus.yml << 'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'sutazai'

rule_files:
  - "/etc/prometheus/rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']

  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']

  - job_name: 'sutazai-services'
    metrics_path: '/metrics'
    static_configs:
      - targets:
          - 'backend:10010'
          - 'frontend:10011'
          - 'ai-agent-orchestrator:8589'
EOF

# ============================================================================
# GRAFANA STAGE
# ============================================================================
FROM base as grafana

# Install Grafana
ARG GRAFANA_VERSION=10.2.2
RUN wget https://dl.grafana.com/oss/release/grafana-${GRAFANA_VERSION}.linux-amd64.tar.gz && \
    tar xzf grafana-${GRAFANA_VERSION}.linux-amd64.tar.gz && \
    mv grafana-${GRAFANA_VERSION} /usr/share/grafana && \
    ln -s /usr/share/grafana/bin/grafana-server /usr/local/bin/grafana-server && \
    rm -rf grafana-*.tar.gz

# Create Grafana directories
RUN mkdir -p /etc/grafana \
             /var/lib/grafana \
             /var/lib/grafana/dashboards \
             /var/lib/grafana/plugins \
             /var/log/grafana \
             && chown -R monitoring:monitoring /etc/grafana /var/lib/grafana /var/log/grafana

# Grafana configuration
RUN cat > /etc/grafana/grafana.ini << 'EOF'
[server]
http_port = 3000
domain = localhost
root_url = http://localhost:3000

[database]
type = sqlite3
path = /var/lib/grafana/grafana.db

[security]
admin_user = admin
admin_password = admin
secret_key = changeme

[users]
allow_sign_up = false
allow_org_create = false
auto_assign_org = true
auto_assign_org_role = Viewer

[auth.anonymous]
enabled = false

[log]
mode = file
level = info
root_path = /var/log/grafana
EOF

# ============================================================================
# ALERTMANAGER STAGE
# ============================================================================
FROM base as alertmanager

# Install AlertManager
ARG ALERTMANAGER_VERSION=0.26.0
RUN wget https://github.com/prometheus/alertmanager/releases/download/v${ALERTMANAGER_VERSION}/alertmanager-${ALERTMANAGER_VERSION}.linux-amd64.tar.gz && \
    tar xzf alertmanager-${ALERTMANAGER_VERSION}.linux-amd64.tar.gz && \
    mv alertmanager-${ALERTMANAGER_VERSION}.linux-amd64/alertmanager /usr/local/bin/ && \
    mv alertmanager-${ALERTMANAGER_VERSION}.linux-amd64/amtool /usr/local/bin/ && \
    rm -rf alertmanager-*

# Create AlertManager directories
RUN mkdir -p /etc/alertmanager \
             /var/lib/alertmanager \
             && chown -R monitoring:monitoring /etc/alertmanager /var/lib/alertmanager

# AlertManager configuration
RUN cat > /etc/alertmanager/alertmanager.yml << 'EOF'
global:
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@sutazai.local'

route:
  group_by: ['alertname']
  group_wait: 10s
  group_interval: 10s
  repeat_interval: 1h
  receiver: 'default'

receivers:
  - name: 'default'
    webhook_configs:
      - url: 'http://localhost:9093/api/v1/alerts'
        send_resolved: true
EOF

# ============================================================================
# FINAL STAGE - UNIVERSAL MONITORING
# ============================================================================
FROM base as runtime

# Copy binaries from build stages
COPY --from=prometheus /usr/local/bin/prometheus /usr/local/bin/promtool /usr/local/bin/
COPY --from=grafana /usr/local/bin/grafana-server /usr/share/grafana /usr/local/bin/
COPY --from=alertmanager /usr/local/bin/alertmanager /usr/local/bin/amtool /usr/local/bin/

# Copy configurations
COPY --from=prometheus --chown=monitoring:monitoring /etc/prometheus /etc/prometheus
COPY --from=grafana --chown=monitoring:monitoring /etc/grafana /etc/grafana
COPY --from=alertmanager --chown=monitoring:monitoring /etc/alertmanager /etc/alertmanager

# Create all required directories
RUN mkdir -p /var/lib/prometheus/data \
             /var/lib/grafana \
             /var/lib/alertmanager \
             /var/log/grafana \
             && chown -R monitoring:monitoring /var/lib/prometheus \
                                               /var/lib/grafana \
                                               /var/lib/alertmanager \
                                               /var/log/grafana

# ============================================================================
# ENTRYPOINT SCRIPT
# ============================================================================

# Create universal monitoring entrypoint
RUN cat > /docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

SERVICE_TYPE=${SERVICE_TYPE:-prometheus}

case "$SERVICE_TYPE" in
    prometheus)
        exec prometheus \
            --config.file=/etc/prometheus/prometheus.yml \
            --storage.tsdb.path=/var/lib/prometheus/data \
            --web.console.libraries=/usr/share/prometheus/console_libraries \
            --web.console.templates=/usr/share/prometheus/consoles \
            --web.listen-address=0.0.0.0:9090 \
            --storage.tsdb.retention.time=15d \
            --storage.tsdb.retention.size=10GB \
            "$@"
        ;;
    grafana)
        exec grafana-server \
            --config=/etc/grafana/grafana.ini \
            --homepath=/usr/share/grafana \
            "$@"
        ;;
    alertmanager)
        exec alertmanager \
            --config.file=/etc/alertmanager/alertmanager.yml \
            --storage.path=/var/lib/alertmanager \
            --web.listen-address=0.0.0.0:9093 \
            "$@"
        ;;
    *)
        echo "Unknown service type: $SERVICE_TYPE"
        echo "Supported types: prometheus, grafana, alertmanager"
        exit 1
        ;;
esac
EOF

RUN chmod +x /docker-entrypoint.sh

# ============================================================================
# HEALTH CHECK & MONITORING
# ============================================================================

# Universal health check script
RUN cat > /healthcheck.sh << 'EOF'
#!/bin/bash
SERVICE_TYPE=${SERVICE_TYPE:-prometheus}

case "$SERVICE_TYPE" in
    prometheus)
        curl -f http://localhost:9090/-/ready || exit 1
        ;;
    grafana)
        curl -f http://localhost:3000/api/health || exit 1
        ;;
    alertmanager)
        curl -f http://localhost:9093/-/ready || exit 1
        ;;
    *)
        exit 1
        ;;
esac
EOF

RUN chmod +x /healthcheck.sh

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD /healthcheck.sh || exit 1

# ============================================================================
# RUNTIME CONFIGURATION
# ============================================================================

# Switch to monitoring user
USER monitoring

# Expose monitoring service ports
EXPOSE 9090 3000 9093

# Set monitoring environment variables
ENV SERVICE_TYPE=prometheus \
    PROMETHEUS_RETENTION_TIME=15d \
    PROMETHEUS_RETENTION_SIZE=10GB \
    GRAFANA_ADMIN_USER=admin \
    GRAFANA_ADMIN_PASSWORD=admin

# Create volume mount points
VOLUME ["/var/lib/prometheus/data", "/var/lib/grafana", "/var/lib/alertmanager"]

# Set working directory
WORKDIR /var/lib/prometheus

# Default entrypoint
ENTRYPOINT ["/docker-entrypoint.sh"]

# ============================================================================
# TEMPLATE USAGE INSTRUCTIONS
# ============================================================================
#
# To use this template:
#
# Prometheus:
# docker run -e SERVICE_TYPE=prometheus -p 9090:9090 -v prom-data:/var/lib/prometheus/data monitoring-service
#
# Grafana:
# docker run -e SERVICE_TYPE=grafana -p 3000:3000 -v grafana-data:/var/lib/grafana monitoring-service
#
# AlertManager:
# docker run -e SERVICE_TYPE=alertmanager -p 9093:9093 -v alert-data:/var/lib/alertmanager monitoring-service
#
# Features:
# - Multi-service support (Prometheus, Grafana, AlertManager)
# - Non-root execution for security
# - Optimized configurations for containerized environments
# - Health checks for all services
# - Persistent storage support
# - Ready-to-use configurations with SutazAI integration
#
# Configuration Files:
# - /etc/prometheus/prometheus.yml - Prometheus configuration
# - /etc/grafana/grafana.ini - Grafana configuration
# - /etc/alertmanager/alertmanager.yml - AlertManager configuration
#
# Data Volumes:
# - /var/lib/prometheus/data - Prometheus TSDB
# - /var/lib/grafana - Grafana database and dashboards
# - /var/lib/alertmanager - AlertManager data
# ============================================================================