version: '3.9'

# ==============================================================================
# SutazAI AGI/ASI System - Optimized Production Configuration
# ==============================================================================
# Clean, high-performance Docker configuration for the SutazAI system.
# All redundancies removed, services optimized for production deployment.

networks:
  sutazai-net:
    driver: bridge
    name: sutazai-net

volumes:
  postgres_data:
  redis_data:
  chromadb_data:
  qdrant_data:
  ollama_data:
  logs_data:
  prometheus_data:
  grafana_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

x-common-env: &common-env
  TZ: UTC
  LOG_LEVEL: INFO
  PYTHONUNBUFFERED: 1

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 5
  start_period: 60s

services:

  # ===================================
  # REVERSE PROXY & LOAD BALANCER
  # ===================================

  nginx:
    image: nginx:1.25-alpine
    container_name: sutazai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/ssl/certs:ro
      - logs_data:/var/log/nginx
    networks:
      - sutazai-net
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      <<: *default-healthcheck

  # ===================================
  # CORE DATABASE SERVICES
  # ===================================

  postgres:
    image: postgres:16-alpine
    container_name: sutazai-postgres
    environment:
      <<: *common-env
      POSTGRES_DB: sutazai
      POSTGRES_USER: sutazai
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    secrets:
      - postgres_password
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sutazai -d sutazai"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: sutazai-redis
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # ===================================
  # VECTOR DATABASES & AI SERVICES
  # ===================================

  chromadb:
    image: chromadb/chroma:0.5.0
    container_name: sutazai-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      <<: *common-env
      ANONYMIZED_TELEMETRY: "false"
      CHROMA_SERVER_HOST: "0.0.0.0"
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      <<: *default-healthcheck

  qdrant:
    image: qdrant/qdrant:v1.9.2
    container_name: sutazai-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      <<: *common-env
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      <<: *default-healthcheck

  ollama:
    image: ollama/ollama:latest
    container_name: sutazai-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      <<: *common-env
      OLLAMA_HOST: "0.0.0.0"
      OLLAMA_ORIGINS: "*"
      OLLAMA_NUM_PARALLEL: "4"
      OLLAMA_MAX_LOADED_MODELS: "3"
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      <<: *default-healthcheck
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # ===================================
  # CORE APPLICATION SERVICES
  # ===================================

  backend:
    container_name: sutazai-backend
    build:
      context: .
      dockerfile: ./infrastructure/docker/backend.Dockerfile
      args:
        - BUILD_ENV=production
    ports:
      - "8000:8000"
    environment:
      <<: *common-env
      DATABASE_URL: postgresql://sutazai@postgres:5432/sutazai
      REDIS_URL: redis://redis:6379
      CHROMADB_URL: http://chromadb:8000
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://host.docker.internal:11434
      SECRET_KEY: ${SECRET_KEY:-change-in-production}
      CORS_ORIGINS: '["http://localhost:8501","https://sutazai.com"]'
    volumes:
      - logs_data:/app/logs
      - ./config:/app/config:ro
    secrets:
      - postgres_password
    networks:
      - sutazai-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"

  frontend:
    container_name: sutazai-frontend
    build:
      context: .
      dockerfile: ./infrastructure/docker/frontend.Dockerfile
    ports:
      - "8501:8501"
    environment:
      <<: *common-env
      BACKEND_URL: http://backend:8000
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: "false"
    networks:
      - sutazai-net
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"

  # ===================================
  # MONITORING & OBSERVABILITY
  # ===================================

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: sutazai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sutazai-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  grafana:
    image: grafana/grafana:10.2.2
    container_name: sutazai-grafana
    ports:
      - "3000:3000"
    environment:
      <<: *common-env
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "grafana-piechart-panel"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - sutazai-net
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      <<: *default-healthcheck
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M